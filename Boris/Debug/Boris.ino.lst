
C:\Users\klyem\AppData\Local\Temp\VMBuilds\Boris\teensy31_teensy3\Debug/Boris.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	00 80 00 20 bd 01 00 00 f5 43 00 00 ad 43 00 00     ... .....C...C..
      10:	ad 43 00 00 ad 43 00 00 ad 43 00 00 ad 43 00 00     .C...C...C...C..
      20:	ad 43 00 00 ad 43 00 00 ad 43 00 00 f5 43 00 00     .C...C...C...C..
      30:	f5 43 00 00 ad 43 00 00 c1 5c 00 00 c5 5d 00 00     .C...C...\...]..
      40:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      50:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      60:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      70:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      80:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      90:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      a0:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      b0:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      c0:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      d0:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      e0:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
      f0:	f5 43 00 00 29 48 00 00 f5 43 00 00 35 64 00 00     .C..)H...C..5d..
     100:	f5 43 00 00 61 65 00 00 f5 43 00 00 f5 43 00 00     .C..ae...C...C..
     110:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     120:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     130:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     140:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     150:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     160:	f5 43 00 00 e9 4a 00 00 f5 43 00 00 f5 43 00 00     .C...J...C...C..
     170:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     180:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     190:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     1a0:	f5 43 00 00 f5 43 00 00 f5 43 00 00 f5 43 00 00     .C...C...C...C..
     1b0:	f5 43 00 00 f5 43 00 00 f5 43 00 00                 .C...C...C..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f004 f914 	bl	43fc <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 216000000 || F_CPU == 180000000
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f004 f97e 	bl	45d4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f004 f8ef 	bl	44c4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f004 f8e0 	bl	44c4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f006 fd0c 	bl	6d24 <__libc_init_array>

	startup_late_hook();
     30c:	f004 f87c 	bl	4408 <startup_late_hook>
	main();
     310:	f005 fd60 	bl	5dd4 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff9198 	.word	0x1fff9198
     33c:	00008a58 	.word	0x00008a58
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff9198 	.word	0x1fff9198
     348:	1fffa438 	.word	0x1fffa438
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5d1d6b25 	.word	0x5d1d6b25
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff9198 	.word	0x1fff9198
     42c:	00000000 	.word	0x00000000
     430:	00008a5c 	.word	0x00008a5c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff919c 	.word	0x1fff919c
     460:	00008a5c 	.word	0x00008a5c
     464:	1fff9198 	.word	0x1fff9198
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::init()>:
  }
public:
  COctoWS2811Controller() { pocto = NULL; }


  virtual void init() { /* do nothing yet */ }
     474:	4770      	bx	lr
     476:	bf00      	nop

00000478 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)>:
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
     47c:	6986      	ldr	r6, [r0, #24]
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     47e:	b085      	sub	sp, #20
     480:	4605      	mov	r5, r0
     482:	460c      	mov	r4, r1
class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
     484:	2e00      	cmp	r6, #0
     486:	f000 8171 	beq.w	76c <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x2f4>

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
     48a:	68a3      	ldr	r3, [r4, #8]
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
     48c:	69ea      	ldr	r2, [r5, #28]
    while(pixels.has(1)) {
     48e:	2b00      	cmp	r3, #0
     490:	f340 8166 	ble.w	760 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x2e8>
     494:	4627      	mov	r7, r4
     496:	3218      	adds	r2, #24
     498:	f857 8b14 	ldr.w	r8, [r7], #20
     49c:	f104 0034 	add.w	r0, r4, #52	; 0x34
     4a0:	f894 9013 	ldrb.w	r9, [r4, #19]
     4a4:	f10d 0607 	add.w	r6, sp, #7
     4a8:	4639      	mov	r1, r7
     4aa:	f109 0901 	add.w	r9, r9, #1
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     4ae:	46b4      	mov	ip, r6
     4b0:	46be      	mov	lr, r7
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     4b2:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     4b6:	4443      	add	r3, r8
     4b8:	785b      	ldrb	r3, [r3, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     4ba:	b143      	cbz	r3, 4ce <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x56>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     4bc:	f894 a00d 	ldrb.w	sl, [r4, #13]
     4c0:	fa83 f35a 	uqadd8	r3, r3, sl
     4c4:	b2db      	uxtb	r3, r3
     4c6:	fb09 f303 	mul.w	r3, r9, r3
     4ca:	f3c3 2307 	ubfx	r3, r3, #8, #8

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
      Lines b;

      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale0(i); }
     4ce:	4586      	cmp	lr, r0
     4d0:	f80c 3f01 	strb.w	r3, [ip, #1]!
     4d4:	d1ed      	bne.n	4b2 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x3a>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     4d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
  x = *(unsigned int*)(A+4);
     4da:	9b03      	ldr	r3, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     4dc:	ea88 1cd8 	eor.w	ip, r8, r8, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     4e0:	ea83 1ed3 	eor.w	lr, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     4e4:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     4e8:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     4ec:	ea88 080c 	eor.w	r8, r8, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     4f0:	ea83 030e 	eor.w	r3, r3, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     4f4:	ea88 1ccc 	eor.w	ip, r8, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     4f8:	ea83 1ece 	eor.w	lr, r3, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     4fc:	f64c 48cc 	movw	r8, #52428	; 0xcccc
     500:	ea8c 3a9c 	eor.w	sl, ip, ip, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     504:	ea8e 399e 	eor.w	r9, lr, lr, lsr #14
     508:	4643      	mov	r3, r8
     50a:	ea09 0303 	and.w	r3, r9, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     50e:	ea0a 0808 	and.w	r8, sl, r8
     512:	ea8c 0c08 	eor.w	ip, ip, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     516:	ea8e 0e03 	eor.w	lr, lr, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     51a:	ea8c 3c88 	eor.w	ip, ip, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     51e:	ea8e 3e83 	eor.w	lr, lr, r3, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     522:	ea4f 180e 	mov.w	r8, lr, lsl #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     526:	ea4f 131c 	mov.w	r3, ip, lsr #4
     52a:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     52e:	f00c 3c0f 	and.w	ip, ip, #252645135	; 0xf0f0f0f
     532:	f008 38f0 	and.w	r8, r8, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     536:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
     53a:	ea43 030e 	orr.w	r3, r3, lr
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     53e:	ea48 0e0c 	orr.w	lr, r8, ip
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     542:	ea4f 491e 	mov.w	r9, lr, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     546:	ea4f 681e 	mov.w	r8, lr, lsr #24

  B[3] = x; x >>= 8;
     54a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     54e:	f802 ec11 	strb.w	lr, [r2, #-17]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     552:	f802 3c15 	strb.w	r3, [r2, #-21]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     556:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     55a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     55e:	0e1b      	lsrs	r3, r3, #24
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     560:	f802 cc16 	strb.w	ip, [r2, #-22]
  B[1] = x; x >>= 8;
     564:	f802 ec17 	strb.w	lr, [r2, #-23]
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     568:	f802 ac12 	strb.w	sl, [r2, #-18]
  B[5] = y; y >>= 8;
     56c:	f802 9c13 	strb.w	r9, [r2, #-19]
  B[4] = y;
     570:	f802 8c14 	strb.w	r8, [r2, #-20]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     574:	f802 3c18 	strb.w	r3, [r2, #-24]
     578:	f894 9012 	ldrb.w	r9, [r4, #18]
     57c:	f8d4 8000 	ldr.w	r8, [r4]
     580:	f109 0901 	add.w	r9, r9, #1
     584:	f10d 0c07 	add.w	ip, sp, #7
     588:	46be      	mov	lr, r7
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     58a:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     58e:	f818 3003 	ldrb.w	r3, [r8, r3]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     592:	b143      	cbz	r3, 5a6 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x12e>
     594:	f894 a00c 	ldrb.w	sl, [r4, #12]
     598:	fa83 f35a 	uqadd8	r3, r3, sl
     59c:	b2db      	uxtb	r3, r3
     59e:	fb09 f303 	mul.w	r3, r9, r3
     5a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale1(i); }
     5a6:	4586      	cmp	lr, r0
     5a8:	f80c 3f01 	strb.w	r3, [ip, #1]!
     5ac:	d1ed      	bne.n	58a <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x112>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     5ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
  x = *(unsigned int*)(A+4);
     5b2:	9b03      	ldr	r3, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5b4:	ea88 1cd8 	eor.w	ip, r8, r8, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5b8:	ea83 1ed3 	eor.w	lr, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5bc:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5c0:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5c4:	ea88 080c 	eor.w	r8, r8, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5c8:	ea83 030e 	eor.w	r3, r3, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     5cc:	ea88 1ccc 	eor.w	ip, r8, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     5d0:	ea83 1ece 	eor.w	lr, r3, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5d4:	f64c 48cc 	movw	r8, #52428	; 0xcccc
     5d8:	ea8c 3a9c 	eor.w	sl, ip, ip, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5dc:	ea8e 399e 	eor.w	r9, lr, lr, lsr #14
     5e0:	4643      	mov	r3, r8
     5e2:	ea09 0303 	and.w	r3, r9, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5e6:	ea0a 0808 	and.w	r8, sl, r8
     5ea:	ea8c 0c08 	eor.w	ip, ip, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5ee:	ea8e 0e03 	eor.w	lr, lr, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5f2:	ea8c 3c88 	eor.w	ip, ip, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5f6:	ea8e 3e83 	eor.w	lr, lr, r3, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     5fa:	ea4f 180e 	mov.w	r8, lr, lsl #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     5fe:	ea4f 131c 	mov.w	r3, ip, lsr #4
     602:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     606:	f00c 3c0f 	and.w	ip, ip, #252645135	; 0xf0f0f0f
     60a:	f008 38f0 	and.w	r8, r8, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     60e:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
     612:	ea43 030e 	orr.w	r3, r3, lr
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     616:	ea48 0e0c 	orr.w	lr, r8, ip
  x = t;

  B[7] = y; y >>= 8;
     61a:	f802 ec09 	strb.w	lr, [r2, #-9]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     61e:	ea4f 2c13 	mov.w	ip, r3, lsr #8
     622:	f802 3c0d 	strb.w	r3, [r2, #-13]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     626:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
  B[6] = y; y >>= 8;
     62a:	ea4f 491e 	mov.w	r9, lr, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     62e:	ea4f 681e 	mov.w	r8, lr, lsr #24

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     632:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     636:	0e1b      	lsrs	r3, r3, #24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     638:	f802 ac0a 	strb.w	sl, [r2, #-10]
  B[5] = y; y >>= 8;
     63c:	f802 9c0b 	strb.w	r9, [r2, #-11]
  B[4] = y;
     640:	f802 8c0c 	strb.w	r8, [r2, #-12]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     644:	f802 cc0e 	strb.w	ip, [r2, #-14]
  B[1] = x; x >>= 8;
     648:	f802 ec0f 	strb.w	lr, [r2, #-15]
  B[0] = x; /* */
     64c:	f802 3c10 	strb.w	r3, [r2, #-16]
     650:	f894 c014 	ldrb.w	ip, [r4, #20]
     654:	f8d4 e000 	ldr.w	lr, [r4]
     658:	f10c 0c01 	add.w	ip, ip, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     65c:	f851 3f04 	ldr.w	r3, [r1, #4]!
     660:	4473      	add	r3, lr
     662:	789b      	ldrb	r3, [r3, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     664:	b143      	cbz	r3, 678 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x200>
     666:	f894 800e 	ldrb.w	r8, [r4, #14]
     66a:	fa83 f358 	uqadd8	r3, r3, r8
     66e:	b2db      	uxtb	r3, r3
     670:	fb0c f303 	mul.w	r3, ip, r3
     674:	f3c3 2307 	ubfx	r3, r3, #8, #8
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale2(i); }
     678:	4288      	cmp	r0, r1
     67a:	f806 3f01 	strb.w	r3, [r6, #1]!
     67e:	d1ed      	bne.n	65c <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x1e4>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     680:	9b02      	ldr	r3, [sp, #8]
  x = *(unsigned int*)(A+4);
     682:	9e03      	ldr	r6, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     684:	ea83 11d3 	eor.w	r1, r3, r3, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     688:	ea86 1ed6 	eor.w	lr, r6, r6, lsr #7
     68c:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     690:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
     694:	404b      	eors	r3, r1
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     696:	ea86 060e 	eor.w	r6, r6, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     69a:	ea83 11c1 	eor.w	r1, r3, r1, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     69e:	ea86 16ce 	eor.w	r6, r6, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6a2:	f64c 43cc 	movw	r3, #52428	; 0xcccc
     6a6:	ea81 3891 	eor.w	r8, r1, r1, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6aa:	ea86 3c96 	eor.w	ip, r6, r6, lsr #14
     6ae:	469e      	mov	lr, r3
     6b0:	ea0c 0e0e 	and.w	lr, ip, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6b4:	ea08 0303 	and.w	r3, r8, r3
     6b8:	4059      	eors	r1, r3
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6ba:	ea86 060e 	eor.w	r6, r6, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     6be:	ea81 3183 	eor.w	r1, r1, r3, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     6c2:	ea86 368e 	eor.w	r6, r6, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6c6:	0133      	lsls	r3, r6, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     6c8:	ea4f 1e11 	mov.w	lr, r1, lsr #4
     6cc:	f00e 3e0f 	and.w	lr, lr, #252645135	; 0xf0f0f0f
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6d0:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     6d4:	f006 36f0 	and.w	r6, r6, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6d8:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
     6dc:	430b      	orrs	r3, r1
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     6de:	ea4e 0606 	orr.w	r6, lr, r6
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     6e2:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  B[6] = y; y >>= 8;
     6e6:	ea4f 4913 	mov.w	r9, r3, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     6ea:	ea4f 6813 	mov.w	r8, r3, lsr #24

  B[3] = x; x >>= 8;
     6ee:	ea4f 2c16 	mov.w	ip, r6, lsr #8
  B[2] = x; x >>= 8;
     6f2:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     6f6:	0e31      	lsrs	r1, r6, #24
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     6f8:	f802 3c01 	strb.w	r3, [r2, #-1]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     6fc:	f802 6c05 	strb.w	r6, [r2, #-5]
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     700:	f802 ac02 	strb.w	sl, [r2, #-2]
  B[5] = y; y >>= 8;
     704:	f802 9c03 	strb.w	r9, [r2, #-3]
  B[4] = y;
     708:	f802 8c04 	strb.w	r8, [r2, #-4]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     70c:	f802 cc06 	strb.w	ip, [r2, #-6]
  B[1] = x; x >>= 8;
     710:	f802 ec07 	strb.w	lr, [r2, #-7]
  B[0] = x; /* */
     714:	f802 1c08 	strb.w	r1, [r2, #-8]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     718:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     71a:	f894 c00c 	ldrb.w	ip, [r4, #12]
                d[1] = e[1] - d[1];
     71e:	f894 e00d 	ldrb.w	lr, [r4, #13]
                d[2] = e[2] - d[2];
     722:	f894 900e 	ldrb.w	r9, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     726:	6826      	ldr	r6, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     728:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
     72c:	f894 a010 	ldrb.w	sl, [r4, #16]
                d[2] = e[2] - d[2];
     730:	7c61      	ldrb	r1, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     732:	f994 8015 	ldrsb.w	r8, [r4, #21]
     736:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     738:	ebcc 0c0b 	rsb	ip, ip, fp
                d[1] = e[1] - d[1];
     73c:	ebce 0e0a 	rsb	lr, lr, sl
                d[2] = e[2] - d[2];
     740:	ebc9 0101 	rsb	r1, r9, r1

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     744:	44b0      	add	r8, r6

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
     746:	2b00      	cmp	r3, #0
     748:	f102 0218 	add.w	r2, r2, #24

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     74c:	f884 c00c 	strb.w	ip, [r4, #12]
                d[1] = e[1] - d[1];
     750:	f884 e00d 	strb.w	lr, [r4, #13]
                d[2] = e[2] - d[2];
     754:	73a1      	strb	r1, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     756:	f8c4 8000 	str.w	r8, [r4]
     75a:	60a3      	str	r3, [r4, #8]
     75c:	f73f aea0 	bgt.w	4a0 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x28>
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      pixels.stepDithering();
      pixels.advanceData();
    }

    pocto->show();
     760:	69a8      	ldr	r0, [r5, #24]
  }
     762:	b005      	add	sp, #20
     764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      pixels.stepDithering();
      pixels.advanceData();
    }

    pocto->show();
     768:	f001 b9c2 	b.w	1af0 <OctoWS2811::show()>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     76c:	f8d1 8004 	ldr.w	r8, [r1, #4]
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 8 * 3);
     770:	eb08 0748 	add.w	r7, r8, r8, lsl #1
     774:	00ff      	lsls	r7, r7, #3
     776:	4638      	mov	r0, r7
     778:	f006 fb00 	bl	6d7c <malloc>
     77c:	61e8      	str	r0, [r5, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 8 * 3);
     77e:	4638      	mov	r0, r7
     780:	f006 fafc 	bl	6d7c <malloc>
     784:	6228      	str	r0, [r5, #32]

      // byte ordering is handled in show by the pixel controller
      int config = WS2811_RGB;
      config |= CHIP;

      pocto = new OctoWS2811(nLeds, framebuffer, drawbuffer, config);
     786:	2001      	movs	r0, #1
     788:	f005 fb2c 	bl	5de4 <operator new(unsigned int)>
     78c:	69eb      	ldr	r3, [r5, #28]
     78e:	6a2a      	ldr	r2, [r5, #32]
     790:	9600      	str	r6, [sp, #0]
     792:	4607      	mov	r7, r0
     794:	4641      	mov	r1, r8
     796:	f001 f827 	bl	17e8 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)>
     79a:	61af      	str	r7, [r5, #24]

      pocto->begin();
     79c:	4638      	mov	r0, r7
     79e:	f001 f839 	bl	1814 <OctoWS2811::begin()>
     7a2:	e672      	b.n	48a <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x12>

000007a4 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.46]>:
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
     7a4:	b538      	push	{r3, r4, r5, lr}
		{
			if (!m_isDebug) return;

			serial.print(msg);
     7a6:	4c09      	ldr	r4, [pc, #36]	; (7cc <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.46]+0x28>)
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
     7a8:	460d      	mov	r5, r1
		{
			if (!m_isDebug) return;

			serial.print(msg);
     7aa:	4601      	mov	r1, r0
     7ac:	4620      	mov	r0, r4
     7ae:	f005 fb1b 	bl	5de8 <Print::print(String const&)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     7b2:	2102      	movs	r1, #2
     7b4:	4806      	ldr	r0, [pc, #24]	; (7d0 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.46]+0x2c>)
     7b6:	f005 f817 	bl	57e8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     7ba:	4629      	mov	r1, r5
     7bc:	4620      	mov	r0, r4
     7be:	f005 fb89 	bl	5ed4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     7c2:	4620      	mov	r0, r4
			serial.print(": ");
			serial.println(value);
		}
     7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     7c8:	f005 bb34 	b.w	5e34 <Print::println()>
     7cc:	1fff8734 	.word	0x1fff8734
     7d0:	000082b4 	.word	0x000082b4

000007d4 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d6:	b091      	sub	sp, #68	; 0x44
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     7d8:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     7da:	6805      	ldr	r5, [r0, #0]
     7dc:	f88d 3000 	strb.w	r3, [sp]
     7e0:	f88d 3001 	strb.w	r3, [sp, #1]
     7e4:	f88d 3002 	strb.w	r3, [sp, #2]
     7e8:	682e      	ldr	r6, [r5, #0]
     7ea:	4a3a      	ldr	r2, [pc, #232]	; (8d4 <CLEDController::clearLeds(int)+0x100>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     7ec:	f88d 3004 	strb.w	r3, [sp, #4]
     7f0:	4296      	cmp	r6, r2
     7f2:	f88d 3005 	strb.w	r3, [sp, #5]
     7f6:	f88d 3006 	strb.w	r3, [sp, #6]
     7fa:	d164      	bne.n	8c6 <CLEDController::clearLeds(int)+0xf2>
     7fc:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     7fe:	9103      	str	r1, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     800:	2a01      	cmp	r2, #1
     802:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     804:	9104      	str	r1, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     806:	f88d 301a 	strb.w	r3, [sp, #26]
        g = rhs.g;
     80a:	f88d 301b 	strb.w	r3, [sp, #27]
        b = rhs.b;
     80e:	f88d 301c 	strb.w	r3, [sp, #28]
     812:	f8cd d008 	str.w	sp, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     816:	d01a      	beq.n	84e <CLEDController::clearLeds(int)+0x7a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     818:	f88d 3019 	strb.w	r3, [sp, #25]
     81c:	f88d 3018 	strb.w	r3, [sp, #24]
     820:	f88d 3017 	strb.w	r3, [sp, #23]
     824:	f88d 3016 	strb.w	r3, [sp, #22]
     828:	f88d 3015 	strb.w	r3, [sp, #21]
     82c:	f88d 3014 	strb.w	r3, [sp, #20]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     830:	2200      	movs	r2, #0
     832:	f88d 201d 	strb.w	r2, [sp, #29]
     836:	ab07      	add	r3, sp, #28
     838:	a90f      	add	r1, sp, #60	; 0x3c
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     83a:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     83e:	4299      	cmp	r1, r3
     840:	d1fb      	bne.n	83a <CLEDController::clearLeds(int)+0x66>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     842:	69ab      	ldr	r3, [r5, #24]
     844:	4620      	mov	r0, r4
     846:	a902      	add	r1, sp, #8
     848:	4798      	blx	r3

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     84a:	b011      	add	sp, #68	; 0x44
     84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     84e:	4a22      	ldr	r2, [pc, #136]	; (8d8 <CLEDController::clearLeds(int)+0x104>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     850:	7813      	ldrb	r3, [r2, #0]
     852:	3301      	adds	r3, #1
     854:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     858:	f013 0f01 	tst.w	r3, #1
     85c:	bf14      	ite	ne
     85e:	2180      	movne	r1, #128	; 0x80
     860:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     862:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     864:	079a      	lsls	r2, r3, #30
     866:	bf44      	itt	mi
     868:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     86c:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     86e:	075b      	lsls	r3, r3, #29
     870:	bf48      	it	mi
     872:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     876:	3110      	adds	r1, #16
     878:	2200      	movs	r2, #0
     87a:	b2c9      	uxtb	r1, r1
     87c:	f10d 0317 	add.w	r3, sp, #23
     880:	f10d 071a 	add.w	r7, sp, #26
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     884:	f44f 7e80 	mov.w	lr, #256	; 0x100
     888:	b1aa      	cbz	r2, 8b6 <CLEDController::clearLeds(int)+0xe2>
     88a:	fb9e f2f2 	sdiv	r2, lr, r2
     88e:	b2d2      	uxtb	r2, r2
     890:	1c50      	adds	r0, r2, #1
     892:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     894:	fb00 1501 	mla	r5, r0, r1, r1
     898:	122d      	asrs	r5, r5, #8
     89a:	7018      	strb	r0, [r3, #0]
     89c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     89e:	b105      	cbz	r5, 8a2 <CLEDController::clearLeds(int)+0xce>
     8a0:	3e01      	subs	r6, #1
     8a2:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     8a6:	b100      	cbz	r0, 8aa <CLEDController::clearLeds(int)+0xd6>
     8a8:	701a      	strb	r2, [r3, #0]
     8aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     8ac:	429f      	cmp	r7, r3
     8ae:	d008      	beq.n	8c2 <CLEDController::clearLeds(int)+0xee>
     8b0:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8b2:	2a00      	cmp	r2, #0
     8b4:	d1e9      	bne.n	88a <CLEDController::clearLeds(int)+0xb6>
     8b6:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     8b8:	f803 2c03 	strb.w	r2, [r3, #-3]
     8bc:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     8be:	429f      	cmp	r7, r3
     8c0:	d1f6      	bne.n	8b0 <CLEDController::clearLeds(int)+0xdc>
     8c2:	6825      	ldr	r5, [r4, #0]
     8c4:	e7b4      	b.n	830 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     8c6:	460a      	mov	r2, r1
     8c8:	ab01      	add	r3, sp, #4
     8ca:	4669      	mov	r1, sp
     8cc:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     8ce:	b011      	add	sp, #68	; 0x44
     8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8d2:	bf00      	nop
     8d4:	000009b5 	.word	0x000009b5
     8d8:	1fff91b4 	.word	0x1fff91b4

000008dc <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8de:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8e0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     8e2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     8e4:	789b      	ldrb	r3, [r3, #2]
     8e6:	b08f      	sub	sp, #60	; 0x3c
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8e8:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     8ea:	e88d 0006 	stmia.w	sp, {r1, r2}
     8ee:	9202      	str	r2, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8f0:	f88d 4012 	strb.w	r4, [sp, #18]
        g = rhs.g;
     8f4:	f88d 6013 	strb.w	r6, [sp, #19]
        b = rhs.b;
     8f8:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8fc:	d020      	beq.n	940 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x64>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     8fe:	2300      	movs	r3, #0
     900:	f88d 3011 	strb.w	r3, [sp, #17]
     904:	f88d 3010 	strb.w	r3, [sp, #16]
     908:	f88d 300f 	strb.w	r3, [sp, #15]
     90c:	f88d 300e 	strb.w	r3, [sp, #14]
     910:	f88d 300d 	strb.w	r3, [sp, #13]
     914:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     918:	2103      	movs	r1, #3
            for(int i = 0; i < LANES; i++) { mOffsets[i] = other.mOffsets[i]; }

        }

        void initOffsets(int len) {
          int nOffset = 0;
     91a:	2300      	movs	r3, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     91c:	f88d 1015 	strb.w	r1, [sp, #21]
     920:	eb02 0242 	add.w	r2, r2, r2, lsl #1

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     924:	4619      	mov	r1, r3
     926:	ac05      	add	r4, sp, #20
     928:	3101      	adds	r1, #1
     92a:	2908      	cmp	r1, #8
            mOffsets[i] = nOffset;
     92c:	f844 3f04 	str.w	r3, [r4, #4]!
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     930:	4413      	add	r3, r2

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     932:	d1f9      	bne.n	928 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x4c>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     934:	6803      	ldr	r3, [r0, #0]
     936:	4669      	mov	r1, sp
     938:	699b      	ldr	r3, [r3, #24]
     93a:	4798      	blx	r3
  }
     93c:	b00f      	add	sp, #60	; 0x3c
     93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     940:	491b      	ldr	r1, [pc, #108]	; (9b0 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xd4>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     942:	780b      	ldrb	r3, [r1, #0]
     944:	3301      	adds	r3, #1
     946:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     94a:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     94e:	700b      	strb	r3, [r1, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     950:	bf14      	ite	ne
     952:	2180      	movne	r1, #128	; 0x80
     954:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     956:	079d      	lsls	r5, r3, #30
     958:	bf44      	itt	mi
     95a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     95e:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     960:	075b      	lsls	r3, r3, #29
     962:	bf48      	it	mi
     964:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     968:	3110      	adds	r1, #16
     96a:	b2c9      	uxtb	r1, r1
     96c:	f10d 030f 	add.w	r3, sp, #15
     970:	f10d 0e12 	add.w	lr, sp, #18
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     974:	f44f 7c80 	mov.w	ip, #256	; 0x100
     978:	b1ac      	cbz	r4, 9a6 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xca>
     97a:	fb9c f4f4 	sdiv	r4, ip, r4
     97e:	b2e4      	uxtb	r4, r4
     980:	1c65      	adds	r5, r4, #1
     982:	b2ed      	uxtb	r5, r5
     984:	fb05 1601 	mla	r6, r5, r1, r1
     988:	1236      	asrs	r6, r6, #8
     98a:	701d      	strb	r5, [r3, #0]
     98c:	b2f7      	uxtb	r7, r6
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     98e:	b106      	cbz	r6, 992 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xb6>
     990:	3f01      	subs	r7, #1
     992:	f803 7c03 	strb.w	r7, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     996:	b105      	cbz	r5, 99a <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xbe>
     998:	701c      	strb	r4, [r3, #0]
     99a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     99c:	4573      	cmp	r3, lr
     99e:	d0bb      	beq.n	918 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x3c>
     9a0:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     9a2:	2c00      	cmp	r4, #0
     9a4:	d1e9      	bne.n	97a <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x9e>
     9a6:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     9a8:	f803 4c03 	strb.w	r4, [r3, #-3]
     9ac:	e7f5      	b.n	99a <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xbe>
     9ae:	bf00      	nop
     9b0:	1fff91b4 	.word	0x1fff91b4

000009b4 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9b6:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9b8:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     9ba:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     9bc:	789b      	ldrb	r3, [r3, #2]
     9be:	b08f      	sub	sp, #60	; 0x3c
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     9c0:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     9c2:	e88d 0006 	stmia.w	sp, {r1, r2}
     9c6:	9202      	str	r2, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9c8:	f88d 4012 	strb.w	r4, [sp, #18]
        g = rhs.g;
     9cc:	f88d 6013 	strb.w	r6, [sp, #19]
        b = rhs.b;
     9d0:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     9d4:	d01b      	beq.n	a0e <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x5a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     9d6:	2300      	movs	r3, #0
     9d8:	f88d 3011 	strb.w	r3, [sp, #17]
     9dc:	f88d 3010 	strb.w	r3, [sp, #16]
     9e0:	f88d 300f 	strb.w	r3, [sp, #15]
     9e4:	f88d 300e 	strb.w	r3, [sp, #14]
     9e8:	f88d 300d 	strb.w	r3, [sp, #13]
     9ec:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     9f0:	2200      	movs	r2, #0
     9f2:	f88d 2015 	strb.w	r2, [sp, #21]
     9f6:	ab05      	add	r3, sp, #20
     9f8:	a90d      	add	r1, sp, #52	; 0x34
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     9fa:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     9fe:	428b      	cmp	r3, r1
     a00:	d1fb      	bne.n	9fa <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x46>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     a02:	6803      	ldr	r3, [r0, #0]
     a04:	4669      	mov	r1, sp
     a06:	699b      	ldr	r3, [r3, #24]
     a08:	4798      	blx	r3
  }
     a0a:	b00f      	add	sp, #60	; 0x3c
     a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     a0e:	4a1b      	ldr	r2, [pc, #108]	; (a7c <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a10:	7813      	ldrb	r3, [r2, #0]
     a12:	3301      	adds	r3, #1
     a14:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a18:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a1c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a1e:	bf14      	ite	ne
     a20:	2280      	movne	r2, #128	; 0x80
     a22:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     a24:	0799      	lsls	r1, r3, #30
     a26:	bf44      	itt	mi
     a28:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     a2c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     a2e:	075b      	lsls	r3, r3, #29
     a30:	bf48      	it	mi
     a32:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     a36:	3210      	adds	r2, #16
     a38:	b2d2      	uxtb	r2, r2
     a3a:	f10d 030f 	add.w	r3, sp, #15
     a3e:	f10d 0712 	add.w	r7, sp, #18
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a42:	f44f 7e80 	mov.w	lr, #256	; 0x100
     a46:	b1ac      	cbz	r4, a74 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc0>
     a48:	fb9e f4f4 	sdiv	r4, lr, r4
     a4c:	b2e4      	uxtb	r4, r4
     a4e:	1c61      	adds	r1, r4, #1
     a50:	b2c9      	uxtb	r1, r1
     a52:	fb01 2502 	mla	r5, r1, r2, r2
     a56:	122d      	asrs	r5, r5, #8
     a58:	7019      	strb	r1, [r3, #0]
     a5a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     a5c:	b105      	cbz	r5, a60 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xac>
     a5e:	3e01      	subs	r6, #1
     a60:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     a64:	b101      	cbz	r1, a68 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb4>
     a66:	701c      	strb	r4, [r3, #0]
     a68:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     a6a:	429f      	cmp	r7, r3
     a6c:	d0c0      	beq.n	9f0 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     a6e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a70:	2c00      	cmp	r4, #0
     a72:	d1e9      	bne.n	a48 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x94>
     a74:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     a76:	f803 4c03 	strb.w	r4, [r3, #-3]
     a7a:	e7f5      	b.n	a68 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb4>
     a7c:	1fff91b4 	.word	0x1fff91b4

00000a80 <Print::println(String const&)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     a80:	b538      	push	{r3, r4, r5, lr}
     a82:	4605      	mov	r5, r0
     a84:	f005 f9b0 	bl	5de8 <Print::print(String const&)>
     a88:	4604      	mov	r4, r0
     a8a:	4628      	mov	r0, r5
     a8c:	f005 f9d2 	bl	5e34 <Print::println()>
     a90:	4420      	add	r0, r4
     a92:	bd38      	pop	{r3, r4, r5, pc}

00000a94 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]>:
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
     a94:	b538      	push	{r3, r4, r5, lr}
		{
			if (!m_isDebug) return;

			serial.print(msg);
     a96:	4c0a      	ldr	r4, [pc, #40]	; (ac0 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]+0x2c>)
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
     a98:	460d      	mov	r5, r1
		{
			if (!m_isDebug) return;

			serial.print(msg);
     a9a:	4601      	mov	r1, r0
     a9c:	4620      	mov	r0, r4
     a9e:	f005 f9a3 	bl	5de8 <Print::print(String const&)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     aa2:	4620      	mov	r0, r4
     aa4:	2202      	movs	r2, #2
     aa6:	4907      	ldr	r1, [pc, #28]	; (ac4 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]+0x30>)
     aa8:	f005 fa28 	bl	5efc <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     aac:	4629      	mov	r1, r5
     aae:	4620      	mov	r0, r4
     ab0:	f005 fa10 	bl	5ed4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ab4:	4620      	mov	r0, r4
			serial.print(": ");
			serial.println(value);
		}
     ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     aba:	f005 b9bb 	b.w	5e34 <Print::println()>
     abe:	bf00      	nop
     ac0:	1fff8734 	.word	0x1fff8734
     ac4:	000082b4 	.word	0x000082b4

00000ac8 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>:
			String m_inputString;
			boolean m_inputStringComplete; // whether the String is complete

#pragma region INPUTS

			int GetAnalogValue(int currVal)
     ac8:	b570      	push	{r4, r5, r6, lr}
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     aca:	1d05      	adds	r5, r0, #4
			String m_inputString;
			boolean m_inputStringComplete; // whether the String is complete

#pragma region INPUTS

			int GetAnalogValue(int currVal)
     acc:	b088      	sub	sp, #32
     ace:	460e      	mov	r6, r1
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     ad0:	4628      	mov	r0, r5
     ad2:	491b      	ldr	r1, [pc, #108]	; (b40 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x78>)
     ad4:	f005 fb52 	bl	617c <String::equals(char const*) const>
     ad8:	b110      	cbz	r0, ae0 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x18>
				{
					val = GetSerialValue(m_inputString, currVal);
				}

				return val;
			}
     ada:	4630      	mov	r0, r6
     adc:	b008      	add	sp, #32
     ade:	bd70      	pop	{r4, r5, r6, pc}
     ae0:	4604      	mov	r4, r0
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     ae2:	4629      	mov	r1, r5
     ae4:	4668      	mov	r0, sp
     ae6:	f005 fab5 	bl	6054 <String::String(String const&)>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     aea:	4621      	mov	r1, r4
     aec:	4668      	mov	r0, sp
     aee:	f005 fb5b 	bl	61a8 <String::operator[](unsigned int)>
     af2:	7803      	ldrb	r3, [r0, #0]
     af4:	2b23      	cmp	r3, #35	; 0x23
     af6:	d005      	beq.n	b04 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x3c>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     af8:	4668      	mov	r0, sp
     afa:	f005 fa45 	bl	5f88 <String::~String()>
				}

				return val;
			}
     afe:	4630      	mov	r0, r6
     b00:	b008      	add	sp, #32
     b02:	bd70      	pop	{r4, r5, r6, pc}
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     b04:	9b02      	ldr	r3, [sp, #8]
     b06:	2b09      	cmp	r3, #9
     b08:	d9f6      	bls.n	af8 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>
				{
					String valString = inputString.substring(5, 9);
     b0a:	a804      	add	r0, sp, #16
     b0c:	2309      	movs	r3, #9
     b0e:	2205      	movs	r2, #5
     b10:	4669      	mov	r1, sp
     b12:	f005 fb71 	bl	61f8 <String::substring(unsigned int, unsigned int) const>
					int val = valString.toInt();
     b16:	a804      	add	r0, sp, #16
     b18:	f005 fb92 	bl	6240 <String::toInt() const>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     b1c:	4604      	mov	r4, r0
     b1e:	b120      	cbz	r0, b2a <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x62>
					{
						return val;
     b20:	a804      	add	r0, sp, #16
     b22:	f005 fa31 	bl	5f88 <String::~String()>
			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
					int val = valString.toInt();
     b26:	4626      	mov	r6, r4
     b28:	e7e6      	b.n	af8 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     b2a:	4906      	ldr	r1, [pc, #24]	; (b44 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x7c>)
     b2c:	a804      	add	r0, sp, #16
     b2e:	f005 fb25 	bl	617c <String::equals(char const*) const>
     b32:	2800      	cmp	r0, #0
     b34:	d1f4      	bne.n	b20 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x58>

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
     b36:	a804      	add	r0, sp, #16
     b38:	f005 fa26 	bl	5f88 <String::~String()>
     b3c:	e7dc      	b.n	af8 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>
     b3e:	bf00      	nop
     b40:	00008358 	.word	0x00008358
     b44:	000082b8 	.word	0x000082b8

00000b48 <Meltdown::CMeltdownSerial::GetValue()>:
					return m_inputString.substring(1, 5);
				}
				return "";
			}

			int GetValue()
     b48:	b530      	push	{r4, r5, lr}
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     b4a:	1d04      	adds	r4, r0, #4
					return m_inputString.substring(1, 5);
				}
				return "";
			}

			int GetValue()
     b4c:	b085      	sub	sp, #20
     b4e:	4605      	mov	r5, r0
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     b50:	2100      	movs	r1, #0
     b52:	4620      	mov	r0, r4
     b54:	f005 fb28 	bl	61a8 <String::operator[](unsigned int)>
     b58:	7803      	ldrb	r3, [r0, #0]
     b5a:	2b23      	cmp	r3, #35	; 0x23
     b5c:	d003      	beq.n	b66 <Meltdown::CMeltdownSerial::GetValue()+0x1e>
				return "";
			}

			int GetValue()
			{
				int val = 0;
     b5e:	2400      	movs	r4, #0
				{
					String valString = m_inputString.substring(5, 9);
					val = valString.toInt();
				}
				return val;
			}
     b60:	4620      	mov	r0, r4
     b62:	b005      	add	sp, #20
     b64:	bd30      	pop	{r4, r5, pc}
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     b66:	68eb      	ldr	r3, [r5, #12]
     b68:	2b09      	cmp	r3, #9
     b6a:	d9f8      	bls.n	b5e <Meltdown::CMeltdownSerial::GetValue()+0x16>
				{
					String valString = m_inputString.substring(5, 9);
     b6c:	4621      	mov	r1, r4
     b6e:	2309      	movs	r3, #9
     b70:	2205      	movs	r2, #5
     b72:	4668      	mov	r0, sp
     b74:	f005 fb40 	bl	61f8 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
     b78:	4668      	mov	r0, sp
     b7a:	f005 fb61 	bl	6240 <String::toInt() const>
     b7e:	4604      	mov	r4, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
     b80:	4668      	mov	r0, sp
     b82:	f005 fa01 	bl	5f88 <String::~String()>
					val = valString.toInt();
				}
				return val;
			}
     b86:	4620      	mov	r0, r4
     b88:	b005      	add	sp, #20
     b8a:	bd30      	pop	{r4, r5, pc}

00000b8c <Meltdown::tryExecuteCommand() [clone .part.41]>:
		MeltdownLED.Sunrise(leds, ledSpokeIndexes, NUM_SPOKE_LEDS);
	}

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
     b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
     b90:	4da8      	ldr	r5, [pc, #672]	; (e34 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2a8>)
     b92:	2300      	movs	r3, #0

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     b94:	4619      	mov	r1, r3

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
     b96:	752b      	strb	r3, [r5, #20]
     b98:	b08d      	sub	sp, #52	; 0x34

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     b9a:	1d28      	adds	r0, r5, #4
     b9c:	f005 fb04 	bl	61a8 <String::operator[](unsigned int)>
     ba0:	7803      	ldrb	r3, [r0, #0]
     ba2:	2b23      	cmp	r3, #35	; 0x23
     ba4:	d071      	beq.n	c8a <Meltdown::tryExecuteCommand() [clone .part.41]+0xfe>
				{
					return m_inputString.substring(1, 5);
				}
				return "";
     ba6:	4668      	mov	r0, sp
     ba8:	49a3      	ldr	r1, [pc, #652]	; (e38 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2ac>)
     baa:	466c      	mov	r4, sp
     bac:	f005 fa2c 	bl	6008 <String::String(char const*)>
			MeltdownSerial.SetInputStringComplete(false);

			String command = MeltdownSerial.GetCommand();
			if (!command.equals(""))
			{
				if (command.equals(MeltdownSerial.BRIGHTNESS))
     bb0:	49a1      	ldr	r1, [pc, #644]	; (e38 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2ac>)
     bb2:	4620      	mov	r0, r4
     bb4:	f005 fae2 	bl	617c <String::equals(char const*) const>
     bb8:	b990      	cbnz	r0, be0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x54>
				{
					MeltdownLED.SetBrightness(-1);
     bba:	49a0      	ldr	r1, [pc, #640]	; (e3c <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b0>)
     bbc:	4620      	mov	r0, r4
     bbe:	f005 facf 	bl	6160 <String::equals(String const&) const>
     bc2:	b318      	cbz	r0, c0c <Meltdown::tryExecuteCommand() [clone .part.41]+0x80>

			// BRIGHTNESS //

			int SetBrightness(int pin)
			{
				gBrightness = MeltdownSerial.GetAnalogValue(pin, gBrightness);
     bc4:	4d9e      	ldr	r5, [pc, #632]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)

			int GetAnalogValue(int currVal)
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     bc6:	499c      	ldr	r1, [pc, #624]	; (e38 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2ac>)
     bc8:	489e      	ldr	r0, [pc, #632]	; (e44 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b8>)
     bca:	692f      	ldr	r7, [r5, #16]
     bcc:	f005 fad6 	bl	617c <String::equals(char const*) const>
     bd0:	4606      	mov	r6, r0
     bd2:	2800      	cmp	r0, #0
     bd4:	f000 8084 	beq.w	ce0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x154>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     bd8:	4b9b      	ldr	r3, [pc, #620]	; (e48 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2bc>)
     bda:	612f      	str	r7, [r5, #16]
     bdc:	701f      	strb	r7, [r3, #0]
     bde:	e00b      	b.n	bf8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x6c>
			}
			else
			{
				MeltdownLogger.Debug(Serial, F("Something went wrong reading serial, command was blank."));
			}

     be0:	ae08      	add	r6, sp, #32
     be2:	4630      	mov	r0, r6
     be4:	4999      	ldr	r1, [pc, #612]	; (e4c <Meltdown::tryExecuteCommand() [clone .part.41]+0x2c0>)
     be6:	f005 fa23 	bl	6030 <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
     bea:	4b99      	ldr	r3, [pc, #612]	; (e50 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2c4>)
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2b00      	cmp	r3, #0
     bf0:	d156      	bne.n	ca0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x114>
     bf2:	4630      	mov	r0, r6
     bf4:	f005 f9c8 	bl	5f88 <String::~String()>
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
			}

			String GetInputString() { return m_inputString; }

			void ClearInputString() { m_inputString = ""; }
     bf8:	498f      	ldr	r1, [pc, #572]	; (e38 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2ac>)
     bfa:	4892      	ldr	r0, [pc, #584]	; (e44 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b8>)
     bfc:	f005 fa48 	bl	6090 <String::operator=(char const*)>
		{
			MeltdownSerial.SetInputStringComplete(false);

			String command = MeltdownSerial.GetCommand();
			if (!command.equals(""))
			{
     c00:	4620      	mov	r0, r4
     c02:	f005 f9c1 	bl	5f88 <String::~String()>

			MeltdownSerial.ClearInputString();
		}
	}

#pragma endregion COMMANDS
     c06:	b00d      	add	sp, #52	; 0x34
     c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				{
					MeltdownLED.SetBrightness(-1);
				}
				else if (command.equals(MeltdownSerial.HUE1))
				{
					bool hueValue = MeltdownLED.ToggleHue(1);
     c0c:	4991      	ldr	r1, [pc, #580]	; (e54 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2c8>)
     c0e:	4620      	mov	r0, r4
     c10:	f005 faa6 	bl	6160 <String::equals(String const&) const>
     c14:	2800      	cmp	r0, #0
     c16:	d04b      	beq.n	cb0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x124>
			{
				bool hueVal = false;
				switch (index)
				{
				case 1:
					gHue1 = !gHue1;
     c18:	4d89      	ldr	r5, [pc, #548]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)
     c1a:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     c1e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
     c22:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
     c26:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     c2a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			{
				bool hueVal = false;
				switch (index)
				{
				case 1:
					gHue1 = !gHue1;
     c2e:	f087 0701 	eor.w	r7, r7, #1
     c32:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     c36:	2b00      	cmp	r3, #0
     c38:	d063      	beq.n	d02 <Meltdown::tryExecuteCommand() [clone .part.41]+0x176>
     c3a:	1c7b      	adds	r3, r7, #1
				if (gHue3) val++;
     c3c:	b100      	cbz	r0, c40 <Meltdown::tryExecuteCommand() [clone .part.41]+0xb4>
     c3e:	3301      	adds	r3, #1
				if (gHue4) val++;
     c40:	b101      	cbz	r1, c44 <Meltdown::tryExecuteCommand() [clone .part.41]+0xb8>
     c42:	3301      	adds	r3, #1
				if (gHue5) val++;
     c44:	b102      	cbz	r2, c48 <Meltdown::tryExecuteCommand() [clone .part.41]+0xbc>
     c46:	3301      	adds	r3, #1
				}
			}

			void SetHue()
			{
				gHue = map(GetToggledHueCount(), 0, 6, 0, 255);
     c48:	4a83      	ldr	r2, [pc, #524]	; (e58 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2cc>)
				else if (command.equals(MeltdownSerial.HUE5))
				{
					bool hueValue = MeltdownLED.ToggleHue(5);
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.PAUSE))
     c4a:	4984      	ldr	r1, [pc, #528]	; (e5c <Meltdown::tryExecuteCommand() [clone .part.41]+0x2d0>)
     c4c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
     c50:	fb82 0203 	smull	r0, r2, r2, r3
     c54:	ae08      	add	r6, sp, #32
     c56:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
     c5a:	4630      	mov	r0, r6
     c5c:	616b      	str	r3, [r5, #20]
     c5e:	f005 f9e7 	bl	6030 <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
		{
			if (!m_isDebug) return;
     c62:	4b7b      	ldr	r3, [pc, #492]	; (e50 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2c4>)
     c64:	781b      	ldrb	r3, [r3, #0]
     c66:	2b00      	cmp	r3, #0
     c68:	d0c3      	beq.n	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>

			serial.print(msg);
     c6a:	4631      	mov	r1, r6
     c6c:	487c      	ldr	r0, [pc, #496]	; (e60 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2d4>)
     c6e:	f005 f8bb 	bl	5de8 <Print::print(String const&)>
     c72:	2102      	movs	r1, #2
     c74:	487b      	ldr	r0, [pc, #492]	; (e64 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2d8>)
     c76:	f004 fdb7 	bl	57e8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c7a:	4639      	mov	r1, r7
     c7c:	4878      	ldr	r0, [pc, #480]	; (e60 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2d4>)
     c7e:	f005 f929 	bl	5ed4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c82:	4877      	ldr	r0, [pc, #476]	; (e60 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2d4>)
     c84:	f005 f8d6 	bl	5e34 <Print::println()>
     c88:	e7b3      	b.n	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     c8a:	68eb      	ldr	r3, [r5, #12]
     c8c:	2b05      	cmp	r3, #5
     c8e:	d98a      	bls.n	ba6 <Meltdown::tryExecuteCommand() [clone .part.41]+0x1a>
				{
					return m_inputString.substring(1, 5);
     c90:	4668      	mov	r0, sp
     c92:	2305      	movs	r3, #5
     c94:	2201      	movs	r2, #1
     c96:	1d29      	adds	r1, r5, #4
     c98:	466c      	mov	r4, sp
     c9a:	f005 faad 	bl	61f8 <String::substring(unsigned int, unsigned int) const>
     c9e:	e787      	b.n	bb0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x24>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     ca0:	4631      	mov	r1, r6
     ca2:	486f      	ldr	r0, [pc, #444]	; (e60 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2d4>)
     ca4:	f005 f8a0 	bl	5de8 <Print::print(String const&)>
     ca8:	486d      	ldr	r0, [pc, #436]	; (e60 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2d4>)
     caa:	f005 f8c3 	bl	5e34 <Print::println()>
     cae:	e7a0      	b.n	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
					bool hueValue = MeltdownLED.ToggleHue(1);
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE2))
				{
					bool hueValue = MeltdownLED.ToggleHue(2);
     cb0:	496d      	ldr	r1, [pc, #436]	; (e68 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2dc>)
     cb2:	4620      	mov	r0, r4
     cb4:	f005 fa54 	bl	6160 <String::equals(String const&) const>
     cb8:	b328      	cbz	r0, d06 <Meltdown::tryExecuteCommand() [clone .part.41]+0x17a>
				case 1:
					gHue1 = !gHue1;
					hueVal = gHue1;
					break;
				case 2:
					gHue2 = !gHue2;
     cba:	4d61      	ldr	r5, [pc, #388]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)
     cbc:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
     cc0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
     cc4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     cc8:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     ccc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 1:
					gHue1 = !gHue1;
					hueVal = gHue1;
					break;
				case 2:
					gHue2 = !gHue2;
     cd0:	f087 0701 	eor.w	r7, r7, #1
     cd4:	f885 7031 	strb.w	r7, [r5, #49]	; 0x31
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     cd8:	2f00      	cmp	r7, #0
     cda:	d0af      	beq.n	c3c <Meltdown::tryExecuteCommand() [clone .part.41]+0xb0>
     cdc:	3301      	adds	r3, #1
     cde:	e7ad      	b.n	c3c <Meltdown::tryExecuteCommand() [clone .part.41]+0xb0>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     ce0:	f10d 0810 	add.w	r8, sp, #16
     ce4:	4957      	ldr	r1, [pc, #348]	; (e44 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b8>)
     ce6:	4640      	mov	r0, r8
     ce8:	f005 f9b4 	bl	6054 <String::String(String const&)>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     cec:	4631      	mov	r1, r6
     cee:	4640      	mov	r0, r8
     cf0:	f005 fa5a 	bl	61a8 <String::operator[](unsigned int)>
     cf4:	7803      	ldrb	r3, [r0, #0]
     cf6:	2b23      	cmp	r3, #35	; 0x23
     cf8:	d03c      	beq.n	d74 <Meltdown::tryExecuteCommand() [clone .part.41]+0x1e8>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     cfa:	4640      	mov	r0, r8
     cfc:	f005 f944 	bl	5f88 <String::~String()>
     d00:	e76a      	b.n	bd8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x4c>
     d02:	463b      	mov	r3, r7
     d04:	e79a      	b.n	c3c <Meltdown::tryExecuteCommand() [clone .part.41]+0xb0>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE3))
				{
					bool hueValue = MeltdownLED.ToggleHue(3);
     d06:	4959      	ldr	r1, [pc, #356]	; (e6c <Meltdown::tryExecuteCommand() [clone .part.41]+0x2e0>)
     d08:	4620      	mov	r0, r4
     d0a:	f005 fa29 	bl	6160 <String::equals(String const&) const>
     d0e:	b9e0      	cbnz	r0, d4a <Meltdown::tryExecuteCommand() [clone .part.41]+0x1be>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE4))
				{
					bool hueValue = MeltdownLED.ToggleHue(4);
     d10:	4957      	ldr	r1, [pc, #348]	; (e70 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2e4>)
     d12:	4620      	mov	r0, r4
     d14:	f005 fa24 	bl	6160 <String::equals(String const&) const>
     d18:	2800      	cmp	r0, #0
     d1a:	d03f      	beq.n	d9c <Meltdown::tryExecuteCommand() [clone .part.41]+0x210>
				case 3:
					gHue3 = !gHue3;
					hueVal = gHue3;
					break;
				case 4:
					gHue4 = !gHue4;
     d1c:	4d48      	ldr	r5, [pc, #288]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)
     d1e:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     d22:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     d26:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
     d2a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     d2e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 3:
					gHue3 = !gHue3;
					hueVal = gHue3;
					break;
				case 4:
					gHue4 = !gHue4;
     d32:	f087 0701 	eor.w	r7, r7, #1
     d36:	f885 7033 	strb.w	r7, [r5, #51]	; 0x33
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     d3a:	b100      	cbz	r0, d3e <Meltdown::tryExecuteCommand() [clone .part.41]+0x1b2>
     d3c:	3301      	adds	r3, #1
				if (gHue3) val++;
     d3e:	b101      	cbz	r1, d42 <Meltdown::tryExecuteCommand() [clone .part.41]+0x1b6>
     d40:	3301      	adds	r3, #1
				if (gHue4) val++;
     d42:	2f00      	cmp	r7, #0
     d44:	f43f af7e 	beq.w	c44 <Meltdown::tryExecuteCommand() [clone .part.41]+0xb8>
     d48:	e77b      	b.n	c42 <Meltdown::tryExecuteCommand() [clone .part.41]+0xb6>
				case 2:
					gHue2 = !gHue2;
					hueVal = gHue2;
					break;
				case 3:
					gHue3 = !gHue3;
     d4a:	4d3d      	ldr	r5, [pc, #244]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)
     d4c:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     d50:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     d54:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     d58:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     d5c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 2:
					gHue2 = !gHue2;
					hueVal = gHue2;
					break;
				case 3:
					gHue3 = !gHue3;
     d60:	f087 0701 	eor.w	r7, r7, #1
     d64:	f885 7032 	strb.w	r7, [r5, #50]	; 0x32
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     d68:	b100      	cbz	r0, d6c <Meltdown::tryExecuteCommand() [clone .part.41]+0x1e0>
     d6a:	3301      	adds	r3, #1
				if (gHue3) val++;
     d6c:	2f00      	cmp	r7, #0
     d6e:	f43f af67 	beq.w	c40 <Meltdown::tryExecuteCommand() [clone .part.41]+0xb4>
     d72:	e764      	b.n	c3e <Meltdown::tryExecuteCommand() [clone .part.41]+0xb2>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     d74:	9b06      	ldr	r3, [sp, #24]
     d76:	2b09      	cmp	r3, #9
     d78:	d9bf      	bls.n	cfa <Meltdown::tryExecuteCommand() [clone .part.41]+0x16e>
				{
					String valString = inputString.substring(5, 9);
     d7a:	ae08      	add	r6, sp, #32
     d7c:	4630      	mov	r0, r6
     d7e:	2309      	movs	r3, #9
     d80:	2205      	movs	r2, #5
     d82:	4641      	mov	r1, r8
     d84:	f005 fa38 	bl	61f8 <String::substring(unsigned int, unsigned int) const>
					int val = valString.toInt();
     d88:	4630      	mov	r0, r6
     d8a:	f005 fa59 	bl	6240 <String::toInt() const>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     d8e:	4681      	mov	r9, r0
     d90:	b318      	cbz	r0, dda <Meltdown::tryExecuteCommand() [clone .part.41]+0x24e>
					{
						return val;
     d92:	4630      	mov	r0, r6
     d94:	f005 f8f8 	bl	5f88 <String::~String()>
			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
					int val = valString.toInt();
     d98:	464f      	mov	r7, r9
     d9a:	e7ae      	b.n	cfa <Meltdown::tryExecuteCommand() [clone .part.41]+0x16e>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE5))
				{
					bool hueValue = MeltdownLED.ToggleHue(5);
     d9c:	4935      	ldr	r1, [pc, #212]	; (e74 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2e8>)
     d9e:	4620      	mov	r0, r4
     da0:	f005 f9de 	bl	6160 <String::equals(String const&) const>
     da4:	4606      	mov	r6, r0
     da6:	b310      	cbz	r0, dee <Meltdown::tryExecuteCommand() [clone .part.41]+0x262>
				case 4:
					gHue4 = !gHue4;
					hueVal = gHue4;
					break;
				case 5:
					gHue5 = !gHue5;
     da8:	4d25      	ldr	r5, [pc, #148]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)
     daa:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     dae:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     db2:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
     db6:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     dba:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 4:
					gHue4 = !gHue4;
					hueVal = gHue4;
					break;
				case 5:
					gHue5 = !gHue5;
     dbe:	f087 0701 	eor.w	r7, r7, #1
     dc2:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     dc6:	b100      	cbz	r0, dca <Meltdown::tryExecuteCommand() [clone .part.41]+0x23e>
     dc8:	3301      	adds	r3, #1
				if (gHue3) val++;
     dca:	b101      	cbz	r1, dce <Meltdown::tryExecuteCommand() [clone .part.41]+0x242>
     dcc:	3301      	adds	r3, #1
				if (gHue4) val++;
     dce:	b102      	cbz	r2, dd2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x246>
     dd0:	3301      	adds	r3, #1
				if (gHue5) val++;
     dd2:	2f00      	cmp	r7, #0
     dd4:	f47f af37 	bne.w	c46 <Meltdown::tryExecuteCommand() [clone .part.41]+0xba>
     dd8:	e736      	b.n	c48 <Meltdown::tryExecuteCommand() [clone .part.41]+0xbc>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     dda:	4927      	ldr	r1, [pc, #156]	; (e78 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2ec>)
     ddc:	4630      	mov	r0, r6
     dde:	f005 f9cd 	bl	617c <String::equals(char const*) const>
     de2:	2800      	cmp	r0, #0
     de4:	d1d5      	bne.n	d92 <Meltdown::tryExecuteCommand() [clone .part.41]+0x206>

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
     de6:	4630      	mov	r0, r6
     de8:	f005 f8ce 	bl	5f88 <String::~String()>
     dec:	e785      	b.n	cfa <Meltdown::tryExecuteCommand() [clone .part.41]+0x16e>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.PAUSE))
				{
					MeltdownLED.SetPause();
     dee:	4923      	ldr	r1, [pc, #140]	; (e7c <Meltdown::tryExecuteCommand() [clone .part.41]+0x2f0>)
     df0:	4620      	mov	r0, r4
     df2:	f005 f9b5 	bl	6160 <String::equals(String const&) const>
     df6:	4607      	mov	r7, r0
     df8:	b150      	cbz	r0, e10 <Meltdown::tryExecuteCommand() [clone .part.41]+0x284>
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     dfa:	4631      	mov	r1, r6
     dfc:	4811      	ldr	r0, [pc, #68]	; (e44 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b8>)
     dfe:	f005 f9d3 	bl	61a8 <String::operator[](unsigned int)>
     e02:	7803      	ldrb	r3, [r0, #0]
     e04:	2b23      	cmp	r3, #35	; 0x23
     e06:	d078      	beq.n	efa <Meltdown::tryExecuteCommand() [clone .part.41]+0x36e>
			bool TogglePause()
			{
				gPause = !gPause;
				return gPause;
			}
			void SetPause() { gPause = MeltdownSerial.GetBoolValue(); }
     e08:	4b0d      	ldr	r3, [pc, #52]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)
     e0a:	f883 6038 	strb.w	r6, [r3, #56]	; 0x38
     e0e:	e6f3      	b.n	bf8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x6c>
				}
				else if (command.equals(MeltdownSerial.FULL_BRIGHT))
				{
					MeltdownLED.SetFullBright();
     e10:	491b      	ldr	r1, [pc, #108]	; (e80 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2f4>)
     e12:	4620      	mov	r0, r4
     e14:	f005 f9a4 	bl	6160 <String::equals(String const&) const>
     e18:	b3a0      	cbz	r0, e84 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2f8>
     e1a:	4639      	mov	r1, r7
     e1c:	4809      	ldr	r0, [pc, #36]	; (e44 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b8>)
     e1e:	f005 f9c3 	bl	61a8 <String::operator[](unsigned int)>
     e22:	7803      	ldrb	r3, [r0, #0]
     e24:	2b23      	cmp	r3, #35	; 0x23
     e26:	f000 809e 	beq.w	f66 <Meltdown::tryExecuteCommand() [clone .part.41]+0x3da>
     e2a:	2300      	movs	r3, #0
			bool ToggleFullBright()
			{
				gFullBright = !gFullBright;
				return gFullBright;
			}
			void SetFullBright() { gFullBright = MeltdownSerial.GetBoolValue(); }
     e2c:	4a04      	ldr	r2, [pc, #16]	; (e40 <Meltdown::tryExecuteCommand() [clone .part.41]+0x2b4>)
     e2e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
     e32:	e6e1      	b.n	bf8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x6c>
     e34:	1fff9f74 	.word	0x1fff9f74
     e38:	00008358 	.word	0x00008358
     e3c:	1fff9fbc 	.word	0x1fff9fbc
     e40:	1fff9ed8 	.word	0x1fff9ed8
     e44:	1fff9f78 	.word	0x1fff9f78
     e48:	1fff9eb4 	.word	0x1fff9eb4
     e4c:	000083f8 	.word	0x000083f8
     e50:	1fffa0ec 	.word	0x1fffa0ec
     e54:	1fff9fcc 	.word	0x1fff9fcc
     e58:	2aaaaaab 	.word	0x2aaaaaab
     e5c:	000082c0 	.word	0x000082c0
     e60:	1fff8734 	.word	0x1fff8734
     e64:	000082b4 	.word	0x000082b4
     e68:	1fff9fdc 	.word	0x1fff9fdc
     e6c:	1fff9fec 	.word	0x1fff9fec
     e70:	1fff9ffc 	.word	0x1fff9ffc
     e74:	1fffa00c 	.word	0x1fffa00c
     e78:	000082b8 	.word	0x000082b8
     e7c:	1fffa07c 	.word	0x1fffa07c
     e80:	1fffa01c 	.word	0x1fffa01c
				}
				else if (command.equals(MeltdownSerial.PATTERN))
				{
					// Set to black.
     e84:	49b2      	ldr	r1, [pc, #712]	; (1150 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5c4>)
     e86:	4620      	mov	r0, r4
     e88:	f005 f96a 	bl	6160 <String::equals(String const&) const>
     e8c:	2800      	cmp	r0, #0
     e8e:	d04a      	beq.n	f26 <Meltdown::tryExecuteCommand() [clone .part.41]+0x39a>
     e90:	49b0      	ldr	r1, [pc, #704]	; (1154 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5c8>)
     e92:	4ab1      	ldr	r2, [pc, #708]	; (1158 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5cc>)
     e94:	f501 7616 	add.w	r6, r1, #600	; 0x258
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     e98:	2000      	movs	r0, #0

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
				{
					leds[indexes[i]] = color;
     e9a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
     e9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ea2:	18d5      	adds	r5, r2, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
     ea4:	42b1      	cmp	r1, r6
     ea6:	54d0      	strb	r0, [r2, r3]
        g = (colorcode >>  8) & 0xFF;
     ea8:	7068      	strb	r0, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
     eaa:	70a8      	strb	r0, [r5, #2]
     eac:	d1f5      	bne.n	e9a <Meltdown::tryExecuteCommand() [clone .part.41]+0x30e>
     eae:	49ab      	ldr	r1, [pc, #684]	; (115c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d0>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     eb0:	2000      	movs	r0, #0
     eb2:	f201 26b2 	addw	r6, r1, #690	; 0x2b2
				{
					leds[indexes[i]] = color;
     eb6:	f831 3f02 	ldrh.w	r3, [r1, #2]!
     eba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ebe:	18d5      	adds	r5, r2, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
     ec0:	428e      	cmp	r6, r1
     ec2:	54d0      	strb	r0, [r2, r3]
     ec4:	f04f 0300 	mov.w	r3, #0
        g = (colorcode >>  8) & 0xFF;
     ec8:	7068      	strb	r0, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
     eca:	70a8      	strb	r0, [r5, #2]
     ecc:	d1f3      	bne.n	eb6 <Meltdown::tryExecuteCommand() [clone .part.41]+0x32a>
			}
			void SetBottom() { gBottom = MeltdownSerial.GetBoolValue(); }

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }
     ece:	4fa4      	ldr	r7, [pc, #656]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)

			int SetPatternNumber()
			{
				ResetFrame();

				gCurrentPatternNumber = MeltdownSerial.GetValue();
     ed0:	48a4      	ldr	r0, [pc, #656]	; (1164 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d8>)
			}
			void SetBottom() { gBottom = MeltdownSerial.GetBoolValue(); }

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }
     ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

			int SetPatternNumber()
			{
				ResetFrame();

				gCurrentPatternNumber = MeltdownSerial.GetValue();
     ed4:	f7ff fe38 	bl	b48 <Meltdown::CMeltdownSerial::GetValue()>
					MeltdownLED.SetAllColor(leds, ledSpokeIndexes, NUM_SPOKE_LEDS, CRGB::Black);

					int patternNumber = MeltdownLED.SetPatternNumber();
					MeltdownLogger.Debug(Serial, F("Setting pattern number"), patternNumber);
				}
				else if (command.equals(MeltdownSerial.TOP))
     ed8:	49a3      	ldr	r1, [pc, #652]	; (1168 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5dc>)
     eda:	6038      	str	r0, [r7, #0]
     edc:	ae08      	add	r6, sp, #32
     ede:	4605      	mov	r5, r0
				else if (command.equals(MeltdownSerial.MODE))
				{
					int modeNumber = MeltdownLED.SetModeNumber();
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
     ee0:	4630      	mov	r0, r6
     ee2:	f005 f8a5 	bl	6030 <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
		{
			if (!m_isDebug) return;
     ee6:	4ba1      	ldr	r3, [pc, #644]	; (116c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e0>)
     ee8:	781b      	ldrb	r3, [r3, #0]
     eea:	2b00      	cmp	r3, #0
     eec:	f43f ae81 	beq.w	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
     ef0:	4629      	mov	r1, r5
     ef2:	4630      	mov	r0, r6
     ef4:	f7ff fdce 	bl	a94 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]>
     ef8:	e67b      	b.n	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
     efa:	68eb      	ldr	r3, [r5, #12]
     efc:	2b09      	cmp	r3, #9
     efe:	d801      	bhi.n	f04 <Meltdown::tryExecuteCommand() [clone .part.41]+0x378>
     f00:	2600      	movs	r6, #0
     f02:	e781      	b.n	e08 <Meltdown::tryExecuteCommand() [clone .part.41]+0x27c>
				{
					String valString = m_inputString.substring(5, 9);
     f04:	2309      	movs	r3, #9
     f06:	2205      	movs	r2, #5
     f08:	4999      	ldr	r1, [pc, #612]	; (1170 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e4>)
     f0a:	a808      	add	r0, sp, #32
     f0c:	f005 f974 	bl	61f8 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
     f10:	a808      	add	r0, sp, #32
     f12:	f005 f995 	bl	6240 <String::toInt() const>
     f16:	4606      	mov	r6, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
     f18:	a808      	add	r0, sp, #32
     f1a:	f005 f835 	bl	5f88 <String::~String()>
     f1e:	3600      	adds	r6, #0
     f20:	bf18      	it	ne
     f22:	2601      	movne	r6, #1
     f24:	e770      	b.n	e08 <Meltdown::tryExecuteCommand() [clone .part.41]+0x27c>
					int patternNumber = MeltdownLED.SetPatternNumber();
					MeltdownLogger.Debug(Serial, F("Setting pattern number"), patternNumber);
				}
				else if (command.equals(MeltdownSerial.TOP))
				{
					bool topVal = MeltdownLED.ToggleTop();
     f26:	4d93      	ldr	r5, [pc, #588]	; (1174 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e8>)
     f28:	4620      	mov	r0, r4
     f2a:	4629      	mov	r1, r5
     f2c:	f005 f918 	bl	6160 <String::equals(String const&) const>
     f30:	4606      	mov	r6, r0
     f32:	b368      	cbz	r0, f90 <Meltdown::tryExecuteCommand() [clone .part.41]+0x404>

			// POSITION //

			bool ToggleTop()
			{
				gBottom = false;
     f34:	4b8a      	ldr	r3, [pc, #552]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
					MeltdownLogger.Debug(Serial, F("Setting top position"), topVal);
				}
				else if (command.equals(MeltdownSerial.BOTTOM))
     f36:	4990      	ldr	r1, [pc, #576]	; (1178 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5ec>)
				gTop = !gTop;
     f38:	f893 5039 	ldrb.w	r5, [r3, #57]	; 0x39

			// POSITION //

			bool ToggleTop()
			{
				gBottom = false;
     f3c:	2200      	movs	r2, #0
     f3e:	ae08      	add	r6, sp, #32
				gTop = !gTop;
     f40:	f085 0501 	eor.w	r5, r5, #1

			// POSITION //

			bool ToggleTop()
			{
				gBottom = false;
     f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				gTop = !gTop;
     f48:	f883 5039 	strb.w	r5, [r3, #57]	; 0x39
     f4c:	4630      	mov	r0, r6
     f4e:	f005 f86f 	bl	6030 <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
		{
			if (!m_isDebug) return;
     f52:	4b86      	ldr	r3, [pc, #536]	; (116c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e0>)
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	2b00      	cmp	r3, #0
     f58:	f43f ae4b 	beq.w	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
     f5c:	4629      	mov	r1, r5
     f5e:	4630      	mov	r0, r6
     f60:	f7ff fc20 	bl	7a4 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.46]>
     f64:	e645      	b.n	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     f66:	68eb      	ldr	r3, [r5, #12]
     f68:	2b09      	cmp	r3, #9
     f6a:	f67f af5e 	bls.w	e2a <Meltdown::tryExecuteCommand() [clone .part.41]+0x29e>
				{
					String valString = m_inputString.substring(5, 9);
     f6e:	2309      	movs	r3, #9
     f70:	2205      	movs	r2, #5
     f72:	497f      	ldr	r1, [pc, #508]	; (1170 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e4>)
     f74:	a808      	add	r0, sp, #32
     f76:	f005 f93f 	bl	61f8 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
     f7a:	a808      	add	r0, sp, #32
     f7c:	f005 f960 	bl	6240 <String::toInt() const>
     f80:	4605      	mov	r5, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
     f82:	a808      	add	r0, sp, #32
     f84:	f005 f800 	bl	5f88 <String::~String()>
     f88:	1c2b      	adds	r3, r5, #0
     f8a:	bf18      	it	ne
     f8c:	2301      	movne	r3, #1
     f8e:	e74d      	b.n	e2c <Meltdown::tryExecuteCommand() [clone .part.41]+0x2a0>
				{
					bool bottomVal = MeltdownLED.ToggleBottom();
     f90:	f105 0110 	add.w	r1, r5, #16
     f94:	4620      	mov	r0, r4
     f96:	f005 f8e3 	bl	6160 <String::equals(String const&) const>
     f9a:	b198      	cbz	r0, fc4 <Meltdown::tryExecuteCommand() [clone .part.41]+0x438>

			bool GetTop() { return gTop; }

			bool ToggleBottom()
			{
				gTop = false;
     f9c:	4b70      	ldr	r3, [pc, #448]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
					MeltdownLogger.Debug(Serial, F("Setting bottom position"), bottomVal);
				}
				else if (command.equals(MeltdownSerial.EFFECT))
     f9e:	4977      	ldr	r1, [pc, #476]	; (117c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5f0>)
				gBottom = !gBottom;
     fa0:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a

			bool GetTop() { return gTop; }

			bool ToggleBottom()
			{
				gTop = false;
     fa4:	f883 6039 	strb.w	r6, [r3, #57]	; 0x39
				gBottom = !gBottom;
     fa8:	f085 0501 	eor.w	r5, r5, #1
     fac:	ae08      	add	r6, sp, #32
     fae:	f883 503a 	strb.w	r5, [r3, #58]	; 0x3a
     fb2:	4630      	mov	r0, r6
     fb4:	f005 f83c 	bl	6030 <String::String(__FlashStringHelper const*)>
     fb8:	4b6c      	ldr	r3, [pc, #432]	; (116c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e0>)
     fba:	781b      	ldrb	r3, [r3, #0]
     fbc:	2b00      	cmp	r3, #0
     fbe:	f43f ae18 	beq.w	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
     fc2:	e7cb      	b.n	f5c <Meltdown::tryExecuteCommand() [clone .part.41]+0x3d0>
				{
					int effectNumber = MeltdownLED.SetEffectNumber();
     fc4:	f1a5 0190 	sub.w	r1, r5, #144	; 0x90
     fc8:	4620      	mov	r0, r4
     fca:	f005 f8c9 	bl	6160 <String::equals(String const&) const>
     fce:	b148      	cbz	r0, fe4 <Meltdown::tryExecuteCommand() [clone .part.41]+0x458>
				return gCurrentEffectNumber;
			}

			int SetEffectNumber()
			{
				gCurrentEffectNumber = MeltdownSerial.GetValue();
     fd0:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
     fd4:	f7ff fdb8 	bl	b48 <Meltdown::CMeltdownSerial::GetValue()>
     fd8:	4b61      	ldr	r3, [pc, #388]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
					MeltdownLogger.Debug(Serial, F("Setting effect number"), effectNumber);
				}
				else if (command.equals(MeltdownSerial.MODE))
     fda:	4969      	ldr	r1, [pc, #420]	; (1180 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5f4>)
     fdc:	6058      	str	r0, [r3, #4]
     fde:	4605      	mov	r5, r0
				{
					int modeNumber = MeltdownLED.SetModeNumber();
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
     fe0:	ae08      	add	r6, sp, #32
     fe2:	e77d      	b.n	ee0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x354>
					int effectNumber = MeltdownLED.SetEffectNumber();
					MeltdownLogger.Debug(Serial, F("Setting effect number"), effectNumber);
				}
				else if (command.equals(MeltdownSerial.MODE))
				{
					int modeNumber = MeltdownLED.SetModeNumber();
     fe4:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
     fe8:	4620      	mov	r0, r4
     fea:	f005 f8b9 	bl	6160 <String::equals(String const&) const>
     fee:	b140      	cbz	r0, 1002 <Meltdown::tryExecuteCommand() [clone .part.41]+0x476>
				return gCurrentModeNumber;
			}

			int SetModeNumber() 
			{ 
				gCurrentModeNumber = MeltdownSerial.GetValue(); 
     ff0:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
     ff4:	f7ff fda8 	bl	b48 <Meltdown::CMeltdownSerial::GetValue()>
     ff8:	4b59      	ldr	r3, [pc, #356]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
     ffa:	4962      	ldr	r1, [pc, #392]	; (1184 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5f8>)
     ffc:	6098      	str	r0, [r3, #8]
     ffe:	4605      	mov	r5, r0
    1000:	e7ee      	b.n	fe0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x454>
				{
					int currVal = MeltdownLED.GetAnalogEffect();
    1002:	f105 0140 	add.w	r1, r5, #64	; 0x40
    1006:	4620      	mov	r0, r4
    1008:	f005 f8aa 	bl	6160 <String::equals(String const&) const>
    100c:	b318      	cbz	r0, 1056 <Meltdown::tryExecuteCommand() [clone .part.41]+0x4ca>
    100e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>
    1012:	f8d8 6020 	ldr.w	r6, [r8, #32]

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    1016:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
    101a:	4631      	mov	r1, r6
    101c:	f7ff fd54 	bl	ac8 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>
    1020:	f855 3cb8 	ldr.w	r3, [r5, #-184]

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }

			int SetAnalogEffect(int pin)
			{
				gAnalogEffect = MeltdownSerial.GetAnalogValue(pin, gAnalogEffect);
    1024:	f8c8 0020 	str.w	r0, [r8, #32]
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    1028:	1af2      	subs	r2, r6, r3
    102a:	4282      	cmp	r2, r0

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    102c:	4607      	mov	r7, r0
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    102e:	da03      	bge.n	1038 <Meltdown::tryExecuteCommand() [clone .part.41]+0x4ac>
    1030:	4433      	add	r3, r6
    1032:	4283      	cmp	r3, r0
    1034:	f73f ade0 	bgt.w	bf8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x6c>

					if (MeltdownSerial.HasChanged(currVal, modeVal))
					{
						MeltdownLogger.Debug(Serial, F("Setting Analog Effect"), modeVal);
					}
				}
    1038:	ae08      	add	r6, sp, #32
    103a:	4630      	mov	r0, r6
    103c:	4952      	ldr	r1, [pc, #328]	; (1188 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5fc>)
    103e:	f004 fff7 	bl	6030 <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
		{
			if (!m_isDebug) return;
    1042:	4b4a      	ldr	r3, [pc, #296]	; (116c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e0>)
    1044:	781b      	ldrb	r3, [r3, #0]
    1046:	2b00      	cmp	r3, #0
    1048:	f43f add3 	beq.w	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
    104c:	4639      	mov	r1, r7
    104e:	4630      	mov	r0, r6
    1050:	f7ff fd20 	bl	a94 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]>
    1054:	e5cd      	b.n	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
				else if (command.equals(MeltdownSerial.ANALOG_PATTERN))
				{
					int currVal = MeltdownLED.GetAnalogPattern();
    1056:	f105 0130 	add.w	r1, r5, #48	; 0x30
    105a:	4620      	mov	r0, r4
    105c:	f005 f880 	bl	6160 <String::equals(String const&) const>
    1060:	4607      	mov	r7, r0
    1062:	b1f8      	cbz	r0, 10a4 <Meltdown::tryExecuteCommand() [clone .part.41]+0x518>
    1064:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>
    1068:	f8d8 601c 	ldr.w	r6, [r8, #28]

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    106c:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
    1070:	4631      	mov	r1, r6
    1072:	f7ff fd29 	bl	ac8 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>
    1076:	f855 3cb8 	ldr.w	r3, [r5, #-184]

			// ANALOG //

			int SetAnalogPattern(int pin)
			{
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
    107a:	f8c8 001c 	str.w	r0, [r8, #28]
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    107e:	1af2      	subs	r2, r6, r3
    1080:	4282      	cmp	r2, r0

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    1082:	4607      	mov	r7, r0
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    1084:	da03      	bge.n	108e <Meltdown::tryExecuteCommand() [clone .part.41]+0x502>
    1086:	4433      	add	r3, r6
    1088:	4283      	cmp	r3, r0
    108a:	f73f adb5 	bgt.w	bf8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x6c>

					if (MeltdownSerial.HasChanged(currVal, patternVal))
					{
						MeltdownLogger.Debug(Serial, F("Setting Analog Pattern"), patternVal);
					}
				}
    108e:	ae08      	add	r6, sp, #32
    1090:	4630      	mov	r0, r6
    1092:	493e      	ldr	r1, [pc, #248]	; (118c <Meltdown::tryExecuteCommand() [clone .part.41]+0x600>)
    1094:	f004 ffcc 	bl	6030 <String::String(__FlashStringHelper const*)>
    1098:	4b34      	ldr	r3, [pc, #208]	; (116c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e0>)
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	2b00      	cmp	r3, #0
    109e:	f43f ada8 	beq.w	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
    10a2:	e7d3      	b.n	104c <Meltdown::tryExecuteCommand() [clone .part.41]+0x4c0>
				else if (command.equals(MeltdownSerial.AUTO_NONE))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.None);
    10a4:	f105 0170 	add.w	r1, r5, #112	; 0x70
    10a8:	4620      	mov	r0, r4
    10aa:	f005 f859 	bl	6160 <String::equals(String const&) const>
    10ae:	b1c0      	cbz	r0, 10e2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x556>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10b0:	4a37      	ldr	r2, [pc, #220]	; (1190 <Meltdown::tryExecuteCommand() [clone .part.41]+0x604>)

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    10b2:	4b2b      	ldr	r3, [pc, #172]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
    10b4:	6812      	ldr	r2, [r2, #0]
    10b6:	9204      	str	r2, [sp, #16]
	return ret;
    10b8:	9a04      	ldr	r2, [sp, #16]
			{
				gAutoModeActive = isActive;
				// If we're waking up, reset the timer.
				if (!gAutoModeActive)
				{
					gAutoModeStartMillis = millis();
    10ba:	645a      	str	r2, [r3, #68]	; 0x44
					MeltdownLogger.Debug(Serial, F("Disabling Auto Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_PATTERN))
    10bc:	ae08      	add	r6, sp, #32

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    10be:	f883 703b 	strb.w	r7, [r3, #59]	; 0x3b
    10c2:	4934      	ldr	r1, [pc, #208]	; (1194 <Meltdown::tryExecuteCommand() [clone .part.41]+0x608>)

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    10c4:	f883 703c 	strb.w	r7, [r3, #60]	; 0x3c
    10c8:	4630      	mov	r0, r6
    10ca:	f004 ffb1 	bl	6030 <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
    10ce:	4b27      	ldr	r3, [pc, #156]	; (116c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e0>)
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	2b00      	cmp	r3, #0
    10d4:	f43f ad8d 	beq.w	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>

			serial.println(msg);
    10d8:	4631      	mov	r1, r6
    10da:	482f      	ldr	r0, [pc, #188]	; (1198 <Meltdown::tryExecuteCommand() [clone .part.41]+0x60c>)
    10dc:	f7ff fcd0 	bl	a80 <Print::println(String const&)>
    10e0:	e587      	b.n	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Pattern);
    10e2:	f105 0190 	add.w	r1, r5, #144	; 0x90
    10e6:	4620      	mov	r0, r4
    10e8:	f005 f83a 	bl	6160 <String::equals(String const&) const>
    10ec:	b188      	cbz	r0, 1112 <Meltdown::tryExecuteCommand() [clone .part.41]+0x586>
    10ee:	4b1c      	ldr	r3, [pc, #112]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_MODE))
    10f0:	492a      	ldr	r1, [pc, #168]	; (119c <Meltdown::tryExecuteCommand() [clone .part.41]+0x610>)
    10f2:	ae08      	add	r6, sp, #32
    10f4:	2502      	movs	r5, #2

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    10f6:	2201      	movs	r2, #1
    10f8:	4630      	mov	r0, r6

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    10fa:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    10fe:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				else if (command.equals(MeltdownSerial.AUTO_SLEEP))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Sleep);
					MeltdownLogger.Debug(Serial, F("Setting Auto Sleep Mode."));
				}
				else
    1102:	f004 ff95 	bl	6030 <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
    1106:	4b19      	ldr	r3, [pc, #100]	; (116c <Meltdown::tryExecuteCommand() [clone .part.41]+0x5e0>)
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	f43f ad71 	beq.w	bf2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x66>
    1110:	e7e2      	b.n	10d8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x54c>
					MeltdownLED.SetAutoMode(MeltdownLED.Pattern);
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_MODE))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Mode);
    1112:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
    1116:	4620      	mov	r0, r4
    1118:	f005 f822 	bl	6160 <String::equals(String const&) const>
    111c:	b140      	cbz	r0, 1130 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5a4>

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    111e:	4b10      	ldr	r3, [pc, #64]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Mode Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_PATTERN_MODE))
    1120:	491f      	ldr	r1, [pc, #124]	; (11a0 <Meltdown::tryExecuteCommand() [clone .part.41]+0x614>)
    1122:	ae08      	add	r6, sp, #32
    1124:	2503      	movs	r5, #3

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    1126:	2201      	movs	r2, #1
    1128:	4630      	mov	r0, r6

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    112a:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    112e:	e7e6      	b.n	10fe <Meltdown::tryExecuteCommand() [clone .part.41]+0x572>
				{
					MeltdownLED.SetAutoMode(MeltdownLED.PatternMode);
    1130:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    1134:	4620      	mov	r0, r4
    1136:	f005 f813 	bl	6160 <String::equals(String const&) const>
    113a:	b3a8      	cbz	r0, 11a8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x61c>
    113c:	4b08      	ldr	r3, [pc, #32]	; (1160 <Meltdown::tryExecuteCommand() [clone .part.41]+0x5d4>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_SLEEP))
    113e:	4919      	ldr	r1, [pc, #100]	; (11a4 <Meltdown::tryExecuteCommand() [clone .part.41]+0x618>)
    1140:	ae08      	add	r6, sp, #32
    1142:	2504      	movs	r5, #4

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    1144:	2201      	movs	r2, #1
    1146:	4630      	mov	r0, r6

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    1148:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    114c:	e7d7      	b.n	10fe <Meltdown::tryExecuteCommand() [clone .part.41]+0x572>
    114e:	bf00      	nop
    1150:	1fff9f8c 	.word	0x1fff9f8c
    1154:	1fff9492 	.word	0x1fff9492
    1158:	1fff96f0 	.word	0x1fff96f0
    115c:	1fff91de 	.word	0x1fff91de
    1160:	1fff9ed8 	.word	0x1fff9ed8
    1164:	1fff9f74 	.word	0x1fff9f74
    1168:	000082d0 	.word	0x000082d0
    116c:	1fffa0ec 	.word	0x1fffa0ec
    1170:	1fff9f78 	.word	0x1fff9f78
    1174:	1fffa02c 	.word	0x1fffa02c
    1178:	000082e8 	.word	0x000082e8
    117c:	00008300 	.word	0x00008300
    1180:	00008318 	.word	0x00008318
    1184:	00008330 	.word	0x00008330
    1188:	00008430 	.word	0x00008430
    118c:	00008448 	.word	0x00008448
    1190:	1fffa138 	.word	0x1fffa138
    1194:	00008344 	.word	0x00008344
    1198:	1fff8734 	.word	0x1fff8734
    119c:	0000835c 	.word	0x0000835c
    11a0:	00008378 	.word	0x00008378
    11a4:	00008390 	.word	0x00008390
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Sleep);
    11a8:	4918      	ldr	r1, [pc, #96]	; (120c <Meltdown::tryExecuteCommand() [clone .part.41]+0x680>)
    11aa:	4620      	mov	r0, r4
    11ac:	f004 ffd8 	bl	6160 <String::equals(String const&) const>
    11b0:	b138      	cbz	r0, 11c2 <Meltdown::tryExecuteCommand() [clone .part.41]+0x636>
    11b2:	4b17      	ldr	r3, [pc, #92]	; (1210 <Meltdown::tryExecuteCommand() [clone .part.41]+0x684>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Sleep Mode."));
				}
				else
    11b4:	4917      	ldr	r1, [pc, #92]	; (1214 <Meltdown::tryExecuteCommand() [clone .part.41]+0x688>)
    11b6:	ae08      	add	r6, sp, #32
    11b8:	2201      	movs	r2, #1
    11ba:	4630      	mov	r0, r6
    11bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    11c0:	e79d      	b.n	10fe <Meltdown::tryExecuteCommand() [clone .part.41]+0x572>
				{
					MeltdownLogger.Debug(Serial, F("Something went wrong reading serial command"), command);
				}
			}
    11c2:	ae08      	add	r6, sp, #32
    11c4:	4914      	ldr	r1, [pc, #80]	; (1218 <Meltdown::tryExecuteCommand() [clone .part.41]+0x68c>)
    11c6:	4630      	mov	r0, r6
    11c8:	f10d 0810 	add.w	r8, sp, #16
    11cc:	f004 ff30 	bl	6030 <String::String(__FlashStringHelper const*)>
    11d0:	4640      	mov	r0, r8
    11d2:	4621      	mov	r1, r4
    11d4:	f004 ff3e 	bl	6054 <String::String(String const&)>
			serial.println(msg);
		}

		void Debug(Stream &serial, String msg, String value)
		{
			if (!m_isDebug) return;
    11d8:	4b10      	ldr	r3, [pc, #64]	; (121c <Meltdown::tryExecuteCommand() [clone .part.41]+0x690>)
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	b173      	cbz	r3, 11fc <Meltdown::tryExecuteCommand() [clone .part.41]+0x670>

			serial.print(msg);
    11de:	4631      	mov	r1, r6
    11e0:	480f      	ldr	r0, [pc, #60]	; (1220 <Meltdown::tryExecuteCommand() [clone .part.41]+0x694>)
    11e2:	f004 fe01 	bl	5de8 <Print::print(String const&)>
    11e6:	2102      	movs	r1, #2
    11e8:	480e      	ldr	r0, [pc, #56]	; (1224 <Meltdown::tryExecuteCommand() [clone .part.41]+0x698>)
    11ea:	f004 fafd 	bl	57e8 <usb_serial_write>
    11ee:	4641      	mov	r1, r8
    11f0:	480b      	ldr	r0, [pc, #44]	; (1220 <Meltdown::tryExecuteCommand() [clone .part.41]+0x694>)
    11f2:	f004 fdf9 	bl	5de8 <Print::print(String const&)>
    11f6:	480a      	ldr	r0, [pc, #40]	; (1220 <Meltdown::tryExecuteCommand() [clone .part.41]+0x694>)
    11f8:	f004 fe1c 	bl	5e34 <Print::println()>
    11fc:	4640      	mov	r0, r8
    11fe:	f004 fec3 	bl	5f88 <String::~String()>
    1202:	4630      	mov	r0, r6
    1204:	f004 fec0 	bl	5f88 <String::~String()>
    1208:	e4f6      	b.n	bf8 <Meltdown::tryExecuteCommand() [clone .part.41]+0x6c>
    120a:	bf00      	nop
    120c:	1fffa0ac 	.word	0x1fffa0ac
    1210:	1fff9ed8 	.word	0x1fff9ed8
    1214:	000083b0 	.word	0x000083b0
    1218:	000083cc 	.word	0x000083cc
    121c:	1fffa0ec 	.word	0x1fffa0ec
    1220:	1fff8734 	.word	0x1fff8734
    1224:	000082b4 	.word	0x000082b4

00001228 <Meltdown::setupLedArrays()>:
#pragma endregion COMMANDS

	void setupLedArrays()
	{
		for (int i = 0; i < NUM_PENTS; i++)
		{
    1228:	b4f0      	push	{r4, r5, r6, r7}
    122a:	4a12      	ldr	r2, [pc, #72]	; (1274 <Meltdown::setupLedArrays()+0x4c>)
    122c:	4e12      	ldr	r6, [pc, #72]	; (1278 <Meltdown::setupLedArrays()+0x50>)
    122e:	253c      	movs	r5, #60	; 0x3c
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
			{
				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
    1230:	f240 27c1 	movw	r7, #705	; 0x2c1
    1234:	f1a5 033c 	sub.w	r3, r5, #60	; 0x3c
    1238:	b29b      	uxth	r3, r3
    123a:	f102 0078 	add.w	r0, r2, #120	; 0x78
				{
					ledWheelIndexes[(i * NUM_WHEEL_LEDS_PER_PENT) + (j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
				}

    123e:	f822 3f02 	strh.w	r3, [r2, #2]!
    1242:	3301      	adds	r3, #1
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
			{
				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
				{
					ledWheelIndexes[(i * NUM_WHEEL_LEDS_PER_PENT) + (j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
    1244:	4290      	cmp	r0, r2
    1246:	b29b      	uxth	r3, r3
    1248:	d1f9      	bne.n	123e <Meltdown::setupLedArrays()+0x16>
    124a:	f105 0445 	add.w	r4, r5, #69	; 0x45
    124e:	b2a4      	uxth	r4, r4
    1250:	4632      	mov	r2, r6
    1252:	462b      	mov	r3, r5
    1254:	1c59      	adds	r1, r3, #1

				for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
				{
					ledSpokeIndexes[(i * NUM_SPOKE_LEDS_PER_PENT) + (j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
				}
			}
    1256:	f822 3f02 	strh.w	r3, [r2, #2]!
    125a:	b28b      	uxth	r3, r1
					ledWheelIndexes[(i * NUM_WHEEL_LEDS_PER_PENT) + (j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
				}

				for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
				{
					ledSpokeIndexes[(i * NUM_SPOKE_LEDS_PER_PENT) + (j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
    125c:	429c      	cmp	r4, r3
    125e:	d1f9      	bne.n	1254 <Meltdown::setupLedArrays()+0x2c>
    1260:	3581      	adds	r5, #129	; 0x81
    1262:	b2ad      	uxth	r5, r5
	{
		for (int i = 0; i < NUM_PENTS; i++)
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
			{
				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
    1264:	42bd      	cmp	r5, r7
    1266:	f106 068a 	add.w	r6, r6, #138	; 0x8a
    126a:	4602      	mov	r2, r0
    126c:	d1e2      	bne.n	1234 <Meltdown::setupLedArrays()+0xc>
				}
			}
		}
	}

	void executeSetup()
    126e:	bcf0      	pop	{r4, r5, r6, r7}
    1270:	4770      	bx	lr
    1272:	bf00      	nop
    1274:	1fff9492 	.word	0x1fff9492
    1278:	1fff91de 	.word	0x1fff91de

0000127c <Meltdown::executeSetup()>:
	{
		// initialize serial communication at 9600 bits per second:
		Serial.begin(9600);
    127c:	b538      	push	{r3, r4, r5, lr}
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	constexpr HardwareSerial() {}
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    127e:	f644 6020 	movw	r0, #20000	; 0x4e20
    1282:	f003 fa17 	bl	46b4 <serial_begin>
    1286:	2113      	movs	r1, #19
    1288:	4820      	ldr	r0, [pc, #128]	; (130c <Meltdown::executeSetup()+0x90>)
    128a:	f004 faad 	bl	57e8 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    128e:	4820      	ldr	r0, [pc, #128]	; (1310 <Meltdown::executeSetup()+0x94>)
    1290:	f004 fdd0 	bl	5e34 <Print::println()>

		bool m_isDebug = false;

		void InitSerial(bool isDebug)
		{
			m_isDebug = isDebug;
    1294:	4b1f      	ldr	r3, [pc, #124]	; (1314 <Meltdown::executeSetup()+0x98>)
    1296:	2501      	movs	r5, #1
		Serial.println(F("Serial port opened."));
		MeltdownLogger.InitSerial(DEBUG);

		delay(3000);

		LEDS.addLeds<OCTOWS2811>(leds, NUM_LEDS_PER_PENT);
    1298:	f640 30b8 	movw	r0, #3000	; 0xbb8
    129c:	701d      	strb	r5, [r3, #0]
    129e:	f003 f94b 	bl	4538 <delay>
#ifdef USE_OCTOWS2811
	template<OWS2811 CHIPSET, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		switch(CHIPSET) {
			case OCTOWS2811: { static COctoWS2811Controller<RGB_ORDER,WS2811_800kHz> controller; return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset); }
    12a2:	481d      	ldr	r0, [pc, #116]	; (1318 <Meltdown::executeSetup()+0x9c>)
    12a4:	6803      	ldr	r3, [r0, #0]
    12a6:	ea13 0405 	ands.w	r4, r3, r5
    12aa:	d00d      	beq.n	12c8 <Meltdown::executeSetup()+0x4c>
    12ac:	2300      	movs	r3, #0
    12ae:	f240 2285 	movw	r2, #645	; 0x285
    12b2:	491a      	ldr	r1, [pc, #104]	; (131c <Meltdown::executeSetup()+0xa0>)
    12b4:	481a      	ldr	r0, [pc, #104]	; (1320 <Meltdown::executeSetup()+0xa4>)
    12b6:	f000 fd5d 	bl	1d74 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

		setupLedArrays();

		LEDS.setBrightness(MeltdownLED.GetBrightness());
    12ba:	f7ff ffb5 	bl	1228 <Meltdown::setupLedArrays()>
    12be:	4a19      	ldr	r2, [pc, #100]	; (1324 <Meltdown::executeSetup()+0xa8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    12c0:	4b19      	ldr	r3, [pc, #100]	; (1328 <Meltdown::executeSetup()+0xac>)
    12c2:	6912      	ldr	r2, [r2, #16]
    12c4:	701a      	strb	r2, [r3, #0]
    12c6:	bd38      	pop	{r3, r4, r5, pc}
#ifdef USE_OCTOWS2811
	template<OWS2811 CHIPSET, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		switch(CHIPSET) {
			case OCTOWS2811: { static COctoWS2811Controller<RGB_ORDER,WS2811_800kHz> controller; return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset); }
    12c8:	f003 f8b6 	bl	4438 <__cxa_guard_acquire>
    12cc:	2800      	cmp	r0, #0
    12ce:	d0ed      	beq.n	12ac <Meltdown::executeSetup()+0x30>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    12d0:	4916      	ldr	r1, [pc, #88]	; (132c <Meltdown::executeSetup()+0xb0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    12d2:	4b13      	ldr	r3, [pc, #76]	; (1320 <Meltdown::executeSetup()+0xa4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    12d4:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    12d6:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    12d8:	22ff      	movs	r2, #255	; 0xff
    12da:	749d      	strb	r5, [r3, #18]
    12dc:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    12de:	609c      	str	r4, [r3, #8]
    12e0:	731a      	strb	r2, [r3, #12]
    12e2:	735a      	strb	r2, [r3, #13]
    12e4:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    12e6:	73da      	strb	r2, [r3, #15]
    12e8:	741a      	strb	r2, [r3, #16]
    12ea:	745a      	strb	r2, [r3, #17]
        if(m_pHead==NULL) { m_pHead = this; }
    12ec:	b160      	cbz	r0, 1308 <Meltdown::executeSetup()+0x8c>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    12ee:	4a10      	ldr	r2, [pc, #64]	; (1330 <Meltdown::executeSetup()+0xb4>)
    12f0:	6811      	ldr	r1, [r2, #0]
    12f2:	b101      	cbz	r1, 12f6 <Meltdown::executeSetup()+0x7a>
    12f4:	608b      	str	r3, [r1, #8]
    }
  }
public:
  COctoWS2811Controller() { pocto = NULL; }
    12f6:	490f      	ldr	r1, [pc, #60]	; (1334 <Meltdown::executeSetup()+0xb8>)
        m_pTail = this;
    12f8:	6013      	str	r3, [r2, #0]
    12fa:	4807      	ldr	r0, [pc, #28]	; (1318 <Meltdown::executeSetup()+0x9c>)
    12fc:	6019      	str	r1, [r3, #0]
    12fe:	2200      	movs	r2, #0
    1300:	619a      	str	r2, [r3, #24]
    1302:	f003 f89f 	bl	4444 <__cxa_guard_release>
    1306:	e7d1      	b.n	12ac <Meltdown::executeSetup()+0x30>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    1308:	600b      	str	r3, [r1, #0]
    130a:	e7f0      	b.n	12ee <Meltdown::executeSetup()+0x72>
    130c:	00008460 	.word	0x00008460
    1310:	1fff8734 	.word	0x1fff8734
    1314:	1fffa0ec 	.word	0x1fffa0ec
    1318:	1fff91b8 	.word	0x1fff91b8
    131c:	1fff96f0 	.word	0x1fff96f0
    1320:	1fff91bc 	.word	0x1fff91bc
    1324:	1fff9ed8 	.word	0x1fff9ed8
    1328:	1fff9eb4 	.word	0x1fff9eb4
    132c:	1fff9ec4 	.word	0x1fff9ec4
    1330:	1fff9ed4 	.word	0x1fff9ed4
    1334:	00008298 	.word	0x00008298

00001338 <Meltdown::executeLoop()>:
	}

	void executeLoop()
	{
		tryExecuteCommand();

    1338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    133c:	4bb0      	ldr	r3, [pc, #704]	; (1600 <Meltdown::executeLoop()+0x2c8>)

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
		{
			MeltdownSerial.SetInputStringComplete(false);
    133e:	7d1b      	ldrb	r3, [r3, #20]
	}

	void executeLoop()
	{
		tryExecuteCommand();

    1340:	b082      	sub	sp, #8

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
		{
			MeltdownSerial.SetInputStringComplete(false);
    1342:	2b00      	cmp	r3, #0
    1344:	f040 80a9 	bne.w	149a <Meltdown::executeLoop()+0x162>
    1348:	4cae      	ldr	r4, [pc, #696]	; (1604 <Meltdown::executeLoop()+0x2cc>)
	{
		tryExecuteCommand();

		if (!MeltdownLED.GetPause())
		{
			if (MeltdownLED.GetTop())
    134a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    134e:	2b00      	cmp	r3, #0
    1350:	f040 809c 	bne.w	148c <Meltdown::executeLoop()+0x154>
			{
				// Call the current pattern function once, updating the 'leds' array.
    1354:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    1358:	2b00      	cmp	r3, #0
    135a:	f040 80fc 	bne.w	1556 <Meltdown::executeLoop()+0x21e>
				MeltdownLED.ExecuteEffect(leds, ledWheelIndexes, NUM_WHEEL_LEDS);
				MeltdownLED.SetAllColor(leds, ledSpokeIndexes, NUM_SPOKE_LEDS, CRGB::Black);
			}
			else if (MeltdownLED.GetBottom())
			{
				// Call the current pattern function once, updating the 'leds' array.
    135e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    1362:	2b00      	cmp	r3, #0
    1364:	f000 809c 	beq.w	14a0 <Meltdown::executeLoop()+0x168>
				return SetPatternNumber(gCurrentPatternNumber + 1);
			}

			void ExecutePattern(CRGB leds[], uint16_t indexes[], int numLeds, int patternOffset = 0, int modeOffset = 0)
			{
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);
    1368:	6823      	ldr	r3, [r4, #0]
    136a:	f003 0307 	and.w	r3, r3, #7
    136e:	3309      	adds	r3, #9
    1370:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1374:	689a      	ldr	r2, [r3, #8]
    1376:	685d      	ldr	r5, [r3, #4]
    1378:	07d1      	lsls	r1, r2, #31
    137a:	f140 8128 	bpl.w	15ce <Meltdown::executeLoop()+0x296>
    137e:	1052      	asrs	r2, r2, #1
    1380:	1910      	adds	r0, r2, r4
    1382:	5913      	ldr	r3, [r2, r4]
    1384:	595d      	ldr	r5, [r3, r5]
    1386:	4aa0      	ldr	r2, [pc, #640]	; (1608 <Meltdown::executeLoop()+0x2d0>)
    1388:	49a0      	ldr	r1, [pc, #640]	; (160c <Meltdown::executeLoop()+0x2d4>)
    138a:	2300      	movs	r3, #0
    138c:	9300      	str	r3, [sp, #0]
    138e:	f240 1359 	movw	r3, #345	; 0x159
    1392:	47a8      	blx	r5
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    1394:	6863      	ldr	r3, [r4, #4]

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    1396:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1398:	499a      	ldr	r1, [pc, #616]	; (1604 <Meltdown::executeLoop()+0x2cc>)
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    139a:	f003 0301 	and.w	r3, r3, #1
    139e:	3311      	adds	r3, #17
    13a0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    13a4:	3201      	adds	r2, #1
    13a6:	62e2      	str	r2, [r4, #44]	; 0x2c
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    13a8:	689a      	ldr	r2, [r3, #8]
    13aa:	685d      	ldr	r5, [r3, #4]
    13ac:	07d3      	lsls	r3, r2, #31
    13ae:	f140 811d 	bpl.w	15ec <Meltdown::executeLoop()+0x2b4>
    13b2:	1052      	asrs	r2, r2, #1
    13b4:	1850      	adds	r0, r2, r1
    13b6:	5853      	ldr	r3, [r2, r1]
    13b8:	595d      	ldr	r5, [r3, r5]
    13ba:	4a93      	ldr	r2, [pc, #588]	; (1608 <Meltdown::executeLoop()+0x2d0>)
    13bc:	4993      	ldr	r1, [pc, #588]	; (160c <Meltdown::executeLoop()+0x2d4>)
    13be:	f240 1359 	movw	r3, #345	; 0x159
    13c2:	47a8      	blx	r5
    13c4:	4992      	ldr	r1, [pc, #584]	; (1610 <Meltdown::executeLoop()+0x2d8>)
    13c6:	4a91      	ldr	r2, [pc, #580]	; (160c <Meltdown::executeLoop()+0x2d4>)
    13c8:	f501 7616 	add.w	r6, r1, #600	; 0x258
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    13cc:	2000      	movs	r0, #0

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
				{
					leds[indexes[i]] = color;
    13ce:	f831 3f02 	ldrh.w	r3, [r1, #2]!
    13d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    13d6:	18d5      	adds	r5, r2, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
    13d8:	42b1      	cmp	r1, r6
    13da:	54d0      	strb	r0, [r2, r3]
        g = (colorcode >>  8) & 0xFF;
    13dc:	7068      	strb	r0, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    13de:	70a8      	strb	r0, [r5, #2]
    13e0:	d1f5      	bne.n	13ce <Meltdown::executeLoop()+0x96>
				MeltdownLED.ExecuteEffect(leds, ledSpokeIndexes, NUM_SPOKE_LEDS);
			}

			if (MeltdownLED.GetFullBright())
			{
				MeltdownLED.MaximizeBrightness(leds, ledWheelIndexes, NUM_WHEEL_LEDS);
    13e2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    13e6:	2b00      	cmp	r3, #0
    13e8:	d050      	beq.n	148c <Meltdown::executeLoop()+0x154>
    13ea:	4e89      	ldr	r6, [pc, #548]	; (1610 <Meltdown::executeLoop()+0x2d8>)
    13ec:	4a87      	ldr	r2, [pc, #540]	; (160c <Meltdown::executeLoop()+0x2d4>)
    13ee:	f506 7e16 	add.w	lr, r6, #600	; 0x258
    /// maximize the brightness of this CRGB object
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
        if( green > max) max = green;
        if( blue > max) max = blue;
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
    13f2:	f44f 477f 	mov.w	r7, #65280	; 0xff00

			void MaximizeBrightness(CRGB leds[], uint16_t indexes[], int numLeds)
			{
				for (int i = 0; i < numLeds; i++)
				{
					(leds[indexes[i]]).maximizeBrightness();
    13f6:	f836 4f02 	ldrh.w	r4, [r6, #2]!
    13fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    13fe:	1915      	adds	r5, r2, r4
        return avg;
    }

    /// maximize the brightness of this CRGB object
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
    1400:	f812 c004 	ldrb.w	ip, [r2, r4]
        if( green > max) max = green;
    1404:	7868      	ldrb	r0, [r5, #1]
        if( blue > max) max = blue;
    1406:	f895 8002 	ldrb.w	r8, [r5, #2]
    140a:	4584      	cmp	ip, r0
    140c:	4661      	mov	r1, ip
    140e:	bf38      	it	cc
    1410:	4601      	movcc	r1, r0
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
    1412:	4541      	cmp	r1, r8
    1414:	bf38      	it	cc
    1416:	4641      	movcc	r1, r8
    1418:	fb97 f3f1 	sdiv	r3, r7, r1
        red =   (red   * factor) / 256;
    141c:	fb03 fc0c 	mul.w	ip, r3, ip
        green = (green * factor) / 256;
    1420:	fb03 f000 	mul.w	r0, r3, r0
        blue =  (blue  * factor) / 256;
    1424:	fb03 f308 	mul.w	r3, r3, r8
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
        if( green > max) max = green;
        if( blue > max) max = blue;
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
        red =   (red   * factor) / 256;
    1428:	ea4f 2c2c 	mov.w	ip, ip, asr #8
        green = (green * factor) / 256;
    142c:	1200      	asrs	r0, r0, #8
        blue =  (blue  * factor) / 256;
    142e:	121b      	asrs	r3, r3, #8
				}
			}

			void MaximizeBrightness(CRGB leds[], uint16_t indexes[], int numLeds)
			{
				for (int i = 0; i < numLeds; i++)
    1430:	4576      	cmp	r6, lr
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
        if( green > max) max = green;
        if( blue > max) max = blue;
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
        red =   (red   * factor) / 256;
    1432:	f802 c004 	strb.w	ip, [r2, r4]
        green = (green * factor) / 256;
    1436:	7068      	strb	r0, [r5, #1]
        blue =  (blue  * factor) / 256;
    1438:	70ab      	strb	r3, [r5, #2]
    143a:	d1dc      	bne.n	13f6 <Meltdown::executeLoop()+0xbe>
    143c:	4e75      	ldr	r6, [pc, #468]	; (1614 <Meltdown::executeLoop()+0x2dc>)
    /// maximize the brightness of this CRGB object
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
        if( green > max) max = green;
        if( blue > max) max = blue;
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
    143e:	f44f 4e7f 	mov.w	lr, #65280	; 0xff00
    1442:	f206 27b2 	addw	r7, r6, #690	; 0x2b2
				{
					(leds[indexes[i]]).maximizeBrightness();
    1446:	f836 4f02 	ldrh.w	r4, [r6, #2]!
    144a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    144e:	1915      	adds	r5, r2, r4
        return avg;
    }

    /// maximize the brightness of this CRGB object
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
    1450:	f812 c004 	ldrb.w	ip, [r2, r4]
        if( green > max) max = green;
    1454:	7868      	ldrb	r0, [r5, #1]
        if( blue > max) max = blue;
    1456:	f895 8002 	ldrb.w	r8, [r5, #2]
    145a:	4584      	cmp	ip, r0
    145c:	4661      	mov	r1, ip
    145e:	bf38      	it	cc
    1460:	4601      	movcc	r1, r0
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
    1462:	4541      	cmp	r1, r8
    1464:	bf38      	it	cc
    1466:	4641      	movcc	r1, r8
    1468:	fb9e f3f1 	sdiv	r3, lr, r1
        red =   (red   * factor) / 256;
    146c:	fb03 fc0c 	mul.w	ip, r3, ip
        green = (green * factor) / 256;
    1470:	fb03 f000 	mul.w	r0, r3, r0
        blue =  (blue  * factor) / 256;
    1474:	fb03 f308 	mul.w	r3, r3, r8
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
        if( green > max) max = green;
        if( blue > max) max = blue;
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
        red =   (red   * factor) / 256;
    1478:	ea4f 2c2c 	mov.w	ip, ip, asr #8
        green = (green * factor) / 256;
    147c:	1200      	asrs	r0, r0, #8
        blue =  (blue  * factor) / 256;
    147e:	121b      	asrs	r3, r3, #8
				}
			}

			void MaximizeBrightness(CRGB leds[], uint16_t indexes[], int numLeds)
			{
				for (int i = 0; i < numLeds; i++)
    1480:	42b7      	cmp	r7, r6
    inline void maximizeBrightness( uint8_t limit = 255 )  {
        uint8_t max = red;
        if( green > max) max = green;
        if( blue > max) max = blue;
        uint16_t factor = ((uint16_t)(limit) * 256) / max;
        red =   (red   * factor) / 256;
    1482:	f802 c004 	strb.w	ip, [r2, r4]
        green = (green * factor) / 256;
    1486:	7068      	strb	r0, [r5, #1]
        blue =  (blue  * factor) / 256;
    1488:	70ab      	strb	r3, [r5, #2]
    148a:	d1dc      	bne.n	1446 <Meltdown::executeLoop()+0x10e>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    148c:	4862      	ldr	r0, [pc, #392]	; (1618 <Meltdown::executeLoop()+0x2e0>)
    148e:	7801      	ldrb	r1, [r0, #0]
		}

		LEDS.show();
	}

	void executeSerialEvent()
    1490:	b002      	add	sp, #8
    1492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1496:	f000 bcbf 	b.w	1e18 <CFastLED::show(unsigned char)>
    149a:	f7ff fb77 	bl	b8c <Meltdown::tryExecuteCommand() [clone .part.41]>
    149e:	e753      	b.n	1348 <Meltdown::executeLoop()+0x10>
				return SetPatternNumber(gCurrentPatternNumber + 1);
			}

			void ExecutePattern(CRGB leds[], uint16_t indexes[], int numLeds, int patternOffset = 0, int modeOffset = 0)
			{
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);
    14a0:	6823      	ldr	r3, [r4, #0]
    14a2:	f003 0307 	and.w	r3, r3, #7
    14a6:	3309      	adds	r3, #9
    14a8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    14ac:	689a      	ldr	r2, [r3, #8]
    14ae:	685d      	ldr	r5, [r3, #4]
    14b0:	07d7      	lsls	r7, r2, #31
    14b2:	f140 808f 	bpl.w	15d4 <Meltdown::executeLoop()+0x29c>
    14b6:	1052      	asrs	r2, r2, #1
    14b8:	1910      	adds	r0, r2, r4
    14ba:	5913      	ldr	r3, [r2, r4]
    14bc:	595d      	ldr	r5, [r3, r5]
    14be:	4a57      	ldr	r2, [pc, #348]	; (161c <Meltdown::executeLoop()+0x2e4>)
    14c0:	4952      	ldr	r1, [pc, #328]	; (160c <Meltdown::executeLoop()+0x2d4>)
    14c2:	2300      	movs	r3, #0
    14c4:	9300      	str	r3, [sp, #0]
    14c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
    14ca:	47a8      	blx	r5
    14cc:	6823      	ldr	r3, [r4, #0]

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    14ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    14d0:	494c      	ldr	r1, [pc, #304]	; (1604 <Meltdown::executeLoop()+0x2cc>)
				return SetPatternNumber(gCurrentPatternNumber + 1);
			}

			void ExecutePattern(CRGB leds[], uint16_t indexes[], int numLeds, int patternOffset = 0, int modeOffset = 0)
			{
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);
    14d2:	f003 0307 	and.w	r3, r3, #7
    14d6:	3309      	adds	r3, #9
    14d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    14dc:	3201      	adds	r2, #1
    14de:	62e2      	str	r2, [r4, #44]	; 0x2c
				return SetPatternNumber(gCurrentPatternNumber + 1);
			}

			void ExecutePattern(CRGB leds[], uint16_t indexes[], int numLeds, int patternOffset = 0, int modeOffset = 0)
			{
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);
    14e0:	689a      	ldr	r2, [r3, #8]
    14e2:	685d      	ldr	r5, [r3, #4]
    14e4:	07d6      	lsls	r6, r2, #31
    14e6:	d57b      	bpl.n	15e0 <Meltdown::executeLoop()+0x2a8>
    14e8:	1052      	asrs	r2, r2, #1
    14ea:	1850      	adds	r0, r2, r1
    14ec:	5853      	ldr	r3, [r2, r1]
    14ee:	595d      	ldr	r5, [r3, r5]
    14f0:	4a45      	ldr	r2, [pc, #276]	; (1608 <Meltdown::executeLoop()+0x2d0>)
    14f2:	4946      	ldr	r1, [pc, #280]	; (160c <Meltdown::executeLoop()+0x2d4>)
    14f4:	2300      	movs	r3, #0
    14f6:	9300      	str	r3, [sp, #0]
    14f8:	f240 1359 	movw	r3, #345	; 0x159
    14fc:	47a8      	blx	r5
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    14fe:	6863      	ldr	r3, [r4, #4]

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    1500:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1502:	4940      	ldr	r1, [pc, #256]	; (1604 <Meltdown::executeLoop()+0x2cc>)
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    1504:	f003 0301 	and.w	r3, r3, #1
    1508:	3311      	adds	r3, #17
    150a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    150e:	3201      	adds	r2, #1
    1510:	62e2      	str	r2, [r4, #44]	; 0x2c
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    1512:	689a      	ldr	r2, [r3, #8]
    1514:	685d      	ldr	r5, [r3, #4]
    1516:	07d0      	lsls	r0, r2, #31
    1518:	d55f      	bpl.n	15da <Meltdown::executeLoop()+0x2a2>
    151a:	1052      	asrs	r2, r2, #1
    151c:	1850      	adds	r0, r2, r1
    151e:	5853      	ldr	r3, [r2, r1]
    1520:	595d      	ldr	r5, [r3, r5]
    1522:	4a3e      	ldr	r2, [pc, #248]	; (161c <Meltdown::executeLoop()+0x2e4>)
    1524:	4939      	ldr	r1, [pc, #228]	; (160c <Meltdown::executeLoop()+0x2d4>)
    1526:	f44f 7396 	mov.w	r3, #300	; 0x12c
    152a:	47a8      	blx	r5
    152c:	6863      	ldr	r3, [r4, #4]
			int GetEffectNumber(int offset = 0) 
			{
				// A value less than zero indicates we want the base effect.
				if (offset < 0) return 0;

				return (gCurrentEffectNumber + offset) % ARRAY_SIZE(gEffects); 
    152e:	4935      	ldr	r1, [pc, #212]	; (1604 <Meltdown::executeLoop()+0x2cc>)
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    1530:	f003 0301 	and.w	r3, r3, #1
    1534:	3311      	adds	r3, #17
    1536:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    153a:	689a      	ldr	r2, [r3, #8]
    153c:	685d      	ldr	r5, [r3, #4]
    153e:	07d3      	lsls	r3, r2, #31
    1540:	d551      	bpl.n	15e6 <Meltdown::executeLoop()+0x2ae>
    1542:	1052      	asrs	r2, r2, #1
    1544:	1850      	adds	r0, r2, r1
    1546:	5853      	ldr	r3, [r2, r1]
    1548:	595d      	ldr	r5, [r3, r5]
    154a:	4a2f      	ldr	r2, [pc, #188]	; (1608 <Meltdown::executeLoop()+0x2d0>)
    154c:	492f      	ldr	r1, [pc, #188]	; (160c <Meltdown::executeLoop()+0x2d4>)
    154e:	f240 1359 	movw	r3, #345	; 0x159
    1552:	47a8      	blx	r5
    1554:	e745      	b.n	13e2 <Meltdown::executeLoop()+0xaa>
				return SetPatternNumber(gCurrentPatternNumber + 1);
			}

			void ExecutePattern(CRGB leds[], uint16_t indexes[], int numLeds, int patternOffset = 0, int modeOffset = 0)
			{
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);
    1556:	6823      	ldr	r3, [r4, #0]
    1558:	f003 0307 	and.w	r3, r3, #7
    155c:	3309      	adds	r3, #9
    155e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1562:	689a      	ldr	r2, [r3, #8]
    1564:	685d      	ldr	r5, [r3, #4]
    1566:	07d6      	lsls	r6, r2, #31
    1568:	d546      	bpl.n	15f8 <Meltdown::executeLoop()+0x2c0>
    156a:	1052      	asrs	r2, r2, #1
    156c:	1910      	adds	r0, r2, r4
    156e:	5913      	ldr	r3, [r2, r4]
    1570:	595d      	ldr	r5, [r3, r5]
    1572:	4a2a      	ldr	r2, [pc, #168]	; (161c <Meltdown::executeLoop()+0x2e4>)
    1574:	4925      	ldr	r1, [pc, #148]	; (160c <Meltdown::executeLoop()+0x2d4>)
    1576:	2300      	movs	r3, #0
    1578:	9300      	str	r3, [sp, #0]
    157a:	f44f 7396 	mov.w	r3, #300	; 0x12c
    157e:	47a8      	blx	r5
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    1580:	6863      	ldr	r3, [r4, #4]

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    1582:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1584:	491f      	ldr	r1, [pc, #124]	; (1604 <Meltdown::executeLoop()+0x2cc>)
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    1586:	f003 0301 	and.w	r3, r3, #1
    158a:	3311      	adds	r3, #17
    158c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
    1590:	3201      	adds	r2, #1
    1592:	62e2      	str	r2, [r4, #44]	; 0x2c
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
    1594:	689a      	ldr	r2, [r3, #8]
    1596:	685d      	ldr	r5, [r3, #4]
    1598:	07d0      	lsls	r0, r2, #31
    159a:	d52a      	bpl.n	15f2 <Meltdown::executeLoop()+0x2ba>
    159c:	1052      	asrs	r2, r2, #1
    159e:	1850      	adds	r0, r2, r1
    15a0:	5853      	ldr	r3, [r2, r1]
    15a2:	595d      	ldr	r5, [r3, r5]
    15a4:	4a1d      	ldr	r2, [pc, #116]	; (161c <Meltdown::executeLoop()+0x2e4>)
    15a6:	4919      	ldr	r1, [pc, #100]	; (160c <Meltdown::executeLoop()+0x2d4>)
    15a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
    15ac:	47a8      	blx	r5
    15ae:	4919      	ldr	r1, [pc, #100]	; (1614 <Meltdown::executeLoop()+0x2dc>)
    15b0:	4a16      	ldr	r2, [pc, #88]	; (160c <Meltdown::executeLoop()+0x2d4>)
    15b2:	f201 26b2 	addw	r6, r1, #690	; 0x2b2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    15b6:	2000      	movs	r0, #0

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
				{
					leds[indexes[i]] = color;
    15b8:	f831 3f02 	ldrh.w	r3, [r1, #2]!
    15bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    15c0:	18d5      	adds	r5, r2, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
    15c2:	42b1      	cmp	r1, r6
    15c4:	54d0      	strb	r0, [r2, r3]
        g = (colorcode >>  8) & 0xFF;
    15c6:	7068      	strb	r0, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    15c8:	70a8      	strb	r0, [r5, #2]
    15ca:	d1f5      	bne.n	15b8 <Meltdown::executeLoop()+0x280>
    15cc:	e709      	b.n	13e2 <Meltdown::executeLoop()+0xaa>
    15ce:	eb04 0062 	add.w	r0, r4, r2, asr #1
    15d2:	e6d8      	b.n	1386 <Meltdown::executeLoop()+0x4e>
    15d4:	eb04 0062 	add.w	r0, r4, r2, asr #1
    15d8:	e771      	b.n	14be <Meltdown::executeLoop()+0x186>
    15da:	eb01 0062 	add.w	r0, r1, r2, asr #1
    15de:	e7a0      	b.n	1522 <Meltdown::executeLoop()+0x1ea>
    15e0:	eb01 0062 	add.w	r0, r1, r2, asr #1
    15e4:	e784      	b.n	14f0 <Meltdown::executeLoop()+0x1b8>
    15e6:	eb01 0062 	add.w	r0, r1, r2, asr #1
    15ea:	e7ae      	b.n	154a <Meltdown::executeLoop()+0x212>
    15ec:	eb01 0062 	add.w	r0, r1, r2, asr #1
    15f0:	e6e3      	b.n	13ba <Meltdown::executeLoop()+0x82>
    15f2:	eb01 0062 	add.w	r0, r1, r2, asr #1
    15f6:	e7d5      	b.n	15a4 <Meltdown::executeLoop()+0x26c>
    15f8:	eb04 0062 	add.w	r0, r4, r2, asr #1
    15fc:	e7b9      	b.n	1572 <Meltdown::executeLoop()+0x23a>
    15fe:	bf00      	nop
    1600:	1fff9f74 	.word	0x1fff9f74
    1604:	1fff9ed8 	.word	0x1fff9ed8
    1608:	1fff91e0 	.word	0x1fff91e0
    160c:	1fff96f0 	.word	0x1fff96f0
    1610:	1fff9492 	.word	0x1fff9492
    1614:	1fff91de 	.word	0x1fff91de
    1618:	1fff9eb4 	.word	0x1fff9eb4
    161c:	1fff9494 	.word	0x1fff9494

00001620 <Meltdown::executeSerialEvent()>:
	{
		while (Serial1.available() && !MeltdownSerial.GetInputStringComplete())
		{
    1620:	b570      	push	{r4, r5, r6, lr}
    1622:	4d1c      	ldr	r5, [pc, #112]	; (1694 <Meltdown::executeSerialEvent()+0x74>)
    1624:	b088      	sub	sp, #32
    1626:	462e      	mov	r6, r5
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    1628:	f003 f8ba 	bl	47a0 <serial_available>
			// get the new byte:
    162c:	b908      	cbnz	r0, 1632 <Meltdown::executeSerialEvent()+0x12>
				MeltdownSerial.SetInputStringComplete(true);
			}
		}
	}
}

    162e:	b008      	add	sp, #32
    1630:	bd70      	pop	{r4, r5, r6, pc}

	void executeSerialEvent()
	{
		while (Serial1.available() && !MeltdownSerial.GetInputStringComplete())
		{
			// get the new byte:
    1632:	7d2b      	ldrb	r3, [r5, #20]
    1634:	2b00      	cmp	r3, #0
    1636:	d1fa      	bne.n	162e <Meltdown::executeSerialEvent()+0xe>
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
    1638:	f003 f8c2 	bl	47c0 <serial_getchar>
			char inChar = (char)Serial1.read();
			// add it to the inputString:
			MeltdownSerial.AddCharToInputString(inChar);
    163c:	b2c4      	uxtb	r4, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    163e:	4621      	mov	r1, r4
    1640:	4815      	ldr	r0, [pc, #84]	; (1698 <Meltdown::executeSerialEvent()+0x78>)
    1642:	f004 fd67 	bl	6114 <String::append(char)>
			// if the incoming character is a newline, set a flag
			// so the main loop can do something about it:
			if (inChar == '\n')
			{
				MeltdownLogger.Debug(Serial, F("Received input string"), MeltdownSerial.GetInputString());
    1646:	2c0a      	cmp	r4, #10
    1648:	d1ee      	bne.n	1628 <Meltdown::executeSerialEvent()+0x8>
				MeltdownSerial.SetInputStringComplete(true);
			}
    164a:	4914      	ldr	r1, [pc, #80]	; (169c <Meltdown::executeSerialEvent()+0x7c>)
    164c:	a804      	add	r0, sp, #16
    164e:	f004 fcef 	bl	6030 <String::String(__FlashStringHelper const*)>
			}

			String GetInputString() { return m_inputString; }
    1652:	4668      	mov	r0, sp
    1654:	4910      	ldr	r1, [pc, #64]	; (1698 <Meltdown::executeSerialEvent()+0x78>)
    1656:	f004 fcfd 	bl	6054 <String::String(String const&)>
			serial.println(msg);
		}

		void Debug(Stream &serial, String msg, String value)
		{
			if (!m_isDebug) return;
    165a:	4b11      	ldr	r3, [pc, #68]	; (16a0 <Meltdown::executeSerialEvent()+0x80>)
    165c:	781b      	ldrb	r3, [r3, #0]
    165e:	b943      	cbnz	r3, 1672 <Meltdown::executeSerialEvent()+0x52>
    1660:	4668      	mov	r0, sp
    1662:	f004 fc91 	bl	5f88 <String::~String()>
    1666:	a804      	add	r0, sp, #16
    1668:	f004 fc8e 	bl	5f88 <String::~String()>

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
    166c:	2301      	movs	r3, #1
    166e:	7533      	strb	r3, [r6, #20]
    1670:	e7da      	b.n	1628 <Meltdown::executeSerialEvent()+0x8>

			serial.print(msg);
    1672:	a904      	add	r1, sp, #16
    1674:	480b      	ldr	r0, [pc, #44]	; (16a4 <Meltdown::executeSerialEvent()+0x84>)
    1676:	f004 fbb7 	bl	5de8 <Print::print(String const&)>
    167a:	2102      	movs	r1, #2
    167c:	480a      	ldr	r0, [pc, #40]	; (16a8 <Meltdown::executeSerialEvent()+0x88>)
    167e:	f004 f8b3 	bl	57e8 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    1682:	4669      	mov	r1, sp
    1684:	4807      	ldr	r0, [pc, #28]	; (16a4 <Meltdown::executeSerialEvent()+0x84>)
    1686:	f004 fbaf 	bl	5de8 <Print::print(String const&)>
    168a:	4806      	ldr	r0, [pc, #24]	; (16a4 <Meltdown::executeSerialEvent()+0x84>)
    168c:	f004 fbd2 	bl	5e34 <Print::println()>
    1690:	e7e6      	b.n	1660 <Meltdown::executeSerialEvent()+0x40>
    1692:	bf00      	nop
    1694:	1fff9f74 	.word	0x1fff9f74
    1698:	1fff9f78 	.word	0x1fff9f78
    169c:	00008474 	.word	0x00008474
    16a0:	1fffa0ec 	.word	0x1fffa0ec
    16a4:	1fff8734 	.word	0x1fff8734
    16a8:	000082b4 	.word	0x000082b4

000016ac <setup>:
	}
}

void setup()
{
	Meltdown::executeSetup();
    16ac:	b508      	push	{r3, lr}
    16ae:	f640 31b8 	movw	r1, #3000	; 0xbb8
    16b2:	4810      	ldr	r0, [pc, #64]	; (16f4 <setup+0x48>)
    16b4:	f002 fd06 	bl	40c4 <VisualMicroDebug::init(unsigned long)>
    16b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    16bc:	480d      	ldr	r0, [pc, #52]	; (16f4 <setup+0x48>)
    16be:	f002 fcfd 	bl	40bc <VisualMicroDebug::begin(unsigned long)>
    16c2:	2101      	movs	r1, #1
    16c4:	480b      	ldr	r0, [pc, #44]	; (16f4 <setup+0x48>)
    16c6:	f002 fcd3 	bl	4070 <VisualMicroDebug::outPacketStart(bool)>
    16ca:	b150      	cbz	r0, 16e2 <setup+0x36>
    16cc:	2111      	movs	r1, #17
    16ce:	480a      	ldr	r0, [pc, #40]	; (16f8 <setup+0x4c>)
    16d0:	f004 f88a 	bl	57e8 <usb_serial_write>
    16d4:	4807      	ldr	r0, [pc, #28]	; (16f4 <setup+0x48>)
    16d6:	210a      	movs	r1, #10
    16d8:	f002 fc40 	bl	3f5c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    16dc:	4805      	ldr	r0, [pc, #20]	; (16f4 <setup+0x48>)
    16de:	f002 fceb 	bl	40b8 <VisualMicroDebug::outPacketEnd()>
    16e2:	2201      	movs	r2, #1
    16e4:	2100      	movs	r1, #0
    16e6:	4803      	ldr	r0, [pc, #12]	; (16f4 <setup+0x48>)
    16e8:	f002 fd98 	bl	421c <VisualMicroDebug::start(bool, bool)>
}

void loop()
    16ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup()
{
	Meltdown::executeSetup();
}

    16f0:	f7ff bdc4 	b.w	127c <Meltdown::executeSetup()>
    16f4:	1fffa0f0 	.word	0x1fffa0f0
    16f8:	0000848c 	.word	0x0000848c

000016fc <loop>:
void loop()
{
	Meltdown::executeLoop();
    16fc:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16fe:	4c25      	ldr	r4, [pc, #148]	; (1794 <loop+0x98>)
    1700:	b085      	sub	sp, #20
    1702:	6823      	ldr	r3, [r4, #0]
    1704:	9301      	str	r3, [sp, #4]
	return ret;
    1706:	9b01      	ldr	r3, [sp, #4]
    1708:	b923      	cbnz	r3, 1714 <loop+0x18>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    170a:	6823      	ldr	r3, [r4, #0]
    170c:	9302      	str	r3, [sp, #8]
	return ret;
    170e:	9b02      	ldr	r3, [sp, #8]
    1710:	2b01      	cmp	r3, #1
    1712:	d91e      	bls.n	1752 <loop+0x56>
    1714:	4820      	ldr	r0, [pc, #128]	; (1798 <loop+0x9c>)
    1716:	4d21      	ldr	r5, [pc, #132]	; (179c <loop+0xa0>)
    1718:	f002 fc32 	bl	3f80 <VisualMicroDebug::DBG_Millis()>
    171c:	682a      	ldr	r2, [r5, #0]
    171e:	4920      	ldr	r1, [pc, #128]	; (17a0 <loop+0xa4>)
    1720:	4290      	cmp	r0, r2
    1722:	4603      	mov	r3, r0
    1724:	6008      	str	r0, [r1, #0]
    1726:	d318      	bcc.n	175a <loop+0x5e>
    1728:	1a9a      	subs	r2, r3, r2
    172a:	2af9      	cmp	r2, #249	; 0xf9
    172c:	d911      	bls.n	1752 <loop+0x56>
    172e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    1732:	4819      	ldr	r0, [pc, #100]	; (1798 <loop+0x9c>)
    1734:	602b      	str	r3, [r5, #0]
    1736:	f002 fc2d 	bl	3f94 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
    173a:	2101      	movs	r1, #1
    173c:	4816      	ldr	r0, [pc, #88]	; (1798 <loop+0x9c>)
    173e:	f002 fc97 	bl	4070 <VisualMicroDebug::outPacketStart(bool)>
    1742:	b978      	cbnz	r0, 1764 <loop+0x68>
    1744:	4814      	ldr	r0, [pc, #80]	; (1798 <loop+0x9c>)
    1746:	2102      	movs	r1, #2
    1748:	f002 fc08 	bl	3f5c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    174c:	4812      	ldr	r0, [pc, #72]	; (1798 <loop+0x9c>)
    174e:	f002 fc85 	bl	405c <VisualMicroDebug::OnBreakPointEnd()>
}

    1752:	f7ff fdf1 	bl	1338 <Meltdown::executeLoop()>
void serialEvent1()
    1756:	b005      	add	sp, #20
    1758:	bd30      	pop	{r4, r5, pc}
	Meltdown::executeSetup();
}

void loop()
{
	Meltdown::executeLoop();
    175a:	602b      	str	r3, [r5, #0]
}

    175c:	f7ff fdec 	bl	1338 <Meltdown::executeLoop()>
void serialEvent1()
    1760:	b005      	add	sp, #20
    1762:	bd30      	pop	{r4, r5, pc}
	Meltdown::executeSetup();
}

void loop()
{
	Meltdown::executeLoop();
    1764:	2101      	movs	r1, #1
    1766:	480c      	ldr	r0, [pc, #48]	; (1798 <loop+0x9c>)
    1768:	f002 fc26 	bl	3fb8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
    176c:	2101      	movs	r1, #1
    176e:	480d      	ldr	r0, [pc, #52]	; (17a4 <loop+0xa8>)
    1770:	f004 f83a 	bl	57e8 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1774:	6823      	ldr	r3, [r4, #0]
    1776:	9303      	str	r3, [sp, #12]
	return ret;
    1778:	9903      	ldr	r1, [sp, #12]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    177a:	480b      	ldr	r0, [pc, #44]	; (17a8 <loop+0xac>)
    177c:	2300      	movs	r3, #0
    177e:	220a      	movs	r2, #10
    1780:	f004 fb68 	bl	5e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1784:	4804      	ldr	r0, [pc, #16]	; (1798 <loop+0x9c>)
    1786:	f002 fc5b 	bl	4040 <VisualMicroDebug::OnBreakPointPrintEnd()>
    178a:	4803      	ldr	r0, [pc, #12]	; (1798 <loop+0x9c>)
    178c:	f002 fc94 	bl	40b8 <VisualMicroDebug::outPacketEnd()>
    1790:	e7d8      	b.n	1744 <loop+0x48>
    1792:	bf00      	nop
    1794:	1fffa138 	.word	0x1fffa138
    1798:	1fffa0f0 	.word	0x1fffa0f0
    179c:	1fff96ec 	.word	0x1fff96ec
    17a0:	1fff9e80 	.word	0x1fff9e80
    17a4:	000084a0 	.word	0x000084a0
    17a8:	1fff8734 	.word	0x1fff8734

000017ac <serialEvent1()>:

void serialEvent1()
{
	Meltdown::executeSerialEvent();
    17ac:	f7ff bf38 	b.w	1620 <Meltdown::executeSerialEvent()>

000017b0 <OctoWS2811::isr()>:
	dma3.attachInterrupt(isr);
	//pinMode(9, OUTPUT); // testing: oscilloscope trigger
}

void OctoWS2811::isr(void)
{
    17b0:	b508      	push	{r3, lr}
    17b2:	4a06      	ldr	r2, [pc, #24]	; (17cc <OctoWS2811::isr()+0x1c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    17b4:	4b06      	ldr	r3, [pc, #24]	; (17d0 <OctoWS2811::isr()+0x20>)
    17b6:	7912      	ldrb	r2, [r2, #4]
    17b8:	701a      	strb	r2, [r3, #0]
	dma3.clearInterrupt();
#if defined(__MKL26Z64__)
	GPIOD_PCOR = 0xFF;
#endif
	//Serial1.print("*");
	update_completed_at = micros();
    17ba:	f002 fe9b 	bl	44f4 <micros>
    17be:	4a05      	ldr	r2, [pc, #20]	; (17d4 <OctoWS2811::isr()+0x24>)
	update_in_progress = 0;
    17c0:	4b05      	ldr	r3, [pc, #20]	; (17d8 <OctoWS2811::isr()+0x28>)
	dma3.clearInterrupt();
#if defined(__MKL26Z64__)
	GPIOD_PCOR = 0xFF;
#endif
	//Serial1.print("*");
	update_completed_at = micros();
    17c2:	6010      	str	r0, [r2, #0]
	update_in_progress = 0;
    17c4:	2200      	movs	r2, #0
    17c6:	701a      	strb	r2, [r3, #0]
    17c8:	bd08      	pop	{r3, pc}
    17ca:	bf00      	nop
    17cc:	1fff9ea4 	.word	0x1fff9ea4
    17d0:	4000801f 	.word	0x4000801f
    17d4:	1fff9e88 	.word	0x1fff9e88
    17d8:	1fff9ea0 	.word	0x1fff9ea0

000017dc <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    17dc:	b510      	push	{r4, lr}
    17de:	4604      	mov	r4, r0
		release();
    17e0:	f004 f96a 	bl	5ab8 <DMAChannel::release()>
	}
    17e4:	4620      	mov	r0, r4
    17e6:	bd10      	pop	{r4, pc}

000017e8 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)>:

static uint8_t ones = 0xFF;
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
    17e8:	b4f0      	push	{r4, r5, r6, r7}
{
	stripLen = numPerStrip;
    17ea:	4f06      	ldr	r7, [pc, #24]	; (1804 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x1c>)
	frameBuffer = frameBuf;
    17ec:	4e06      	ldr	r6, [pc, #24]	; (1808 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x20>)
	drawBuffer = drawBuf;
    17ee:	4d07      	ldr	r5, [pc, #28]	; (180c <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x24>)
	params = config;
    17f0:	4c07      	ldr	r4, [pc, #28]	; (1810 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x28>)
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
{
	stripLen = numPerStrip;
    17f2:	8039      	strh	r1, [r7, #0]

static uint8_t ones = 0xFF;
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
    17f4:	f89d 1010 	ldrb.w	r1, [sp, #16]
{
	stripLen = numPerStrip;
	frameBuffer = frameBuf;
    17f8:	6032      	str	r2, [r6, #0]
	drawBuffer = drawBuf;
    17fa:	602b      	str	r3, [r5, #0]
	params = config;
    17fc:	7021      	strb	r1, [r4, #0]
}
    17fe:	bcf0      	pop	{r4, r5, r6, r7}
    1800:	4770      	bx	lr
    1802:	bf00      	nop
    1804:	1fff9e90 	.word	0x1fff9e90
    1808:	1fff9e8c 	.word	0x1fff9e8c
    180c:	1fff9e9c 	.word	0x1fff9e9c
    1810:	1fff9e84 	.word	0x1fff9e84

00001814 <OctoWS2811::begin()>:
	params = config;
	begin();
}

void OctoWS2811::begin(void)
{
    1814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    1816:	4ba2      	ldr	r3, [pc, #648]	; (1aa0 <OctoWS2811::begin()+0x28c>)

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    1818:	4ea2      	ldr	r6, [pc, #648]	; (1aa4 <OctoWS2811::begin()+0x290>)
}

void OctoWS2811::begin(void)
{
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    181a:	881c      	ldrh	r4, [r3, #0]

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    181c:	6830      	ldr	r0, [r6, #0]
}

void OctoWS2811::begin(void)
{
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    181e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1822:	00e4      	lsls	r4, r4, #3

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    1824:	4622      	mov	r2, r4
    1826:	2100      	movs	r1, #0
    1828:	f005 fdea 	bl	7400 <memset>
	if (drawBuffer) {
    182c:	4b9e      	ldr	r3, [pc, #632]	; (1aa8 <OctoWS2811::begin()+0x294>)
    182e:	6818      	ldr	r0, [r3, #0]
    1830:	2800      	cmp	r0, #0
    1832:	f000 8103 	beq.w	1a3c <OctoWS2811::begin()+0x228>
		memset(drawBuffer, 0, bufsize);
    1836:	4622      	mov	r2, r4
    1838:	2100      	movs	r1, #0
    183a:	f005 fde1 	bl	7400 <memset>
	} else {
		drawBuffer = frameBuffer;
	}

	// configure the 8 output pins
	GPIOD_PCOR = 0xFF;
    183e:	4b9b      	ldr	r3, [pc, #620]	; (1aac <OctoWS2811::begin()+0x298>)
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
    1840:	4f9b      	ldr	r7, [pc, #620]	; (1ab0 <OctoWS2811::begin()+0x29c>)
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
    1842:	4d9c      	ldr	r5, [pc, #624]	; (1ab4 <OctoWS2811::begin()+0x2a0>)
	} else {
		drawBuffer = frameBuffer;
	}

	// configure the 8 output pins
	GPIOD_PCOR = 0xFF;
    1844:	22ff      	movs	r2, #255	; 0xff
    1846:	601a      	str	r2, [r3, #0]
	pinMode(2, OUTPUT);	// strip #1
    1848:	2101      	movs	r1, #1
    184a:	2002      	movs	r0, #2
    184c:	f002 fe4c 	bl	44e8 <pinMode>
	pinMode(14, OUTPUT);	// strip #2
    1850:	2101      	movs	r1, #1
    1852:	200e      	movs	r0, #14
    1854:	f002 fe48 	bl	44e8 <pinMode>
	pinMode(7, OUTPUT);	// strip #3
    1858:	2101      	movs	r1, #1
    185a:	2007      	movs	r0, #7
    185c:	f002 fe44 	bl	44e8 <pinMode>
	pinMode(8, OUTPUT);	// strip #4
    1860:	2101      	movs	r1, #1
    1862:	2008      	movs	r0, #8
    1864:	f002 fe40 	bl	44e8 <pinMode>
	pinMode(6, OUTPUT);	// strip #5
    1868:	2101      	movs	r1, #1
    186a:	2006      	movs	r0, #6
    186c:	f002 fe3c 	bl	44e8 <pinMode>
	pinMode(20, OUTPUT);	// strip #6
    1870:	2101      	movs	r1, #1
    1872:	2014      	movs	r0, #20
    1874:	f002 fe38 	bl	44e8 <pinMode>
	pinMode(21, OUTPUT);	// strip #7
    1878:	2101      	movs	r1, #1
    187a:	2015      	movs	r0, #21
    187c:	f002 fe34 	bl	44e8 <pinMode>
	pinMode(5, OUTPUT);	// strip #8
    1880:	2005      	movs	r0, #5
    1882:	2101      	movs	r1, #1
    1884:	f002 fe30 	bl	44e8 <pinMode>

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1888:	4b8b      	ldr	r3, [pc, #556]	; (1ab8 <OctoWS2811::begin()+0x2a4>)
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    188a:	4a8c      	ldr	r2, [pc, #560]	; (1abc <OctoWS2811::begin()+0x2a8>)
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    188c:	781b      	ldrb	r3, [r3, #0]

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
    188e:	498c      	ldr	r1, [pc, #560]	; (1ac0 <OctoWS2811::begin()+0x2ac>)
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
    1890:	f8df c258 	ldr.w	ip, [pc, #600]	; 1aec <OctoWS2811::begin()+0x2d8>
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1898:	2b10      	cmp	r3, #16
#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    189a:	f04f 0e08 	mov.w	lr, #8
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    189e:	f04f 0300 	mov.w	r3, #0
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    18a2:	bf0c      	ite	eq
    18a4:	2077      	moveq	r0, #119	; 0x77
    18a6:	203b      	movne	r0, #59	; 0x3b
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    18a8:	6013      	str	r3, [r2, #0]
	FTM2_CNT = 0;
    18aa:	603b      	str	r3, [r7, #0]
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
    18ac:	6008      	str	r0, [r1, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    18ae:	f8c2 e000 	str.w	lr, [r2]
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    18b2:	f5a1 21db 	sub.w	r1, r1, #448512	; 0x6d800
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    18b6:	bf0c      	ite	eq
    18b8:	f04f 0e1c 	moveq.w	lr, #28
    18bc:	f04f 0e0e 	movne.w	lr, #14
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
    18c0:	f04f 0269 	mov.w	r2, #105	; 0x69
    18c4:	f8cc 2000 	str.w	r2, [ip]
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
    18c8:	487e      	ldr	r0, [pc, #504]	; (1ac4 <OctoWS2811::begin()+0x2b0>)
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
    18ca:	602a      	str	r2, [r5, #0]
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    18cc:	f5a1 61f8 	sub.w	r1, r1, #1984	; 0x7c0
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
    18d0:	f8c7 e00c 	str.w	lr, [r7, #12]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    18d4:	f8df e208 	ldr.w	lr, [pc, #520]	; 1ae0 <OctoWS2811::begin()+0x2cc>
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    18d8:	4a7b      	ldr	r2, [pc, #492]	; (1ac8 <OctoWS2811::begin()+0x2b4>)
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    18da:	bf0c      	ite	eq
    18dc:	2552      	moveq	r5, #82	; 0x52
    18de:	2529      	movne	r5, #41	; 0x29
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
    18e0:	6005      	str	r5, [r0, #0]
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    18e2:	600a      	str	r2, [r1, #0]
    18e4:	f8de 2000 	ldr.w	r2, [lr]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    18e8:	4d78      	ldr	r5, [pc, #480]	; (1acc <OctoWS2811::begin()+0x2b8>)
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
    18ea:	71d3      	strb	r3, [r2, #7]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    18ec:	2102      	movs	r1, #2
    18ee:	7191      	strb	r1, [r2, #6]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    18f0:	4877      	ldr	r0, [pc, #476]	; (1ad0 <OctoWS2811::begin()+0x2bc>)
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    18f2:	88d1      	ldrh	r1, [r2, #6]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    18f4:	6010      	str	r0, [r2, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    18f6:	6115      	str	r5, [r2, #16]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    18f8:	8bd5      	ldrh	r5, [r2, #30]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    18fa:	8093      	strh	r3, [r2, #4]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    18fc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
    1900:	f021 0107 	bic.w	r1, r1, #7
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->SLAST = 0;
    1904:	60d3      	str	r3, [r2, #12]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1906:	8293      	strh	r3, [r2, #20]
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    1908:	6193      	str	r3, [r2, #24]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    190a:	042f      	lsls	r7, r5, #16
			TCD->NBYTES = 2;
			if (TCD->SOFF != 0) TCD->SOFF = 2;
			if (TCD->DOFF != 0) TCD->DOFF = 2;
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
    190c:	f04f 0301 	mov.w	r3, #1
    1910:	6093      	str	r3, [r2, #8]
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1912:	80d1      	strh	r1, [r2, #6]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1914:	f100 8095 	bmi.w	1a42 <OctoWS2811::begin()+0x22e>
			if (len > 32767) return;
    1918:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    191c:	b2a1      	uxth	r1, r4
    191e:	f2c0 808a 	blt.w	1a36 <OctoWS2811::begin()+0x222>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1922:	8b95      	ldrh	r5, [r2, #28]
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1924:	4f6b      	ldr	r7, [pc, #428]	; (1ad4 <OctoWS2811::begin()+0x2c0>)
	dma1.transferSize(1);
	dma1.transferCount(bufsize);
	dma1.disableOnCompletion();

	// DMA channel #2 writes the pixel data at 23% of the cycle
	dma2.sourceBuffer((uint8_t *)frameBuffer, bufsize);
    1926:	f8d6 c000 	ldr.w	ip, [r6]
    192a:	683b      	ldr	r3, [r7, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    192c:	4e6a      	ldr	r6, [pc, #424]	; (1ad8 <OctoWS2811::begin()+0x2c4>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    192e:	b2ad      	uxth	r5, r5
    1930:	f045 0508 	orr.w	r5, r5, #8
    1934:	8395      	strh	r5, [r2, #28]
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    1936:	2500      	movs	r5, #0
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    1938:	2202      	movs	r2, #2
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    193a:	71dd      	strb	r5, [r3, #7]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    193c:	719a      	strb	r2, [r3, #6]
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    193e:	f8c3 c000 	str.w	ip, [r3]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1942:	88da      	ldrh	r2, [r3, #6]
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
		TCD->BITER = len;
    1944:	83d9      	strh	r1, [r3, #30]
		TCD->CITER = len;
    1946:	82d9      	strh	r1, [r3, #22]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1948:	611e      	str	r6, [r3, #16]
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
    194a:	4266      	negs	r6, r4
    194c:	60de      	str	r6, [r3, #12]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    194e:	8bde      	ldrh	r6, [r3, #30]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1950:	829d      	strh	r5, [r3, #20]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    1956:	619d      	str	r5, [r3, #24]
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    1958:	2501      	movs	r5, #1
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    195a:	f022 0207 	bic.w	r2, r2, #7
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    195e:	809d      	strh	r5, [r3, #4]
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
    1960:	609d      	str	r5, [r3, #8]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1962:	0435      	lsls	r5, r6, #16
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1964:	80da      	strh	r2, [r3, #6]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1966:	f100 8089 	bmi.w	1a7c <OctoWS2811::begin()+0x268>
			if (len > 32767) return;
    196a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    196e:	db5f      	blt.n	1a30 <OctoWS2811::begin()+0x21c>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1970:	8b9a      	ldrh	r2, [r3, #28]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1972:	4d5a      	ldr	r5, [pc, #360]	; (1adc <OctoWS2811::begin()+0x2c8>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1974:	b292      	uxth	r2, r2
    1976:	f042 0208 	orr.w	r2, r2, #8
    197a:	839a      	strh	r2, [r3, #28]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    197c:	682b      	ldr	r3, [r5, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    197e:	4a4b      	ldr	r2, [pc, #300]	; (1aac <OctoWS2811::begin()+0x298>)

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1980:	6018      	str	r0, [r3, #0]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    1982:	2002      	movs	r0, #2
    1984:	7198      	strb	r0, [r3, #6]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    1986:	2000      	movs	r0, #0
		TCD->ATTR_SRC = 0;
    1988:	71d8      	strb	r0, [r3, #7]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    198a:	611a      	str	r2, [r3, #16]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    198c:	88da      	ldrh	r2, [r3, #6]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    198e:	8098      	strh	r0, [r3, #4]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1994:	f022 0207 	bic.w	r2, r2, #7
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->SLAST = 0;
    1998:	60d8      	str	r0, [r3, #12]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    199a:	8298      	strh	r0, [r3, #20]
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    199c:	6198      	str	r0, [r3, #24]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    199e:	8bd8      	ldrh	r0, [r3, #30]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    19a0:	80da      	strh	r2, [r3, #6]
			TCD->NBYTES = 2;
			if (TCD->SOFF != 0) TCD->SOFF = 2;
			if (TCD->DOFF != 0) TCD->DOFF = 2;
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
    19a2:	2201      	movs	r2, #1
    19a4:	609a      	str	r2, [r3, #8]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    19a6:	0402      	lsls	r2, r0, #16
    19a8:	d45a      	bmi.n	1a60 <OctoWS2811::begin()+0x24c>
			if (len > 32767) return;
    19aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    19ae:	db3c      	blt.n	1a2a <OctoWS2811::begin()+0x216>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    19b0:	8b9e      	ldrh	r6, [r3, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    19b2:	f89e 4004 	ldrb.w	r4, [lr, #4]
#elif defined(__MK20DX256__)
	// route the edge detect interrupts to trigger the 3 channels
	dma1.triggerAtHardwareEvent(DMAMUX_SOURCE_PORTB);
	dma2.triggerAtHardwareEvent(DMAMUX_SOURCE_FTM2_CH0);
	dma3.triggerAtHardwareEvent(DMAMUX_SOURCE_FTM2_CH1);
	DMAPriorityOrder(dma3, dma2, dma1);
    19b6:	4a4a      	ldr	r2, [pc, #296]	; (1ae0 <OctoWS2811::begin()+0x2cc>)
    19b8:	4946      	ldr	r1, [pc, #280]	; (1ad4 <OctoWS2811::begin()+0x2c0>)
    19ba:	4848      	ldr	r0, [pc, #288]	; (1adc <OctoWS2811::begin()+0x2c8>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    19bc:	b2b6      	uxth	r6, r6
    19be:	f046 0608 	orr.w	r6, r6, #8
    19c2:	839e      	strh	r6, [r3, #28]
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    19c4:	8b9e      	ldrh	r6, [r3, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    19c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    19ca:	b2b6      	uxth	r6, r6
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    19cc:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    19d0:	f046 0602 	orr.w	r6, r6, #2
    19d4:	839e      	strh	r6, [r3, #28]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    19d6:	2600      	movs	r6, #0
		*mux = (source & 63) | DMAMUX_ENABLE;
    19d8:	23b2      	movs	r3, #178	; 0xb2

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    19da:	7026      	strb	r6, [r4, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    19dc:	7023      	strb	r3, [r4, #0]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    19de:	793b      	ldrb	r3, [r7, #4]
    19e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    19e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    19e8:	24a2      	movs	r4, #162	; 0xa2

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    19ea:	701e      	strb	r6, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    19ec:	701c      	strb	r4, [r3, #0]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    19ee:	792b      	ldrb	r3, [r5, #4]
    19f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    19f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    19f8:	24a3      	movs	r4, #163	; 0xa3

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    19fa:	701e      	strb	r6, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    19fc:	701c      	strb	r4, [r3, #0]
    19fe:	f004 f875 	bl	5aec <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)>
    1a02:	792a      	ldrb	r2, [r5, #4]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1a04:	4837      	ldr	r0, [pc, #220]	; (1ae4 <OctoWS2811::begin()+0x2d0>)
    1a06:	4d38      	ldr	r5, [pc, #224]	; (1ae8 <OctoWS2811::begin()+0x2d4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1a08:	1153      	asrs	r3, r2, #5
    1a0a:	009b      	lsls	r3, r3, #2
    1a0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1a10:	f102 0410 	add.w	r4, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1a14:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1a18:	f002 021f 	and.w	r2, r2, #31
    1a1c:	2101      	movs	r1, #1
    1a1e:	fa01 f202 	lsl.w	r2, r1, r2

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1a22:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    1a2a:	83d9      	strh	r1, [r3, #30]
			TCD->CITER = len;
    1a2c:	82d9      	strh	r1, [r3, #22]
    1a2e:	e7bf      	b.n	19b0 <OctoWS2811::begin()+0x19c>

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    1a30:	83d9      	strh	r1, [r3, #30]
			TCD->CITER = len;
    1a32:	82d9      	strh	r1, [r3, #22]
    1a34:	e79c      	b.n	1970 <OctoWS2811::begin()+0x15c>

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    1a36:	83d1      	strh	r1, [r2, #30]
			TCD->CITER = len;
    1a38:	82d1      	strh	r1, [r2, #22]
    1a3a:	e772      	b.n	1922 <OctoWS2811::begin()+0x10e>
	// set up the buffers
	memset(frameBuffer, 0, bufsize);
	if (drawBuffer) {
		memset(drawBuffer, 0, bufsize);
	} else {
		drawBuffer = frameBuffer;
    1a3c:	6832      	ldr	r2, [r6, #0]
    1a3e:	601a      	str	r2, [r3, #0]
    1a40:	e6fd      	b.n	183e <OctoWS2811::begin()+0x2a>
		} else {
			if (len > 511) return;
    1a42:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1a46:	da28      	bge.n	1a9a <OctoWS2811::begin()+0x286>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1a48:	8bd3      	ldrh	r3, [r2, #30]
    1a4a:	b2a1      	uxth	r1, r4
    1a4c:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    1a50:	430b      	orrs	r3, r1
    1a52:	83d3      	strh	r3, [r2, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1a54:	8ad3      	ldrh	r3, [r2, #22]
    1a56:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    1a5a:	430b      	orrs	r3, r1
    1a5c:	82d3      	strh	r3, [r2, #22]
    1a5e:	e760      	b.n	1922 <OctoWS2811::begin()+0x10e>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    1a60:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1a64:	daa4      	bge.n	19b0 <OctoWS2811::begin()+0x19c>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1a66:	8bda      	ldrh	r2, [r3, #30]
    1a68:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a6c:	430a      	orrs	r2, r1
    1a6e:	83da      	strh	r2, [r3, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1a70:	8ada      	ldrh	r2, [r3, #22]
    1a72:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a76:	4311      	orrs	r1, r2
    1a78:	82d9      	strh	r1, [r3, #22]
    1a7a:	e799      	b.n	19b0 <OctoWS2811::begin()+0x19c>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    1a7c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1a80:	f6bf af76 	bge.w	1970 <OctoWS2811::begin()+0x15c>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1a84:	8bda      	ldrh	r2, [r3, #30]
    1a86:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a8a:	430a      	orrs	r2, r1
    1a8c:	83da      	strh	r2, [r3, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1a8e:	8ada      	ldrh	r2, [r3, #22]
    1a90:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a94:	430a      	orrs	r2, r1
    1a96:	82da      	strh	r2, [r3, #22]
    1a98:	e76a      	b.n	1970 <OctoWS2811::begin()+0x15c>
    1a9a:	b2a1      	uxth	r1, r4
    1a9c:	e741      	b.n	1922 <OctoWS2811::begin()+0x10e>
    1a9e:	bf00      	nop
    1aa0:	1fff9e90 	.word	0x1fff9e90
    1aa4:	1fff9e8c 	.word	0x1fff9e8c
    1aa8:	1fff9e9c 	.word	0x1fff9e9c
    1aac:	400ff0c8 	.word	0x400ff0c8
    1ab0:	400b8004 	.word	0x400b8004
    1ab4:	400b8014 	.word	0x400b8014
    1ab8:	1fff9e84 	.word	0x1fff9e84
    1abc:	400b8000 	.word	0x400b8000
    1ac0:	400b8008 	.word	0x400b8008
    1ac4:	400b8018 	.word	0x400b8018
    1ac8:	00010300 	.word	0x00010300
    1acc:	400ff0c4 	.word	0x400ff0c4
    1ad0:	1fff8724 	.word	0x1fff8724
    1ad4:	1fff9eac 	.word	0x1fff9eac
    1ad8:	400ff0c0 	.word	0x400ff0c0
    1adc:	1fff9ea4 	.word	0x1fff9ea4
    1ae0:	1fff9e94 	.word	0x1fff9e94
    1ae4:	1fff8200 	.word	0x1fff8200
    1ae8:	000017b1 	.word	0x000017b1
    1aec:	400b800c 	.word	0x400b800c

00001af0 <OctoWS2811::show()>:
	if (micros() - update_completed_at < 300) return 1;
	return 0;
}

void OctoWS2811::show(void)
{
    1af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1af2:	4c2c      	ldr	r4, [pc, #176]	; (1ba4 <OctoWS2811::show()+0xb4>)
	// wait for any prior DMA operation
	//Serial1.print("1");
	while (update_in_progress) ;
    1af4:	7823      	ldrb	r3, [r4, #0]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d1fc      	bne.n	1af4 <OctoWS2811::show()+0x4>
	//Serial1.print("2");
	// it's ok to copy the drawing buffer to the frame buffer
	// during the 50us WS2811 reset time
	if (drawBuffer != frameBuffer) {
    1afa:	4a2b      	ldr	r2, [pc, #172]	; (1ba8 <OctoWS2811::show()+0xb8>)
    1afc:	4b2b      	ldr	r3, [pc, #172]	; (1bac <OctoWS2811::show()+0xbc>)
    1afe:	6811      	ldr	r1, [r2, #0]
    1b00:	6818      	ldr	r0, [r3, #0]
    1b02:	4281      	cmp	r1, r0
    1b04:	d006      	beq.n	1b14 <OctoWS2811::show()+0x24>
		// TODO: this could be faster with DMA, especially if the
		// buffers are 32 bit aligned... but does it matter?
		memcpy(frameBuffer, drawBuffer, stripLen * 24);
    1b06:	4b2a      	ldr	r3, [pc, #168]	; (1bb0 <OctoWS2811::show()+0xc0>)
    1b08:	881a      	ldrh	r2, [r3, #0]
    1b0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1b0e:	00d2      	lsls	r2, r2, #3
    1b10:	f002 fbb2 	bl	4278 <memcpy>
    1b14:	4d27      	ldr	r5, [pc, #156]	; (1bb4 <OctoWS2811::show()+0xc4>)
	}
	// wait for WS2811 reset
	while (micros() - update_completed_at < 300) ;
    1b16:	f002 fced 	bl	44f4 <micros>
    1b1a:	682b      	ldr	r3, [r5, #0]
    1b1c:	1ac0      	subs	r0, r0, r3
    1b1e:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
    1b22:	d3f8      	bcc.n	1b16 <OctoWS2811::show()+0x26>
	dma3.enable();
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM1 timer
	//digitalWriteFast(9, LOW);

#elif defined(__MK20DX256__)
	FTM2_C0SC = 0x28;
    1b24:	4824      	ldr	r0, [pc, #144]	; (1bb8 <OctoWS2811::show()+0xc8>)
	FTM2_C1SC = 0x28;
    1b26:	4925      	ldr	r1, [pc, #148]	; (1bbc <OctoWS2811::show()+0xcc>)
	uint32_t cv = FTM2_C0V;
    1b28:	4a25      	ldr	r2, [pc, #148]	; (1bc0 <OctoWS2811::show()+0xd0>)
	dma3.enable();
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM1 timer
	//digitalWriteFast(9, LOW);

#elif defined(__MK20DX256__)
	FTM2_C0SC = 0x28;
    1b2a:	2328      	movs	r3, #40	; 0x28
    1b2c:	6003      	str	r3, [r0, #0]
	FTM2_C1SC = 0x28;
    1b2e:	600b      	str	r3, [r1, #0]
	uint32_t cv = FTM2_C0V;
    1b30:	6813      	ldr	r3, [r2, #0]
	noInterrupts();
    1b32:	b672      	cpsid	i
	// CAUTION: this code is timing critical.
	while (FTM2_CNT <= cv) ;
    1b34:	3910      	subs	r1, #16
    1b36:	680a      	ldr	r2, [r1, #0]
    1b38:	4293      	cmp	r3, r2
    1b3a:	d2fc      	bcs.n	1b36 <OctoWS2811::show()+0x46>
	while (FTM2_CNT > cv) ; // wait for beginning of an 800 kHz cycle
    1b3c:	4921      	ldr	r1, [pc, #132]	; (1bc4 <OctoWS2811::show()+0xd4>)
    1b3e:	680a      	ldr	r2, [r1, #0]
    1b40:	4293      	cmp	r3, r2
    1b42:	d3fc      	bcc.n	1b3e <OctoWS2811::show()+0x4e>
	while (FTM2_CNT < cv) ;
    1b44:	481f      	ldr	r0, [pc, #124]	; (1bc4 <OctoWS2811::show()+0xd4>)
    1b46:	6802      	ldr	r2, [r0, #0]
    1b48:	491e      	ldr	r1, [pc, #120]	; (1bc4 <OctoWS2811::show()+0xd4>)
    1b4a:	4293      	cmp	r3, r2
    1b4c:	d8fb      	bhi.n	1b46 <OctoWS2811::show()+0x56>
    1b4e:	4e1e      	ldr	r6, [pc, #120]	; (1bc8 <OctoWS2811::show()+0xd8>)
    1b50:	4d1e      	ldr	r5, [pc, #120]	; (1bcc <OctoWS2811::show()+0xdc>)
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
    1b52:	481f      	ldr	r0, [pc, #124]	; (1bd0 <OctoWS2811::show()+0xe0>)
    1b54:	7937      	ldrb	r7, [r6, #4]
    1b56:	792e      	ldrb	r6, [r5, #4]
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1b58:	4b17      	ldr	r3, [pc, #92]	; (1bb8 <OctoWS2811::show()+0xc8>)
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
    1b5a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1bd8 <OctoWS2811::show()+0xe8>
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x28;
    1b5e:	4a17      	ldr	r2, [pc, #92]	; (1bbc <OctoWS2811::show()+0xcc>)
	noInterrupts();
	// CAUTION: this code is timing critical.
	while (FTM2_CNT <= cv) ;
	while (FTM2_CNT > cv) ; // wait for beginning of an 800 kHz cycle
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
    1b60:	2500      	movs	r5, #0
    1b62:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    1b64:	600d      	str	r5, [r1, #0]
	update_in_progress = 1;
    1b66:	2101      	movs	r1, #1
    1b68:	7021      	strb	r1, [r4, #0]
    1b6a:	4d1a      	ldr	r5, [pc, #104]	; (1bd4 <OctoWS2811::show()+0xe4>)
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1b6c:	2428      	movs	r4, #40	; 0x28
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
    1b6e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1b72:	f8ce 1000 	str.w	r1, [lr]
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1b76:	601c      	str	r4, [r3, #0]
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
    1b78:	2169      	movs	r1, #105	; 0x69
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
    1b7a:	f8d3 e000 	ldr.w	lr, [r3]
    1b7e:	792d      	ldrb	r5, [r5, #4]
	FTM2_C0SC = 0x69;
    1b80:	6019      	str	r1, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1b82:	f46f 6e7f 	mvn.w	lr, #4080	; 0xff0
    1b86:	f5a3 232f 	sub.w	r3, r3, #716800	; 0xaf000
    1b8a:	4473      	add	r3, lr
	FTM2_C1SC = 0x28;
    1b8c:	6014      	str	r4, [r2, #0]
	tmp = FTM2_C1SC;
	FTM2_C1SC = 0x69;
	dma1.enable();
	dma2.enable();           // enable all 3 DMA channels
	dma3.enable();
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM2 timer
    1b8e:	2408      	movs	r4, #8
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x28;
	tmp = FTM2_C1SC;
    1b90:	f8d2 e000 	ldr.w	lr, [r2]
	FTM2_C1SC = 0x69;
    1b94:	6011      	str	r1, [r2, #0]
    1b96:	701f      	strb	r7, [r3, #0]
    1b98:	701e      	strb	r6, [r3, #0]
    1b9a:	701d      	strb	r5, [r3, #0]
	dma1.enable();
	dma2.enable();           // enable all 3 DMA channels
	dma3.enable();
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM2 timer
    1b9c:	6004      	str	r4, [r0, #0]
	FTM2_CNT = 0; // writing any value resets counter
	FTM2_SC = FTM_SC_DMA | FTM_SC_CLKS(1) | FTM_SC_PS(0);
	//digitalWriteFast(9, LOW);
#endif
	//Serial1.print("3");
	interrupts();
    1b9e:	b662      	cpsie	i
    1ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba2:	bf00      	nop
    1ba4:	1fff9ea0 	.word	0x1fff9ea0
    1ba8:	1fff9e9c 	.word	0x1fff9e9c
    1bac:	1fff9e8c 	.word	0x1fff9e8c
    1bb0:	1fff9e90 	.word	0x1fff9e90
    1bb4:	1fff9e88 	.word	0x1fff9e88
    1bb8:	400b800c 	.word	0x400b800c
    1bbc:	400b8014 	.word	0x400b8014
    1bc0:	400b8010 	.word	0x400b8010
    1bc4:	400b8004 	.word	0x400b8004
    1bc8:	1fff9e94 	.word	0x1fff9e94
    1bcc:	1fff9eac 	.word	0x1fff9eac
    1bd0:	400b8000 	.word	0x400b8000
    1bd4:	1fff9ea4 	.word	0x1fff9ea4
    1bd8:	4004a0a0 	.word	0x4004a0a0

00001bdc <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE>:
		break;
	  default:
		break;
	}
	return color;
}
    1bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1be0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1c38 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x5c>

uint16_t OctoWS2811::stripLen;
void * OctoWS2811::frameBuffer;
void * OctoWS2811::drawBuffer;
uint8_t OctoWS2811::params;
DMAChannel OctoWS2811::dma1;
    1be4:	4d10      	ldr	r5, [pc, #64]	; (1c28 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x4c>)
    1be6:	4c11      	ldr	r4, [pc, #68]	; (1c2c <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x50>)
    1be8:	4f11      	ldr	r7, [pc, #68]	; (1c30 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x54>)
    1bea:	4e12      	ldr	r6, [pc, #72]	; (1c34 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x58>)
    1bec:	4640      	mov	r0, r8
    1bee:	2100      	movs	r1, #0
    1bf0:	f003 fefe 	bl	59f0 <DMAChannel::begin(bool)>
    1bf4:	462a      	mov	r2, r5
    1bf6:	4621      	mov	r1, r4
    1bf8:	4640      	mov	r0, r8
    1bfa:	f005 f87d 	bl	6cf8 <__aeabi_atexit>
    1bfe:	4638      	mov	r0, r7
    1c00:	2100      	movs	r1, #0
    1c02:	f003 fef5 	bl	59f0 <DMAChannel::begin(bool)>
DMAChannel OctoWS2811::dma2;
    1c06:	462a      	mov	r2, r5
    1c08:	4621      	mov	r1, r4
    1c0a:	4638      	mov	r0, r7
    1c0c:	f005 f874 	bl	6cf8 <__aeabi_atexit>
    1c10:	4630      	mov	r0, r6
    1c12:	2100      	movs	r1, #0
    1c14:	f003 feec 	bl	59f0 <DMAChannel::begin(bool)>
DMAChannel OctoWS2811::dma3;
    1c18:	462a      	mov	r2, r5
    1c1a:	4621      	mov	r1, r4
    1c1c:	4630      	mov	r0, r6
		break;
	  default:
		break;
	}
	return color;
}
    1c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
void * OctoWS2811::frameBuffer;
void * OctoWS2811::drawBuffer;
uint8_t OctoWS2811::params;
DMAChannel OctoWS2811::dma1;
DMAChannel OctoWS2811::dma2;
DMAChannel OctoWS2811::dma3;
    1c22:	f005 b869 	b.w	6cf8 <__aeabi_atexit>
    1c26:	bf00      	nop
    1c28:	1fff8720 	.word	0x1fff8720
    1c2c:	000017dd 	.word	0x000017dd
    1c30:	1fff9eac 	.word	0x1fff9eac
    1c34:	1fff9ea4 	.word	0x1fff9ea4
    1c38:	1fff9e94 	.word	0x1fff9e94

00001c3c <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    1c3c:	b322      	cbz	r2, 1c88 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    1c3e:	2aff      	cmp	r2, #255	; 0xff
    1c40:	d023      	beq.n	1c8a <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    1c42:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1c44:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1c46:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1c48:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1c4a:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    1c4c:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1c4e:	43d2      	mvns	r2, r2
    1c50:	fb06 7605 	mla	r6, r6, r5, r7
    1c54:	b2d2      	uxtb	r2, r2
    1c56:	fb04 6402 	mla	r4, r4, r2, r6
    1c5a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1c5e:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1c60:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1c62:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    1c64:	191f      	adds	r7, r3, r4
    1c66:	fb04 7405 	mla	r4, r4, r5, r7
    1c6a:	fb03 4302 	mla	r3, r3, r2, r4
    1c6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1c72:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1c74:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    1c76:	18f1      	adds	r1, r6, r3
    1c78:	fb03 1505 	mla	r5, r3, r5, r1
    1c7c:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    1c80:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    1c82:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1c86:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    1c88:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c8a:	780b      	ldrb	r3, [r1, #0]
    1c8c:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    1c8e:	784b      	ldrb	r3, [r1, #1]
    1c90:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    1c92:	788b      	ldrb	r3, [r1, #2]
    1c94:	7083      	strb	r3, [r0, #2]
    1c96:	4770      	bx	lr

00001c98 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    1c98:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c9a:	780d      	ldrb	r5, [r1, #0]
    1c9c:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    1c9e:	784d      	ldrb	r5, [r1, #1]
    1ca0:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    1ca2:	7889      	ldrb	r1, [r1, #2]
    1ca4:	7081      	strb	r1, [r0, #2]
    1ca6:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    1ca8:	4611      	mov	r1, r2
    1caa:	461a      	mov	r2, r3
    1cac:	f7ff ffc6 	bl	1c3c <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    1cb0:	4620      	mov	r0, r4
    1cb2:	bd38      	pop	{r3, r4, r5, pc}

00001cb4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    1cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    1cb8:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    1cba:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    1cbe:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    1cc2:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    1cc4:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    1cc8:	d000      	beq.n	1ccc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    1cca:	b9e6      	cbnz	r6, 1d06 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    1ccc:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    1cce:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    1cd0:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    1cd2:	2bff      	cmp	r3, #255	; 0xff
    1cd4:	d012      	beq.n	1cfc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d043      	beq.n	1d62 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    1cda:	3301      	adds	r3, #1
    1cdc:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    1cde:	b11c      	cbz	r4, 1ce8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1ce0:	fb03 4404 	mla	r4, r3, r4, r4
    1ce4:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    1ce8:	b119      	cbz	r1, 1cf2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    1cea:	fb03 1101 	mla	r1, r3, r1, r1
    1cee:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    1cf2:	b11a      	cbz	r2, 1cfc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    1cf4:	fb03 2202 	mla	r2, r3, r2, r2
    1cf8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1cfc:	7004      	strb	r4, [r0, #0]
    1cfe:	7041      	strb	r1, [r0, #1]
    1d00:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    1d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    1d06:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    1d08:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    1d0a:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    1d0e:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    1d10:	d000      	beq.n	1d14 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    1d12:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    1d14:	0112      	lsls	r2, r2, #4
    1d16:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    1d1a:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1d1c:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1d20:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1d24:	f891 8002 	ldrb.w	r8, [r1, #2]
    1d28:	fb04 f606 	mul.w	r6, r4, r6
    1d2c:	1c51      	adds	r1, r2, #1
    1d2e:	fb04 f509 	mul.w	r5, r4, r9
    1d32:	fb04 f407 	mul.w	r4, r4, r7
    1d36:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1d3a:	f3c6 2707 	ubfx	r7, r6, #8, #8
    1d3e:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1d42:	fb01 f60c 	mul.w	r6, r1, ip
    1d46:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1d4a:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1d4e:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1d52:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1d56:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1d5a:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1d5c:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1d5e:	b2d2      	uxtb	r2, r2
    1d60:	e7b7      	b.n	1cd2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    1d62:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    1d64:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    1d66:	461c      	mov	r4, r3
    1d68:	7004      	strb	r4, [r0, #0]
    1d6a:	7041      	strb	r1, [r0, #1]
    1d6c:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    1d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d72:	bf00      	nop

00001d74 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1d76:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1d78:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1d7a:	4604      	mov	r4, r0
    1d7c:	bfcc      	ite	gt
    1d7e:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    1d82:	2500      	movle	r5, #0
    1d84:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1d86:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1d88:	bfd8      	it	le
    1d8a:	4616      	movle	r6, r2

	pLed->init();
    1d8c:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    1d8e:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1d90:	6823      	ldr	r3, [r4, #0]
    1d92:	6062      	str	r2, [r4, #4]
    1d94:	695b      	ldr	r3, [r3, #20]
    1d96:	4a0a      	ldr	r2, [pc, #40]	; (1dc0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    1d98:	6166      	str	r6, [r4, #20]
    1d9a:	4293      	cmp	r3, r2
    1d9c:	d101      	bne.n	1da2 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    1d9e:	4620      	mov	r0, r4
    1da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1da2:	4620      	mov	r0, r4
    1da4:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1da6:	2800      	cmp	r0, #0
    1da8:	d0f9      	beq.n	1d9e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1daa:	4a06      	ldr	r2, [pc, #24]	; (1dc4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    1dac:	4b06      	ldr	r3, [pc, #24]	; (1dc8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    1dae:	6851      	ldr	r1, [r2, #4]
    1db0:	fb93 f0f0 	sdiv	r0, r3, r0
    1db4:	4288      	cmp	r0, r1
    1db6:	bf38      	it	cc
    1db8:	4608      	movcc	r0, r1
    1dba:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1dbc:	4620      	mov	r0, r4
    1dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc0:	00000471 	.word	0x00000471
    1dc4:	1fff9eb4 	.word	0x1fff9eb4
    1dc8:	000f4240 	.word	0x000f4240

00001dcc <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1dcc:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1dce:	4c0f      	ldr	r4, [pc, #60]	; (1e0c <CFastLED::countFPS(int)+0x40>)
    1dd0:	6822      	ldr	r2, [r4, #0]
    1dd2:	1c53      	adds	r3, r2, #1
    1dd4:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1dd6:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1dd8:	6023      	str	r3, [r4, #0]
    1dda:	db13      	blt.n	1e04 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ddc:	4d0c      	ldr	r5, [pc, #48]	; (1e10 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    1dde:	4a0d      	ldr	r2, [pc, #52]	; (1e14 <CFastLED::countFPS(int)+0x48>)
    1de0:	6829      	ldr	r1, [r5, #0]
    1de2:	9101      	str	r1, [sp, #4]
	return ret;
    1de4:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1de6:	682d      	ldr	r5, [r5, #0]
    1de8:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    1dea:	6816      	ldr	r6, [r2, #0]
	return ret;
    1dec:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    1dee:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    1df4:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1df6:	1b89      	subs	r1, r1, r6
    1df8:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    1dfc:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1dfe:	fbb3 f3f1 	udiv	r3, r3, r1
    1e02:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    1e04:	b003      	add	sp, #12
    1e06:	bc70      	pop	{r4, r5, r6}
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop
    1e0c:	1fff9ec8 	.word	0x1fff9ec8
    1e10:	1fffa138 	.word	0x1fffa138
    1e14:	1fff9ed0 	.word	0x1fff9ed0

00001e18 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    1e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e1c:	6843      	ldr	r3, [r0, #4]
    1e1e:	4c2d      	ldr	r4, [pc, #180]	; (1ed4 <CFastLED::show(unsigned char)+0xbc>)
    1e20:	b083      	sub	sp, #12
    1e22:	4606      	mov	r6, r0
    1e24:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1e26:	2b00      	cmp	r3, #0
    1e28:	d14b      	bne.n	1ec2 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    1e2a:	f002 fb63 	bl	44f4 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1e2e:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1e30:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1e32:	b11b      	cbz	r3, 1e3c <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1e34:	4648      	mov	r0, r9
    1e36:	68b1      	ldr	r1, [r6, #8]
    1e38:	4798      	blx	r3
    1e3a:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1e3c:	4b26      	ldr	r3, [pc, #152]	; (1ed8 <CFastLED::show(unsigned char)+0xc0>)
    1e3e:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1e40:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1e42:	2c00      	cmp	r4, #0
    1e44:	d036      	beq.n	1eb4 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1e46:	8873      	ldrh	r3, [r6, #2]
    1e48:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1e4a:	6861      	ldr	r1, [r4, #4]
    1e4c:	6962      	ldr	r2, [r4, #20]
    1e4e:	2b63      	cmp	r3, #99	; 0x63
    1e50:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1e52:	bf98      	it	ls
    1e54:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1e56:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1e5a:	f88d 5004 	strb.w	r5, [sp, #4]
    1e5e:	f88d 5005 	strb.w	r5, [sp, #5]
    1e62:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1e66:	f1b9 0f00 	cmp.w	r9, #0
    1e6a:	d01c      	beq.n	1ea6 <CFastLED::show(unsigned char)+0x8e>
    1e6c:	f104 030b 	add.w	r3, r4, #11
    1e70:	f10d 0e04 	add.w	lr, sp, #4
    1e74:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1e78:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1e7c:	f1bb 0f00 	cmp.w	fp, #0
    1e80:	d00d      	beq.n	1e9e <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    1e82:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1e86:	f10a 0001 	add.w	r0, sl, #1
    1e8a:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1e8e:	f1ba 0f00 	cmp.w	sl, #0
    1e92:	d004      	beq.n	1e9e <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1e94:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1e98:	0c00      	lsrs	r0, r0, #16
    1e9a:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1e9e:	4563      	cmp	r3, ip
    1ea0:	f10e 0e01 	add.w	lr, lr, #1
    1ea4:	d1e8      	bne.n	1e78 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1ea6:	4620      	mov	r0, r4
    1ea8:	ab01      	add	r3, sp, #4
    1eaa:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1eac:	74a7      	strb	r7, [r4, #18]
    1eae:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1eb0:	2c00      	cmp	r4, #0
    1eb2:	d1c8      	bne.n	1e46 <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    1eb4:	4630      	mov	r0, r6
    1eb6:	2119      	movs	r1, #25
    1eb8:	f7ff ff88 	bl	1dcc <CFastLED::countFPS(int)>
}
    1ebc:	b003      	add	sp, #12
    1ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1ec2:	f002 fb17 	bl	44f4 <micros>
    1ec6:	6822      	ldr	r2, [r4, #0]
    1ec8:	6873      	ldr	r3, [r6, #4]
    1eca:	1a80      	subs	r0, r0, r2
    1ecc:	4298      	cmp	r0, r3
    1ece:	d3aa      	bcc.n	1e26 <CFastLED::show(unsigned char)+0xe>
    1ed0:	e7ab      	b.n	1e2a <CFastLED::show(unsigned char)+0x12>
    1ed2:	bf00      	nop
    1ed4:	1fff9ecc 	.word	0x1fff9ecc
    1ed8:	1fff9ec4 	.word	0x1fff9ec4

00001edc <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    1edc:	2000      	movs	r0, #0
    1ede:	4770      	bx	lr

00001ee0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1ee0:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    1ee2:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1ee4:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1ee6:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1eea:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1eec:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    1eee:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    1ef0:	60da      	str	r2, [r3, #12]
    1ef2:	4770      	bx	lr
    1ef4:	1fff9eb4 	.word	0x1fff9eb4

00001ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    1ef8:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    1efa:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    1efc:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    1efe:	7882      	ldrb	r2, [r0, #2]
    1f00:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1f02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    1f06:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1f0a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    1f0e:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    1f10:	0625      	lsls	r5, r4, #24
    1f12:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1f16:	d45f      	bmi.n	1fd8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    1f18:	f004 0540 	and.w	r5, r4, #64	; 0x40
    1f1c:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1f20:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    1f24:	2d00      	cmp	r5, #0
    1f26:	d146      	bne.n	1fb6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1f28:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    1f2c:	2c00      	cmp	r4, #0
    1f2e:	d06c      	beq.n	200a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    1f30:	3355      	adds	r3, #85	; 0x55
    1f32:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    1f34:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    1f36:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    1f38:	2eff      	cmp	r6, #255	; 0xff
    1f3a:	d01c      	beq.n	1f76 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    1f3c:	2e00      	cmp	r6, #0
    1f3e:	d079      	beq.n	2034 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    1f40:	b11c      	cbz	r4, 1f4a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1f42:	fb06 4404 	mla	r4, r6, r4, r4
    1f46:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    1f4a:	b11d      	cbz	r5, 1f54 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    1f4c:	fb06 5505 	mla	r5, r6, r5, r5
    1f50:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    1f54:	b11b      	cbz	r3, 1f5e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    1f56:	fb06 3303 	mla	r3, r6, r3, r3
    1f5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1f5e:	43f0      	mvns	r0, r6
    1f60:	b2c0      	uxtb	r0, r0
    1f62:	fb00 0000 	mla	r0, r0, r0, r0
    1f66:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    1f6a:	4404      	add	r4, r0
            g += brightness_floor;
    1f6c:	4405      	add	r5, r0
            b += brightness_floor;
    1f6e:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    1f70:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    1f72:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    1f74:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    1f76:	2aff      	cmp	r2, #255	; 0xff
    1f78:	d018      	beq.n	1fac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    1f7a:	fb12 f002 	smulbb	r0, r2, r2
    1f7e:	3200      	adds	r2, #0
    1f80:	bf18      	it	ne
    1f82:	2201      	movne	r2, #1
    1f84:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    1f88:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    1f8c:	d056      	beq.n	203c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    1f8e:	b11c      	cbz	r4, 1f98 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1f90:	fb02 4404 	mla	r4, r2, r4, r4
    1f94:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    1f98:	b11d      	cbz	r5, 1fa2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    1f9a:	fb02 5505 	mla	r5, r2, r5, r5
    1f9e:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    1fa2:	b11b      	cbz	r3, 1fac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    1fa4:	fb02 3303 	mla	r3, r2, r3, r3
    1fa8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    1fac:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    1fae:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    1fb0:	708b      	strb	r3, [r1, #2]
}
    1fb2:	bcf0      	pop	{r4, r5, r6, r7}
    1fb4:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    1fb6:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    1fba:	bb5c      	cbnz	r4, 2014 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1fbc:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    1fc0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    1fc4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1fc8:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    1fca:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1fcc:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    1fd0:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1fd2:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    1fd4:	463b      	mov	r3, r7
    1fd6:	e7af      	b.n	1f38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    1fd8:	f004 0740 	and.w	r7, r4, #64	; 0x40
    1fdc:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    1fe0:	b9e7      	cbnz	r7, 201c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    1fe2:	f004 0720 	and.w	r7, r4, #32
    1fe6:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    1fea:	2f00      	cmp	r7, #0
    1fec:	d136      	bne.n	205c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1fee:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    1ff2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1ff6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1ffa:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    1ffe:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    2002:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    2004:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    2006:	b2c3      	uxtb	r3, r0
    2008:	e796      	b.n	1f38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    200a:	43dc      	mvns	r4, r3
    200c:	b2e4      	uxtb	r4, r4
                g = third;
    200e:	461d      	mov	r5, r3
                b = 0;
    2010:	4603      	mov	r3, r0
    2012:	e791      	b.n	1f38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    2014:	2400      	movs	r4, #0
                g = K255 - third;
    2016:	43dd      	mvns	r5, r3
    2018:	b2ed      	uxtb	r5, r5
    201a:	e78d      	b.n	1f38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    201c:	f004 0420 	and.w	r4, r4, #32
    2020:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    2024:	b994      	cbnz	r4, 204c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    2026:	f103 0455 	add.w	r4, r3, #85	; 0x55
    202a:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    202c:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    2030:	b2db      	uxtb	r3, r3
    2032:	e781      	b.n	1f38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    2034:	23ff      	movs	r3, #255	; 0xff
    2036:	461d      	mov	r5, r3
    2038:	461c      	mov	r4, r3
    203a:	e79c      	b.n	1f76 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    203c:	4615      	mov	r5, r2
    203e:	4614      	mov	r4, r2
    2040:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    2042:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    2044:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    2046:	708b      	strb	r3, [r1, #2]
}
    2048:	bcf0      	pop	{r4, r5, r6, r7}
    204a:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    204c:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    2050:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    2052:	2500      	movs	r5, #0
                b = K85 - third;
    2054:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    2058:	b2db      	uxtb	r3, r3
    205a:	e76d      	b.n	1f38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    205c:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    205e:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    2060:	b2c3      	uxtb	r3, r0
    2062:	e769      	b.n	1f38 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00002064 <Meltdown::CMeltdownLED::NullEffect(CRGB*, unsigned short*, int)>:
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }

			void NullEffect(CRGB leds[], uint16_t indexes[], int numLeds) { }
    2064:	4770      	bx	lr
    2066:	bf00      	nop

00002068 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)>:

					FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
				}
			}

			void Rainbow(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    206c:	4681      	mov	r9, r0
    206e:	b083      	sub	sp, #12
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2070:	69c0      	ldr	r0, [r0, #28]

					FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
				}
			}

			void Rainbow(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2072:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    2076:	4698      	mov	r8, r3
    2078:	4615      	mov	r5, r2
    207a:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    207c:	f004 fbdc 	bl	6838 <__aeabi_i2f>
    2080:	492d      	ldr	r1, [pc, #180]	; (2138 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd0>)
    2082:	f004 fc2d 	bl	68e0 <__aeabi_fmul>
    2086:	492d      	ldr	r1, [pc, #180]	; (213c <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd4>)
    2088:	f004 fcde 	bl	6a48 <__aeabi_fdiv>
    208c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    2090:	f004 fb1e 	bl	66d0 <__addsf3>
    2094:	f004 fdea 	bl	6c6c <__aeabi_f2iz>
			}

			void FillRainbow(CRGB leds[], uint16_t indexes[], int numLeds, int initialHue, int deltaHue)
			{
				CHSV hsv;
				hsv.hue = initialHue;
    2098:	f8d9 2014 	ldr.w	r2, [r9, #20]
    209c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    20a0:	4413      	add	r3, r2
    20a2:	f88d 3004 	strb.w	r3, [sp, #4]
				hsv.val = 255;
    20a6:	22ff      	movs	r2, #255	; 0xff
				hsv.sat = 240;
    20a8:	23f0      	movs	r3, #240	; 0xf0
				for (int i = 0; i < numLeds; i++)
    20aa:	f1b8 0f00 	cmp.w	r8, #0

			void FillRainbow(CRGB leds[], uint16_t indexes[], int numLeds, int initialHue, int deltaHue)
			{
				CHSV hsv;
				hsv.hue = initialHue;
				hsv.val = 255;
    20ae:	f88d 2006 	strb.w	r2, [sp, #6]
				hsv.sat = 240;
    20b2:	f88d 3005 	strb.w	r3, [sp, #5]
				for (int i = 0; i < numLeds; i++)
    20b6:	dd12      	ble.n	20de <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x76>
    20b8:	b2c6      	uxtb	r6, r0
    20ba:	46ab      	mov	fp, r5
    20bc:	eb05 0748 	add.w	r7, r5, r8, lsl #1
				{
					leds[indexes[i]] = hsv;
    20c0:	f83b 1b02 	ldrh.w	r1, [fp], #2
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    20c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    20c8:	4421      	add	r1, r4
    20ca:	a801      	add	r0, sp, #4
    20cc:	f7ff ff14 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
					hsv.hue += deltaHue;
    20d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			{
				CHSV hsv;
				hsv.hue = initialHue;
				hsv.val = 255;
				hsv.sat = 240;
				for (int i = 0; i < numLeds; i++)
    20d4:	45bb      	cmp	fp, r7
				{
					leds[indexes[i]] = hsv;
					hsv.hue += deltaHue;
    20d6:	4433      	add	r3, r6
    20d8:	f88d 3004 	strb.w	r3, [sp, #4]
			{
				CHSV hsv;
				hsv.hue = initialHue;
				hsv.val = 255;
				hsv.sat = 240;
				for (int i = 0; i < numLeds; i++)
    20dc:	d1f0      	bne.n	20c0 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x58>

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    20de:	2301      	movs	r3, #1
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    20e0:	f1ba 0f00 	cmp.w	sl, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    20e4:	f8c9 300c 	str.w	r3, [r9, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    20e8:	db1e      	blt.n	2128 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc0>
				int deltaHue = GetAnalogPattern(1, 15);
				FillRainbow(leds, indexes, numLeds, gHue + gPos, deltaHue);

				// Modes
				SetNumModes(1);
				switch (GetModeNumber(modeOffset))
    20ea:	f8d9 2008 	ldr.w	r2, [r9, #8]
    20ee:	4b14      	ldr	r3, [pc, #80]	; (2140 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd8>)
    20f0:	4492      	add	sl, r2
    20f2:	ea0a 0303 	and.w	r3, sl, r3
    20f6:	2b00      	cmp	r3, #0
    20f8:	db19      	blt.n	212e <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc6>
    20fa:	2b01      	cmp	r3, #1
    20fc:	d114      	bne.n	2128 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc0>

			int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

			void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
			{
				for (int i = 0; i < numLeds; i++)
    20fe:	f1b8 0f00 	cmp.w	r8, #0
    2102:	dd11      	ble.n	2128 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc0>
    2104:	eb05 0848 	add.w	r8, r5, r8, lsl #1
				{
					leds[indexes[i]] = -leds[indexes[i]];
    2108:	f835 3b02 	ldrh.w	r3, [r5], #2
    210c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2110:	18e2      	adds	r2, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2112:	5ce6      	ldrb	r6, [r4, r3]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    2114:	7850      	ldrb	r0, [r2, #1]
        retval.b = 255 - b;
    2116:	7891      	ldrb	r1, [r2, #2]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    2118:	43c0      	mvns	r0, r0
        retval.b = 255 - b;
    211a:	43c9      	mvns	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    211c:	43f6      	mvns	r6, r6

			int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

			void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
			{
				for (int i = 0; i < numLeds; i++)
    211e:	45a8      	cmp	r8, r5
    2120:	54e6      	strb	r6, [r4, r3]
        g = rhs.g;
    2122:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    2124:	7091      	strb	r1, [r2, #2]
    2126:	d1ef      	bne.n	2108 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xa0>
				case 1:
					// Invert rainbox colors.
					Invert(leds, indexes, numLeds);
					break;
				}
			}
    2128:	b003      	add	sp, #12
    212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int deltaHue = GetAnalogPattern(1, 15);
				FillRainbow(leds, indexes, numLeds, gHue + gPos, deltaHue);

				// Modes
				SetNumModes(1);
				switch (GetModeNumber(modeOffset))
    212e:	3b01      	subs	r3, #1
    2130:	f063 0301 	orn	r3, r3, #1
    2134:	3301      	adds	r3, #1
    2136:	e7e0      	b.n	20fa <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x92>
    2138:	41600000 	.word	0x41600000
    213c:	447fc000 	.word	0x447fc000
    2140:	80000001 	.word	0x80000001

00002144 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)>:

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }

			void NullEffect(CRGB leds[], uint16_t indexes[], int numLeds) { }

			void GlitterEffect(CRGB leds[], uint16_t indexes[], int numLeds)
    2144:	b5f0      	push	{r4, r5, r6, r7, lr}
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    2146:	6a04      	ldr	r4, [r0, #32]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2148:	4d1b      	ldr	r5, [pc, #108]	; (21b8 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x74>)
    214a:	2065      	movs	r0, #101	; 0x65
    214c:	fb00 f404 	mul.w	r4, r0, r4
    2150:	8828      	ldrh	r0, [r5, #0]
    2152:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    2156:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    215a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    215e:	2c00      	cmp	r4, #0
    2160:	f100 0019 	add.w	r0, r0, #25
    2164:	bfb8      	it	lt
    2166:	f204 34ff 	addwlt	r4, r4, #1023	; 0x3ff
    216a:	b280      	uxth	r0, r0
    216c:	12a4      	asrs	r4, r4, #10
			{
				int chanceOfGlitter = GetAnalogEffect(15, 115);
				if (random8() < chanceOfGlitter)
    216e:	eb00 2610 	add.w	r6, r0, r0, lsr #8
    2172:	340f      	adds	r4, #15
    2174:	b2f6      	uxtb	r6, r6
    2176:	42a6      	cmp	r6, r4
    2178:	8028      	strh	r0, [r5, #0]
    217a:	da1b      	bge.n	21b4 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x70>
    217c:	b29b      	uxth	r3, r3
    217e:	2703      	movs	r7, #3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2180:	26ff      	movs	r6, #255	; 0xff
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2182:	eb00 2440 	add.w	r4, r0, r0, lsl #9
    2186:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    218a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    218e:	3019      	adds	r0, #25
    2190:	b280      	uxth	r0, r0
			/// Add a specific color in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    2192:	fb03 f400 	mul.w	r4, r3, r0
    2196:	0c24      	lsrs	r4, r4, #16
    2198:	8028      	strh	r0, [r5, #0]
					leds[index] = color;
    219a:	f832 4014 	ldrh.w	r4, [r2, r4, lsl #1]
    219e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    21a2:	eb01 0e04 	add.w	lr, r1, r4
			}

			/// Add a specific color in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numPositions; i++)
    21a6:	3f01      	subs	r7, #1
    21a8:	550e      	strb	r6, [r1, r4]
        g = (colorcode >>  8) & 0xFF;
    21aa:	f88e 6001 	strb.w	r6, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    21ae:	f88e 6002 	strb.w	r6, [lr, #2]
    21b2:	d1e6      	bne.n	2182 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x3e>
    21b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b6:	bf00      	nop
    21b8:	1fff8726 	.word	0x1fff8726

000021bc <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)>:
				}

				BlendFromHue(leds, indexes, numLeds);
			}

			void Juggle(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    21bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21c0:	4607      	mov	r7, r0
    21c2:	b085      	sub	sp, #20
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    21c4:	69c0      	ldr	r0, [r0, #28]
				}

				BlendFromHue(leds, indexes, numLeds);
			}

			void Juggle(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    21c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    21c8:	4699      	mov	r9, r3
    21ca:	4690      	mov	r8, r2
    21cc:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    21ce:	f004 fb33 	bl	6838 <__aeabi_i2f>
    21d2:	4957      	ldr	r1, [pc, #348]	; (2330 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x174>)
    21d4:	f004 fb84 	bl	68e0 <__aeabi_fmul>
    21d8:	4956      	ldr	r1, [pc, #344]	; (2334 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x178>)
    21da:	f004 fc35 	bl	6a48 <__aeabi_fdiv>
    21de:	4956      	ldr	r1, [pc, #344]	; (2338 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x17c>)
    21e0:	f004 fa76 	bl	66d0 <__addsf3>
    21e4:	f004 fd42 	bl	6c6c <__aeabi_f2iz>
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    21e8:	f1b9 0f00 	cmp.w	r9, #0
    21ec:	dd21      	ble.n	2232 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x76>
    21ee:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    21f2:	b2c9      	uxtb	r1, r1
    21f4:	3101      	adds	r1, #1
    21f6:	4640      	mov	r0, r8
    21f8:	eb08 0649 	add.w	r6, r8, r9, lsl #1
				{
					int scale = 255 - fade;
					(leds[indexes[i]]).nscale8(scale);
    21fc:	f830 3b02 	ldrh.w	r3, [r0], #2
    2200:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2204:	eb04 0e03 	add.w	lr, r4, r3
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2208:	5ce2      	ldrb	r2, [r4, r3]
    220a:	fb01 f202 	mul.w	r2, r1, r2
    220e:	1212      	asrs	r2, r2, #8
    2210:	54e2      	strb	r2, [r4, r3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2212:	f89e 2001 	ldrb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2216:	f89e 3002 	ldrb.w	r3, [lr, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    221a:	fb01 f202 	mul.w	r2, r1, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    221e:	fb01 f303 	mul.w	r3, r1, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2222:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2224:	121b      	asrs	r3, r3, #8
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    2226:	42b0      	cmp	r0, r6
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2228:	f88e 2001 	strb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    222c:	f88e 3002 	strb.w	r3, [lr, #2]
    2230:	d1e4      	bne.n	21fc <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x40>

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2232:	2603      	movs	r6, #3
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2234:	2d00      	cmp	r5, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2236:	60fe      	str	r6, [r7, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2238:	db70      	blt.n	231c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x160>
    223a:	68ba      	ldr	r2, [r7, #8]
    223c:	4b3f      	ldr	r3, [pc, #252]	; (233c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x180>)
    223e:	4415      	add	r5, r2
    2240:	402b      	ands	r3, r5
    2242:	2b00      	cmp	r3, #0
    2244:	db6f      	blt.n	2326 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x16a>
    2246:	3b01      	subs	r3, #1
    2248:	2b02      	cmp	r3, #2
    224a:	d869      	bhi.n	2320 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x164>
    224c:	4a3c      	ldr	r2, [pc, #240]	; (2340 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x184>)
    224e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
				case 3:
					numBalls = 9;
					break;
				}

				for (int i = 0; i < numBalls; i++)
    2252:	2e00      	cmp	r6, #0
    2254:	dd5f      	ble.n	2316 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x15a>
    2256:	23ff      	movs	r3, #255	; 0xff
    2258:	fb93 f3f6 	sdiv	r3, r3, r6
    225c:	f109 35ff 	add.w	r5, r9, #4294967295
    2260:	b2ad      	uxth	r5, r5
    2262:	b2db      	uxtb	r3, r3
    2264:	1c6a      	adds	r2, r5, #1
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2266:	f04f 0900 	mov.w	r9, #0
    226a:	9300      	str	r3, [sp, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    226c:	4623      	mov	r3, r4
    226e:	463d      	mov	r5, r7
    2270:	9201      	str	r2, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2272:	f44f 7b8c 	mov.w	fp, #280	; 0x118
    2276:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
    227a:	464c      	mov	r4, r9
    227c:	461f      	mov	r7, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    227e:	4b31      	ldr	r3, [pc, #196]	; (2344 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x188>)
    2280:	1de1      	adds	r1, r4, #7
    2282:	6818      	ldr	r0, [r3, #0]
    2284:	9003      	str	r0, [sp, #12]
    2286:	b289      	uxth	r1, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2288:	29ff      	cmp	r1, #255	; 0xff
	return ret;
    228a:	9803      	ldr	r0, [sp, #12]
    228c:	bf9c      	itt	ls
    228e:	0209      	lslls	r1, r1, #8
    2290:	b289      	uxthls	r1, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2292:	fb0b f000 	mul.w	r0, fp, r0
    2296:	fb01 f100 	mul.w	r1, r1, r0
    229a:	ea4f 4e11 	mov.w	lr, r1, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    229e:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    22a2:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    22a6:	d003      	beq.n	22b0 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xf4>
    22a8:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    22ac:	3007      	adds	r0, #7
    22ae:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    22b0:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22b4:	4b24      	ldr	r3, [pc, #144]	; (2348 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x18c>)
    22b6:	f88d a009 	strb.w	sl, [sp, #9]
    22ba:	f813 100c 	ldrb.w	r1, [r3, ip]
    22be:	4b23      	ldr	r3, [pc, #140]	; (234c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x190>)
    22c0:	f833 c01c 	ldrh.w	ip, [r3, ip, lsl #1]
				}

				for (int i = 0; i < numBalls; i++)
				{
					int dotHue = i * (255 / numBalls);
					uint16_t index = indexes[beatsin16(i + 7, 0, numLeds - 1)];
    22c4:	9b01      	ldr	r3, [sp, #4]
    22c6:	f3c0 0046 	ubfx	r0, r0, #1, #7
    22ca:	fb01 c100 	mla	r1, r1, r0, ip

    if( theta & 0x8000 ) y = -y;
    22ce:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22d2:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    22d4:	bf18      	it	ne
    22d6:	4249      	negne	r1, r1
    22d8:	b209      	sxth	r1, r1
    22da:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    22de:	b289      	uxth	r1, r1
    22e0:	fb03 f101 	mul.w	r1, r3, r1
    22e4:	0c09      	lsrs	r1, r1, #16
    22e6:	6968      	ldr	r0, [r5, #20]
					leds[index] = CHSV(dotHue + gHue, 200, 255);
    22e8:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    22ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    22f0:	eb09 0e00 	add.w	lr, r9, r0
    22f4:	f04f 33ff 	mov.w	r3, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    22f8:	4439      	add	r1, r7
    22fa:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    22fc:	f88d 300a 	strb.w	r3, [sp, #10]
    2300:	f88d e008 	strb.w	lr, [sp, #8]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2304:	f7ff fdf8 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2308:	9b00      	ldr	r3, [sp, #0]
				case 3:
					numBalls = 9;
					break;
				}

				for (int i = 0; i < numBalls; i++)
    230a:	3401      	adds	r4, #1
    230c:	4499      	add	r9, r3
    230e:	42b4      	cmp	r4, r6
    2310:	fa5f f989 	uxtb.w	r9, r9
    2314:	dbb3      	blt.n	227e <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xc2>
				{
					int dotHue = i * (255 / numBalls);
					uint16_t index = indexes[beatsin16(i + 7, 0, numLeds - 1)];
					leds[index] = CHSV(dotHue + gHue, 200, 255);
				}
			}
    2316:	b005      	add	sp, #20
    2318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    231c:	2355      	movs	r3, #85	; 0x55
    231e:	e79d      	b.n	225c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xa0>

				int numBalls = 3;

				// Modes
				SetNumModes(3);
				switch (GetModeNumber(modeOffset))
    2320:	2355      	movs	r3, #85	; 0x55
    2322:	2603      	movs	r6, #3
    2324:	e79a      	b.n	225c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xa0>
    2326:	3b01      	subs	r3, #1
    2328:	f063 0303 	orn	r3, r3, #3
    232c:	3301      	adds	r3, #1
    232e:	e78a      	b.n	2246 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x8a>
    2330:	42c20000 	.word	0x42c20000
    2334:	447fc000 	.word	0x447fc000
    2338:	40400000 	.word	0x40400000
    233c:	80000003 	.word	0x80000003
    2340:	0000864c 	.word	0x0000864c
    2344:	1fffa138 	.word	0x1fffa138
    2348:	00008658 	.word	0x00008658
    234c:	00008634 	.word	0x00008634

00002350 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)>:
				EVERY_N_SECONDS(interval) {
					heatIndex++;
				}
			}

			void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2354:	b095      	sub	sp, #84	; 0x54
    2356:	4607      	mov	r7, r0
    2358:	981e      	ldr	r0, [sp, #120]	; 0x78
    235a:	9204      	str	r2, [sp, #16]

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    235c:	2402      	movs	r4, #2
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    235e:	2800      	cmp	r0, #0
				EVERY_N_SECONDS(interval) {
					heatIndex++;
				}
			}

			void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2360:	4688      	mov	r8, r1
    2362:	469b      	mov	fp, r3

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2364:	60fc      	str	r4, [r7, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2366:	f2c0 80fa 	blt.w	255e <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x20e>
				int speedDelay = 15;
				int frameMultiplier = 2;

				// Modes
				SetNumModes(2);
				switch (GetModeNumber(modeOffset))
    236a:	68ba      	ldr	r2, [r7, #8]
    236c:	4b8b      	ldr	r3, [pc, #556]	; (259c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x24c>)
    236e:	4402      	add	r2, r0
    2370:	fb83 1302 	smull	r1, r3, r3, r2
    2374:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    2378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    237c:	1ad3      	subs	r3, r2, r3
    237e:	2b01      	cmp	r3, #1
    2380:	f000 80b0 	beq.w	24e4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x194>
    2384:	42a3      	cmp	r3, r4
    2386:	bf0c      	ite	eq
    2388:	2314      	moveq	r3, #20
    238a:	230f      	movne	r3, #15
    238c:	9305      	str	r3, [sp, #20]
    238e:	bf0c      	ite	eq
    2390:	f04f 0a32 	moveq.w	sl, #50	; 0x32
    2394:	f04f 0a19 	movne.w	sl, #25
						break;
					}
				}

				// Fade brightness all LEDs one step.
				for (int i = 0; i < numLeds; i++)
    2398:	f1bb 0f00 	cmp.w	fp, #0
    239c:	ea4f 044b 	mov.w	r4, fp, lsl #1
    23a0:	dd34      	ble.n	240c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xbc>
    23a2:	9b04      	ldr	r3, [sp, #16]
    23a4:	191d      	adds	r5, r3, r4
    23a6:	4699      	mov	r9, r3
				{
					if (!meteorRandomDecay || random(10) > 5)
    23a8:	200a      	movs	r0, #10
    23aa:	f003 fde9 	bl	5f80 <random(unsigned long)>
    23ae:	2805      	cmp	r0, #5
    23b0:	d928      	bls.n	2404 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xb4>
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    23b2:	69f8      	ldr	r0, [r7, #28]
					{
						int meteorTrailDecay = GetAnalogPattern(32, 96);

						(leds[indexes[i]]).fadeToBlackBy(meteorTrailDecay);
    23b4:	f8b9 6000 	ldrh.w	r6, [r9]
    23b8:	f004 fa3e 	bl	6838 <__aeabi_i2f>
    23bc:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
    23c0:	f004 fa8e 	bl	68e0 <__aeabi_fmul>
    23c4:	4976      	ldr	r1, [pc, #472]	; (25a0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x250>)
    23c6:	f004 fb3f 	bl	6a48 <__aeabi_fdiv>
    23ca:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    23ce:	f004 f97f 	bl	66d0 <__addsf3>
    23d2:	f004 fc4b 	bl	6c6c <__aeabi_f2iz>
    23d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    23da:	43c0      	mvns	r0, r0
    23dc:	f818 3006 	ldrb.w	r3, [r8, r6]
    23e0:	b2c0      	uxtb	r0, r0
    23e2:	3001      	adds	r0, #1
    23e4:	fb00 f303 	mul.w	r3, r0, r3
    23e8:	121b      	asrs	r3, r3, #8
    23ea:	f808 3006 	strb.w	r3, [r8, r6]
    23ee:	4446      	add	r6, r8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    23f0:	7873      	ldrb	r3, [r6, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    23f2:	78b2      	ldrb	r2, [r6, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    23f4:	fb00 f303 	mul.w	r3, r0, r3
    b = (((uint16_t)b) * scale_fixed) >> 8;
    23f8:	fb00 f002 	mul.w	r0, r0, r2
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    23fc:	121b      	asrs	r3, r3, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    23fe:	1200      	asrs	r0, r0, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2400:	7073      	strb	r3, [r6, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2402:	70b0      	strb	r0, [r6, #2]
    2404:	f109 0902 	add.w	r9, r9, #2
						break;
					}
				}

				// Fade brightness all LEDs one step.
				for (int i = 0; i < numLeds; i++)
    2408:	45a9      	cmp	r9, r5
    240a:	d1cd      	bne.n	23a8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x58>
    240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    240e:	f8cd 800c 	str.w	r8, [sp, #12]
    2412:	fb93 f5f4 	sdiv	r5, r3, r4
					}
				}

				// Draw meteor.
				long frame = GetFrame(numLeds * frameMultiplier);
				for (int i = 0; i < meteorSize; i++)
    2416:	2600      	movs	r6, #0
    2418:	fb04 3515 	mls	r5, r4, r5, r3
    241c:	ac14      	add	r4, sp, #80	; 0x50
				{
					if ((frame - i < numLeds) && (frame - i >= 0))
    241e:	45ab      	cmp	fp, r5
    2420:	dd55      	ble.n	24ce <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x17e>
    2422:	2d00      	cmp	r5, #0
    2424:	db53      	blt.n	24ce <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x17e>
					{
						// Set the colors of the meteor using a reversed HeatColors gradient, so the meteor's tail is white hot trailing off to red.
						uint16_t index = indexes[frame - i];
						leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
    2426:	9b04      	ldr	r3, [sp, #16]
    2428:	495e      	ldr	r1, [pc, #376]	; (25a4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x254>)
    242a:	f833 8015 	ldrh.w	r8, [r3, r5, lsl #1]
    242e:	9b03      	ldr	r3, [sp, #12]
    2430:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    2434:	eb03 0908 	add.w	r9, r3, r8
    2438:	ab08      	add	r3, sp, #32
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    243a:	f851 2f04 	ldr.w	r2, [r1, #4]!
    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    243e:	709a      	strb	r2, [r3, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2440:	0c10      	lsrs	r0, r2, #16
        g = (colorcode >>  8) & 0xFF;
    2442:	0a12      	lsrs	r2, r2, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2444:	7018      	strb	r0, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
    2446:	705a      	strb	r2, [r3, #1]
    2448:	3303      	adds	r3, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    244a:	429c      	cmp	r4, r3
    244c:	d1f5      	bne.n	243a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xea>

				// Get the appropriate color from the palette, mapped to the number of LEDs.
				int mappedPos = numPaletteColors / numLeds * pos;
				if (isReverse)
				{
					return ColorFromPalette(palette, (numPaletteColors - mappedPos));
    244e:	45b2      	cmp	sl, r6
    2450:	4652      	mov	r2, sl
    2452:	bfa8      	it	ge
    2454:	4632      	movge	r2, r6
    2456:	23ff      	movs	r3, #255	; 0xff
    2458:	fb93 f1fa 	sdiv	r1, r3, sl
    245c:	fb02 f201 	mul.w	r2, r2, r1
    2460:	43d2      	mvns	r2, r2
    2462:	2101      	movs	r1, #1
    2464:	b2d2      	uxtb	r2, r2
    2466:	9100      	str	r1, [sp, #0]
    2468:	a807      	add	r0, sp, #28
    246a:	a908      	add	r1, sp, #32
    246c:	f7ff fc22 	bl	1cb4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2470:	9a03      	ldr	r2, [sp, #12]
    2472:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2476:	f802 3008 	strb.w	r3, [r2, r8]
        g = rhs.g;
    247a:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    247e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    2482:	f889 3002 	strb.w	r3, [r9, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2486:	f889 2001 	strb.w	r2, [r9, #1]
    248a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    248e:	f897 e031 	ldrb.w	lr, [r7, #49]	; 0x31
    2492:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
    2496:	f897 0033 	ldrb.w	r0, [r7, #51]	; 0x33
    249a:	f897 c034 	ldrb.w	ip, [r7, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    249e:	4613      	mov	r3, r2
				if (gHue1) val++;
				if (gHue2) val++;
    24a0:	f1be 0f00 	cmp.w	lr, #0
    24a4:	d000      	beq.n	24a8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x158>
    24a6:	1c53      	adds	r3, r2, #1
				if (gHue3) val++;
    24a8:	b101      	cbz	r1, 24ac <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x15c>
    24aa:	3301      	adds	r3, #1
				if (gHue4) val++;
    24ac:	b150      	cbz	r0, 24c4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x174>

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
    24ae:	2a00      	cmp	r2, #0
    24b0:	d13e      	bne.n	2530 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1e0>
				if (gHue2) val++;
    24b2:	f1be 0f00 	cmp.w	lr, #0
    24b6:	d01a      	beq.n	24ee <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x19e>
    24b8:	2301      	movs	r3, #1
				if (gHue3) val++;
    24ba:	b101      	cbz	r1, 24be <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16e>
    24bc:	3301      	adds	r3, #1
				if (gHue4) val++;
    24be:	b1d8      	cbz	r0, 24f8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a8>
    24c0:	3301      	adds	r3, #1
    24c2:	e019      	b.n	24f8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a8>
				if (gHue5) val++;
    24c4:	f1bc 0f00 	cmp.w	ip, #0
    24c8:	d1f1      	bne.n	24ae <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x15e>
					{
						// Set the colors of the meteor using a reversed HeatColors gradient, so the meteor's tail is white hot trailing off to red.
						uint16_t index = indexes[frame - i];
						leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
						// Apply a blend from the hue, if toggled. We'll be using a designated arbitrary RGB color.
						if (HasToggledHues())
    24ca:	2b00      	cmp	r3, #0
    24cc:	d1ef      	bne.n	24ae <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x15e>
					}
				}

				// Draw meteor.
				long frame = GetFrame(numLeds * frameMultiplier);
				for (int i = 0; i < meteorSize; i++)
    24ce:	3601      	adds	r6, #1
    24d0:	45b2      	cmp	sl, r6
    24d2:	f105 35ff 	add.w	r5, r5, #4294967295
    24d6:	d1a2      	bne.n	241e <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xce>
							nblend(leds[index], GetRgbFromHue(), 127);
						}
					}
				}

				delay(speedDelay);
    24d8:	9805      	ldr	r0, [sp, #20]
    24da:	f002 f82d 	bl	4538 <delay>
			}
    24de:	b015      	add	sp, #84	; 0x54
    24e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int speedDelay = 15;
				int frameMultiplier = 2;

				// Modes
				SetNumModes(2);
				switch (GetModeNumber(modeOffset))
    24e4:	2307      	movs	r3, #7
    24e6:	9305      	str	r3, [sp, #20]
				{
					// Small meteors.
					case 1:
					{
						meteorSize = 5;
    24e8:	f04f 0a05 	mov.w	sl, #5
    24ec:	e754      	b.n	2398 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x48>
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
    24ee:	b109      	cbz	r1, 24f4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a4>
    24f0:	2301      	movs	r3, #1
    24f2:	e7e4      	b.n	24be <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16e>
				if (gHue4) val++;
    24f4:	b158      	cbz	r0, 250e <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1be>
    24f6:	2301      	movs	r3, #1
				if (gHue5) val++;
    24f8:	f1bc 0f00 	cmp.w	ip, #0
    24fc:	d000      	beq.n	2500 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1b0>
    24fe:	3301      	adds	r3, #1

			/// Return an arbitrary RGB color for a given number of toggled hue buttons. 
			/// This will be to add color to CRGBs, since they cannot have hue applied to them.
			CRGB GetRgbFromHue()
			{
				switch (GetToggledHueCount())
    2500:	3b01      	subs	r3, #1
    2502:	2b03      	cmp	r3, #3
    2504:	d830      	bhi.n	2568 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x218>
    2506:	e8df f003 	tbb	[pc, r3]
    250a:	2105      	.short	0x2105
    250c:	4037      	.short	0x4037
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
				if (gHue4) val++;
				if (gHue5) val++;
    250e:	f1bc 0f00 	cmp.w	ip, #0
    2512:	d029      	beq.n	2568 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x218>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2514:	2380      	movs	r3, #128	; 0x80
    2516:	2200      	movs	r2, #0
    2518:	f88d 3020 	strb.w	r3, [sp, #32]
    251c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2520:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
						uint16_t index = indexes[frame - i];
						leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
						// Apply a blend from the hue, if toggled. We'll be using a designated arbitrary RGB color.
						if (HasToggledHues())
						{
							nblend(leds[index], GetRgbFromHue(), 127);
    2524:	4648      	mov	r0, r9
    2526:	227f      	movs	r2, #127	; 0x7f
    2528:	a908      	add	r1, sp, #32
    252a:	f7ff fb87 	bl	1c3c <nblend(CRGB&, CRGB const&, unsigned char)>
    252e:	e7ce      	b.n	24ce <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x17e>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    2530:	f1be 0f00 	cmp.w	lr, #0
    2534:	d001      	beq.n	253a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1ea>
    2536:	2302      	movs	r3, #2
    2538:	e7bf      	b.n	24ba <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16a>
				if (gHue3) val++;
    253a:	b109      	cbz	r1, 2540 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1f0>
    253c:	2302      	movs	r3, #2
    253e:	e7be      	b.n	24be <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16e>
				if (gHue4) val++;
    2540:	b108      	cbz	r0, 2546 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1f6>
    2542:	2302      	movs	r3, #2
    2544:	e7d8      	b.n	24f8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a8>
				if (gHue5) val++;
    2546:	f1bc 0f00 	cmp.w	ip, #0
    254a:	d0e3      	beq.n	2514 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1c4>
    254c:	2300      	movs	r3, #0
    254e:	2280      	movs	r2, #128	; 0x80
    2550:	f88d 3020 	strb.w	r3, [sp, #32]
    2554:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2558:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    255c:	e7e2      	b.n	2524 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    255e:	230f      	movs	r3, #15
    2560:	9305      	str	r3, [sp, #20]
			void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
			{
				const boolean meteorRandomDecay = true;

				// Medium meteor.
				int meteorSize = 25;
    2562:	f04f 0a19 	mov.w	sl, #25
    2566:	e717      	b.n	2398 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x48>
    2568:	2300      	movs	r3, #0
    256a:	f88d 3020 	strb.w	r3, [sp, #32]
    256e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2572:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2576:	e7d5      	b.n	2524 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
    2578:	2300      	movs	r3, #0
    257a:	22ff      	movs	r2, #255	; 0xff
    257c:	f88d 3020 	strb.w	r3, [sp, #32]
    2580:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2584:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2588:	e7cc      	b.n	2524 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
    258a:	2300      	movs	r3, #0
    258c:	22ff      	movs	r2, #255	; 0xff
    258e:	f88d 2020 	strb.w	r2, [sp, #32]
    2592:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2596:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    259a:	e7c3      	b.n	2524 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
    259c:	55555556 	.word	0x55555556
    25a0:	447fc000 	.word	0x447fc000
    25a4:	00008560 	.word	0x00008560

000025a8 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)>:
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);

				IncrementFrame();
			}

			void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    25a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25ac:	b08d      	sub	sp, #52	; 0x34
    25ae:	4692      	mov	sl, r2
    25b0:	9002      	str	r0, [sp, #8]
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);
    25b2:	69c0      	ldr	r0, [r0, #28]
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);

				IncrementFrame();
			}

			void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    25b4:	9e16      	ldr	r6, [sp, #88]	; 0x58
    25b6:	461c      	mov	r4, r3
    25b8:	460d      	mov	r5, r1
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);
    25ba:	f004 f93d 	bl	6838 <__aeabi_i2f>
    25be:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    25c2:	f004 f98d 	bl	68e0 <__aeabi_fmul>
    25c6:	499a      	ldr	r1, [pc, #616]	; (2830 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x288>)
    25c8:	f004 fa3e 	bl	6a48 <__aeabi_fdiv>
    25cc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    25d0:	f004 f87e 	bl	66d0 <__addsf3>
    25d4:	f004 fb4a 	bl	6c6c <__aeabi_f2iz>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25d8:	4b96      	ldr	r3, [pc, #600]	; (2834 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x28c>)
    25da:	681b      	ldr	r3, [r3, #0]
    25dc:	930b      	str	r3, [sp, #44]	; 0x2c
    25de:	b280      	uxth	r0, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    25e0:	28ff      	cmp	r0, #255	; 0xff
	return ret;
    25e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    25e4:	bf98      	it	ls
    25e6:	0200      	lslls	r0, r0, #8
    25e8:	f44f 738c 	mov.w	r3, #280	; 0x118
    25ec:	bf98      	it	ls
    25ee:	b280      	uxthls	r0, r0
    25f0:	fb03 f101 	mul.w	r1, r3, r1
    25f4:	fb00 f101 	mul.w	r1, r0, r1
    25f8:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    25fa:	b2ca      	uxtb	r2, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    25fc:	0650      	lsls	r0, r2, #25
    25fe:	f140 820b 	bpl.w	2a18 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x470>
        offset = (uint8_t)255 - offset;
    2602:	43d3      	mvns	r3, r2
    2604:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2606:	f003 020f 	and.w	r2, r3, #15
    if( theta & 0x40) secoffset++;
    260a:	3201      	adds	r2, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    260c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2610:	4889      	ldr	r0, [pc, #548]	; (2838 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x290>)
    2612:	111b      	asrs	r3, r3, #4
    2614:	005b      	lsls	r3, r3, #1
    2616:	18c7      	adds	r7, r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2618:	5cc3      	ldrb	r3, [r0, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    261a:	7878      	ldrb	r0, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    261c:	fb10 f202 	smulbb	r2, r0, r2
    2620:	eb03 1222 	add.w	r2, r3, r2, asr #4
    2624:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    2626:	060b      	lsls	r3, r1, #24
    2628:	bf48      	it	mi
    262a:	4252      	negmi	r2, r2
    262c:	b252      	sxtb	r2, r2

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    262e:	9802      	ldr	r0, [sp, #8]
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    2630:	3a80      	subs	r2, #128	; 0x80
    2632:	2304      	movs	r3, #4
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2634:	2e00      	cmp	r6, #0
    2636:	b2d2      	uxtb	r2, r2

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2638:	60c3      	str	r3, [r0, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    263a:	f2c0 81f2 	blt.w	2a22 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x47a>
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

				// Modes
				SetNumModes(4);
				FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
    263e:	6883      	ldr	r3, [r0, #8]
    2640:	497e      	ldr	r1, [pc, #504]	; (283c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x294>)
    2642:	441e      	add	r6, r3
    2644:	fb81 3106 	smull	r3, r1, r1, r6
    2648:	17f3      	asrs	r3, r6, #31
    264a:	ebc3 0361 	rsb	r3, r3, r1, asr #1
    264e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2652:	1af6      	subs	r6, r6, r3
    2654:	1c73      	adds	r3, r6, #1
				return arrangedLeds;
			}

			void FillGradients(CRGB leds[], uint16_t indexes[], int numLeds, int numGradients, int speed)
			{
				if (numGradients < 1) numGradients = 1;
    2656:	2b01      	cmp	r3, #1
    2658:	bfb8      	it	lt
    265a:	2301      	movlt	r3, #1
    265c:	9301      	str	r3, [sp, #4]
    265e:	b2d3      	uxtb	r3, r2
    2660:	9303      	str	r3, [sp, #12]

				for (int i = 0; i < numGradients; i++)
    2662:	f04f 0b00 	mov.w	fp, #0
    2666:	9b01      	ldr	r3, [sp, #4]
    2668:	fb94 f3f3 	sdiv	r3, r4, r3
    266c:	9304      	str	r3, [sp, #16]
    266e:	9a02      	ldr	r2, [sp, #8]
    2670:	f892 6031 	ldrb.w	r6, [r2, #49]	; 0x31
    2674:	f892 4032 	ldrb.w	r4, [r2, #50]	; 0x32
    2678:	f892 0033 	ldrb.w	r0, [r2, #51]	; 0x33
    267c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    2680:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
				if (gHue1) val++;
				if (gHue2) val++;
    2684:	2e00      	cmp	r6, #0
    2686:	f000 819e 	beq.w	29c6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x41e>
    268a:	1c5a      	adds	r2, r3, #1
				if (gHue3) val++;
    268c:	b104      	cbz	r4, 2690 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xe8>
    268e:	3201      	adds	r2, #1
				if (gHue4) val++;
    2690:	b100      	cbz	r0, 2694 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xec>
    2692:	3201      	adds	r2, #1
				if (gHue5) val++;
    2694:	b101      	cbz	r1, 2698 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xf0>
    2696:	3201      	adds	r2, #1
				}
			}

			CRGB GetRainbowColor(int index = 0)
			{
				switch (index % 8)
    2698:	445a      	add	r2, fp
    269a:	f002 0207 	and.w	r2, r2, #7
    269e:	3a01      	subs	r2, #1
    26a0:	2a06      	cmp	r2, #6
    26a2:	d85e      	bhi.n	2762 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ba>
    26a4:	e8df f012 	tbh	[pc, r2, lsl #1]
    26a8:	00480052 	.word	0x00480052
    26ac:	0035003f 	.word	0x0035003f
    26b0:	00070028 	.word	0x00070028
    26b4:	0191      	.short	0x0191
    26b6:	22ee      	movs	r2, #238	; 0xee
    26b8:	2782      	movs	r7, #130	; 0x82
    26ba:	f88d 2018 	strb.w	r2, [sp, #24]
    26be:	f88d 201a 	strb.w	r2, [sp, #26]
    26c2:	f88d 7019 	strb.w	r7, [sp, #25]
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    26c6:	b316      	cbz	r6, 270e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x166>
    26c8:	1c5a      	adds	r2, r3, #1
				if (gHue3) val++;
    26ca:	b104      	cbz	r4, 26ce <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x126>
    26cc:	3201      	adds	r2, #1
				if (gHue4) val++;
    26ce:	b100      	cbz	r0, 26d2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12a>
    26d0:	3201      	adds	r2, #1
				if (gHue5) val++;
    26d2:	b101      	cbz	r1, 26d6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    26d4:	3201      	adds	r2, #1
				}
			}

			CRGB GetRainbowColor(int index = 0)
			{
				switch (index % 8)
    26d6:	445a      	add	r2, fp
    26d8:	3201      	adds	r2, #1
    26da:	f002 0207 	and.w	r2, r2, #7
    26de:	3a01      	subs	r2, #1
    26e0:	2a06      	cmp	r2, #6
    26e2:	f200 809b 	bhi.w	281c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x274>
    26e6:	e8df f012 	tbh	[pc, r2, lsl #1]
    26ea:	008e      	.short	0x008e
    26ec:	007b0084 	.word	0x007b0084
    26f0:	00670071 	.word	0x00670071
    26f4:	018a0046 	.word	0x018a0046
    26f8:	224b      	movs	r2, #75	; 0x4b
    26fa:	2700      	movs	r7, #0
    26fc:	f88d 2018 	strb.w	r2, [sp, #24]
    2700:	2282      	movs	r2, #130	; 0x82
    2702:	f88d 7019 	strb.w	r7, [sp, #25]
    2706:	f88d 201a 	strb.w	r2, [sp, #26]
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    270a:	2e00      	cmp	r6, #0
    270c:	d1dc      	bne.n	26c8 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x120>
    270e:	461a      	mov	r2, r3
    2710:	e7db      	b.n	26ca <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x122>
    2712:	2200      	movs	r2, #0
    2714:	f04f 37ff 	mov.w	r7, #4294967295
    2718:	f88d 701a 	strb.w	r7, [sp, #26]
    271c:	f88d 2018 	strb.w	r2, [sp, #24]
    2720:	f88d 2019 	strb.w	r2, [sp, #25]
    2724:	e7cf      	b.n	26c6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    2726:	2200      	movs	r2, #0
    2728:	2780      	movs	r7, #128	; 0x80
    272a:	f88d 2018 	strb.w	r2, [sp, #24]
    272e:	f88d 201a 	strb.w	r2, [sp, #26]
    2732:	f88d 7019 	strb.w	r7, [sp, #25]
    2736:	e7c6      	b.n	26c6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    2738:	f04f 37ff 	mov.w	r7, #4294967295
    273c:	2200      	movs	r2, #0
    273e:	f88d 7018 	strb.w	r7, [sp, #24]
    2742:	f88d 7019 	strb.w	r7, [sp, #25]
    2746:	f88d 201a 	strb.w	r2, [sp, #26]
    274a:	e7bc      	b.n	26c6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    274c:	27a5      	movs	r7, #165	; 0xa5
    274e:	2200      	movs	r2, #0
    2750:	f04f 3eff 	mov.w	lr, #4294967295
    2754:	f88d e018 	strb.w	lr, [sp, #24]
    2758:	f88d 7019 	strb.w	r7, [sp, #25]
    275c:	f88d 201a 	strb.w	r2, [sp, #26]
    2760:	e7b1      	b.n	26c6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    2762:	2200      	movs	r2, #0
    2764:	f04f 37ff 	mov.w	r7, #4294967295
    2768:	f88d 7018 	strb.w	r7, [sp, #24]
    276c:	f88d 2019 	strb.w	r2, [sp, #25]
    2770:	f88d 201a 	strb.w	r2, [sp, #26]
    2774:	e7a7      	b.n	26c6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    2776:	22ee      	movs	r2, #238	; 0xee
    2778:	2782      	movs	r7, #130	; 0x82
    277a:	f88d 201c 	strb.w	r2, [sp, #28]
    277e:	f88d 201e 	strb.w	r2, [sp, #30]
    2782:	f88d 701d 	strb.w	r7, [sp, #29]
    2786:	b106      	cbz	r6, 278a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1e2>
    2788:	3301      	adds	r3, #1
				if (gHue3) val++;
    278a:	b104      	cbz	r4, 278e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1e6>
    278c:	3301      	adds	r3, #1
				if (gHue4) val++;
    278e:	b100      	cbz	r0, 2792 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ea>
    2790:	3301      	adds	r3, #1
				if (gHue5) val++;
    2792:	b101      	cbz	r1, 2796 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    2794:	3301      	adds	r3, #1
				}
			}

			CRGB GetRainbowColor(int index = 0)
			{
				switch (index % 8)
    2796:	445b      	add	r3, fp
    2798:	3302      	adds	r3, #2
    279a:	f003 0307 	and.w	r3, r3, #7
    279e:	3b01      	subs	r3, #1
    27a0:	2b06      	cmp	r3, #6
    27a2:	f200 8104 	bhi.w	29ae <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x406>
    27a6:	e8df f013 	tbh	[pc, r3, lsl #1]
    27aa:	00f7      	.short	0x00f7
    27ac:	00da00e3 	.word	0x00da00e3
    27b0:	00d000ed 	.word	0x00d000ed
    27b4:	011d004b 	.word	0x011d004b
    27b8:	224b      	movs	r2, #75	; 0x4b
    27ba:	2700      	movs	r7, #0
    27bc:	f88d 201c 	strb.w	r2, [sp, #28]
    27c0:	2282      	movs	r2, #130	; 0x82
    27c2:	f88d 701d 	strb.w	r7, [sp, #29]
    27c6:	f88d 201e 	strb.w	r2, [sp, #30]
    27ca:	e7dc      	b.n	2786 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    27cc:	2200      	movs	r2, #0
    27ce:	f04f 37ff 	mov.w	r7, #4294967295
    27d2:	f88d 701e 	strb.w	r7, [sp, #30]
    27d6:	f88d 201c 	strb.w	r2, [sp, #28]
    27da:	f88d 201d 	strb.w	r2, [sp, #29]
    27de:	e7d2      	b.n	2786 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    27e0:	2200      	movs	r2, #0
    27e2:	2780      	movs	r7, #128	; 0x80
    27e4:	f88d 201c 	strb.w	r2, [sp, #28]
    27e8:	f88d 201e 	strb.w	r2, [sp, #30]
    27ec:	f88d 701d 	strb.w	r7, [sp, #29]
    27f0:	e7c9      	b.n	2786 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    27f2:	f04f 37ff 	mov.w	r7, #4294967295
    27f6:	2200      	movs	r2, #0
    27f8:	f88d 701c 	strb.w	r7, [sp, #28]
    27fc:	f88d 701d 	strb.w	r7, [sp, #29]
    2800:	f88d 201e 	strb.w	r2, [sp, #30]
    2804:	e7bf      	b.n	2786 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    2806:	27a5      	movs	r7, #165	; 0xa5
    2808:	2200      	movs	r2, #0
    280a:	f04f 3eff 	mov.w	lr, #4294967295
    280e:	f88d e01c 	strb.w	lr, [sp, #28]
    2812:	f88d 701d 	strb.w	r7, [sp, #29]
    2816:	f88d 201e 	strb.w	r2, [sp, #30]
    281a:	e7b4      	b.n	2786 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    281c:	2200      	movs	r2, #0
    281e:	f04f 37ff 	mov.w	r7, #4294967295
    2822:	f88d 701c 	strb.w	r7, [sp, #28]
    2826:	f88d 201d 	strb.w	r2, [sp, #29]
    282a:	f88d 201e 	strb.w	r2, [sp, #30]
    282e:	e7aa      	b.n	2786 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    2830:	447fc000 	.word	0x447fc000
    2834:	1fffa138 	.word	0x1fffa138
    2838:	00008644 	.word	0x00008644
    283c:	66666667 	.word	0x66666667
    2840:	23ee      	movs	r3, #238	; 0xee
    2842:	2282      	movs	r2, #130	; 0x82
    2844:	f88d 3020 	strb.w	r3, [sp, #32]
    2848:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    284c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
					CRGB color1 = GetRainbowColor(GetToggledHueCount() + i);
					CRGB color2 = GetRainbowColor(GetToggledHueCount() + i + 1);
					CRGB color3 = GetRainbowColor(GetToggledHueCount() + i + 2);

					// Blend between two different colors over time.
					CRGB blend1 = blend(color1, color2, speed);
    2850:	9c03      	ldr	r4, [sp, #12]
    2852:	aa07      	add	r2, sp, #28
    2854:	4623      	mov	r3, r4
    2856:	a906      	add	r1, sp, #24
    2858:	a809      	add	r0, sp, #36	; 0x24
    285a:	f7ff fa1d 	bl	1c98 <blend(CRGB const&, CRGB const&, unsigned char)>
					CRGB blend2 = blend(color2, color3, speed);
    285e:	4623      	mov	r3, r4
    2860:	aa08      	add	r2, sp, #32
    2862:	a907      	add	r1, sp, #28
    2864:	a80a      	add	r0, sp, #40	; 0x28
    2866:	f7ff fa17 	bl	1c98 <blend(CRGB const&, CRGB const&, unsigned char)>

					int startPos = numLeds / numGradients * i;
    286a:	9a04      	ldr	r2, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    286c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
        g = rhs.g;
    2870:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2874:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    2878:	f89d 6029 	ldrb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    287c:	f89d 402a 	ldrb.w	r4, [sp, #42]	; 0x2a
    2880:	fb02 f30b 	mul.w	r3, r2, fp
					int endPos = (numLeds / numGradients * (i + 1)) - 1;

					FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
    2884:	eb02 0903 	add.w	r9, r2, r3
    2888:	f109 39ff 	add.w	r9, r9, #4294967295
    288c:	fa1f f989 	uxth.w	r9, r9
    2890:	b29b      	uxth	r3, r3
			void FillGradientRgb(CRGB leds[], uint16_t indexes[], int numLeds,
				uint16_t startpos, CRGB startcolor,
				uint16_t endpos, CRGB endcolor)
			{
				// if the points are in the wrong order, straighten them
				if (endpos < startpos) 
    2892:	454b      	cmp	r3, r9
					// Blend between two different colors over time.
					CRGB blend1 = blend(color1, color2, speed);
					CRGB blend2 = blend(color2, color3, speed);

					int startPos = numLeds / numGradients * i;
					int endPos = (numLeds / numGradients * (i + 1)) - 1;
    2894:	f10b 0b01 	add.w	fp, fp, #1
    2898:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
			void FillGradientRgb(CRGB leds[], uint16_t indexes[], int numLeds,
				uint16_t startpos, CRGB startcolor,
				uint16_t endpos, CRGB endcolor)
			{
				// if the points are in the wrong order, straighten them
				if (endpos < startpos) 
    289c:	d90b      	bls.n	28b6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x30e>
    289e:	9405      	str	r4, [sp, #20]
    28a0:	46b0      	mov	r8, r6
    28a2:	46bc      	mov	ip, r7
    28a4:	469e      	mov	lr, r3
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    28a6:	4614      	mov	r4, r2
    28a8:	9a05      	ldr	r2, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    28aa:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28ac:	4607      	mov	r7, r0
    28ae:	464b      	mov	r3, r9
        g = rhs.g;
    28b0:	4641      	mov	r1, r8
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28b2:	4660      	mov	r0, ip
    28b4:	46f1      	mov	r9, lr

				rdistance87 = (endcolor.r - startcolor.r) << 7;
				gdistance87 = (endcolor.g - startcolor.g) << 7;
				bdistance87 = (endcolor.b - startcolor.b) << 7;

				uint16_t pixeldistance = endpos - startpos;
    28b6:	ebc3 0e09 	rsb	lr, r3, r9
				saccum87 gdistance87;
				saccum87 bdistance87;

				rdistance87 = (endcolor.r - startcolor.r) << 7;
				gdistance87 = (endcolor.g - startcolor.g) << 7;
				bdistance87 = (endcolor.b - startcolor.b) << 7;
    28ba:	ebc2 0c04 	rsb	ip, r2, r4

				saccum87 rdistance87;
				saccum87 gdistance87;
				saccum87 bdistance87;

				rdistance87 = (endcolor.r - startcolor.r) << 7;
    28be:	1a3f      	subs	r7, r7, r0
				gdistance87 = (endcolor.g - startcolor.g) << 7;
    28c0:	1a76      	subs	r6, r6, r1
				bdistance87 = (endcolor.b - startcolor.b) << 7;

				uint16_t pixeldistance = endpos - startpos;
    28c2:	fa1f f48e 	uxth.w	r4, lr

				saccum87 rdistance87;
				saccum87 gdistance87;
				saccum87 bdistance87;

				rdistance87 = (endcolor.r - startcolor.r) << 7;
    28c6:	01ff      	lsls	r7, r7, #7
				gdistance87 = (endcolor.g - startcolor.g) << 7;
    28c8:	01f6      	lsls	r6, r6, #7
				bdistance87 = (endcolor.b - startcolor.b) << 7;
    28ca:	ea4f 1ccc 	mov.w	ip, ip, lsl #7

				uint16_t pixeldistance = endpos - startpos;
				int16_t divisor = pixeldistance ? pixeldistance : 1;
    28ce:	2c00      	cmp	r4, #0
    28d0:	d077      	beq.n	29c2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x41a>
    28d2:	b224      	sxth	r4, r4

				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
    28d4:	fb97 f7f4 	sdiv	r7, r7, r4
				gdelta87 *= 2;
    28d8:	fb96 f6f4 	sdiv	r6, r6, r4

				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
    28dc:	ea4f 0e47 	mov.w	lr, r7, lsl #1
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    28e0:	4599      	cmp	r9, r3
				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
				gdelta87 *= 2;
    28e2:	ea4f 0746 	mov.w	r7, r6, lsl #1
				bdelta87 *= 2;
    28e6:	fb9c f6f4 	sdiv	r6, ip, r4
    28ea:	ea4f 0646 	mov.w	r6, r6, lsl #1

				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
    28ee:	fa1f fe8e 	uxth.w	lr, lr
				gdelta87 *= 2;
    28f2:	b2bf      	uxth	r7, r7
				bdelta87 *= 2;
    28f4:	b2b6      	uxth	r6, r6

				accum88 r88 = startcolor.r << 8;
    28f6:	ea4f 2000 	mov.w	r0, r0, lsl #8
				accum88 g88 = startcolor.g << 8;
    28fa:	ea4f 2101 	mov.w	r1, r1, lsl #8
				accum88 b88 = startcolor.b << 8;
    28fe:	ea4f 2202 	mov.w	r2, r2, lsl #8
				for (uint16_t i = startpos; i <= endpos; i++) 
    2902:	d31b      	bcc.n	293c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x394>
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
    2904:	f83a c013 	ldrh.w	ip, [sl, r3, lsl #1]
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    2908:	3301      	adds	r3, #1
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
    290a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    290e:	eb05 040c 	add.w	r4, r5, ip
    2912:	ea4f 2820 	mov.w	r8, r0, asr #8
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    2916:	b29b      	uxth	r3, r3
    2918:	f805 800c 	strb.w	r8, [r5, ip]
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
					r88 += rdelta87;
    291c:	4470      	add	r0, lr
        g = rhs.g;
    291e:	ea4f 2821 	mov.w	r8, r1, asr #8
        b = rhs.b;
    2922:	ea4f 2c22 	mov.w	ip, r2, asr #8
					g88 += gdelta87;
    2926:	4439      	add	r1, r7
					b88 += bdelta87;
    2928:	4432      	add	r2, r6
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    292a:	4599      	cmp	r9, r3
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
					r88 += rdelta87;
    292c:	b280      	uxth	r0, r0

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    292e:	f884 8001 	strb.w	r8, [r4, #1]
					g88 += gdelta87;
    2932:	b289      	uxth	r1, r1
        b = rhs.b;
    2934:	f884 c002 	strb.w	ip, [r4, #2]
					b88 += bdelta87;
    2938:	b292      	uxth	r2, r2
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    293a:	d2e3      	bcs.n	2904 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x35c>

			void FillGradients(CRGB leds[], uint16_t indexes[], int numLeds, int numGradients, int speed)
			{
				if (numGradients < 1) numGradients = 1;

				for (int i = 0; i < numGradients; i++)
    293c:	9b01      	ldr	r3, [sp, #4]
    293e:	455b      	cmp	r3, fp
    2940:	f47f ae95 	bne.w	266e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xc6>
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

				// Modes
				SetNumModes(4);
				FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
			}
    2944:	b00d      	add	sp, #52	; 0x34
    2946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    294a:	234b      	movs	r3, #75	; 0x4b
    294c:	2200      	movs	r2, #0
    294e:	f88d 3020 	strb.w	r3, [sp, #32]
    2952:	2382      	movs	r3, #130	; 0x82
    2954:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    2958:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    295c:	e778      	b.n	2850 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    295e:	2300      	movs	r3, #0
    2960:	2280      	movs	r2, #128	; 0x80
    2962:	f88d 3020 	strb.w	r3, [sp, #32]
    2966:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    296a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    296e:	e76f      	b.n	2850 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    2970:	f04f 32ff 	mov.w	r2, #4294967295
    2974:	2300      	movs	r3, #0
    2976:	f88d 2020 	strb.w	r2, [sp, #32]
    297a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    297e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2982:	e765      	b.n	2850 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    2984:	2300      	movs	r3, #0
    2986:	f04f 32ff 	mov.w	r2, #4294967295
    298a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    298e:	f88d 3020 	strb.w	r3, [sp, #32]
    2992:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2996:	e75b      	b.n	2850 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    2998:	22a5      	movs	r2, #165	; 0xa5
    299a:	2300      	movs	r3, #0
    299c:	f04f 31ff 	mov.w	r1, #4294967295
    29a0:	f88d 1020 	strb.w	r1, [sp, #32]
    29a4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    29a8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    29ac:	e750      	b.n	2850 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    29ae:	2300      	movs	r3, #0
    29b0:	f04f 32ff 	mov.w	r2, #4294967295
    29b4:	f88d 2020 	strb.w	r2, [sp, #32]
    29b8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    29bc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    29c0:	e746      	b.n	2850 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
				rdistance87 = (endcolor.r - startcolor.r) << 7;
				gdistance87 = (endcolor.g - startcolor.g) << 7;
				bdistance87 = (endcolor.b - startcolor.b) << 7;

				uint16_t pixeldistance = endpos - startpos;
				int16_t divisor = pixeldistance ? pixeldistance : 1;
    29c2:	2401      	movs	r4, #1
    29c4:	e786      	b.n	28d4 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x32c>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    29c6:	461a      	mov	r2, r3
    29c8:	e660      	b.n	268c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xe4>
    29ca:	f04f 32ff 	mov.w	r2, #4294967295
    29ce:	f88d 2018 	strb.w	r2, [sp, #24]
    29d2:	f06f 023f 	mvn.w	r2, #63	; 0x3f
    29d6:	f88d 2019 	strb.w	r2, [sp, #25]
    29da:	f06f 0234 	mvn.w	r2, #52	; 0x34
    29de:	f88d 201a 	strb.w	r2, [sp, #26]
    29e2:	e670      	b.n	26c6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    29e4:	f04f 33ff 	mov.w	r3, #4294967295
    29e8:	f88d 3020 	strb.w	r3, [sp, #32]
    29ec:	f06f 033f 	mvn.w	r3, #63	; 0x3f
    29f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    29f4:	f06f 0334 	mvn.w	r3, #52	; 0x34
    29f8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    29fc:	e728      	b.n	2850 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    29fe:	f04f 32ff 	mov.w	r2, #4294967295
    2a02:	f88d 201c 	strb.w	r2, [sp, #28]
    2a06:	f06f 023f 	mvn.w	r2, #63	; 0x3f
    2a0a:	f88d 201d 	strb.w	r2, [sp, #29]
    2a0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
    2a12:	f88d 201e 	strb.w	r2, [sp, #30]
    2a16:	e6b6      	b.n	2786 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2a18:	f002 033f 	and.w	r3, r2, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2a1c:	f002 020f 	and.w	r2, r2, #15
    2a20:	e5f6      	b.n	2610 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x68>
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

				// Modes
				SetNumModes(4);
				FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
    2a22:	2301      	movs	r3, #1
    2a24:	9301      	str	r3, [sp, #4]
    2a26:	e61a      	b.n	265e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xb6>

00002a28 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)>:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}

			void Sinelon(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a2c:	4607      	mov	r7, r0
    2a2e:	b087      	sub	sp, #28
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2a30:	69c0      	ldr	r0, [r0, #28]
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}

			void Sinelon(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2a32:	461e      	mov	r6, r3
    2a34:	4690      	mov	r8, r2
    2a36:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2a38:	f003 fefe 	bl	6838 <__aeabi_i2f>
    2a3c:	49a1      	ldr	r1, [pc, #644]	; (2cc4 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x29c>)
    2a3e:	f003 ff4f 	bl	68e0 <__aeabi_fmul>
    2a42:	49a1      	ldr	r1, [pc, #644]	; (2cc8 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2a0>)
    2a44:	f004 f800 	bl	6a48 <__aeabi_fdiv>
    2a48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2a4c:	f003 fe40 	bl	66d0 <__addsf3>
    2a50:	f004 f90c 	bl	6c6c <__aeabi_f2iz>
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    2a54:	2e00      	cmp	r6, #0
    2a56:	dd21      	ble.n	2a9c <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x74>
    2a58:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    2a5c:	b2c9      	uxtb	r1, r1
    2a5e:	3101      	adds	r1, #1
    2a60:	4640      	mov	r0, r8
    2a62:	eb08 0546 	add.w	r5, r8, r6, lsl #1
				{
					int scale = 255 - fade;
					(leds[indexes[i]]).nscale8(scale);
    2a66:	f830 3b02 	ldrh.w	r3, [r0], #2
    2a6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2a6e:	eb04 0e03 	add.w	lr, r4, r3
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2a72:	5ce2      	ldrb	r2, [r4, r3]
    2a74:	fb01 f202 	mul.w	r2, r1, r2
    2a78:	1212      	asrs	r2, r2, #8
    2a7a:	54e2      	strb	r2, [r4, r3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a7c:	f89e 2001 	ldrb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a80:	f89e 3002 	ldrb.w	r3, [lr, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a84:	fb01 f202 	mul.w	r2, r1, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a88:	fb01 f303 	mul.w	r3, r1, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a8c:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a8e:	121b      	asrs	r3, r3, #8
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    2a90:	42a8      	cmp	r0, r5
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a92:	f88e 2001 	strb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a96:	f88e 3002 	strb.w	r3, [lr, #2]
    2a9a:	d1e4      	bne.n	2a66 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a9c:	4a8b      	ldr	r2, [pc, #556]	; (2ccc <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2a4>)
    2a9e:	6813      	ldr	r3, [r2, #0]
    2aa0:	9304      	str	r3, [sp, #16]
	return ret;
    2aa2:	9804      	ldr	r0, [sp, #16]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2aa4:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    2aa8:	fb03 f000 	mul.w	r0, r3, r0
    2aac:	0c00      	lsrs	r0, r0, #16
			{
				// Display a dot moving back and forth in a sin wave pattern.
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				uint16_t index = indexes[beatsin16(8, 0, numLeds - 1)];
    2aae:	f106 3aff 	add.w	sl, r6, #4294967295
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2ab2:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2ab4:	f3c0 01ca 	ubfx	r1, r0, #3, #11
    2ab8:	fa1f f98a 	uxth.w	r9, sl
    if( theta & 0x4000 ) offset = 2047 - offset;
    2abc:	d503      	bpl.n	2ac6 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x9e>
    2abe:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2ac2:	3107      	adds	r1, #7
    2ac4:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    uint8_t  m   = slope[section];
    2ac6:	4b82      	ldr	r3, [pc, #520]	; (2cd0 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2a8>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2ac8:	f8df b210 	ldr.w	fp, [pc, #528]	; 2cdc <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2b4>
    2acc:	9300      	str	r3, [sp, #0]
    2ace:	0a0d      	lsrs	r5, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ad0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2ad4:	f813 e005 	ldrb.w	lr, [r3, r5]
    2ad8:	f83b 5015 	ldrh.w	r5, [fp, r5, lsl #1]
    2adc:	9201      	str	r2, [sp, #4]
    2ade:	fb0e 5101 	mla	r1, lr, r1, r5

    if( theta & 0x8000 ) y = -y;
    2ae2:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ae4:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2ae6:	bf48      	it	mi
    2ae8:	4249      	negmi	r1, r1
    2aea:	b209      	sxth	r1, r1
    2aec:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    2af0:	b289      	uxth	r1, r1
LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )
{
  #if SCALE16_C == 1
    uint16_t result;
#if FASTLED_SCALE8_FIXED == 1
    result = ((uint32_t)(i) * (1+(uint32_t)(scale))) / 65536;
    2af2:	f109 0901 	add.w	r9, r9, #1
    2af6:	fb09 f101 	mul.w	r1, r9, r1
    2afa:	0c09      	lsrs	r1, r1, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2afc:	6978      	ldr	r0, [r7, #20]
    2afe:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    2b02:	f100 0e40 	add.w	lr, r0, #64	; 0x40
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b06:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    2b0a:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2b0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2b10:	f88d e014 	strb.w	lr, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b14:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2b16:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
    2b1a:	f88d c015 	strb.w	ip, [sp, #21]
    2b1e:	f88d e016 	strb.w	lr, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b22:	f7ff f9e9 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2b26:	9b10      	ldr	r3, [sp, #64]	; 0x40

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2b28:	2104      	movs	r1, #4
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2b2a:	2b00      	cmp	r3, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2b2c:	60f9      	str	r1, [r7, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2b2e:	db4a      	blt.n	2bc6 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x19e>
				uint16_t index = indexes[beatsin16(8, 0, numLeds - 1)];
				leds[index] = CHSV(gHue + 64, 255, 192);

				// Modes
				SetNumModes(4);
				switch (GetModeNumber(modeOffset))
    2b30:	68b9      	ldr	r1, [r7, #8]
    2b32:	4868      	ldr	r0, [pc, #416]	; (2cd4 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2ac>)
    2b34:	9a01      	ldr	r2, [sp, #4]
    2b36:	4419      	add	r1, r3
    2b38:	fb80 3e01 	smull	r3, lr, r0, r1
    2b3c:	17c8      	asrs	r0, r1, #31
    2b3e:	ebc0 006e 	rsb	r0, r0, lr, asr #1
    2b42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2b46:	1a09      	subs	r1, r1, r0
    2b48:	3901      	subs	r1, #1
    2b4a:	9b00      	ldr	r3, [sp, #0]
    2b4c:	2903      	cmp	r1, #3
    2b4e:	d83a      	bhi.n	2bc6 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x19e>
    2b50:	e8df f001 	tbb	[pc, r1]
    2b54:	3c679002 	.word	0x3c679002
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2b58:	6812      	ldr	r2, [r2, #0]
    2b5a:	9205      	str	r2, [sp, #20]
	return ret;
    2b5c:	9805      	ldr	r0, [sp, #20]
    2b5e:	f44f 220c 	mov.w	r2, #573440	; 0x8c000
    2b62:	fb02 f000 	mul.w	r0, r2, r0
    2b66:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b68:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2b6a:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b6e:	d503      	bpl.n	2b78 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x150>
    2b70:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    2b74:	3207      	adds	r2, #7
    2b76:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2b78:	0a15      	lsrs	r5, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b7a:	f3c2 0146 	ubfx	r1, r2, #1, #7
    2b7e:	5d5a      	ldrb	r2, [r3, r5]
    2b80:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
    2b84:	fb02 3201 	mla	r2, r2, r1, r3
    2b88:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    2b8a:	0403      	lsls	r3, r0, #16
    2b8c:	bf4a      	itet	mi
    2b8e:	4253      	negmi	r3, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b90:	b213      	sxthpl	r3, r2

    if( theta & 0x8000 ) y = -y;
    2b92:	b21b      	sxthmi	r3, r3
				{
				case 1:
				{
					// Add a second, opposite dot moving in the opposite direction.
					uint16_t oppositeIndex = indexes[(numLeds - 1) - (beatsin16(8, 0, numLeds - 1))];
    2b94:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2b98:	b29b      	uxth	r3, r3
    2b9a:	fb09 f903 	mul.w	r9, r9, r3
    2b9e:	ebaa 4a19 	sub.w	sl, sl, r9, lsr #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2ba2:	697b      	ldr	r3, [r7, #20]
					leds[oppositeIndex] = CHSV(gHue + 128, 255, 192);
    2ba4:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
    2ba8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2bac:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2bae:	3b80      	subs	r3, #128	; 0x80
    2bb0:	24ff      	movs	r4, #255	; 0xff
    2bb2:	22c0      	movs	r2, #192	; 0xc0
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2bb4:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2bb6:	f88d 300c 	strb.w	r3, [sp, #12]
    2bba:	f88d 400d 	strb.w	r4, [sp, #13]
    2bbe:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2bc2:	f7ff f999 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2bc6:	b007      	add	sp, #28
    2bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bcc:	4b41      	ldr	r3, [pc, #260]	; (2cd4 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2ac>)
    2bce:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    2bd2:	fb83 2306 	smull	r2, r3, r3, r6
    2bd6:	ebca 0a63 	rsb	sl, sl, r3, asr #1
    2bda:	4455      	add	r5, sl
					break;
				case 3:
					GenerateSinelons(leds, indexes, numLeds, 3, index);
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
    2bdc:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2be0:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
			{
				for (int i = 0; i < numSinelons; i++)
				{
					int hue = gHue + (int)((255 / numSinelons) * i);

					uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    2be4:	fb95 f2f6 	sdiv	r2, r5, r6
    2be8:	fb06 5212 	mls	r2, r6, r2, r5
    2bec:	697b      	ldr	r3, [r7, #20]
					leds[index] = CHSV(hue, 255, 192);
    2bee:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    2bf2:	f88d b016 	strb.w	fp, [sp, #22]
    2bf6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2bfa:	444b      	add	r3, r9
    2bfc:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2c00:	4421      	add	r1, r4
    2c02:	f109 0933 	add.w	r9, r9, #51	; 0x33
    2c06:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2c08:	f88d 2015 	strb.w	r2, [sp, #21]
    2c0c:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2c10:	f7ff f972 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				}
			}

			void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
			{
				for (int i = 0; i < numSinelons; i++)
    2c14:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2c18:	4455      	add	r5, sl
    2c1a:	d1e3      	bne.n	2be4 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x1bc>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2c1c:	b007      	add	sp, #28
    2c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c22:	4b2d      	ldr	r3, [pc, #180]	; (2cd8 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2b0>)
    2c24:	fb83 3a06 	smull	r3, sl, r3, r6
    2c28:	ebaa 7ae6 	sub.w	sl, sl, r6, asr #31
    2c2c:	4455      	add	r5, sl
				}
				case 2:
					GenerateSinelons(leds, indexes, numLeds, 2, index);
					break;
				case 3:
					GenerateSinelons(leds, indexes, numLeds, 3, index);
    2c2e:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2c32:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
			{
				for (int i = 0; i < numSinelons; i++)
				{
					int hue = gHue + (int)((255 / numSinelons) * i);

					uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    2c36:	fb95 f2f6 	sdiv	r2, r5, r6
    2c3a:	fb06 5212 	mls	r2, r6, r2, r5
    2c3e:	697b      	ldr	r3, [r7, #20]
					leds[index] = CHSV(hue, 255, 192);
    2c40:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    2c44:	f88d b016 	strb.w	fp, [sp, #22]
    2c48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2c4c:	444b      	add	r3, r9
    2c4e:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2c52:	4421      	add	r1, r4
    2c54:	f109 0955 	add.w	r9, r9, #85	; 0x55
    2c58:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2c5a:	f88d 2015 	strb.w	r2, [sp, #21]
    2c5e:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2c62:	f7ff f949 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				}
			}

			void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
			{
				for (int i = 0; i < numSinelons; i++)
    2c66:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2c6a:	4455      	add	r5, sl
    2c6c:	d1e3      	bne.n	2c36 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x20e>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2c6e:	b007      	add	sp, #28
    2c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c74:	eb06 7ad6 	add.w	sl, r6, r6, lsr #31
    2c78:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    2c7c:	4455      	add	r5, sl
					uint16_t oppositeIndex = indexes[(numLeds - 1) - (beatsin16(8, 0, numLeds - 1))];
					leds[oppositeIndex] = CHSV(gHue + 128, 255, 192);
					break;
				}
				case 2:
					GenerateSinelons(leds, indexes, numLeds, 2, index);
    2c7e:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2c82:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
			{
				for (int i = 0; i < numSinelons; i++)
				{
					int hue = gHue + (int)((255 / numSinelons) * i);

					uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    2c86:	fb95 f2f6 	sdiv	r2, r5, r6
    2c8a:	fb06 5212 	mls	r2, r6, r2, r5
    2c8e:	697b      	ldr	r3, [r7, #20]
					leds[index] = CHSV(hue, 255, 192);
    2c90:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    2c94:	f88d b016 	strb.w	fp, [sp, #22]
    2c98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2c9c:	444b      	add	r3, r9
    2c9e:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2ca2:	4421      	add	r1, r4
    2ca4:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    2ca8:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2caa:	f88d 2015 	strb.w	r2, [sp, #21]
    2cae:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2cb2:	f7ff f921 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				}
			}

			void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
			{
				for (int i = 0; i < numSinelons; i++)
    2cb6:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
    2cba:	4455      	add	r5, sl
    2cbc:	d1e3      	bne.n	2c86 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x25e>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2cbe:	b007      	add	sp, #28
    2cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cc4:	41e00000 	.word	0x41e00000
    2cc8:	447fc000 	.word	0x447fc000
    2ccc:	1fffa138 	.word	0x1fffa138
    2cd0:	00008658 	.word	0x00008658
    2cd4:	66666667 	.word	0x66666667
    2cd8:	55555556 	.word	0x55555556
    2cdc:	00008634 	.word	0x00008634

00002ce0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)>:

			void Bpm(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ce4:	4db3      	ldr	r5, [pc, #716]	; (2fb4 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2d4>)
    2ce6:	4cb4      	ldr	r4, [pc, #720]	; (2fb8 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2d8>)
    2ce8:	682d      	ldr	r5, [r5, #0]
    2cea:	b0d3      	sub	sp, #332	; 0x14c
    2cec:	4683      	mov	fp, r0
    2cee:	9509      	str	r5, [sp, #36]	; 0x24
	return ret;
    2cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
    2cf2:	9207      	str	r2, [sp, #28]
    2cf4:	fb04 f000 	mul.w	r0, r4, r0
    2cf8:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    2cfa:	b2c4      	uxtb	r4, r0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2cfc:	2504      	movs	r5, #4
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}

			void Bpm(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2cfe:	468a      	mov	sl, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2d00:	0661      	lsls	r1, r4, #25
    2d02:	9306      	str	r3, [sp, #24]

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2d04:	f8cb 500c 	str.w	r5, [fp, #12]
    2d08:	f140 80f7 	bpl.w	2efa <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x21a>
        offset = (uint8_t)255 - offset;
    2d0c:	43e3      	mvns	r3, r4
    2d0e:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2d10:	f003 040f 	and.w	r4, r3, #15
    if( theta & 0x40) secoffset++;
    2d14:	3401      	adds	r4, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2d1a:	49a8      	ldr	r1, [pc, #672]	; (2fbc <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2dc>)
    2d1c:	111b      	asrs	r3, r3, #4
    2d1e:	005b      	lsls	r3, r3, #1
    2d20:	18ca      	adds	r2, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2d22:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    2d24:	7852      	ldrb	r2, [r2, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2d26:	fb12 f204 	smulbb	r2, r2, r4
    2d2a:	eb03 1322 	add.w	r3, r3, r2, asr #4
    2d2e:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    2d30:	0602      	lsls	r2, r0, #24
    2d32:	bf48      	it	mi
    2d34:	425b      	negmi	r3, r3
    2d36:	b25b      	sxtb	r3, r3

    y += 128;
    2d38:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    2d3a:	b2db      	uxtb	r3, r3
    2d3c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2d40:	f8db 001c 	ldr.w	r0, [fp, #28]
    2d44:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    2d48:	f003 fd76 	bl	6838 <__aeabi_i2f>
    2d4c:	499c      	ldr	r1, [pc, #624]	; (2fc0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2e0>)
    2d4e:	f003 fdc7 	bl	68e0 <__aeabi_fmul>
    2d52:	499c      	ldr	r1, [pc, #624]	; (2fc4 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2e4>)
    2d54:	f003 fe78 	bl	6a48 <__aeabi_fdiv>
    2d58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2d5c:	f003 fcb8 	bl	66d0 <__addsf3>
    2d60:	f003 ff84 	bl	6c6c <__aeabi_f2iz>
				SetNumModes(4);

				int bpm = 60;
				int beat = beatsin8(bpm, 63, 255);
				int multiplier = GetAnalogPattern(2, 12);
				for (int i = 0; i < numLeds; i++)
    2d64:	9b06      	ldr	r3, [sp, #24]
    2d66:	122d      	asrs	r5, r5, #8
    2d68:	353f      	adds	r5, #63	; 0x3f
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	b2ed      	uxtb	r5, r5
    2d6e:	f340 80ac 	ble.w	2eca <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1ea>
    2d72:	b2c3      	uxtb	r3, r0
    2d74:	9305      	str	r3, [sp, #20]
    2d76:	9a06      	ldr	r2, [sp, #24]
    2d78:	9b07      	ldr	r3, [sp, #28]
    2d7a:	4698      	mov	r8, r3
    2d7c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    2d80:	9304      	str	r3, [sp, #16]
    2d82:	2700      	movs	r7, #0
    2d84:	ac22      	add	r4, sp, #136	; 0x88
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
    2d86:	f838 6b02 	ldrh.w	r6, [r8], #2
    2d8a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    2d8e:	9303      	str	r3, [sp, #12]
    2d90:	eb0a 0903 	add.w	r9, sl, r3
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2d94:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    2d96:	2b00      	cmp	r3, #0
    2d98:	f2c0 80ab 	blt.w	2ef2 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x212>
    2d9c:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    2d9e:	f8db 1008 	ldr.w	r1, [fp, #8]
    2da2:	f8db 300c 	ldr.w	r3, [fp, #12]
    2da6:	4411      	add	r1, r2
    2da8:	3301      	adds	r3, #1
    2daa:	fb91 f2f3 	sdiv	r2, r1, r3
    2dae:	fb03 1312 	mls	r3, r3, r2, r1
    2db2:	4a85      	ldr	r2, [pc, #532]	; (2fc8 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2e8>)
    2db4:	fba2 2103 	umull	r2, r1, r2, r3
    2db8:	0889      	lsrs	r1, r1, #2
    2dba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2dbe:	1a59      	subs	r1, r3, r1
    2dc0:	ab16      	add	r3, sp, #88	; 0x58
    2dc2:	f8df e20c 	ldr.w	lr, [pc, #524]	; 2fd0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2f0>
    2dc6:	9e03      	ldr	r6, [sp, #12]
    2dc8:	461a      	mov	r2, r3
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2dca:	f85e 0f04 	ldr.w	r0, [lr, #4]!
    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    2dce:	7090      	strb	r0, [r2, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2dd0:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2dd4:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2dd6:	f882 c000 	strb.w	ip, [r2]
        g = (colorcode >>  8) & 0xFF;
    2dda:	7050      	strb	r0, [r2, #1]
    2ddc:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2dde:	42a2      	cmp	r2, r4
    2de0:	d1f3      	bne.n	2dca <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xea>
    2de2:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 2fd4 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2f4>
    2de6:	aa16      	add	r2, sp, #88	; 0x58
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2de8:	f85e 0f04 	ldr.w	r0, [lr, #4]!
        b = (colorcode >>  0) & 0xFF;
    2dec:	f882 0032 	strb.w	r0, [r2, #50]	; 0x32
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2df0:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2df4:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2df6:	f882 c030 	strb.w	ip, [r2, #48]	; 0x30
        g = (colorcode >>  8) & 0xFF;
    2dfa:	f882 0031 	strb.w	r0, [r2, #49]	; 0x31
    2dfe:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2e00:	42a2      	cmp	r2, r4
    2e02:	d1f1      	bne.n	2de8 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x108>
    2e04:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 2fd8 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2f8>
    2e08:	aa16      	add	r2, sp, #88	; 0x58
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2e0a:	f85e 0f04 	ldr.w	r0, [lr, #4]!
        b = (colorcode >>  0) & 0xFF;
    2e0e:	f882 0062 	strb.w	r0, [r2, #98]	; 0x62
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2e12:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2e16:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2e18:	f882 c060 	strb.w	ip, [r2, #96]	; 0x60
        g = (colorcode >>  8) & 0xFF;
    2e1c:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    2e20:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2e22:	42a2      	cmp	r2, r4
    2e24:	d1f1      	bne.n	2e0a <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x12a>
    2e26:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 2fdc <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2fc>
    2e2a:	aa16      	add	r2, sp, #88	; 0x58
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2e2c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
        b = (colorcode >>  0) & 0xFF;
    2e30:	f882 0092 	strb.w	r0, [r2, #146]	; 0x92
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2e34:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2e38:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2e3a:	f882 c090 	strb.w	ip, [r2, #144]	; 0x90
        g = (colorcode >>  8) & 0xFF;
    2e3e:	f882 0091 	strb.w	r0, [r2, #145]	; 0x91
    2e42:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2e44:	42a2      	cmp	r2, r4
    2e46:	d1f1      	bne.n	2e2c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x14c>
    2e48:	4860      	ldr	r0, [pc, #384]	; (2fcc <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2ec>)
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2e4a:	f850 2f04 	ldr.w	r2, [r0, #4]!
        b = (colorcode >>  0) & 0xFF;
    2e4e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2e56:	0a12      	lsrs	r2, r2, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2e58:	f883 e0c0 	strb.w	lr, [r3, #192]	; 0xc0
        g = (colorcode >>  8) & 0xFF;
    2e5c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    2e60:	3303      	adds	r3, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2e62:	429c      	cmp	r4, r3
    2e64:	d1f1      	bne.n	2e4a <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x16a>
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    2e66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2e6a:	ab16      	add	r3, sp, #88	; 0x58
    2e6c:	eb03 1e01 	add.w	lr, r3, r1, lsl #4
    2e70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2e74:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
    2e78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e84:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    2e88:	9603      	str	r6, [sp, #12]
				int bpm = 60;
				int beat = beatsin8(bpm, 63, 255);
				int multiplier = GetAnalogPattern(2, 12);
				for (int i = 0; i < numLeds; i++)
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
    2e8a:	2601      	movs	r6, #1
    2e8c:	9600      	str	r6, [sp, #0]
    2e8e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    2e92:	462b      	mov	r3, r5
    2e94:	463a      	mov	r2, r7
    2e96:	a90a      	add	r1, sp, #40	; 0x28
    2e98:	a816      	add	r0, sp, #88	; 0x58
    2e9a:	f7fe ff0b 	bl	1cb4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2e9e:	9b05      	ldr	r3, [sp, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ea0:	9803      	ldr	r0, [sp, #12]
    2ea2:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    2ea6:	f80a 1000 	strb.w	r1, [sl, r0]
    2eaa:	441f      	add	r7, r3
        g = rhs.g;
        b = rhs.b;
    2eac:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    2eb0:	f889 3002 	strb.w	r3, [r9, #2]
				SetNumModes(4);

				int bpm = 60;
				int beat = beatsin8(bpm, 63, 255);
				int multiplier = GetAnalogPattern(2, 12);
				for (int i = 0; i < numLeds; i++)
    2eb4:	9b04      	ldr	r3, [sp, #16]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2eb6:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    2eba:	f889 2001 	strb.w	r2, [r9, #1]
    2ebe:	3d0a      	subs	r5, #10
    2ec0:	4598      	cmp	r8, r3
    2ec2:	b2ff      	uxtb	r7, r7
    2ec4:	b2ed      	uxtb	r5, r5
    2ec6:	f47f af5e 	bne.w	2d86 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xa6>
    2eca:	f89b 0031 	ldrb.w	r0, [fp, #49]	; 0x31
    2ece:	f89b 1032 	ldrb.w	r1, [fp, #50]	; 0x32
    2ed2:	f89b 2033 	ldrb.w	r2, [fp, #51]	; 0x33
    2ed6:	f89b 5034 	ldrb.w	r5, [fp, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    2eda:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
				if (gHue1) val++;
				if (gHue2) val++;
    2ede:	b950      	cbnz	r0, 2ef6 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x216>
    2ee0:	461c      	mov	r4, r3
				if (gHue3) val++;
    2ee2:	b101      	cbz	r1, 2ee6 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x206>
    2ee4:	3401      	adds	r4, #1
				if (gHue4) val++;
    2ee6:	b96a      	cbnz	r2, 2f04 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x224>
				if (gHue5) val++;
    2ee8:	b965      	cbnz	r5, 2f04 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x224>
				}
			}

			void BlendFromHue(CRGB leds[], uint16_t indexes[], int numLeds, byte amount = 127)
			{
				if (GetToggledHueCount() == 0) return;
    2eea:	b95c      	cbnz	r4, 2f04 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x224>
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
				}

				BlendFromHue(leds, indexes, numLeds);
			}
    2eec:	b053      	add	sp, #332	; 0x14c
    2eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2ef2:	2100      	movs	r1, #0
    2ef4:	e764      	b.n	2dc0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xe0>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    2ef6:	1c5c      	adds	r4, r3, #1
    2ef8:	e7f3      	b.n	2ee2 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x202>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2efa:	f004 033f 	and.w	r3, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2efe:	f004 040f 	and.w	r4, r4, #15
    2f02:	e70a      	b.n	2d1a <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x3a>
    2f04:	b100      	cbz	r0, 2f08 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x228>
    2f06:	3301      	adds	r3, #1
				if (gHue3) val++;
    2f08:	b101      	cbz	r1, 2f0c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x22c>
    2f0a:	3301      	adds	r3, #1
				if (gHue4) val++;
    2f0c:	b102      	cbz	r2, 2f10 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x230>
    2f0e:	3301      	adds	r3, #1
				if (gHue5) val++;
    2f10:	b105      	cbz	r5, 2f14 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x234>
    2f12:	3301      	adds	r3, #1

			/// Return an arbitrary RGB color for a given number of toggled hue buttons. 
			/// This will be to add color to CRGBs, since they cannot have hue applied to them.
			CRGB GetRgbFromHue()
			{
				switch (GetToggledHueCount())
    2f14:	3b01      	subs	r3, #1
    2f16:	2b03      	cmp	r3, #3
    2f18:	d843      	bhi.n	2fa2 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2c2>
    2f1a:	e8df f003 	tbb	[pc, r3]
    2f1e:	3039      	.short	0x3039
    2f20:	0227      	.short	0x0227
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2f22:	2300      	movs	r3, #0
    2f24:	22ff      	movs	r2, #255	; 0xff
    2f26:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    2f2a:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    2f2e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
				}
			}

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
    2f32:	9b06      	ldr	r3, [sp, #24]
    2f34:	2b00      	cmp	r3, #0
    2f36:	ddd9      	ble.n	2eec <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x20c>
    2f38:	9c07      	ldr	r4, [sp, #28]
    2f3a:	9b06      	ldr	r3, [sp, #24]
    2f3c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
				{
					CRGB led = leds[indexes[i]];
    2f40:	f834 3b02 	ldrh.w	r3, [r4], #2
    2f44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					if (led)
					{
						nblend(leds[indexes[i]], color, amount);
    2f48:	227f      	movs	r2, #127	; 0x7f
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    2f4a:	f81a 5003 	ldrb.w	r5, [sl, r3]

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
				{
					CRGB led = leds[indexes[i]];
    2f4e:	4453      	add	r3, sl
					if (led)
					{
						nblend(leds[indexes[i]], color, amount);
    2f50:	a916      	add	r1, sp, #88	; 0x58
    2f52:	4618      	mov	r0, r3
    2f54:	b91d      	cbnz	r5, 2f5e <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x27e>
    2f56:	785d      	ldrb	r5, [r3, #1]
    2f58:	b90d      	cbnz	r5, 2f5e <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x27e>
    2f5a:	789b      	ldrb	r3, [r3, #2]
    2f5c:	b10b      	cbz	r3, 2f62 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x282>
    2f5e:	f7fe fe6d 	bl	1c3c <nblend(CRGB&, CRGB const&, unsigned char)>
				}
			}

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
    2f62:	42a6      	cmp	r6, r4
    2f64:	d1ec      	bne.n	2f40 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x260>
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
				}

				BlendFromHue(leds, indexes, numLeds);
			}
    2f66:	b053      	add	sp, #332	; 0x14c
    2f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2f6c:	2300      	movs	r3, #0
    2f6e:	22ff      	movs	r2, #255	; 0xff
    2f70:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2f74:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    2f78:	f88d 205a 	strb.w	r2, [sp, #90]	; 0x5a
    2f7c:	e7d9      	b.n	2f32 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2f7e:	2300      	movs	r3, #0
    2f80:	2280      	movs	r2, #128	; 0x80
    2f82:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2f86:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    2f8a:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
    2f8e:	e7d0      	b.n	2f32 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2f90:	2380      	movs	r3, #128	; 0x80
    2f92:	2200      	movs	r2, #0
    2f94:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2f98:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    2f9c:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
    2fa0:	e7c7      	b.n	2f32 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2fa2:	2300      	movs	r3, #0
    2fa4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2fa8:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    2fac:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    2fb0:	e7bf      	b.n	2f32 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2fb2:	bf00      	nop
    2fb4:	1fffa138 	.word	0x1fffa138
    2fb8:	0041a000 	.word	0x0041a000
    2fbc:	00008644 	.word	0x00008644
    2fc0:	41200000 	.word	0x41200000
    2fc4:	447fc000 	.word	0x447fc000
    2fc8:	cccccccd 	.word	0xcccccccd
    2fcc:	000084a0 	.word	0x000084a0
    2fd0:	000084e0 	.word	0x000084e0
    2fd4:	000085a0 	.word	0x000085a0
    2fd8:	00008520 	.word	0x00008520
    2fdc:	00008560 	.word	0x00008560

00002fe0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)>:
				}

				delay(speedDelay);
			}

			void RunningLights(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fe4:	4605      	mov	r5, r0
    2fe6:	b08b      	sub	sp, #44	; 0x2c

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2fe8:	2005      	movs	r0, #5
    2fea:	60e8      	str	r0, [r5, #12]
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2fec:	69e8      	ldr	r0, [r5, #28]
				}

				delay(speedDelay);
			}

			void RunningLights(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2fee:	9205      	str	r2, [sp, #20]
    2ff0:	461e      	mov	r6, r3
    2ff2:	4617      	mov	r7, r2
    2ff4:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2ff6:	f003 fc1f 	bl	6838 <__aeabi_i2f>
    2ffa:	499e      	ldr	r1, [pc, #632]	; (3274 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x294>)
    2ffc:	f003 fc70 	bl	68e0 <__aeabi_fmul>
    3000:	499d      	ldr	r1, [pc, #628]	; (3278 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x298>)
    3002:	f003 fd21 	bl	6a48 <__aeabi_fdiv>
    3006:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
    300a:	f003 fb61 	bl	66d0 <__addsf3>
    300e:	f003 fe2d 	bl	6c6c <__aeabi_f2iz>
				byte blue = 100;

				int frequency = 2;
				int length = GetAnalogPattern(4, 40);

				for (int i = 0; i < numLeds; i++)
    3012:	2e00      	cmp	r6, #0
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    3014:	9004      	str	r0, [sp, #16]
				byte blue = 100;

				int frequency = 2;
				int length = GetAnalogPattern(4, 40);

				for (int i = 0; i < numLeds; i++)
    3016:	f340 812a 	ble.w	326e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x28e>
    301a:	23b4      	movs	r3, #180	; 0xb4
    301c:	463a      	mov	r2, r7
    301e:	9302      	str	r3, [sp, #8]
    3020:	e88d 000c 	stmia.w	sp, {r2, r3}
    3024:	2364      	movs	r3, #100	; 0x64
    3026:	eb07 0646 	add.w	r6, r7, r6, lsl #1
    302a:	9303      	str	r3, [sp, #12]
    302c:	2700      	movs	r7, #0
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    302e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3030:	2b00      	cmp	r3, #0
    3032:	f2c0 8227 	blt.w	3484 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4a4>
					float redSin;
					float greenSin;
					float blueSin;

					// Modes
					switch (GetModeNumber(modeOffset))
    3036:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3038:	68a9      	ldr	r1, [r5, #8]
    303a:	68eb      	ldr	r3, [r5, #12]
    303c:	4411      	add	r1, r2
    303e:	3301      	adds	r3, #1
    3040:	fb91 f2f3 	sdiv	r2, r1, r3
    3044:	fb03 1312 	mls	r3, r3, r2, r1
    3048:	3b01      	subs	r3, #1
    304a:	2b04      	cmp	r3, #4
    304c:	f200 821a 	bhi.w	3484 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4a4>
    3050:	e8df f013 	tbh	[pc, r3, lsl #1]
    3054:	0159017f 	.word	0x0159017f
    3058:	0118019a 	.word	0x0118019a
    305c:	0005      	.short	0x0005
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
						break;
					}
					case 5:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    305e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    3060:	f003 fbea 	bl	6838 <__aeabi_i2f>
    3064:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3068:	f003 fc3a 	bl	68e0 <__aeabi_fmul>
    306c:	4682      	mov	sl, r0
    306e:	4638      	mov	r0, r7
    3070:	f003 fbe2 	bl	6838 <__aeabi_i2f>
    3074:	4651      	mov	r1, sl
    3076:	f003 fb2b 	bl	66d0 <__addsf3>
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    307a:	2f00      	cmp	r7, #0
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
						break;
					}
					case 5:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    307c:	4681      	mov	r9, r0
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    307e:	4638      	mov	r0, r7
    3080:	bfb8      	it	lt
    3082:	1cf8      	addlt	r0, r7, #3
    3084:	1080      	asrs	r0, r0, #2
    3086:	f003 fbd7 	bl	6838 <__aeabi_i2f>
    308a:	4651      	mov	r1, sl
    308c:	f003 fb1e 	bl	66cc <__aeabi_fsub>
    3090:	4680      	mov	r8, r0
						blueSin = (i * length / 2) + (gFrame / (float)frequency / 2);
    3092:	eb07 70d7 	add.w	r0, r7, r7, lsr #31
    3096:	1040      	asrs	r0, r0, #1
    3098:	f003 fbce 	bl	6838 <__aeabi_i2f>
    309c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    30a0:	4683      	mov	fp, r0
    30a2:	4650      	mov	r0, sl
    30a4:	f003 fc1c 	bl	68e0 <__aeabi_fmul>
    30a8:	4601      	mov	r1, r0
    30aa:	4658      	mov	r0, fp
    30ac:	f003 fb10 	bl	66d0 <__addsf3>
    30b0:	4682      	mov	sl, r0
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    30b2:	2100      	movs	r1, #0
    30b4:	4648      	mov	r0, r9
    30b6:	f003 fdcf 	bl	6c58 <__aeabi_fcmpgt>
    30ba:	2800      	cmp	r0, #0
    30bc:	f000 810e 	beq.w	32dc <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2fc>
    30c0:	4648      	mov	r0, r9
    30c2:	f003 fdf9 	bl	6cb8 <__aeabi_f2uiz>
    30c6:	b2c0      	uxtb	r0, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    30c8:	0641      	lsls	r1, r0, #25
    30ca:	f140 817c 	bpl.w	33c6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3e6>
        offset = (uint8_t)255 - offset;
    30ce:	43c2      	mvns	r2, r0
    30d0:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    30d2:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    30d6:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    30d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    30dc:	4967      	ldr	r1, [pc, #412]	; (327c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x29c>)
    30de:	1112      	asrs	r2, r2, #4
    30e0:	0052      	lsls	r2, r2, #1
    30e2:	eb01 0e02 	add.w	lr, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    30e6:	5c8a      	ldrb	r2, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    30e8:	f89e 1001 	ldrb.w	r1, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    30ec:	fb11 f303 	smulbb	r3, r1, r3
    30f0:	eb02 1323 	add.w	r3, r2, r3, asr #4
    30f4:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    30f6:	0602      	lsls	r2, r0, #24
    30f8:	bf4a      	itet	mi
    30fa:	4258      	negmi	r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    30fc:	b258      	sxtbpl	r0, r3
    if( theta & 0x80 ) y = -y;
    30fe:	b240      	sxtbmi	r0, r0
    3100:	3880      	subs	r0, #128	; 0x80
    3102:	b2c0      	uxtb	r0, r0
    3104:	f003 fb98 	bl	6838 <__aeabi_i2f>
    3108:	495d      	ldr	r1, [pc, #372]	; (3280 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2a0>)
    310a:	f003 fc9d 	bl	6a48 <__aeabi_fdiv>
    310e:	4681      	mov	r9, r0
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    3110:	2100      	movs	r1, #0
    3112:	4640      	mov	r0, r8
    3114:	f003 fda0 	bl	6c58 <__aeabi_fcmpgt>
    3118:	2800      	cmp	r0, #0
    311a:	f000 80e8 	beq.w	32ee <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x30e>
    311e:	4640      	mov	r0, r8
    3120:	f003 fdca 	bl	6cb8 <__aeabi_f2uiz>
    3124:	b2c0      	uxtb	r0, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3126:	0643      	lsls	r3, r0, #25
    3128:	f140 8157 	bpl.w	33da <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3fa>
        offset = (uint8_t)255 - offset;
    312c:	43c2      	mvns	r2, r0
    312e:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3130:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    3134:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3136:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    313a:	4950      	ldr	r1, [pc, #320]	; (327c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x29c>)
    313c:	1112      	asrs	r2, r2, #4
    313e:	0052      	lsls	r2, r2, #1
    3140:	eb01 0e02 	add.w	lr, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3144:	5c8a      	ldrb	r2, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    3146:	f89e 1001 	ldrb.w	r1, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    314a:	fb11 f303 	smulbb	r3, r1, r3
    314e:	eb02 1323 	add.w	r3, r2, r3, asr #4
    if( theta & 0x80 ) y = -y;
    3152:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3154:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    3156:	bf4a      	itet	mi
    3158:	4258      	negmi	r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    315a:	b258      	sxtbpl	r0, r3
    if( theta & 0x80 ) y = -y;
    315c:	b240      	sxtbmi	r0, r0
    315e:	3880      	subs	r0, #128	; 0x80
    3160:	b2c0      	uxtb	r0, r0
    3162:	f003 fb69 	bl	6838 <__aeabi_i2f>
    3166:	4946      	ldr	r1, [pc, #280]	; (3280 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2a0>)
    3168:	f003 fc6e 	bl	6a48 <__aeabi_fdiv>
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    316c:	2100      	movs	r1, #0
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    316e:	4680      	mov	r8, r0
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    3170:	4650      	mov	r0, sl
    3172:	f003 fd71 	bl	6c58 <__aeabi_fcmpgt>
    3176:	2800      	cmp	r0, #0
    3178:	f000 80c2 	beq.w	3300 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x320>
    317c:	4650      	mov	r0, sl
    317e:	f003 fd9b 	bl	6cb8 <__aeabi_f2uiz>
    3182:	b2c0      	uxtb	r0, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3184:	0641      	lsls	r1, r0, #25
    3186:	f140 8123 	bpl.w	33d0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3f0>
        offset = (uint8_t)255 - offset;
    318a:	43c2      	mvns	r2, r0
    318c:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    318e:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    3192:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3194:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    3198:	4938      	ldr	r1, [pc, #224]	; (327c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x29c>)
    319a:	1112      	asrs	r2, r2, #4
    319c:	0052      	lsls	r2, r2, #1
    319e:	eb01 0e02 	add.w	lr, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    31a2:	5c8a      	ldrb	r2, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    31a4:	f89e 1001 	ldrb.w	r1, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    31a8:	fb11 f303 	smulbb	r3, r1, r3
    31ac:	eb02 1323 	add.w	r3, r2, r3, asr #4
    31b0:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    31b2:	0602      	lsls	r2, r0, #24
    31b4:	bf4a      	itet	mi
    31b6:	4258      	negmi	r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    31b8:	b258      	sxtbpl	r0, r3
    if( theta & 0x80 ) y = -y;
    31ba:	b240      	sxtbmi	r0, r0
    31bc:	3880      	subs	r0, #128	; 0x80
    31be:	b2c0      	uxtb	r0, r0
    31c0:	f003 fb3a 	bl	6838 <__aeabi_i2f>
    31c4:	492e      	ldr	r1, [pc, #184]	; (3280 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2a0>)
    31c6:	f003 fc3f 	bl	6a48 <__aeabi_fdiv>
    31ca:	4683      	mov	fp, r0

					leds[indexes[i]] = CRGB(red * redMult, green * greenMult, blue * blueMult);
    31cc:	9b00      	ldr	r3, [sp, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31ce:	9801      	ldr	r0, [sp, #4]
    31d0:	f833 ab02 	ldrh.w	sl, [r3], #2
    31d4:	9300      	str	r3, [sp, #0]
    31d6:	f003 fb2f 	bl	6838 <__aeabi_i2f>
    31da:	4649      	mov	r1, r9
    31dc:	f003 fb80 	bl	68e0 <__aeabi_fmul>
    31e0:	f003 fd6a 	bl	6cb8 <__aeabi_f2uiz>
    31e4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    31e8:	f804 000a 	strb.w	r0, [r4, sl]
        g = rhs.g;
    31ec:	9802      	ldr	r0, [sp, #8]
    31ee:	f003 fb23 	bl	6838 <__aeabi_i2f>
    31f2:	4641      	mov	r1, r8
    31f4:	f003 fb74 	bl	68e0 <__aeabi_fmul>
    31f8:	f003 fd5e 	bl	6cb8 <__aeabi_f2uiz>
    31fc:	44a2      	add	sl, r4
    31fe:	f88a 0001 	strb.w	r0, [sl, #1]
        b = rhs.b;
    3202:	9803      	ldr	r0, [sp, #12]
    3204:	f003 fb18 	bl	6838 <__aeabi_i2f>
    3208:	4659      	mov	r1, fp
    320a:	f003 fb69 	bl	68e0 <__aeabi_fmul>
    320e:	f003 fd53 	bl	6cb8 <__aeabi_f2uiz>
    3212:	f88a 0002 	strb.w	r0, [sl, #2]
    3216:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    321a:	f895 e031 	ldrb.w	lr, [r5, #49]	; 0x31
    321e:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
    3222:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    3226:	f895 c034 	ldrb.w	ip, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    322a:	4613      	mov	r3, r2
				if (gHue1) val++;
				if (gHue2) val++;
    322c:	f1be 0f00 	cmp.w	lr, #0
    3230:	d000      	beq.n	3234 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x254>
    3232:	1c53      	adds	r3, r2, #1
				if (gHue3) val++;
    3234:	b101      	cbz	r1, 3238 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x258>
    3236:	3301      	adds	r3, #1
				if (gHue4) val++;
    3238:	b170      	cbz	r0, 3258 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x278>

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
    323a:	2a00      	cmp	r2, #0
    323c:	f040 80d5 	bne.w	33ea <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x40a>
				if (gHue2) val++;
    3240:	f1be 0f00 	cmp.w	lr, #0
    3244:	f000 80ce 	beq.w	33e4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x404>
    3248:	2301      	movs	r3, #1
				if (gHue3) val++;
    324a:	b101      	cbz	r1, 324e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26e>
    324c:	3301      	adds	r3, #1
				if (gHue4) val++;
    324e:	2800      	cmp	r0, #0
    3250:	f000 80d2 	beq.w	33f8 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x418>
    3254:	3301      	adds	r3, #1
    3256:	e0cf      	b.n	33f8 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x418>
				if (gHue5) val++;
    3258:	f1bc 0f00 	cmp.w	ip, #0
    325c:	d1ed      	bne.n	323a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x25a>
				}
			}

			void BlendFromHue(CRGB leds[], uint16_t indexes[], int numLeds, byte amount = 127)
			{
				if (GetToggledHueCount() == 0) return;
    325e:	2b00      	cmp	r3, #0
    3260:	d1eb      	bne.n	323a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x25a>
    3262:	9b04      	ldr	r3, [sp, #16]
    3264:	441f      	add	r7, r3
				byte blue = 100;

				int frequency = 2;
				int length = GetAnalogPattern(4, 40);

				for (int i = 0; i < numLeds; i++)
    3266:	9b00      	ldr	r3, [sp, #0]
    3268:	42b3      	cmp	r3, r6
    326a:	f47f aee0 	bne.w	302e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4e>

					leds[indexes[i]] = CRGB(red * redMult, green * greenMult, blue * blueMult);

					BlendFromHue(leds, indexes, numLeds, 32);
				}
			}
    326e:	b00b      	add	sp, #44	; 0x2c
    3270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3274:	42100000 	.word	0x42100000
    3278:	447fc000 	.word	0x447fc000
    327c:	00008644 	.word	0x00008644
    3280:	437f0000 	.word	0x437f0000
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
						break;
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    3284:	4638      	mov	r0, r7
    3286:	f003 fad7 	bl	6838 <__aeabi_i2f>
    328a:	4683      	mov	fp, r0
    328c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    328e:	f003 fad3 	bl	6838 <__aeabi_i2f>
    3292:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3296:	f003 fb23 	bl	68e0 <__aeabi_fmul>
    329a:	4682      	mov	sl, r0
    329c:	4601      	mov	r1, r0
    329e:	4658      	mov	r0, fp
    32a0:	f003 fa16 	bl	66d0 <__addsf3>
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    32a4:	2f00      	cmp	r7, #0
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
						break;
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    32a6:	4681      	mov	r9, r0
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    32a8:	4638      	mov	r0, r7
    32aa:	bfb8      	it	lt
    32ac:	1cf8      	addlt	r0, r7, #3
    32ae:	1080      	asrs	r0, r0, #2
    32b0:	f003 fac2 	bl	6838 <__aeabi_i2f>
    32b4:	4651      	mov	r1, sl
    32b6:	f003 fa09 	bl	66cc <__aeabi_fsub>
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
    32ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
						break;
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    32be:	4680      	mov	r8, r0
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
    32c0:	4650      	mov	r0, sl
    32c2:	f003 fb0d 	bl	68e0 <__aeabi_fmul>
    32c6:	4659      	mov	r1, fp
    32c8:	f003 fa02 	bl	66d0 <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    32cc:	2100      	movs	r1, #0
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
    32ce:	4682      	mov	sl, r0
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    32d0:	4648      	mov	r0, r9
    32d2:	f003 fcc1 	bl	6c58 <__aeabi_fcmpgt>
    32d6:	2800      	cmp	r0, #0
    32d8:	f47f aef2 	bne.w	30c0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xe0>
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    32dc:	2100      	movs	r1, #0
    32de:	4640      	mov	r0, r8
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    32e0:	f04f 0900 	mov.w	r9, #0
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    32e4:	f003 fcb8 	bl	6c58 <__aeabi_fcmpgt>
    32e8:	2800      	cmp	r0, #0
    32ea:	f47f af18 	bne.w	311e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x13e>
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    32ee:	2100      	movs	r1, #0
    32f0:	4650      	mov	r0, sl
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    32f2:	f04f 0800 	mov.w	r8, #0
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    32f6:	f003 fcaf 	bl	6c58 <__aeabi_fcmpgt>
    32fa:	2800      	cmp	r0, #0
    32fc:	f47f af3e 	bne.w	317c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x19c>
    3300:	f04f 0b00 	mov.w	fp, #0
    3304:	e762      	b.n	31cc <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x1ec>
						blueSin = (i * length) + (gFrame / (float)frequency / 3);
						break;
					}
					case 2:
					{
						redSin = (i * length) + (gFrame / (float)frequency * 1.5);
    3306:	4638      	mov	r0, r7
    3308:	f003 fa96 	bl	6838 <__aeabi_i2f>
    330c:	4682      	mov	sl, r0
    330e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    3310:	f003 fa92 	bl	6838 <__aeabi_i2f>
    3314:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3318:	f003 fae2 	bl	68e0 <__aeabi_fmul>
    331c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3320:	4683      	mov	fp, r0
    3322:	f003 fadd 	bl	68e0 <__aeabi_fmul>
    3326:	4651      	mov	r1, sl
    3328:	f003 f9d2 	bl	66d0 <__addsf3>
						greenSin = (i * length) + (gFrame / (float)frequency * 3);
    332c:	49b0      	ldr	r1, [pc, #704]	; (35f0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x610>)
						blueSin = (i * length) + (gFrame / (float)frequency / 3);
						break;
					}
					case 2:
					{
						redSin = (i * length) + (gFrame / (float)frequency * 1.5);
    332e:	4681      	mov	r9, r0
						greenSin = (i * length) + (gFrame / (float)frequency * 3);
    3330:	4658      	mov	r0, fp
    3332:	f003 fad5 	bl	68e0 <__aeabi_fmul>
    3336:	4651      	mov	r1, sl
    3338:	f003 f9ca 	bl	66d0 <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency / 1.5);
    333c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
						break;
					}
					case 2:
					{
						redSin = (i * length) + (gFrame / (float)frequency * 1.5);
						greenSin = (i * length) + (gFrame / (float)frequency * 3);
    3340:	4680      	mov	r8, r0
						blueSin = (i * length) + (gFrame / (float)frequency / 1.5);
    3342:	4658      	mov	r0, fp
    3344:	f003 fb80 	bl	6a48 <__aeabi_fdiv>
    3348:	4651      	mov	r1, sl
    334a:	f003 f9c1 	bl	66d0 <__addsf3>
    334e:	4682      	mov	sl, r0
						break;
    3350:	e6af      	b.n	30b2 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xd2>
					// Modes
					switch (GetModeNumber(modeOffset))
					{
					case 1:
					{
						redSin = (i * length) + (gFrame / (float)frequency / 1.5);
    3352:	4638      	mov	r0, r7
    3354:	f003 fa70 	bl	6838 <__aeabi_i2f>
    3358:	4682      	mov	sl, r0
    335a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    335c:	f003 fa6c 	bl	6838 <__aeabi_i2f>
    3360:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3364:	f003 fabc 	bl	68e0 <__aeabi_fmul>
    3368:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    336c:	4683      	mov	fp, r0
    336e:	f003 fb6b 	bl	6a48 <__aeabi_fdiv>
    3372:	4651      	mov	r1, sl
    3374:	f003 f9ac 	bl	66d0 <__addsf3>
						greenSin = (i * length) + (gFrame / (float)frequency);
    3378:	4659      	mov	r1, fp
					// Modes
					switch (GetModeNumber(modeOffset))
					{
					case 1:
					{
						redSin = (i * length) + (gFrame / (float)frequency / 1.5);
    337a:	4681      	mov	r9, r0
						greenSin = (i * length) + (gFrame / (float)frequency);
    337c:	4650      	mov	r0, sl
    337e:	f003 f9a7 	bl	66d0 <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency / 3);
    3382:	499b      	ldr	r1, [pc, #620]	; (35f0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x610>)
					switch (GetModeNumber(modeOffset))
					{
					case 1:
					{
						redSin = (i * length) + (gFrame / (float)frequency / 1.5);
						greenSin = (i * length) + (gFrame / (float)frequency);
    3384:	4680      	mov	r8, r0
    3386:	e7dc      	b.n	3342 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x362>
						blueSin = (i * length) + (gFrame / (float)frequency / 1.5);
						break;
					}
					case 3:
					{
						redSin = (i * length) - (gFrame / (float)frequency);
    3388:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    338a:	f003 fa55 	bl	6838 <__aeabi_i2f>
    338e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3392:	f003 faa5 	bl	68e0 <__aeabi_fmul>
    3396:	4682      	mov	sl, r0
    3398:	4638      	mov	r0, r7
    339a:	f003 fa4d 	bl	6838 <__aeabi_i2f>
    339e:	4651      	mov	r1, sl
    33a0:	f003 f994 	bl	66cc <__aeabi_fsub>
    33a4:	4681      	mov	r9, r0
						greenSin = (i * length / 2) - (gFrame / (float)frequency);
    33a6:	eb07 70d7 	add.w	r0, r7, r7, lsr #31
    33aa:	1040      	asrs	r0, r0, #1
    33ac:	f003 fa44 	bl	6838 <__aeabi_i2f>
    33b0:	4651      	mov	r1, sl
    33b2:	4683      	mov	fp, r0
    33b4:	f003 f98a 	bl	66cc <__aeabi_fsub>
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
    33b8:	4659      	mov	r1, fp
						break;
					}
					case 3:
					{
						redSin = (i * length) - (gFrame / (float)frequency);
						greenSin = (i * length / 2) - (gFrame / (float)frequency);
    33ba:	4680      	mov	r8, r0
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
    33bc:	4650      	mov	r0, sl
    33be:	f003 f987 	bl	66d0 <__addsf3>
    33c2:	4682      	mov	sl, r0
						break;
    33c4:	e675      	b.n	30b2 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xd2>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    33c6:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    33ca:	f000 030f 	and.w	r3, r0, #15
    33ce:	e685      	b.n	30dc <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xfc>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    33d0:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    33d4:	f000 030f 	and.w	r3, r0, #15
    33d8:	e6de      	b.n	3198 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x1b8>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    33da:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    33de:	f000 030f 	and.w	r3, r0, #15
    33e2:	e6aa      	b.n	313a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x15a>
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
    33e4:	b131      	cbz	r1, 33f4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x414>
    33e6:	2301      	movs	r3, #1
    33e8:	e731      	b.n	324e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26e>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    33ea:	f1be 0f00 	cmp.w	lr, #0
    33ee:	d011      	beq.n	3414 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x434>
    33f0:	2302      	movs	r3, #2
    33f2:	e72a      	b.n	324a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26a>
				if (gHue3) val++;
				if (gHue4) val++;
    33f4:	b188      	cbz	r0, 341a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x43a>
    33f6:	2301      	movs	r3, #1
				if (gHue5) val++;
    33f8:	f1bc 0f00 	cmp.w	ip, #0
    33fc:	d000      	beq.n	3400 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x420>
    33fe:	3301      	adds	r3, #1

			/// Return an arbitrary RGB color for a given number of toggled hue buttons. 
			/// This will be to add color to CRGBs, since they cannot have hue applied to them.
			CRGB GetRgbFromHue()
			{
				switch (GetToggledHueCount())
    3400:	3b01      	subs	r3, #1
    3402:	2b03      	cmp	r3, #3
    3404:	f200 80da 	bhi.w	35bc <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5dc>
    3408:	e8df f013 	tbh	[pc, r3, lsl #1]
    340c:	0033000b 	.word	0x0033000b
    3410:	00e900e0 	.word	0x00e900e0
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
    3414:	b339      	cbz	r1, 3466 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x486>
    3416:	2302      	movs	r3, #2
    3418:	e719      	b.n	324e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26e>
				if (gHue4) val++;
				if (gHue5) val++;
    341a:	f1bc 0f00 	cmp.w	ip, #0
    341e:	f000 80cd 	beq.w	35bc <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5dc>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3422:	2380      	movs	r3, #128	; 0x80
    3424:	2200      	movs	r2, #0
    3426:	f88d 3018 	strb.w	r3, [sp, #24]
    342a:	f88d 301a 	strb.w	r3, [sp, #26]
    342e:	f88d 2019 	strb.w	r2, [sp, #25]
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
				if (gHue4) val++;
    3432:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3436:	46a9      	mov	r9, r5

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
				{
					CRGB led = leds[indexes[i]];
    3438:	f838 0b02 	ldrh.w	r0, [r8], #2
    343c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3440:	1823      	adds	r3, r4, r0
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    3442:	5c25      	ldrb	r5, [r4, r0]
					if (led)
					{
						nblend(leds[indexes[i]], color, amount);
    3444:	2220      	movs	r2, #32
    3446:	a906      	add	r1, sp, #24
    3448:	4618      	mov	r0, r3
    344a:	b935      	cbnz	r5, 345a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x47a>
    344c:	f893 e001 	ldrb.w	lr, [r3, #1]
    3450:	f1be 0f00 	cmp.w	lr, #0
    3454:	d101      	bne.n	345a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x47a>
    3456:	789b      	ldrb	r3, [r3, #2]
    3458:	b10b      	cbz	r3, 345e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x47e>
    345a:	f7fe fbef 	bl	1c3c <nblend(CRGB&, CRGB const&, unsigned char)>
				}
			}

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
    345e:	45b0      	cmp	r8, r6
    3460:	d1ea      	bne.n	3438 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x458>
    3462:	464d      	mov	r5, r9
    3464:	e6fd      	b.n	3262 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x282>
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
				if (gHue4) val++;
    3466:	b108      	cbz	r0, 346c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x48c>
    3468:	2302      	movs	r3, #2
    346a:	e7c5      	b.n	33f8 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x418>
				if (gHue5) val++;
    346c:	f1bc 0f00 	cmp.w	ip, #0
    3470:	d0d7      	beq.n	3422 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x442>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3472:	2300      	movs	r3, #0
    3474:	2280      	movs	r2, #128	; 0x80
    3476:	f88d 3018 	strb.w	r3, [sp, #24]
    347a:	f88d 301a 	strb.w	r3, [sp, #26]
    347e:	f88d 2019 	strb.w	r2, [sp, #25]
    3482:	e7d6      	b.n	3432 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3484:	4b5b      	ldr	r3, [pc, #364]	; (35f4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x614>)
    3486:	681b      	ldr	r3, [r3, #0]
    3488:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    348a:	9a09      	ldr	r2, [sp, #36]	; 0x24
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
                            uint32_t timebase = 0, uint8_t phase_offset = 0)
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    348c:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
    3490:	fb03 f302 	mul.w	r3, r3, r2
    3494:	0e1b      	lsrs	r3, r3, #24
    3496:	f083 0380 	eor.w	r3, r3, #128	; 0x80
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    349a:	0658      	lsls	r0, r3, #25
    349c:	f140 8089 	bpl.w	35b2 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5d2>
        offset = (uint8_t)255 - offset;
    34a0:	43da      	mvns	r2, r3
    34a2:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    34a4:	f002 010f 	and.w	r1, r2, #15
    if( theta & 0x40) secoffset++;
    34a8:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    34aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    34ae:	4852      	ldr	r0, [pc, #328]	; (35f8 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x618>)
    34b0:	1112      	asrs	r2, r2, #4
    34b2:	0052      	lsls	r2, r2, #1
    34b4:	eb00 0c02 	add.w	ip, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34b8:	f810 e002 	ldrb.w	lr, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    34bc:	f89c 2001 	ldrb.w	r2, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34c0:	fb12 f201 	smulbb	r2, r2, r1
    34c4:	eb0e 1222 	add.w	r2, lr, r2, asr #4
    if( theta & 0x80 ) y = -y;
    34c8:	0619      	lsls	r1, r3, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34ca:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    34cc:	bf48      	it	mi
    34ce:	4252      	negmi	r2, r2
    34d0:	b253      	sxtb	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34d2:	4a48      	ldr	r2, [pc, #288]	; (35f4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x614>)
    34d4:	6812      	ldr	r2, [r2, #0]
    34d6:	9208      	str	r2, [sp, #32]
	return ret;
    34d8:	9908      	ldr	r1, [sp, #32]
    34da:	f44f 128c 	mov.w	r2, #1146880	; 0x118000
    34de:	fb02 f201 	mul.w	r2, r2, r1
    34e2:	0e12      	lsrs	r2, r2, #24
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    34e4:	3b80      	subs	r3, #128	; 0x80
    34e6:	b2db      	uxtb	r3, r3
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    34e8:	b2d1      	uxtb	r1, r2
    34ea:	9301      	str	r3, [sp, #4]
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    34ec:	064b      	lsls	r3, r1, #25
    34ee:	d55b      	bpl.n	35a8 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5c8>
        offset = (uint8_t)255 - offset;
    34f0:	43cb      	mvns	r3, r1
    34f2:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    34f4:	f003 010f 	and.w	r1, r3, #15
    if( theta & 0x40) secoffset++;
    34f8:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    34fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    34fe:	111b      	asrs	r3, r3, #4
    3500:	005b      	lsls	r3, r3, #1
    3502:	eb00 0e03 	add.w	lr, r0, r3
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    if( theta & 0x80 ) y = -y;
    3506:	0612      	lsls	r2, r2, #24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3508:	4a3a      	ldr	r2, [pc, #232]	; (35f4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x614>)
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    350a:	f89e e001 	ldrb.w	lr, [lr, #1]
    350e:	6812      	ldr	r2, [r2, #0]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3510:	5cc3      	ldrb	r3, [r0, r3]
    3512:	9207      	str	r2, [sp, #28]
    3514:	fb1e f101 	smulbb	r1, lr, r1
    3518:	eb03 1321 	add.w	r3, r3, r1, asr #4
	return ret;
    351c:	9907      	ldr	r1, [sp, #28]
    351e:	b2db      	uxtb	r3, r3
    3520:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
    if( theta & 0x80 ) y = -y;
    3524:	bf48      	it	mi
    3526:	425b      	negmi	r3, r3
    3528:	fb02 f101 	mul.w	r1, r2, r1
    352c:	b25b      	sxtb	r3, r3
    352e:	0e09      	lsrs	r1, r1, #24
    3530:	3b80      	subs	r3, #128	; 0x80
    3532:	fa5f fe81 	uxtb.w	lr, r1
    3536:	b2db      	uxtb	r3, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3538:	f01e 0f40 	tst.w	lr, #64	; 0x40
    353c:	9302      	str	r3, [sp, #8]
    353e:	d02e      	beq.n	359e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5be>
        offset = (uint8_t)255 - offset;
    3540:	ea6f 020e 	mvn.w	r2, lr
    3544:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3546:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    354a:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    354c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    3550:	1112      	asrs	r2, r2, #4
    3552:	0052      	lsls	r2, r2, #1
    3554:	eb00 0e02 	add.w	lr, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3558:	5c82      	ldrb	r2, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    355a:	f89e 0001 	ldrb.w	r0, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    355e:	fb10 f303 	smulbb	r3, r0, r3
    3562:	eb02 1323 	add.w	r3, r2, r3, asr #4
    if( theta & 0x80 ) y = -y;
    3566:	0608      	lsls	r0, r1, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3568:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    356a:	bf48      	it	mi
    356c:	425b      	negmi	r3, r3
    356e:	b25b      	sxtb	r3, r3
    3570:	3b80      	subs	r3, #128	; 0x80
    3572:	b2db      	uxtb	r3, r3
						red = beatsin8(32, 0, 255, 0, 128);
						green = beatsin8(16, 0, 255);
						blue = beatsin8(32, 0, 255);

						redSin = 0; //(i * length) + (gFrame / (float)frequency);
						greenSin = (i * length) + (gFrame / (float)frequency);
    3574:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    3576:	9303      	str	r3, [sp, #12]
    3578:	f003 f95e 	bl	6838 <__aeabi_i2f>
    357c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3580:	f003 f9ae 	bl	68e0 <__aeabi_fmul>
    3584:	4680      	mov	r8, r0
    3586:	4638      	mov	r0, r7
    3588:	f003 f956 	bl	6838 <__aeabi_i2f>
    358c:	4601      	mov	r1, r0
    358e:	4640      	mov	r0, r8
    3590:	f003 f89e 	bl	66d0 <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    3594:	f04f 0900 	mov.w	r9, #0
						red = beatsin8(32, 0, 255, 0, 128);
						green = beatsin8(16, 0, 255);
						blue = beatsin8(32, 0, 255);

						redSin = 0; //(i * length) + (gFrame / (float)frequency);
						greenSin = (i * length) + (gFrame / (float)frequency);
    3598:	4682      	mov	sl, r0
    359a:	4680      	mov	r8, r0
    359c:	e5b8      	b.n	3110 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x130>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    359e:	f00e 023f 	and.w	r2, lr, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    35a2:	f00e 030f 	and.w	r3, lr, #15
    35a6:	e7d3      	b.n	3550 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x570>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    35a8:	f001 033f 	and.w	r3, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    35ac:	f001 010f 	and.w	r1, r1, #15
    35b0:	e7a5      	b.n	34fe <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x51e>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    35b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    35b6:	f003 010f 	and.w	r1, r3, #15
    35ba:	e778      	b.n	34ae <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4ce>
    35bc:	2300      	movs	r3, #0
    35be:	f88d 3018 	strb.w	r3, [sp, #24]
    35c2:	f88d 3019 	strb.w	r3, [sp, #25]
    35c6:	f88d 301a 	strb.w	r3, [sp, #26]
    35ca:	e732      	b.n	3432 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
    35cc:	2300      	movs	r3, #0
    35ce:	22ff      	movs	r2, #255	; 0xff
    35d0:	f88d 3018 	strb.w	r3, [sp, #24]
    35d4:	f88d 3019 	strb.w	r3, [sp, #25]
    35d8:	f88d 201a 	strb.w	r2, [sp, #26]
    35dc:	e729      	b.n	3432 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
    35de:	2300      	movs	r3, #0
    35e0:	22ff      	movs	r2, #255	; 0xff
    35e2:	f88d 2018 	strb.w	r2, [sp, #24]
    35e6:	f88d 3019 	strb.w	r3, [sp, #25]
    35ea:	f88d 301a 	strb.w	r3, [sp, #26]
    35ee:	e720      	b.n	3432 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
    35f0:	40400000 	.word	0x40400000
    35f4:	1fffa138 	.word	0x1fffa138
    35f8:	00008644 	.word	0x00008644

000035fc <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)>:
					Invert(leds, indexes, numLeds);
					break;
				}
			}

			void Confetti(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    35fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3600:	4606      	mov	r6, r0
    3602:	b085      	sub	sp, #20
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    3604:	69c0      	ldr	r0, [r0, #28]
					Invert(leds, indexes, numLeds);
					break;
				}
			}

			void Confetti(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    3606:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3608:	4698      	mov	r8, r3
    360a:	4617      	mov	r7, r2
    360c:	460d      	mov	r5, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    360e:	f003 f913 	bl	6838 <__aeabi_i2f>
    3612:	499b      	ldr	r1, [pc, #620]	; (3880 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x284>)
    3614:	f003 f964 	bl	68e0 <__aeabi_fmul>
    3618:	499a      	ldr	r1, [pc, #616]	; (3884 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x288>)
    361a:	f003 fa15 	bl	6a48 <__aeabi_fdiv>
    361e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3622:	f003 f855 	bl	66d0 <__addsf3>
    3626:	f003 fb21 	bl	6c6c <__aeabi_f2iz>
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    362a:	f1b8 0f00 	cmp.w	r8, #0
    362e:	dd21      	ble.n	3674 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x78>
    3630:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    3634:	b2c9      	uxtb	r1, r1
    3636:	3101      	adds	r1, #1
    3638:	4638      	mov	r0, r7
    363a:	eb07 0e48 	add.w	lr, r7, r8, lsl #1
				{
					int scale = 255 - fade;
					(leds[indexes[i]]).nscale8(scale);
    363e:	f830 2b02 	ldrh.w	r2, [r0], #2
    3642:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3646:	eb05 0c02 	add.w	ip, r5, r2
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    364a:	5cab      	ldrb	r3, [r5, r2]
    364c:	fb01 f303 	mul.w	r3, r1, r3
    3650:	121b      	asrs	r3, r3, #8
    3652:	54ab      	strb	r3, [r5, r2]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3654:	f89c 3001 	ldrb.w	r3, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3658:	f89c 2002 	ldrb.w	r2, [ip, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    365c:	fb01 f303 	mul.w	r3, r1, r3
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3660:	fb01 f202 	mul.w	r2, r1, r2
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3664:	121b      	asrs	r3, r3, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3666:	1212      	asrs	r2, r2, #8
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    3668:	4586      	cmp	lr, r0
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    366a:	f88c 3001 	strb.w	r3, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    366e:	f88c 2002 	strb.w	r2, [ip, #2]
    3672:	d1e4      	bne.n	363e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x42>

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    3674:	2305      	movs	r3, #5
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    3676:	2c00      	cmp	r4, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    3678:	60f3      	str	r3, [r6, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    367a:	db14      	blt.n	36a6 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xaa>
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    367c:	68b3      	ldr	r3, [r6, #8]
    367e:	4a82      	ldr	r2, [pc, #520]	; (3888 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x28c>)
    3680:	441c      	add	r4, r3
    3682:	fb82 2304 	smull	r2, r3, r2, r4
    3686:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    368a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    368e:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
    3692:	3c01      	subs	r4, #1
    3694:	2c04      	cmp	r4, #4
    3696:	d806      	bhi.n	36a6 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xaa>
    3698:	e8df f014 	tbh	[pc, r4, lsl #1]
    369c:	00fa0087 	.word	0x00fa0087
    36a0:	02720198 	.word	0x02720198
    36a4:	0043      	.short	0x0043
    36a6:	fa1f f388 	uxth.w	r3, r8
    36aa:	4c78      	ldr	r4, [pc, #480]	; (388c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x290>)
    36ac:	9301      	str	r3, [sp, #4]
    36ae:	f04f 0806 	mov.w	r8, #6
    36b2:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    36b6:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
    36ba:	f04f 0aff 	mov.w	sl, #255	; 0xff
    36be:	8823      	ldrh	r3, [r4, #0]
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    36c0:	9a01      	ldr	r2, [sp, #4]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    36c2:	7d30      	ldrb	r0, [r6, #20]
    36c4:	f88d b00d 	strb.w	fp, [sp, #13]
    36c8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    36cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    36d0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    36d4:	3319      	adds	r3, #25
    36d6:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36d8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    36dc:	fb02 fe03 	mul.w	lr, r2, r3
    36e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    36e4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    36e8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36ec:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36ee:	3119      	adds	r1, #25
    36f0:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    36f2:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    36f6:	f88d a00e 	strb.w	sl, [sp, #14]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    36fa:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    36fe:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    3702:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3706:	4486      	add	lr, r0
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3708:	4429      	add	r1, r5
    370a:	4648      	mov	r0, r9
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    370c:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    370e:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3712:	f7fe fbf1 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3716:	f1b8 0801 	subs.w	r8, r8, #1
    371a:	d1d0      	bne.n	36be <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xc2>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    371c:	b005      	add	sp, #20
    371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3722:	fa1f f388 	uxth.w	r3, r8
    3726:	4c59      	ldr	r4, [pc, #356]	; (388c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x290>)
    3728:	9301      	str	r3, [sp, #4]
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    372a:	f04f 0806 	mov.w	r8, #6
    372e:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3732:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
    3736:	f04f 0aff 	mov.w	sl, #255	; 0xff
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    373a:	8823      	ldrh	r3, [r4, #0]
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    373c:	9a01      	ldr	r2, [sp, #4]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    373e:	7d30      	ldrb	r0, [r6, #20]
    3740:	f88d b00d 	strb.w	fp, [sp, #13]
    3744:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3748:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    374c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3750:	3319      	adds	r3, #25
    3752:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3754:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3758:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    375c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3760:	fb02 f103 	mul.w	r1, r2, r3
    3764:	f10e 0e19 	add.w	lr, lr, #25
    3768:	fa1f fe8e 	uxth.w	lr, lr
    376c:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    376e:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3770:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3774:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3778:	f88d a00e 	strb.w	sl, [sp, #14]
    377c:	b2db      	uxtb	r3, r3
    377e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3782:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3786:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    378a:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    378e:	4429      	add	r1, r5
    3790:	4648      	mov	r0, r9
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3792:	f8a4 e000 	strh.w	lr, [r4]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3796:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    379a:	f7fe fbad 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    379e:	f1b8 0801 	subs.w	r8, r8, #1
    37a2:	d1ca      	bne.n	373a <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x13e>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    37a4:	b005      	add	sp, #20
    37a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37aa:	4c38      	ldr	r4, [pc, #224]	; (388c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x290>)
    37ac:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    37b0:	f04f 0a04 	mov.w	sl, #4
    37b4:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    37b8:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37bc:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    37be:	7d30      	ldrb	r0, [r6, #20]
    37c0:	f88d b00d 	strb.w	fp, [sp, #13]
    37c4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    37c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    37cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    37d0:	3319      	adds	r3, #25
    37d2:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37d4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    37d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    37dc:	fb08 fe03 	mul.w	lr, r8, r3
    37e0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    37e4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37e8:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37ea:	3119      	adds	r1, #25
    37ec:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    37ee:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    37f2:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37f4:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    37f8:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    37fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3800:	4486      	add	lr, r0
    3802:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3806:	4429      	add	r1, r5
    3808:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    380a:	f88d 200e 	strb.w	r2, [sp, #14]
    380e:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3812:	f7fe fb71 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3816:	f1ba 0a01 	subs.w	sl, sl, #1
    381a:	d1cf      	bne.n	37bc <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x1c0>
    381c:	f04f 0a04 	mov.w	sl, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3820:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3824:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3826:	f896 e014 	ldrb.w	lr, [r6, #20]
    382a:	f88d b00d 	strb.w	fp, [sp, #13]
    382e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3832:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3836:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    383a:	3319      	adds	r3, #25
    383c:	b29b      	uxth	r3, r3
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    383e:	fb08 f103 	mul.w	r1, r8, r3
    3842:	0c09      	lsrs	r1, r1, #16
    3844:	8023      	strh	r3, [r4, #0]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3846:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    384a:	f88d e00c 	strb.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    384e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3852:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3856:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    385a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    385e:	f04f 32ff 	mov.w	r2, #4294967295
    3862:	3319      	adds	r3, #25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3864:	4429      	add	r1, r5
    3866:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3868:	f88d 200e 	strb.w	r2, [sp, #14]
    386c:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    386e:	f7fe fb43 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3872:	f1ba 0a01 	subs.w	sl, sl, #1
    3876:	d1d5      	bne.n	3824 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x228>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3878:	b005      	add	sp, #20
    387a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    387e:	bf00      	nop
    3880:	41e00000 	.word	0x41e00000
    3884:	447fc000 	.word	0x447fc000
    3888:	2aaaaaab 	.word	0x2aaaaaab
    388c:	1fff8726 	.word	0x1fff8726
    3890:	4cba      	ldr	r4, [pc, #744]	; (3b7c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x580>)
    3892:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    3896:	f04f 0a03 	mov.w	sl, #3
    389a:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    389e:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38a2:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    38a4:	7d30      	ldrb	r0, [r6, #20]
    38a6:	f88d b00d 	strb.w	fp, [sp, #13]
    38aa:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    38ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    38b2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    38b6:	3319      	adds	r3, #25
    38b8:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38ba:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    38be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    38c2:	fb08 fe03 	mul.w	lr, r8, r3
    38c6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    38ca:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38ce:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38d0:	3119      	adds	r1, #25
    38d2:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    38d4:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    38d8:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    38da:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    38de:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    38e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    38e6:	4486      	add	lr, r0
    38e8:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    38ec:	4429      	add	r1, r5
    38ee:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    38f0:	f88d 200e 	strb.w	r2, [sp, #14]
    38f4:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    38f8:	f7fe fafe 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    38fc:	f1ba 0a01 	subs.w	sl, sl, #1
    3900:	d1cf      	bne.n	38a2 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x2a6>
    3902:	f04f 0a03 	mov.w	sl, #3
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3906:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    390a:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    390c:	f896 e014 	ldrb.w	lr, [r6, #20]
    3910:	f88d b00d 	strb.w	fp, [sp, #13]
    3914:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3918:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    391c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3920:	3319      	adds	r3, #25
    3922:	b29b      	uxth	r3, r3
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3924:	fb08 f103 	mul.w	r1, r8, r3
    3928:	0c09      	lsrs	r1, r1, #16
    392a:	8023      	strh	r3, [r4, #0]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    392c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3930:	f88d e00c 	strb.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3934:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3938:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    393c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3940:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3944:	f04f 32ff 	mov.w	r2, #4294967295
    3948:	3319      	adds	r3, #25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    394a:	4429      	add	r1, r5
    394c:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    394e:	f88d 200e 	strb.w	r2, [sp, #14]
    3952:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3954:	f7fe fad0 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3958:	f1ba 0a01 	subs.w	sl, sl, #1
    395c:	d1d5      	bne.n	390a <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x30e>
    395e:	f04f 0a06 	mov.w	sl, #6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3962:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3966:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3968:	7d30      	ldrb	r0, [r6, #20]
    396a:	f88d b00d 	strb.w	fp, [sp, #13]
    396e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3972:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3976:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    397a:	3319      	adds	r3, #25
    397c:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    397e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3982:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3986:	fb08 fe03 	mul.w	lr, r8, r3
    398a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    398e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3992:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3994:	3119      	adds	r1, #25
    3996:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3998:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    399c:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    399e:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    39a2:	f3ce 0e46 	ubfx	lr, lr, #1, #7
    39a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    39aa:	4486      	add	lr, r0
    39ac:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    39b0:	4429      	add	r1, r5
    39b2:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    39b4:	f88d 200e 	strb.w	r2, [sp, #14]
    39b8:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    39bc:	f7fe fa9c 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    39c0:	f1ba 0a01 	subs.w	sl, sl, #1
    39c4:	d1cf      	bne.n	3966 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x36a>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    39c6:	b005      	add	sp, #20
    39c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39cc:	4c6b      	ldr	r4, [pc, #428]	; (3b7c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x580>)
    39ce:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    39d2:	f04f 0a02 	mov.w	sl, #2
    39d6:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    39da:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39de:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    39e0:	7d30      	ldrb	r0, [r6, #20]
    39e2:	f88d b00d 	strb.w	fp, [sp, #13]
    39e6:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    39ee:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39f2:	3319      	adds	r3, #25
    39f4:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39f6:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    39fe:	fb08 fe03 	mul.w	lr, r8, r3
    3a02:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3a06:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a0a:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a0c:	3119      	adds	r1, #25
    3a0e:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3a10:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3a14:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a16:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    3a1a:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    3a1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3a22:	4486      	add	lr, r0
    3a24:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a28:	4429      	add	r1, r5
    3a2a:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a2c:	f88d 200e 	strb.w	r2, [sp, #14]
    3a30:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a34:	f7fe fa60 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3a38:	f1ba 0a01 	subs.w	sl, sl, #1
    3a3c:	d1cf      	bne.n	39de <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x3e2>
    3a3e:	f04f 0a02 	mov.w	sl, #2
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a42:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a46:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3a48:	f896 e014 	ldrb.w	lr, [r6, #20]
    3a4c:	f88d b00d 	strb.w	fp, [sp, #13]
    3a50:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3a54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3a58:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a5c:	3319      	adds	r3, #25
    3a5e:	b29b      	uxth	r3, r3
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3a60:	fb08 f103 	mul.w	r1, r8, r3
    3a64:	0c09      	lsrs	r1, r1, #16
    3a66:	8023      	strh	r3, [r4, #0]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3a68:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3a6c:	f88d e00c 	strb.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a70:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3a74:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3a78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3a7c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a80:	f04f 32ff 	mov.w	r2, #4294967295
    3a84:	3319      	adds	r3, #25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a86:	4429      	add	r1, r5
    3a88:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a8a:	f88d 200e 	strb.w	r2, [sp, #14]
    3a8e:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a90:	f7fe fa32 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3a94:	f1ba 0a01 	subs.w	sl, sl, #1
    3a98:	d1d5      	bne.n	3a46 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x44a>
    3a9a:	f04f 0a05 	mov.w	sl, #5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a9e:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3aa2:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3aa4:	7d30      	ldrb	r0, [r6, #20]
    3aa6:	f88d b00d 	strb.w	fp, [sp, #13]
    3aaa:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3aae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3ab2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3ab6:	3319      	adds	r3, #25
    3ab8:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3aba:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3abe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3ac2:	fb08 fe03 	mul.w	lr, r8, r3
    3ac6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3aca:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ace:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ad0:	3119      	adds	r1, #25
    3ad2:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3ad4:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3ad8:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ada:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    3ade:	f3ce 0e46 	ubfx	lr, lr, #1, #7
    3ae2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3ae6:	4486      	add	lr, r0
    3ae8:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3aec:	4429      	add	r1, r5
    3aee:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3af0:	f88d 200e 	strb.w	r2, [sp, #14]
    3af4:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3af8:	f7fe f9fe 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3afc:	f1ba 0a01 	subs.w	sl, sl, #1
    3b00:	d1cf      	bne.n	3aa2 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x4a6>
    3b02:	f04f 0a05 	mov.w	sl, #5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b06:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b0a:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3b0c:	7d30      	ldrb	r0, [r6, #20]
    3b0e:	f88d b00d 	strb.w	fp, [sp, #13]
    3b12:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3b16:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3b1a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b1e:	3319      	adds	r3, #25
    3b20:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b22:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3b26:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    3b2a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3b2e:	fb08 f103 	mul.w	r1, r8, r3
    3b32:	f10e 0e19 	add.w	lr, lr, #25
    3b36:	fa1f fe8e 	uxth.w	lr, lr
    3b3a:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b3c:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b3e:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3b42:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b46:	f8a4 e000 	strh.w	lr, [r4]
    3b4a:	b2db      	uxtb	r3, r3
    3b4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3b50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3b54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3b58:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    3b5c:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b60:	4429      	add	r1, r5
    3b62:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b64:	f88d 200e 	strb.w	r2, [sp, #14]
    3b68:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b6c:	f7fe f9c4 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3b70:	f1ba 0a01 	subs.w	sl, sl, #1
    3b74:	d1c9      	bne.n	3b0a <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x50e>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3b76:	b005      	add	sp, #20
    3b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b7c:	1fff8726 	.word	0x1fff8726
    3b80:	4c3a      	ldr	r4, [pc, #232]	; (3c6c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x670>)
    3b82:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    3b86:	f04f 0a04 	mov.w	sl, #4
    3b8a:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b8e:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b92:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3b94:	7d30      	ldrb	r0, [r6, #20]
    3b96:	f88d b00d 	strb.w	fp, [sp, #13]
    3b9a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3b9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3ba2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3ba6:	3319      	adds	r3, #25
    3ba8:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3baa:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3bae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3bb2:	fb08 fe03 	mul.w	lr, r8, r3
    3bb6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3bba:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bbe:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bc0:	3119      	adds	r1, #25
    3bc2:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3bc4:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3bc8:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3bca:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    3bce:	f3ce 0e46 	ubfx	lr, lr, #1, #7
    3bd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3bd6:	4486      	add	lr, r0
    3bd8:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3bdc:	4429      	add	r1, r5
    3bde:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3be0:	f88d 200e 	strb.w	r2, [sp, #14]
    3be4:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3be8:	f7fe f986 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3bec:	f1ba 0a01 	subs.w	sl, sl, #1
    3bf0:	d1cf      	bne.n	3b92 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x596>
    3bf2:	f04f 0a04 	mov.w	sl, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3bf6:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bfa:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3bfc:	7d30      	ldrb	r0, [r6, #20]
    3bfe:	f88d b00d 	strb.w	fp, [sp, #13]
    3c02:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3c06:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3c0a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c0e:	3319      	adds	r3, #25
    3c10:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c12:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3c16:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    3c1a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3c1e:	fb08 f103 	mul.w	r1, r8, r3
    3c22:	f10e 0e19 	add.w	lr, lr, #25
    3c26:	fa1f fe8e 	uxth.w	lr, lr
    3c2a:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c2c:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c2e:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3c32:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c36:	f8a4 e000 	strh.w	lr, [r4]
    3c3a:	b2db      	uxtb	r3, r3
    3c3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3c40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3c44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3c48:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    3c4c:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3c50:	4429      	add	r1, r5
    3c52:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3c54:	f88d 200e 	strb.w	r2, [sp, #14]
    3c58:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3c5c:	f7fe f94c 	bl	1ef8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3c60:	f1ba 0a01 	subs.w	sl, sl, #1
    3c64:	d1c9      	bne.n	3bfa <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x5fe>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3c66:	b005      	add	sp, #20
    3c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c6c:	1fff8726 	.word	0x1fff8726

00003c70 <Meltdown::CMeltdownLED::CMeltdownLED()>:

namespace Meltdown
{
	CMeltdownLED MeltdownLED;

	CMeltdownLED::CMeltdownLED()
    3c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c72:	f8df e090 	ldr.w	lr, [pc, #144]	; 3d04 <Meltdown::CMeltdownLED::CMeltdownLED()+0x94>
    3c76:	f8df c090 	ldr.w	ip, [pc, #144]	; 3d08 <Meltdown::CMeltdownLED::CMeltdownLED()+0x98>
    3c7a:	4676      	mov	r6, lr
    3c7c:	4604      	mov	r4, r0
    3c7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c80:	2730      	movs	r7, #48	; 0x30
    3c82:	6127      	str	r7, [r4, #16]
    3c84:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
    3c88:	2714      	movs	r7, #20
    3c8a:	61a5      	str	r5, [r4, #24]
    3c8c:	62a7      	str	r7, [r4, #40]	; 0x28
    3c8e:	f104 054c 	add.w	r5, r4, #76	; 0x4c
    3c92:	2700      	movs	r7, #0
    3c94:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
    3c98:	6027      	str	r7, [r4, #0]
    3c9a:	6067      	str	r7, [r4, #4]
    3c9c:	60a7      	str	r7, [r4, #8]
    3c9e:	60e7      	str	r7, [r4, #12]
    3ca0:	6167      	str	r7, [r4, #20]
    3ca2:	61e7      	str	r7, [r4, #28]
    3ca4:	6227      	str	r7, [r4, #32]
    3ca6:	6267      	str	r7, [r4, #36]	; 0x24
    3ca8:	62e7      	str	r7, [r4, #44]	; 0x2c
    3caa:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    3cae:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    3cb2:	f884 7032 	strb.w	r7, [r4, #50]	; 0x32
    3cb6:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    3cba:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
    3cbe:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
    3cc2:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
    3cc6:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
    3cca:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    3cce:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
    3cd2:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
    3cd6:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    3cda:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    3cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3ce0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3ce4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3ce8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    3cec:	f10e 0640 	add.w	r6, lr, #64	; 0x40
    3cf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    3cf4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    3cf8:	f104 058c 	add.w	r5, r4, #140	; 0x8c
    3cfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	{
	}
    3d00:	4620      	mov	r0, r4
    3d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d04:	000085e4 	.word	0x000085e4
    3d08:	001b7740 	.word	0x001b7740

00003d0c <_GLOBAL__sub_I__ZN8Meltdown11MeltdownLEDE>:
#include "MeltdownLED.h"

namespace Meltdown
{
	CMeltdownLED MeltdownLED;
    3d0c:	4801      	ldr	r0, [pc, #4]	; (3d14 <_GLOBAL__sub_I__ZN8Meltdown11MeltdownLEDE+0x8>)
    3d0e:	f7ff bfaf 	b.w	3c70 <Meltdown::CMeltdownLED::CMeltdownLED()>
    3d12:	bf00      	nop
    3d14:	1fff9ed8 	.word	0x1fff9ed8

00003d18 <Meltdown::CMeltdownSerial::~CMeltdownSerial()>:
{

#ifndef MELTDOWN_SERIAL
#define MELTDOWN_SERIAL

	class CMeltdownSerial
    3d18:	b510      	push	{r4, lr}
    3d1a:	4604      	mov	r4, r0
    3d1c:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    3d20:	f002 f932 	bl	5f88 <String::~String()>
    3d24:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    3d28:	f002 f92e 	bl	5f88 <String::~String()>
    3d2c:	f504 70a4 	add.w	r0, r4, #328	; 0x148
    3d30:	f002 f92a 	bl	5f88 <String::~String()>
    3d34:	f504 709c 	add.w	r0, r4, #312	; 0x138
    3d38:	f002 f926 	bl	5f88 <String::~String()>
    3d3c:	f504 7094 	add.w	r0, r4, #296	; 0x128
    3d40:	f002 f922 	bl	5f88 <String::~String()>
    3d44:	f504 708c 	add.w	r0, r4, #280	; 0x118
    3d48:	f002 f91e 	bl	5f88 <String::~String()>
    3d4c:	f504 7084 	add.w	r0, r4, #264	; 0x108
    3d50:	f002 f91a 	bl	5f88 <String::~String()>
    3d54:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    3d58:	f002 f916 	bl	5f88 <String::~String()>
    3d5c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    3d60:	f002 f912 	bl	5f88 <String::~String()>
    3d64:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    3d68:	f002 f90e 	bl	5f88 <String::~String()>
    3d6c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    3d70:	f002 f90a 	bl	5f88 <String::~String()>
    3d74:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    3d78:	f002 f906 	bl	5f88 <String::~String()>
    3d7c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    3d80:	f002 f902 	bl	5f88 <String::~String()>
    3d84:	f104 0098 	add.w	r0, r4, #152	; 0x98
    3d88:	f002 f8fe 	bl	5f88 <String::~String()>
    3d8c:	f104 0088 	add.w	r0, r4, #136	; 0x88
    3d90:	f002 f8fa 	bl	5f88 <String::~String()>
    3d94:	f104 0078 	add.w	r0, r4, #120	; 0x78
    3d98:	f002 f8f6 	bl	5f88 <String::~String()>
    3d9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
    3da0:	f002 f8f2 	bl	5f88 <String::~String()>
    3da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3da8:	f002 f8ee 	bl	5f88 <String::~String()>
    3dac:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3db0:	f002 f8ea 	bl	5f88 <String::~String()>
    3db4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    3db8:	f002 f8e6 	bl	5f88 <String::~String()>
    3dbc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3dc0:	f002 f8e2 	bl	5f88 <String::~String()>
    3dc4:	f104 0018 	add.w	r0, r4, #24
    3dc8:	f002 f8de 	bl	5f88 <String::~String()>
    3dcc:	1d20      	adds	r0, r4, #4
    3dce:	f002 f8db 	bl	5f88 <String::~String()>
    3dd2:	4620      	mov	r0, r4
    3dd4:	bd10      	pop	{r4, pc}
    3dd6:	bf00      	nop

00003dd8 <Meltdown::CMeltdownSerial::CMeltdownSerial()>:

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;

	CMeltdownSerial::CMeltdownSerial()
    3dd8:	b538      	push	{r3, r4, r5, lr}
    3dda:	1d05      	adds	r5, r0, #4
    3ddc:	4604      	mov	r4, r0
    3dde:	2100      	movs	r1, #0
    3de0:	4628      	mov	r0, r5
    3de2:	f002 f911 	bl	6008 <String::String(char const*)>
    3de6:	f104 0018 	add.w	r0, r4, #24
    3dea:	493a      	ldr	r1, [pc, #232]	; (3ed4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0xfc>)
    3dec:	f002 f90c 	bl	6008 <String::String(char const*)>
    3df0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3df4:	4938      	ldr	r1, [pc, #224]	; (3ed8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x100>)
    3df6:	f002 f907 	bl	6008 <String::String(char const*)>
    3dfa:	f104 0038 	add.w	r0, r4, #56	; 0x38
    3dfe:	4937      	ldr	r1, [pc, #220]	; (3edc <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x104>)
    3e00:	f002 f902 	bl	6008 <String::String(char const*)>
    3e04:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3e08:	4935      	ldr	r1, [pc, #212]	; (3ee0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x108>)
    3e0a:	f002 f8fd 	bl	6008 <String::String(char const*)>
    3e0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3e12:	4934      	ldr	r1, [pc, #208]	; (3ee4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x10c>)
    3e14:	f002 f8f8 	bl	6008 <String::String(char const*)>
    3e18:	f104 0068 	add.w	r0, r4, #104	; 0x68
    3e1c:	4932      	ldr	r1, [pc, #200]	; (3ee8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x110>)
    3e1e:	f002 f8f3 	bl	6008 <String::String(char const*)>
    3e22:	f104 0078 	add.w	r0, r4, #120	; 0x78
    3e26:	4931      	ldr	r1, [pc, #196]	; (3eec <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x114>)
    3e28:	f002 f8ee 	bl	6008 <String::String(char const*)>
    3e2c:	f104 0088 	add.w	r0, r4, #136	; 0x88
    3e30:	492f      	ldr	r1, [pc, #188]	; (3ef0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x118>)
    3e32:	f002 f8e9 	bl	6008 <String::String(char const*)>
    3e36:	f104 0098 	add.w	r0, r4, #152	; 0x98
    3e3a:	492e      	ldr	r1, [pc, #184]	; (3ef4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x11c>)
    3e3c:	f002 f8e4 	bl	6008 <String::String(char const*)>
    3e40:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    3e44:	492c      	ldr	r1, [pc, #176]	; (3ef8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x120>)
    3e46:	f002 f8df 	bl	6008 <String::String(char const*)>
    3e4a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    3e4e:	492b      	ldr	r1, [pc, #172]	; (3efc <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x124>)
    3e50:	f002 f8da 	bl	6008 <String::String(char const*)>
    3e54:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    3e58:	4929      	ldr	r1, [pc, #164]	; (3f00 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x128>)
    3e5a:	f002 f8d5 	bl	6008 <String::String(char const*)>
    3e5e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    3e62:	4928      	ldr	r1, [pc, #160]	; (3f04 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x12c>)
    3e64:	f002 f8d0 	bl	6008 <String::String(char const*)>
    3e68:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    3e6c:	4926      	ldr	r1, [pc, #152]	; (3f08 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x130>)
    3e6e:	f002 f8cb 	bl	6008 <String::String(char const*)>
    3e72:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    3e76:	4925      	ldr	r1, [pc, #148]	; (3f0c <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x134>)
    3e78:	f002 f8c6 	bl	6008 <String::String(char const*)>
    3e7c:	f504 7084 	add.w	r0, r4, #264	; 0x108
    3e80:	4923      	ldr	r1, [pc, #140]	; (3f10 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x138>)
    3e82:	f002 f8c1 	bl	6008 <String::String(char const*)>
    3e86:	f504 708c 	add.w	r0, r4, #280	; 0x118
    3e8a:	4922      	ldr	r1, [pc, #136]	; (3f14 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x13c>)
    3e8c:	f002 f8bc 	bl	6008 <String::String(char const*)>
    3e90:	f504 7094 	add.w	r0, r4, #296	; 0x128
    3e94:	4920      	ldr	r1, [pc, #128]	; (3f18 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x140>)
    3e96:	f002 f8b7 	bl	6008 <String::String(char const*)>
    3e9a:	f504 709c 	add.w	r0, r4, #312	; 0x138
    3e9e:	491f      	ldr	r1, [pc, #124]	; (3f1c <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x144>)
    3ea0:	f002 f8b2 	bl	6008 <String::String(char const*)>
    3ea4:	f504 70a4 	add.w	r0, r4, #328	; 0x148
    3ea8:	491d      	ldr	r1, [pc, #116]	; (3f20 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x148>)
    3eaa:	f002 f8ad 	bl	6008 <String::String(char const*)>
    3eae:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    3eb2:	491c      	ldr	r1, [pc, #112]	; (3f24 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x14c>)
    3eb4:	f002 f8a8 	bl	6008 <String::String(char const*)>
    3eb8:	f504 70b4 	add.w	r0, r4, #360	; 0x168
    3ebc:	491a      	ldr	r1, [pc, #104]	; (3f28 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x150>)
    3ebe:	f002 f8a3 	bl	6008 <String::String(char const*)>
	{
		m_analogTolerance = 15;
    3ec2:	230f      	movs	r3, #15
		m_inputString.reserve(100);
    3ec4:	4628      	mov	r0, r5
{
	CMeltdownSerial MeltdownSerial;

	CMeltdownSerial::CMeltdownSerial()
	{
		m_analogTolerance = 15;
    3ec6:	6023      	str	r3, [r4, #0]
		m_inputString.reserve(100);
    3ec8:	2164      	movs	r1, #100	; 0x64
    3eca:	f002 f865 	bl	5f98 <String::reserve(unsigned int)>
	}
    3ece:	4620      	mov	r0, r4
    3ed0:	bd38      	pop	{r3, r4, r5, pc}
    3ed2:	bf00      	nop
    3ed4:	00008660 	.word	0x00008660
    3ed8:	00008668 	.word	0x00008668
    3edc:	00008670 	.word	0x00008670
    3ee0:	00008678 	.word	0x00008678
    3ee4:	00008680 	.word	0x00008680
    3ee8:	00008688 	.word	0x00008688
    3eec:	00008690 	.word	0x00008690
    3ef0:	00008698 	.word	0x00008698
    3ef4:	000086a0 	.word	0x000086a0
    3ef8:	000086a8 	.word	0x000086a8
    3efc:	000086b0 	.word	0x000086b0
    3f00:	000086b8 	.word	0x000086b8
    3f04:	000086c0 	.word	0x000086c0
    3f08:	000086c8 	.word	0x000086c8
    3f0c:	000086d0 	.word	0x000086d0
    3f10:	000086d8 	.word	0x000086d8
    3f14:	000086e0 	.word	0x000086e0
    3f18:	000086e8 	.word	0x000086e8
    3f1c:	000086f0 	.word	0x000086f0
    3f20:	000086f8 	.word	0x000086f8
    3f24:	00008700 	.word	0x00008700
    3f28:	00008708 	.word	0x00008708

00003f2c <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE>:
    3f2c:	b510      	push	{r4, lr}
#include "MeltdownSerial.h"

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;
    3f2e:	4c05      	ldr	r4, [pc, #20]	; (3f44 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x18>)
    3f30:	4620      	mov	r0, r4
    3f32:	f7ff ff51 	bl	3dd8 <Meltdown::CMeltdownSerial::CMeltdownSerial()>
    3f36:	4620      	mov	r0, r4
    3f38:	4a03      	ldr	r2, [pc, #12]	; (3f48 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x1c>)
    3f3a:	4904      	ldr	r1, [pc, #16]	; (3f4c <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x20>)
	CMeltdownSerial::CMeltdownSerial()
	{
		m_analogTolerance = 15;
		m_inputString.reserve(100);
	}
    3f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "MeltdownSerial.h"

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;
    3f40:	f002 beda 	b.w	6cf8 <__aeabi_atexit>
    3f44:	1fff9f74 	.word	0x1fff9f74
    3f48:	1fff8720 	.word	0x1fff8720
    3f4c:	00003d19 	.word	0x00003d19

00003f50 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownLoggerE>:

namespace Meltdown
{
	CMeltdownLogger MeltdownLogger;

	CMeltdownLogger::CMeltdownLogger() {}
    3f50:	4b01      	ldr	r3, [pc, #4]	; (3f58 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownLoggerE+0x8>)
    3f52:	2200      	movs	r2, #0
    3f54:	701a      	strb	r2, [r3, #0]
    3f56:	4770      	bx	lr
    3f58:	1fffa0ec 	.word	0x1fffa0ec

00003f5c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f5c:	4807      	ldr	r0, [pc, #28]	; (3f7c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    3f5e:	b082      	sub	sp, #8
    3f60:	6803      	ldr	r3, [r0, #0]
    3f62:	9301      	str	r3, [sp, #4]
	return ret;
    3f64:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3f66:	4411      	add	r1, r2
    3f68:	e001      	b.n	3f6e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    3f6a:	4299      	cmp	r1, r3
    3f6c:	d304      	bcc.n	3f78 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f6e:	6803      	ldr	r3, [r0, #0]
    3f70:	9300      	str	r3, [sp, #0]
	return ret;
    3f72:	9b00      	ldr	r3, [sp, #0]
    3f74:	429a      	cmp	r2, r3
    3f76:	d9f8      	bls.n	3f6a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    3f78:	b002      	add	sp, #8
    3f7a:	4770      	bx	lr
    3f7c:	1fffa138 	.word	0x1fffa138

00003f80 <VisualMicroDebug::DBG_Millis()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f80:	4b03      	ldr	r3, [pc, #12]	; (3f90 <VisualMicroDebug::DBG_Millis()+0x10>)
{
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
    3f82:	b082      	sub	sp, #8
    3f84:	681b      	ldr	r3, [r3, #0]
    3f86:	9301      	str	r3, [sp, #4]
	return ret;
    3f88:	9801      	ldr	r0, [sp, #4]
	return millis();
}
    3f8a:	b002      	add	sp, #8
    3f8c:	4770      	bx	lr
    3f8e:	bf00      	nop
    3f90:	1fffa138 	.word	0x1fffa138

00003f94 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    3f94:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f96:	4b07      	ldr	r3, [pc, #28]	; (3fb4 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x20>)
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    3f98:	6882      	ldr	r2, [r0, #8]
    3f9a:	681b      	ldr	r3, [r3, #0]

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    3f9c:	6101      	str	r1, [r0, #16]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    3f9e:	b083      	sub	sp, #12
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    3fa0:	2400      	movs	r4, #0
    3fa2:	9301      	str	r3, [sp, #4]
	return ret;
    3fa4:	9b01      	ldr	r3, [sp, #4]
    3fa6:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
    3fa8:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
    3faa:	6083      	str	r3, [r0, #8]
}
    3fac:	b003      	add	sp, #12
    3fae:	bc10      	pop	{r4}
    3fb0:	4770      	bx	lr
    3fb2:	bf00      	nop
    3fb4:	1fffa138 	.word	0x1fffa138

00003fb8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    3fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3fbc:	4b1b      	ldr	r3, [pc, #108]	; (402c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3fbe:	4c1c      	ldr	r4, [pc, #112]	; (4030 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    3fc0:	681b      	ldr	r3, [r3, #0]
    3fc2:	4e1c      	ldr	r6, [pc, #112]	; (4034 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    3fc4:	b082      	sub	sp, #8
    3fc6:	4605      	mov	r5, r0
    3fc8:	9301      	str	r3, [sp, #4]
    3fca:	4688      	mov	r8, r1
    3fcc:	481a      	ldr	r0, [pc, #104]	; (4038 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x80>)
	return ret;
    3fce:	9f01      	ldr	r7, [sp, #4]
    3fd0:	2106      	movs	r1, #6
    3fd2:	f001 fc09 	bl	57e8 <usb_serial_write>
    3fd6:	4641      	mov	r1, r8
    3fd8:	2300      	movs	r3, #0
    3fda:	220a      	movs	r2, #10
    3fdc:	4620      	mov	r0, r4
    3fde:	f001 ff39 	bl	5e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3fe2:	2103      	movs	r1, #3
    3fe4:	4815      	ldr	r0, [pc, #84]	; (403c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x84>)
    3fe6:	f001 fbff 	bl	57e8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3fea:	4639      	mov	r1, r7
    3fec:	2300      	movs	r3, #0
    3fee:	220a      	movs	r2, #10
    3ff0:	4620      	mov	r0, r4
    3ff2:	f001 ff2f 	bl	5e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3ff6:	4630      	mov	r0, r6
    3ff8:	2101      	movs	r1, #1
    3ffa:	f001 fbf5 	bl	57e8 <usb_serial_write>
    3ffe:	68a9      	ldr	r1, [r5, #8]
    4000:	2300      	movs	r3, #0
    4002:	1a79      	subs	r1, r7, r1
    4004:	220a      	movs	r2, #10
    4006:	4620      	mov	r0, r4
    4008:	f001 ff24 	bl	5e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    400c:	4630      	mov	r0, r6
    400e:	2101      	movs	r1, #1
    4010:	f001 fbea 	bl	57e8 <usb_serial_write>
    4014:	68eb      	ldr	r3, [r5, #12]
    4016:	68a9      	ldr	r1, [r5, #8]
    4018:	4620      	mov	r0, r4
    401a:	1ac9      	subs	r1, r1, r3
    401c:	220a      	movs	r2, #10
    401e:	2300      	movs	r3, #0
    4020:	f001 ff18 	bl	5e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    4024:	b002      	add	sp, #8
    4026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    402a:	bf00      	nop
    402c:	1fffa138 	.word	0x1fffa138
    4030:	1fff8734 	.word	0x1fff8734
    4034:	0000871c 	.word	0x0000871c
    4038:	00008710 	.word	0x00008710
    403c:	00008718 	.word	0x00008718

00004040 <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    4040:	b508      	push	{r3, lr}
    4042:	2106      	movs	r1, #6
    4044:	4803      	ldr	r0, [pc, #12]	; (4054 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    4046:	f001 fbcf 	bl	57e8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    404a:	4803      	ldr	r0, [pc, #12]	; (4058 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_SOFTWARESERIAL)
	transport->println("_VMDPE");
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif
}
    404c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4050:	f001 bef0 	b.w	5e34 <Print::println()>
    4054:	00008720 	.word	0x00008720
    4058:	1fff8734 	.word	0x1fff8734

0000405c <VisualMicroDebug::OnBreakPointEnd()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    405c:	4b03      	ldr	r3, [pc, #12]	; (406c <VisualMicroDebug::OnBreakPointEnd()+0x10>)

void VisualMicroDebug::OnBreakPointEnd()
{
    405e:	b082      	sub	sp, #8
    4060:	681b      	ldr	r3, [r3, #0]
    4062:	9301      	str	r3, [sp, #4]
	return ret;
    4064:	9b01      	ldr	r3, [sp, #4]
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    4066:	6083      	str	r3, [r0, #8]
}
    4068:	b002      	add	sp, #8
    406a:	4770      	bx	lr
    406c:	1fffa138 	.word	0x1fffa138

00004070 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    4070:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4072:	4a10      	ldr	r2, [pc, #64]	; (40b4 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    4074:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    4076:	b9a1      	cbnz	r1, 40a2 <VisualMicroDebug::outPacketStart(bool)+0x32>
    4078:	6813      	ldr	r3, [r2, #0]
    407a:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    407c:	6841      	ldr	r1, [r0, #4]
	return ret;
    407e:	9b00      	ldr	r3, [sp, #0]
    4080:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    4082:	2920      	cmp	r1, #32
    4084:	d80d      	bhi.n	40a2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4086:	6813      	ldr	r3, [r2, #0]
    4088:	9302      	str	r3, [sp, #8]
	return ret;
    408a:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    408c:	f104 0321 	add.w	r3, r4, #33	; 0x21
    4090:	1a59      	subs	r1, r3, r1
    4092:	e001      	b.n	4098 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4094:	4299      	cmp	r1, r3
    4096:	d304      	bcc.n	40a2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4098:	6813      	ldr	r3, [r2, #0]
    409a:	9301      	str	r3, [sp, #4]
	return ret;
    409c:	9b01      	ldr	r3, [sp, #4]
    409e:	429c      	cmp	r4, r3
    40a0:	d9f8      	bls.n	4094 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40a2:	6813      	ldr	r3, [r2, #0]
    40a4:	9303      	str	r3, [sp, #12]
	return ret;
    40a6:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    40a8:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    40aa:	2001      	movs	r0, #1
    40ac:	b005      	add	sp, #20
    40ae:	bc10      	pop	{r4}
    40b0:	4770      	bx	lr
    40b2:	bf00      	nop
    40b4:	1fffa138 	.word	0x1fffa138

000040b8 <VisualMicroDebug::outPacketEnd()>:
    40b8:	4770      	bx	lr
    40ba:	bf00      	nop

000040bc <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(2000);
    40bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    40c0:	f000 ba3a 	b.w	4538 <delay>

000040c4 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    40c4:	2300      	movs	r3, #0
    40c6:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    40c8:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    40ca:	b171      	cbz	r1, 40ea <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40cc:	4807      	ldr	r0, [pc, #28]	; (40ec <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    40ce:	b082      	sub	sp, #8
    40d0:	6803      	ldr	r3, [r0, #0]
    40d2:	9301      	str	r3, [sp, #4]
	return ret;
    40d4:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    40d6:	4411      	add	r1, r2
    40d8:	e001      	b.n	40de <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    40da:	4299      	cmp	r1, r3
    40dc:	d304      	bcc.n	40e8 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40de:	6803      	ldr	r3, [r0, #0]
    40e0:	9300      	str	r3, [sp, #0]
	return ret;
    40e2:	9b00      	ldr	r3, [sp, #0]
    40e4:	429a      	cmp	r2, r3
    40e6:	d9f8      	bls.n	40da <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    40e8:	b002      	add	sp, #8
    40ea:	4770      	bx	lr
    40ec:	1fffa138 	.word	0x1fffa138

000040f0 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    40f0:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40f2:	4c13      	ldr	r4, [pc, #76]	; (4140 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    40f4:	b085      	sub	sp, #20
    40f6:	6823      	ldr	r3, [r4, #0]
    40f8:	9303      	str	r3, [sp, #12]
	return ret;
    40fa:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    40fc:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    40fe:	460d      	mov	r5, r1
    4100:	4810      	ldr	r0, [pc, #64]	; (4144 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    4102:	2106      	movs	r1, #6
    4104:	f001 fb70 	bl	57e8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4108:	2300      	movs	r3, #0
    410a:	220a      	movs	r2, #10
    410c:	4629      	mov	r1, r5
    410e:	480e      	ldr	r0, [pc, #56]	; (4148 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    4110:	f001 fea0 	bl	5e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4114:	2106      	movs	r1, #6
    4116:	480d      	ldr	r0, [pc, #52]	; (414c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    4118:	f001 fb66 	bl	57e8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    411c:	480a      	ldr	r0, [pc, #40]	; (4148 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    411e:	f001 fe89 	bl	5e34 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4122:	6823      	ldr	r3, [r4, #0]
    4124:	9302      	str	r3, [sp, #8]
	return ret;
    4126:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4128:	f102 0132 	add.w	r1, r2, #50	; 0x32
    412c:	e001      	b.n	4132 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    412e:	4299      	cmp	r1, r3
    4130:	d304      	bcc.n	413c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4132:	6823      	ldr	r3, [r4, #0]
    4134:	9301      	str	r3, [sp, #4]
	return ret;
    4136:	9b01      	ldr	r3, [sp, #4]
    4138:	429a      	cmp	r2, r3
    413a:	d9f8      	bls.n	412e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    413c:	b005      	add	sp, #20
    413e:	bd30      	pop	{r4, r5, pc}
    4140:	1fffa138 	.word	0x1fffa138
    4144:	00008728 	.word	0x00008728
    4148:	1fff8734 	.word	0x1fff8734
    414c:	00008730 	.word	0x00008730

00004150 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    4150:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    4152:	7e03      	ldrb	r3, [r0, #24]
    4154:	b90b      	cbnz	r3, 415a <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    4156:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    4158:	bd38      	pop	{r3, r4, r5, pc}
    415a:	460d      	mov	r5, r1
    415c:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    415e:	f001 fb19 	bl	5794 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    4162:	f010 0fff 	tst.w	r0, #255	; 0xff
    4166:	d101      	bne.n	416c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    4168:	2065      	movs	r0, #101	; 0x65
    416a:	bd38      	pop	{r3, r4, r5, pc}
    416c:	f001 fb12 	bl	5794 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    4170:	f010 0fff 	tst.w	r0, #255	; 0xff
    4174:	d0f8      	beq.n	4168 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    4176:	f001 fad1 	bl	571c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    417a:	b2c0      	uxtb	r0, r0
    417c:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    4180:	2b1e      	cmp	r3, #30
    4182:	d8f3      	bhi.n	416c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    4184:	a201      	add	r2, pc, #4	; (adr r2, 418c <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    4186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    418a:	bf00      	nop
    418c:	00004215 	.word	0x00004215
    4190:	0000416d 	.word	0x0000416d
    4194:	0000416d 	.word	0x0000416d
    4198:	0000416d 	.word	0x0000416d
    419c:	0000416d 	.word	0x0000416d
    41a0:	0000416d 	.word	0x0000416d
    41a4:	0000416d 	.word	0x0000416d
    41a8:	0000416d 	.word	0x0000416d
    41ac:	0000416d 	.word	0x0000416d
    41b0:	0000416d 	.word	0x0000416d
    41b4:	0000416d 	.word	0x0000416d
    41b8:	00004209 	.word	0x00004209
    41bc:	0000416d 	.word	0x0000416d
    41c0:	0000416d 	.word	0x0000416d
    41c4:	0000416d 	.word	0x0000416d
    41c8:	0000416d 	.word	0x0000416d
    41cc:	00004157 	.word	0x00004157
    41d0:	0000416d 	.word	0x0000416d
    41d4:	0000416d 	.word	0x0000416d
    41d8:	0000416d 	.word	0x0000416d
    41dc:	0000416d 	.word	0x0000416d
    41e0:	0000416d 	.word	0x0000416d
    41e4:	0000416d 	.word	0x0000416d
    41e8:	0000416d 	.word	0x0000416d
    41ec:	0000416d 	.word	0x0000416d
    41f0:	00004157 	.word	0x00004157
    41f4:	0000416d 	.word	0x0000416d
    41f8:	0000416d 	.word	0x0000416d
    41fc:	0000416d 	.word	0x0000416d
    4200:	0000416d 	.word	0x0000416d
    4204:	00004159 	.word	0x00004159
		{

		case 'c':
			sendContinuedACK(breakPointId);
    4208:	4620      	mov	r0, r4
    420a:	4629      	mov	r1, r5
    420c:	f7ff ff70 	bl	40f0 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    4210:	2063      	movs	r0, #99	; 0x63
    4212:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    4214:	2300      	movs	r3, #0
    4216:	7623      	strb	r3, [r4, #24]
			return 'c';
    4218:	2063      	movs	r0, #99	; 0x63
    421a:	bd38      	pop	{r3, r4, r5, pc}

0000421c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    421c:	b570      	push	{r4, r5, r6, lr}
    421e:	4605      	mov	r5, r0
    4220:	b082      	sub	sp, #8
    4222:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    4224:	b1c9      	cbz	r1, 425a <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    4226:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4228:	4c0d      	ldr	r4, [pc, #52]	; (4260 <VisualMicroDebug::start(bool, bool)+0x44>)
    422a:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    422c:	2100      	movs	r1, #0
    422e:	4628      	mov	r0, r5
    4230:	f7ff ff8e 	bl	4150 <VisualMicroDebug::breakWait(unsigned char)>
    4234:	2863      	cmp	r0, #99	; 0x63
    4236:	d010      	beq.n	425a <VisualMicroDebug::start(bool, bool)+0x3e>
    4238:	6823      	ldr	r3, [r4, #0]
    423a:	9301      	str	r3, [sp, #4]
	return ret;
    423c:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    423e:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4240:	6823      	ldr	r3, [r4, #0]
    4242:	9300      	str	r3, [sp, #0]
	return ret;
    4244:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4246:	429a      	cmp	r2, r3
    4248:	d8f0      	bhi.n	422c <VisualMicroDebug::start(bool, bool)+0x10>
    424a:	4299      	cmp	r1, r3
    424c:	d2f8      	bcs.n	4240 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    424e:	2100      	movs	r1, #0
    4250:	4628      	mov	r0, r5
    4252:	f7ff ff7d 	bl	4150 <VisualMicroDebug::breakWait(unsigned char)>
    4256:	2863      	cmp	r0, #99	; 0x63
    4258:	d1ee      	bne.n	4238 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    425a:	762e      	strb	r6, [r5, #24]
#endif

}
    425c:	b002      	add	sp, #8
    425e:	bd70      	pop	{r4, r5, r6, pc}
    4260:	1fffa138 	.word	0x1fffa138

00004264 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    4264:	4b03      	ldr	r3, [pc, #12]	; (4274 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    4266:	2200      	movs	r2, #0
    4268:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    426a:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    426c:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    426e:	615a      	str	r2, [r3, #20]
    4270:	4770      	bx	lr
    4272:	bf00      	nop
    4274:	1fffa0f0 	.word	0x1fffa0f0

00004278 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4278:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    427a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    427e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    4282:	d16d      	bne.n	4360 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4284:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    4286:	d341      	bcc.n	430c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4288:	f851 3b04 	ldr.w	r3, [r1], #4
    428c:	f840 3b04 	str.w	r3, [r0], #4
    4290:	f851 3b04 	ldr.w	r3, [r1], #4
    4294:	f840 3b04 	str.w	r3, [r0], #4
    4298:	f851 3b04 	ldr.w	r3, [r1], #4
    429c:	f840 3b04 	str.w	r3, [r0], #4
    42a0:	f851 3b04 	ldr.w	r3, [r1], #4
    42a4:	f840 3b04 	str.w	r3, [r0], #4
    42a8:	f851 3b04 	ldr.w	r3, [r1], #4
    42ac:	f840 3b04 	str.w	r3, [r0], #4
    42b0:	f851 3b04 	ldr.w	r3, [r1], #4
    42b4:	f840 3b04 	str.w	r3, [r0], #4
    42b8:	f851 3b04 	ldr.w	r3, [r1], #4
    42bc:	f840 3b04 	str.w	r3, [r0], #4
    42c0:	f851 3b04 	ldr.w	r3, [r1], #4
    42c4:	f840 3b04 	str.w	r3, [r0], #4
    42c8:	f851 3b04 	ldr.w	r3, [r1], #4
    42cc:	f840 3b04 	str.w	r3, [r0], #4
    42d0:	f851 3b04 	ldr.w	r3, [r1], #4
    42d4:	f840 3b04 	str.w	r3, [r0], #4
    42d8:	f851 3b04 	ldr.w	r3, [r1], #4
    42dc:	f840 3b04 	str.w	r3, [r0], #4
    42e0:	f851 3b04 	ldr.w	r3, [r1], #4
    42e4:	f840 3b04 	str.w	r3, [r0], #4
    42e8:	f851 3b04 	ldr.w	r3, [r1], #4
    42ec:	f840 3b04 	str.w	r3, [r0], #4
    42f0:	f851 3b04 	ldr.w	r3, [r1], #4
    42f4:	f840 3b04 	str.w	r3, [r0], #4
    42f8:	f851 3b04 	ldr.w	r3, [r1], #4
    42fc:	f840 3b04 	str.w	r3, [r0], #4
    4300:	f851 3b04 	ldr.w	r3, [r1], #4
    4304:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4308:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    430a:	d2bd      	bcs.n	4288 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    430c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    430e:	d311      	bcc.n	4334 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4310:	f851 3b04 	ldr.w	r3, [r1], #4
    4314:	f840 3b04 	str.w	r3, [r0], #4
    4318:	f851 3b04 	ldr.w	r3, [r1], #4
    431c:	f840 3b04 	str.w	r3, [r0], #4
    4320:	f851 3b04 	ldr.w	r3, [r1], #4
    4324:	f840 3b04 	str.w	r3, [r0], #4
    4328:	f851 3b04 	ldr.w	r3, [r1], #4
    432c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    4330:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    4332:	d2ed      	bcs.n	4310 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    4334:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    4336:	d305      	bcc.n	4344 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    4338:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    433c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    4340:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    4342:	d2f9      	bcs.n	4338 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    4344:	3204      	adds	r2, #4
	beq	.Ldone
    4346:	d008      	beq.n	435a <memcpy+0xe2>

	lsls	r2, r2, #31
    4348:	07d2      	lsls	r2, r2, #31
	itt ne
    434a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    434c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4350:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    4354:	d301      	bcc.n	435a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    4356:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4358:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    435a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    435c:	4770      	bx	lr
    435e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    4360:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    4362:	d313      	bcc.n	438c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    4364:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    4366:	d08d      	beq.n	4284 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4368:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    436c:	d08a      	beq.n	4284 <memcpy+0xc>

	rsb	r3, #4
    436e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    4372:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4374:	07db      	lsls	r3, r3, #31
	itt ne
    4376:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4378:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    437c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    4380:	d380      	bcc.n	4284 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    4382:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    4386:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    438a:	e77b      	b.n	4284 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    438c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    438e:	d3d9      	bcc.n	4344 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    4390:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    4392:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4396:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    439a:	d2f9      	bcs.n	4390 <memcpy+0x118>

	ldrb	r3, [r1]
    439c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    439e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    43a0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    43a2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    43a4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    43a6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    43a8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    43aa:	4770      	bx	lr

000043ac <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    43ac:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    43ae:	4c10      	ldr	r4, [pc, #64]	; (43f0 <fault_isr+0x44>)
    43b0:	e008      	b.n	43c4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    43b2:	6823      	ldr	r3, [r4, #0]
    43b4:	0559      	lsls	r1, r3, #21
    43b6:	d40d      	bmi.n	43d4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    43b8:	6823      	ldr	r3, [r4, #0]
    43ba:	051a      	lsls	r2, r3, #20
    43bc:	d40f      	bmi.n	43de <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    43be:	6823      	ldr	r3, [r4, #0]
    43c0:	04db      	lsls	r3, r3, #19
    43c2:	d411      	bmi.n	43e8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    43c4:	6823      	ldr	r3, [r4, #0]
    43c6:	0358      	lsls	r0, r3, #13
    43c8:	d5f3      	bpl.n	43b2 <fault_isr+0x6>
    43ca:	f000 fb8d 	bl	4ae8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    43ce:	6823      	ldr	r3, [r4, #0]
    43d0:	0559      	lsls	r1, r3, #21
    43d2:	d5f1      	bpl.n	43b8 <fault_isr+0xc>
    43d4:	f000 fa28 	bl	4828 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    43d8:	6823      	ldr	r3, [r4, #0]
    43da:	051a      	lsls	r2, r3, #20
    43dc:	d5ef      	bpl.n	43be <fault_isr+0x12>
    43de:	f002 f829 	bl	6434 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    43e2:	6823      	ldr	r3, [r4, #0]
    43e4:	04db      	lsls	r3, r3, #19
    43e6:	d5ed      	bpl.n	43c4 <fault_isr+0x18>
    43e8:	f002 f8ba 	bl	6560 <uart2_status_isr>
    43ec:	e7ea      	b.n	43c4 <fault_isr+0x18>
    43ee:	bf00      	nop
    43f0:	40048034 	.word	0x40048034

000043f4 <unused_isr>:
	}
}

void unused_isr(void)
{
    43f4:	b508      	push	{r3, lr}
	fault_isr();
    43f6:	f7ff ffd9 	bl	43ac <fault_isr>
    43fa:	bf00      	nop

000043fc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    43fc:	4b01      	ldr	r3, [pc, #4]	; (4404 <startup_early_hook+0x8>)
    43fe:	2210      	movs	r2, #16
    4400:	801a      	strh	r2, [r3, #0]
    4402:	4770      	bx	lr
    4404:	40052000 	.word	0x40052000

00004408 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4408:	4770      	bx	lr
    440a:	bf00      	nop

0000440c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    440c:	4909      	ldr	r1, [pc, #36]	; (4434 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    440e:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    4410:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    4412:	b130      	cbz	r0, 4422 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4414:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    4416:	4418      	add	r0, r3
    4418:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
    441c:	4290      	cmp	r0, r2
    441e:	d202      	bcs.n	4426 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    4420:	6008      	str	r0, [r1, #0]
	}
	return prev;
    4422:	4618      	mov	r0, r3
}
    4424:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    4426:	f002 fc77 	bl	6d18 <__errno>
    442a:	230c      	movs	r3, #12
    442c:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    442e:	f04f 30ff 	mov.w	r0, #4294967295
    4432:	bd08      	pop	{r3, pc}
    4434:	1fff8728 	.word	0x1fff8728

00004438 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    4438:	7800      	ldrb	r0, [r0, #0]
}
    443a:	fab0 f080 	clz	r0, r0
    443e:	0940      	lsrs	r0, r0, #5
    4440:	4770      	bx	lr
    4442:	bf00      	nop

00004444 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    4444:	2301      	movs	r3, #1
    4446:	7003      	strb	r3, [r0, #0]
    4448:	4770      	bx	lr
    444a:	bf00      	nop

0000444c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    444c:	4a1c      	ldr	r2, [pc, #112]	; (44c0 <pinMode.part.2+0x74>)
    444e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4452:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4454:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4456:	d011      	beq.n	447c <pinMode.part.2+0x30>
    4458:	2904      	cmp	r1, #4
    445a:	d01b      	beq.n	4494 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    445c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    4460:	2200      	movs	r2, #0
    4462:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    4466:	b129      	cbz	r1, 4474 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    4468:	2902      	cmp	r1, #2
    446a:	d020      	beq.n	44ae <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    446c:	2903      	cmp	r1, #3
    446e:	d022      	beq.n	44b6 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4470:	601a      	str	r2, [r3, #0]
    4472:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    4474:	f44f 7280 	mov.w	r2, #256	; 0x100
    4478:	601a      	str	r2, [r3, #0]
    447a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    447c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4480:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4484:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4488:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    448a:	681a      	ldr	r2, [r3, #0]
    448c:	f022 0220 	bic.w	r2, r2, #32
    4490:	601a      	str	r2, [r3, #0]
    4492:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4494:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4498:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    449c:	2001      	movs	r0, #1
    449e:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    44a2:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    44a4:	681a      	ldr	r2, [r3, #0]
    44a6:	f042 0220 	orr.w	r2, r2, #32
    44aa:	601a      	str	r2, [r3, #0]
    44ac:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    44ae:	f240 1203 	movw	r2, #259	; 0x103
    44b2:	601a      	str	r2, [r3, #0]
    44b4:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    44b6:	f44f 7281 	mov.w	r2, #258	; 0x102
    44ba:	601a      	str	r2, [r3, #0]
    44bc:	4770      	bx	lr
    44be:	bf00      	nop
    44c0:	00008780 	.word	0x00008780

000044c4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    44c4:	b430      	push	{r4, r5}
	RTC_SR = 0;
    44c6:	4b05      	ldr	r3, [pc, #20]	; (44dc <rtc_set+0x18>)
	RTC_TPR = 0;
    44c8:	4d05      	ldr	r5, [pc, #20]	; (44e0 <rtc_set+0x1c>)
	RTC_TSR = t;
    44ca:	4c06      	ldr	r4, [pc, #24]	; (44e4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    44cc:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    44ce:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    44d0:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    44d2:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    44d4:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    44d6:	6019      	str	r1, [r3, #0]
}
    44d8:	bc30      	pop	{r4, r5}
    44da:	4770      	bx	lr
    44dc:	4003d014 	.word	0x4003d014
    44e0:	4003d004 	.word	0x4003d004
    44e4:	4003d000 	.word	0x4003d000

000044e8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    44e8:	2821      	cmp	r0, #33	; 0x21
    44ea:	d801      	bhi.n	44f0 <pinMode+0x8>
    44ec:	f7ff bfae 	b.w	444c <pinMode.part.2>
    44f0:	4770      	bx	lr
    44f2:	bf00      	nop

000044f4 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    44f4:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    44f6:	490c      	ldr	r1, [pc, #48]	; (4528 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    44f8:	4b0c      	ldr	r3, [pc, #48]	; (452c <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    44fa:	4a0d      	ldr	r2, [pc, #52]	; (4530 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    44fc:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    44fe:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4500:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4502:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4504:	0152      	lsls	r2, r2, #5
    4506:	d502      	bpl.n	450e <micros+0x1a>
    4508:	2b32      	cmp	r3, #50	; 0x32
    450a:	bf88      	it	hi
    450c:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    450e:	4909      	ldr	r1, [pc, #36]	; (4534 <micros+0x40>)
    4510:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4518:	33ff      	adds	r3, #255	; 0xff
    451a:	fba1 1303 	umull	r1, r3, r1, r3
    451e:	fb02 f000 	mul.w	r0, r2, r0
}
    4522:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    4526:	4770      	bx	lr
    4528:	1fffa138 	.word	0x1fffa138
    452c:	e000e018 	.word	0xe000e018
    4530:	e000ed04 	.word	0xe000ed04
    4534:	aaaaaaab 	.word	0xaaaaaaab

00004538 <delay>:

void delay(uint32_t ms)
{
    4538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    453c:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    453e:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4540:	4f20      	ldr	r7, [pc, #128]	; (45c4 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4542:	4b21      	ldr	r3, [pc, #132]	; (45c8 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4544:	4a21      	ldr	r2, [pc, #132]	; (45cc <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4546:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4548:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    454a:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    454c:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    454e:	0152      	lsls	r2, r2, #5
    4550:	d502      	bpl.n	4558 <delay+0x20>
    4552:	2b32      	cmp	r3, #50	; 0x32
    4554:	bf88      	it	hi
    4556:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    4558:	b395      	cbz	r5, 45c0 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    455a:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    455e:	4e1c      	ldr	r6, [pc, #112]	; (45d0 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4560:	f8df 9064 	ldr.w	r9, [pc, #100]	; 45c8 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4564:	f8df 8064 	ldr.w	r8, [pc, #100]	; 45cc <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4568:	33ff      	adds	r3, #255	; 0xff
    456a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    456e:	fba6 1303 	umull	r1, r3, r6, r3
    4572:	fb02 f404 	mul.w	r4, r2, r4
    4576:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    457a:	b672      	cpsid	i
	current = SYST_CVR;
    457c:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    4580:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4582:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    4586:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4588:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    458c:	33ff      	adds	r3, #255	; 0xff
    458e:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4592:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4596:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    459a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    459e:	d002      	beq.n	45a6 <delay+0x6e>
    45a0:	2932      	cmp	r1, #50	; 0x32
    45a2:	bf88      	it	hi
    45a4:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    45a6:	fb00 3302 	mla	r3, r0, r2, r3
    45aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    45ae:	d304      	bcc.n	45ba <delay+0x82>
				ms--;
				if (ms == 0) return;
    45b0:	3d01      	subs	r5, #1
    45b2:	d005      	beq.n	45c0 <delay+0x88>
				start += 1000;
    45b4:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    45b8:	e7df      	b.n	457a <delay+0x42>
			}
			yield();
    45ba:	f001 fe47 	bl	624c <yield>
		}
    45be:	e7dc      	b.n	457a <delay+0x42>
    45c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    45c4:	1fffa138 	.word	0x1fffa138
    45c8:	e000e018 	.word	0xe000e018
    45cc:	e000ed04 	.word	0xe000ed04
    45d0:	aaaaaaab 	.word	0xaaaaaaab

000045d4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    45d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    45d6:	4b2d      	ldr	r3, [pc, #180]	; (468c <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    45d8:	492d      	ldr	r1, [pc, #180]	; (4690 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    45da:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 46ac <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    45de:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 46b0 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    45e2:	4e2c      	ldr	r6, [pc, #176]	; (4694 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    45e4:	4d2c      	ldr	r5, [pc, #176]	; (4698 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    45e6:	4c2d      	ldr	r4, [pc, #180]	; (469c <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    45e8:	4a2d      	ldr	r2, [pc, #180]	; (46a0 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    45ea:	4f2e      	ldr	r7, [pc, #184]	; (46a4 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    45ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    45f0:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    45f2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    45f6:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    45f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    45fc:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    45fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    4602:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    4604:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    4608:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    460a:	2000      	movs	r0, #0
    460c:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    460e:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4610:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    4614:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4618:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    461c:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    461e:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    4620:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    4622:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    4624:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    4626:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    4628:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    462a:	2209      	movs	r2, #9
    462c:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    4630:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    4634:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    4638:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    463c:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    4640:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    4644:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    4648:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    464a:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    464e:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4652:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    4656:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    465a:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    465c:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4660:	4811      	ldr	r0, [pc, #68]	; (46a8 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4662:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    4664:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    4668:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    466c:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    466e:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4670:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    4672:	f001 fe39 	bl	62e8 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    4676:	2019      	movs	r0, #25
    4678:	f7ff ff5e 	bl	4538 <delay>
	usb_init();
    467c:	f000 ff9c 	bl	55b8 <usb_init>
	delay(275);
    4680:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    4684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    4688:	f7ff bf56 	b.w	4538 <delay>
    468c:	e000e108 	.word	0xe000e108
    4690:	40038004 	.word	0x40038004
    4694:	40038014 	.word	0x40038014
    4698:	40038024 	.word	0x40038024
    469c:	4003802c 	.word	0x4003802c
    46a0:	4003801c 	.word	0x4003801c
    46a4:	40038034 	.word	0x40038034
    46a8:	400b8000 	.word	0x400b8000
    46ac:	4003800c 	.word	0x4003800c
    46b0:	40038008 	.word	0x40038008

000046b4 <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    46b4:	4a2b      	ldr	r2, [pc, #172]	; (4764 <serial_begin+0xb0>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    46b6:	492c      	ldr	r1, [pc, #176]	; (4768 <serial_begin+0xb4>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    46b8:	6813      	ldr	r3, [r2, #0]
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
    46ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    46bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    46c0:	6013      	str	r3, [r2, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    46c2:	780a      	ldrb	r2, [r1, #0]
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    46c4:	4f29      	ldr	r7, [pc, #164]	; (476c <serial_begin+0xb8>)
	rx_buffer_tail = 0;
    46c6:	4e2a      	ldr	r6, [pc, #168]	; (4770 <serial_begin+0xbc>)
	tx_buffer_head = 0;
    46c8:	4d2a      	ldr	r5, [pc, #168]	; (4774 <serial_begin+0xc0>)
	tx_buffer_tail = 0;
    46ca:	4c2b      	ldr	r4, [pc, #172]	; (4778 <serial_begin+0xc4>)
	transmitting = 0;
    46cc:	492b      	ldr	r1, [pc, #172]	; (477c <serial_begin+0xc8>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    46ce:	2300      	movs	r3, #0
    46d0:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    46d2:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    46d4:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    46d6:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    46d8:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    46da:	2a00      	cmp	r2, #0
    46dc:	d03d      	beq.n	475a <serial_begin+0xa6>
    46de:	2a15      	cmp	r2, #21
    46e0:	d021      	beq.n	4726 <serial_begin+0x72>
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    46e2:	4b27      	ldr	r3, [pc, #156]	; (4780 <serial_begin+0xcc>)
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	2b01      	cmp	r3, #1
    46e8:	d025      	beq.n	4736 <serial_begin+0x82>
    46ea:	2b05      	cmp	r3, #5
    46ec:	d030      	beq.n	4750 <serial_begin+0x9c>
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    46ee:	281f      	cmp	r0, #31
    46f0:	d827      	bhi.n	4742 <serial_begin+0x8e>
    46f2:	2000      	movs	r0, #0
    46f4:	4602      	mov	r2, r0
    46f6:	2501      	movs	r5, #1
	UART0_BDH = (divisor >> 13) & 0x1F;
    46f8:	4b22      	ldr	r3, [pc, #136]	; (4784 <serial_begin+0xd0>)
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    46fa:	4c23      	ldr	r4, [pc, #140]	; (4788 <serial_begin+0xd4>)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
    46fc:	701a      	strb	r2, [r3, #0]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    46fe:	4923      	ldr	r1, [pc, #140]	; (478c <serial_begin+0xd8>)
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
    4700:	705d      	strb	r5, [r3, #1]
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    4702:	2204      	movs	r2, #4
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    4704:	f04f 0e02 	mov.w	lr, #2
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    4708:	2788      	movs	r7, #136	; 0x88
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    470a:	263c      	movs	r6, #60	; 0x3c
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    470c:	2540      	movs	r5, #64	; 0x40
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    470e:	7298      	strb	r0, [r3, #10]
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    4710:	709a      	strb	r2, [r3, #2]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    4712:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    4716:	f883 e013 	strb.w	lr, [r3, #19]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    471a:	755a      	strb	r2, [r3, #21]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    471c:	741f      	strb	r7, [r3, #16]
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    471e:	70de      	strb	r6, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    4720:	7025      	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    4722:	6008      	str	r0, [r1, #0]
    4724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    4726:	4b1a      	ldr	r3, [pc, #104]	; (4790 <serial_begin+0xdc>)
    4728:	f240 3213 	movw	r2, #787	; 0x313
    472c:	601a      	str	r2, [r3, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    472e:	4b14      	ldr	r3, [pc, #80]	; (4780 <serial_begin+0xcc>)
    4730:	781b      	ldrb	r3, [r3, #0]
    4732:	2b01      	cmp	r3, #1
    4734:	d1d9      	bne.n	46ea <serial_begin+0x36>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    4736:	4b17      	ldr	r3, [pc, #92]	; (4794 <serial_begin+0xe0>)
    4738:	f44f 7251 	mov.w	r2, #836	; 0x344
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    473c:	281f      	cmp	r0, #31
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    473e:	601a      	str	r2, [r3, #0]
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    4740:	d9d7      	bls.n	46f2 <serial_begin+0x3e>
    4742:	f3c0 3244 	ubfx	r2, r0, #13, #5
    4746:	f3c0 1547 	ubfx	r5, r0, #5, #8
    474a:	f000 001f 	and.w	r0, r0, #31
    474e:	e7d3      	b.n	46f8 <serial_begin+0x44>
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    4750:	4b11      	ldr	r3, [pc, #68]	; (4798 <serial_begin+0xe4>)
    4752:	f44f 7251 	mov.w	r2, #836	; 0x344
    4756:	601a      	str	r2, [r3, #0]
    4758:	e7c9      	b.n	46ee <serial_begin+0x3a>
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    475a:	4b10      	ldr	r3, [pc, #64]	; (479c <serial_begin+0xe8>)
    475c:	f240 3213 	movw	r2, #787	; 0x313
    4760:	601a      	str	r2, [r3, #0]
    4762:	e7be      	b.n	46e2 <serial_begin+0x2e>
    4764:	40048034 	.word	0x40048034
    4768:	1fffa184 	.word	0x1fffa184
    476c:	1fffa140 	.word	0x1fffa140
    4770:	1fffa141 	.word	0x1fffa141
    4774:	1fffa1d0 	.word	0x1fffa1d0
    4778:	1fffa1c9 	.word	0x1fffa1c9
    477c:	1fffa1c8 	.word	0x1fffa1c8
    4780:	1fff872c 	.word	0x1fff872c
    4784:	4006a000 	.word	0x4006a000
    4788:	e000e42d 	.word	0xe000e42d
    478c:	e000e104 	.word	0xe000e104
    4790:	4004c018 	.word	0x4004c018
    4794:	4004a044 	.word	0x4004a044
    4798:	4004c01c 	.word	0x4004c01c
    479c:	4004a040 	.word	0x4004a040

000047a0 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    47a0:	4a05      	ldr	r2, [pc, #20]	; (47b8 <serial_available+0x18>)
	tail = rx_buffer_tail;
    47a2:	4b06      	ldr	r3, [pc, #24]	; (47bc <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    47a4:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    47a6:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    47a8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    47aa:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    47ac:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    47ae:	bf38      	it	cc
    47b0:	3040      	addcc	r0, #64	; 0x40
    47b2:	1ac0      	subs	r0, r0, r3
}
    47b4:	4770      	bx	lr
    47b6:	bf00      	nop
    47b8:	1fffa140 	.word	0x1fffa140
    47bc:	1fffa141 	.word	0x1fffa141

000047c0 <serial_getchar>:

int serial_getchar(void)
{
    47c0:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    47c2:	4b15      	ldr	r3, [pc, #84]	; (4818 <serial_getchar+0x58>)
	tail = rx_buffer_tail;
    47c4:	4c15      	ldr	r4, [pc, #84]	; (481c <serial_getchar+0x5c>)
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    47c6:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    47c8:	7823      	ldrb	r3, [r4, #0]
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    47ca:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    47cc:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    47ce:	429a      	cmp	r2, r3
    47d0:	d01e      	beq.n	4810 <serial_getchar+0x50>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    47d2:	3301      	adds	r3, #1
    47d4:	2b3f      	cmp	r3, #63	; 0x3f
    47d6:	d90e      	bls.n	47f6 <serial_getchar+0x36>
	c = rx_buffer[tail];
    47d8:	4911      	ldr	r1, [pc, #68]	; (4820 <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    47da:	4b12      	ldr	r3, [pc, #72]	; (4824 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    47dc:	7808      	ldrb	r0, [r1, #0]
	rx_buffer_tail = tail;
	if (rts_pin) {
    47de:	6819      	ldr	r1, [r3, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    47e0:	2300      	movs	r3, #0

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    47e2:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    47e4:	7023      	strb	r3, [r4, #0]
	if (rts_pin) {
    47e6:	b121      	cbz	r1, 47f2 <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    47e8:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    47ea:	2b1a      	cmp	r3, #26
    47ec:	dc01      	bgt.n	47f2 <serial_getchar+0x32>
    47ee:	2300      	movs	r3, #0
    47f0:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    47f2:	bc30      	pop	{r4, r5}
    47f4:	4770      	bx	lr

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    47f6:	480a      	ldr	r0, [pc, #40]	; (4820 <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    47f8:	490a      	ldr	r1, [pc, #40]	; (4824 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    47fa:	5cc0      	ldrb	r0, [r0, r3]
	rx_buffer_tail = tail;
	if (rts_pin) {
    47fc:	6809      	ldr	r1, [r1, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    47fe:	b2dd      	uxtb	r5, r3

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4800:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    4802:	7025      	strb	r5, [r4, #0]
	if (rts_pin) {
    4804:	2900      	cmp	r1, #0
    4806:	d0f4      	beq.n	47f2 <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
    4808:	429a      	cmp	r2, r3
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    480a:	bf38      	it	cc
    480c:	3240      	addcc	r2, #64	; 0x40
    480e:	e7eb      	b.n	47e8 <serial_getchar+0x28>
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4810:	f04f 30ff 	mov.w	r0, #4294967295
    4814:	e7ed      	b.n	47f2 <serial_getchar+0x32>
    4816:	bf00      	nop
    4818:	1fffa140 	.word	0x1fffa140
    481c:	1fffa141 	.word	0x1fffa141
    4820:	1fffa188 	.word	0x1fffa188
    4824:	1fffa13c 	.word	0x1fffa13c

00004828 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4828:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    482a:	4b38      	ldr	r3, [pc, #224]	; (490c <uart0_status_isr+0xe4>)
    482c:	791a      	ldrb	r2, [r3, #4]
    482e:	f012 0f30 	tst.w	r2, #48	; 0x30
    4832:	d02c      	beq.n	488e <uart0_status_isr+0x66>
		__disable_irq();
    4834:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    4836:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4838:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    483c:	2900      	cmp	r1, #0
    483e:	d03d      	beq.n	48bc <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4840:	b662      	cpsie	i
			head = rx_buffer_head;
    4842:	4f33      	ldr	r7, [pc, #204]	; (4910 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4844:	4933      	ldr	r1, [pc, #204]	; (4914 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4846:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4848:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    484a:	4e33      	ldr	r6, [pc, #204]	; (4918 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    484c:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    484e:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    4850:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4852:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4854:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4856:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4858:	bf28      	it	cs
    485a:	2300      	movcs	r3, #0
				if (newhead != tail) {
    485c:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    485e:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4862:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4864:	bf1c      	itt	ne
    4866:	54f1      	strbne	r1, [r6, r3]
    4868:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    486a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    486e:	d1f0      	bne.n	4852 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4870:	4b2a      	ldr	r3, [pc, #168]	; (491c <uart0_status_isr+0xf4>)
    4872:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4874:	b2c2      	uxtb	r2, r0
    4876:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    4878:	b14b      	cbz	r3, 488e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    487a:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    487c:	bf36      	itet	cc
    487e:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4882:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4884:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4886:	2827      	cmp	r0, #39	; 0x27
    4888:	bfc4      	itt	gt
    488a:	2201      	movgt	r2, #1
    488c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    488e:	491f      	ldr	r1, [pc, #124]	; (490c <uart0_status_isr+0xe4>)
    4890:	78ca      	ldrb	r2, [r1, #3]
    4892:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4894:	0615      	lsls	r5, r2, #24
    4896:	d416      	bmi.n	48c6 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4898:	0652      	lsls	r2, r2, #25
    489a:	d50d      	bpl.n	48b8 <uart0_status_isr+0x90>
    489c:	4b1b      	ldr	r3, [pc, #108]	; (490c <uart0_status_isr+0xe4>)
    489e:	791b      	ldrb	r3, [r3, #4]
    48a0:	065b      	lsls	r3, r3, #25
    48a2:	d509      	bpl.n	48b8 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    48a4:	4b1e      	ldr	r3, [pc, #120]	; (4920 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    48a6:	491f      	ldr	r1, [pc, #124]	; (4924 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    48a8:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    48aa:	2200      	movs	r2, #0
    48ac:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    48ae:	b103      	cbz	r3, 48b2 <uart0_status_isr+0x8a>
    48b0:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    48b2:	4b16      	ldr	r3, [pc, #88]	; (490c <uart0_status_isr+0xe4>)
    48b4:	223c      	movs	r2, #60	; 0x3c
    48b6:	70da      	strb	r2, [r3, #3]
	}
}
    48b8:	bcf0      	pop	{r4, r5, r6, r7}
    48ba:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    48bc:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    48be:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    48c0:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    48c2:	b662      	cpsie	i
    48c4:	e7e3      	b.n	488e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    48c6:	790b      	ldrb	r3, [r1, #4]
    48c8:	061c      	lsls	r4, r3, #24
    48ca:	d5e5      	bpl.n	4898 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    48cc:	4b16      	ldr	r3, [pc, #88]	; (4928 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    48ce:	4e17      	ldr	r6, [pc, #92]	; (492c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    48d0:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    48d2:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    48d4:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    48d6:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    48d8:	429c      	cmp	r4, r3
    48da:	d00e      	beq.n	48fa <uart0_status_isr+0xd2>
    48dc:	4d14      	ldr	r5, [pc, #80]	; (4930 <uart0_status_isr+0x108>)
    48de:	e001      	b.n	48e4 <uart0_status_isr+0xbc>
    48e0:	42a3      	cmp	r3, r4
    48e2:	d00a      	beq.n	48fa <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    48e4:	3301      	adds	r3, #1
    48e6:	2b40      	cmp	r3, #64	; 0x40
    48e8:	bf28      	it	cs
    48ea:	2300      	movcs	r3, #0
			avail = UART0_S1;
    48ec:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    48ee:	5ce8      	ldrb	r0, [r5, r3]
    48f0:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    48f2:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    48f4:	7d08      	ldrb	r0, [r1, #20]
    48f6:	2807      	cmp	r0, #7
    48f8:	d9f2      	bls.n	48e0 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    48fa:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    48fc:	4903      	ldr	r1, [pc, #12]	; (490c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    48fe:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4900:	790b      	ldrb	r3, [r1, #4]
    4902:	0618      	lsls	r0, r3, #24
    4904:	bf44      	itt	mi
    4906:	237c      	movmi	r3, #124	; 0x7c
    4908:	70cb      	strbmi	r3, [r1, #3]
    490a:	e7c5      	b.n	4898 <uart0_status_isr+0x70>
    490c:	4006a000 	.word	0x4006a000
    4910:	1fffa140 	.word	0x1fffa140
    4914:	1fffa141 	.word	0x1fffa141
    4918:	1fffa188 	.word	0x1fffa188
    491c:	1fffa13c 	.word	0x1fffa13c
    4920:	1fffa1cc 	.word	0x1fffa1cc
    4924:	1fffa1c8 	.word	0x1fffa1c8
    4928:	1fffa1d0 	.word	0x1fffa1d0
    492c:	1fffa1c9 	.word	0x1fffa1c9
    4930:	1fffa144 	.word	0x1fffa144

00004934 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    4934:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4936:	2b03      	cmp	r3, #3
    4938:	d814      	bhi.n	4964 <usb_rx+0x30>
	__disable_irq();
    493a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    493c:	490a      	ldr	r1, [pc, #40]	; (4968 <usb_rx+0x34>)
    493e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    4942:	b168      	cbz	r0, 4960 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    4944:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4946:	4c09      	ldr	r4, [pc, #36]	; (496c <usb_rx+0x38>)
    4948:	8805      	ldrh	r5, [r0, #0]
    494a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    494e:	6846      	ldr	r6, [r0, #4]
    4950:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4954:	1b52      	subs	r2, r2, r5
    4956:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    495a:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    495c:	bc70      	pop	{r4, r5, r6}
    495e:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    4960:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4962:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4964:	2000      	movs	r0, #0
    4966:	4770      	bx	lr
    4968:	1fffa22c 	.word	0x1fffa22c
    496c:	1fffa420 	.word	0x1fffa420

00004970 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    4970:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    4972:	2803      	cmp	r0, #3
    4974:	d80b      	bhi.n	498e <usb_tx_packet_count+0x1e>
	__disable_irq();
    4976:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    4978:	4b07      	ldr	r3, [pc, #28]	; (4998 <usb_tx_packet_count+0x28>)
    497a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    497e:	b143      	cbz	r3, 4992 <usb_tx_packet_count+0x22>
    4980:	2000      	movs	r0, #0
    4982:	685b      	ldr	r3, [r3, #4]
    4984:	3001      	adds	r0, #1
    4986:	2b00      	cmp	r3, #0
    4988:	d1fb      	bne.n	4982 <usb_tx_packet_count+0x12>
	__enable_irq();
    498a:	b662      	cpsie	i
	return count;
    498c:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    498e:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    4990:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    4992:	4618      	mov	r0, r3
    4994:	e7f9      	b.n	498a <usb_tx_packet_count+0x1a>
    4996:	bf00      	nop
    4998:	1fffa280 	.word	0x1fffa280

0000499c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    499c:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    499e:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    49a0:	4a2b      	ldr	r2, [pc, #172]	; (4a50 <usb_rx_memory+0xb4>)
    49a2:	7813      	ldrb	r3, [r2, #0]
    49a4:	071d      	lsls	r5, r3, #28
    49a6:	d506      	bpl.n	49b6 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    49a8:	4b2a      	ldr	r3, [pc, #168]	; (4a54 <usb_rx_memory+0xb8>)
    49aa:	6a19      	ldr	r1, [r3, #32]
    49ac:	2900      	cmp	r1, #0
    49ae:	d036      	beq.n	4a1e <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    49b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    49b2:	2900      	cmp	r1, #0
    49b4:	d041      	beq.n	4a3a <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    49b6:	7853      	ldrb	r3, [r2, #1]
    49b8:	071c      	lsls	r4, r3, #28
    49ba:	d506      	bpl.n	49ca <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    49bc:	4b25      	ldr	r3, [pc, #148]	; (4a54 <usb_rx_memory+0xb8>)
    49be:	6c19      	ldr	r1, [r3, #64]	; 0x40
    49c0:	2900      	cmp	r1, #0
    49c2:	d03e      	beq.n	4a42 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    49c4:	6c99      	ldr	r1, [r3, #72]	; 0x48
    49c6:	2900      	cmp	r1, #0
    49c8:	d039      	beq.n	4a3e <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    49ca:	7893      	ldrb	r3, [r2, #2]
    49cc:	0719      	lsls	r1, r3, #28
    49ce:	d505      	bpl.n	49dc <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    49d0:	4b20      	ldr	r3, [pc, #128]	; (4a54 <usb_rx_memory+0xb8>)
    49d2:	6e19      	ldr	r1, [r3, #96]	; 0x60
    49d4:	2900      	cmp	r1, #0
    49d6:	d036      	beq.n	4a46 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    49d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
    49da:	b189      	cbz	r1, 4a00 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    49dc:	78d3      	ldrb	r3, [r2, #3]
    49de:	071b      	lsls	r3, r3, #28
    49e0:	d507      	bpl.n	49f2 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    49e2:	4b1c      	ldr	r3, [pc, #112]	; (4a54 <usb_rx_memory+0xb8>)
    49e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    49e8:	b37a      	cbz	r2, 4a4a <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    49ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    49ee:	2111      	movs	r1, #17
    49f0:	b13a      	cbz	r2, 4a02 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    49f2:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    49f4:	4b18      	ldr	r3, [pc, #96]	; (4a58 <usb_rx_memory+0xbc>)
    49f6:	2200      	movs	r2, #0
    49f8:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    49fa:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    49fc:	f000 be68 	b.w	56d0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4a00:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4a02:	4c15      	ldr	r4, [pc, #84]	; (4a58 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4a04:	4d15      	ldr	r5, [pc, #84]	; (4a5c <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    4a06:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4a08:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4a0c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4a10:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4a12:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4a14:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4a16:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4a18:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    4a1a:	bc30      	pop	{r4, r5}
    4a1c:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    4a1e:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4a20:	4c0d      	ldr	r4, [pc, #52]	; (4a58 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4a22:	4d0f      	ldr	r5, [pc, #60]	; (4a60 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    4a24:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4a26:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    4a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4a2e:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4a30:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    4a32:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4a34:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4a36:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    4a38:	e7ef      	b.n	4a1a <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4a3a:	2105      	movs	r1, #5
    4a3c:	e7e1      	b.n	4a02 <usb_rx_memory+0x66>
    4a3e:	2109      	movs	r1, #9
    4a40:	e7df      	b.n	4a02 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    4a42:	2208      	movs	r2, #8
    4a44:	e7ec      	b.n	4a20 <usb_rx_memory+0x84>
    4a46:	220c      	movs	r2, #12
    4a48:	e7ea      	b.n	4a20 <usb_rx_memory+0x84>
    4a4a:	2210      	movs	r2, #16
    4a4c:	e7e8      	b.n	4a20 <usb_rx_memory+0x84>
    4a4e:	bf00      	nop
    4a50:	000088bc 	.word	0x000088bc
    4a54:	1fff8000 	.word	0x1fff8000
    4a58:	1fffa2a9 	.word	0x1fffa2a9
    4a5c:	004000c8 	.word	0x004000c8
    4a60:	00400088 	.word	0x00400088

00004a64 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    4a64:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    4a66:	2b03      	cmp	r3, #3
    4a68:	d81d      	bhi.n	4aa6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4a6a:	4a1b      	ldr	r2, [pc, #108]	; (4ad8 <usb_tx+0x74>)
    4a6c:	0140      	lsls	r0, r0, #5
    4a6e:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    4a72:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4a74:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    4a76:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    4a78:	4c18      	ldr	r4, [pc, #96]	; (4adc <usb_tx+0x78>)
    4a7a:	5ce2      	ldrb	r2, [r4, r3]
    4a7c:	2a03      	cmp	r2, #3
    4a7e:	d81b      	bhi.n	4ab8 <usb_tx+0x54>
    4a80:	e8df f002 	tbb	[pc, r2]
    4a84:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    4a88:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4a8a:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    4a8c:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4a8e:	f010 0f08 	tst.w	r0, #8
    4a92:	bf14      	ite	ne
    4a94:	23c8      	movne	r3, #200	; 0xc8
    4a96:	2388      	moveq	r3, #136	; 0x88
    4a98:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    4a9c:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4a9e:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    4aa0:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    4aa2:	b662      	cpsie	i
}
    4aa4:	bc30      	pop	{r4, r5}
    4aa6:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    4aa8:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    4aaa:	2202      	movs	r2, #2
		break;
    4aac:	e7ed      	b.n	4a8a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    4aae:	2205      	movs	r2, #5
    4ab0:	e7eb      	b.n	4a8a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    4ab2:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4ab4:	2204      	movs	r2, #4
		break;
    4ab6:	e7e8      	b.n	4a8a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    4ab8:	4a09      	ldr	r2, [pc, #36]	; (4ae0 <usb_tx+0x7c>)
    4aba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4abe:	b138      	cbz	r0, 4ad0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    4ac0:	4a08      	ldr	r2, [pc, #32]	; (4ae4 <usb_tx+0x80>)
    4ac2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4ac6:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    4ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    4acc:	b662      	cpsie	i
		return;
    4ace:	e7e9      	b.n	4aa4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    4ad0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    4ad4:	4a03      	ldr	r2, [pc, #12]	; (4ae4 <usb_tx+0x80>)
    4ad6:	e7f7      	b.n	4ac8 <usb_tx+0x64>
    4ad8:	1fff8000 	.word	0x1fff8000
    4adc:	1fffa2b8 	.word	0x1fffa2b8
    4ae0:	1fffa280 	.word	0x1fffa280
    4ae4:	1fffa290 	.word	0x1fffa290

00004ae8 <usb_isr>:
}



void usb_isr(void)
{
    4ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4aec:	f8df b30c 	ldr.w	fp, [pc, #780]	; 4dfc <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    4af0:	f8df a30c 	ldr.w	sl, [pc, #780]	; 4e00 <usb_isr+0x318>
}



void usb_isr(void)
{
    4af4:	b087      	sub	sp, #28
    4af6:	e044      	b.n	4b82 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    4af8:	4fab      	ldr	r7, [pc, #684]	; (4da8 <usb_isr+0x2c0>)
    4afa:	ea4f 0893 	mov.w	r8, r3, lsr #2
    4afe:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4b02:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4b04:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    4b08:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4b0c:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4b0e:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    4b12:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4b16:	2b00      	cmp	r3, #0
    4b18:	f040 8102 	bne.w	4d20 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    4b1c:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    4b20:	0c1b      	lsrs	r3, r3, #16
    4b22:	b299      	uxth	r1, r3
    4b24:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    4b28:	2b00      	cmp	r3, #0
    4b2a:	f000 80f0 	beq.w	4d0e <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    4b2e:	4b9f      	ldr	r3, [pc, #636]	; (4dac <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    4b30:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    4b34:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    4b38:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    4b3c:	2a00      	cmp	r2, #0
    4b3e:	f000 82c5 	beq.w	50cc <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    4b42:	4d9b      	ldr	r5, [pc, #620]	; (4db0 <usb_isr+0x2c8>)
    4b44:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    4b48:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    4b4a:	4c9a      	ldr	r4, [pc, #616]	; (4db4 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    4b4c:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    4b50:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    4b54:	4419      	add	r1, r3
    4b56:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    4b5a:	f000 fd99 	bl	5690 <usb_malloc>
					if (packet) {
    4b5e:	2800      	cmp	r0, #0
    4b60:	f000 82ad 	beq.w	50be <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    4b64:	4a94      	ldr	r2, [pc, #592]	; (4db8 <usb_isr+0x2d0>)
    4b66:	4b95      	ldr	r3, [pc, #596]	; (4dbc <usb_isr+0x2d4>)
    4b68:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4b6c:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    4b70:	bf18      	it	ne
    4b72:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4b74:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    4b78:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    4b7c:	2308      	movs	r3, #8
    4b7e:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4b82:	f89b 4000 	ldrb.w	r4, [fp]
    4b86:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    4b88:	0761      	lsls	r1, r4, #29
    4b8a:	d51a      	bpl.n	4bc2 <usb_isr+0xda>
		if (usb_configuration) {
    4b8c:	4b8c      	ldr	r3, [pc, #560]	; (4dc0 <usb_isr+0x2d8>)
    4b8e:	781b      	ldrb	r3, [r3, #0]
    4b90:	b1a3      	cbz	r3, 4bbc <usb_isr+0xd4>
			t = usb_reboot_timer;
    4b92:	498c      	ldr	r1, [pc, #560]	; (4dc4 <usb_isr+0x2dc>)
    4b94:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4b96:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4b9a:	b122      	cbz	r2, 4ba6 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    4b9c:	3b01      	subs	r3, #1
    4b9e:	b2db      	uxtb	r3, r3
    4ba0:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    4ba2:	b903      	cbnz	r3, 4ba6 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    4ba4:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    4ba6:	4988      	ldr	r1, [pc, #544]	; (4dc8 <usb_isr+0x2e0>)
    4ba8:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4baa:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4bae:	b12a      	cbz	r2, 4bbc <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    4bb0:	3b01      	subs	r3, #1
    4bb2:	b2db      	uxtb	r3, r3
    4bb4:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	f000 8257 	beq.w	506a <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    4bbc:	2304      	movs	r3, #4
    4bbe:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    4bc2:	f004 0308 	and.w	r3, r4, #8
    4bc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4bca:	2b00      	cmp	r3, #0
    4bcc:	f000 80cc 	beq.w	4d68 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    4bd0:	f89a 3000 	ldrb.w	r3, [sl]
    4bd4:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    4bd6:	091e      	lsrs	r6, r3, #4
    4bd8:	d18e      	bne.n	4af8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4bda:	089c      	lsrs	r4, r3, #2
    4bdc:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 4da8 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4be0:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4be4:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4be8:	f3c2 0283 	ubfx	r2, r2, #2, #4
    4bec:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    4bee:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4bf0:	2a0c      	cmp	r2, #12
    4bf2:	f200 8088 	bhi.w	4d06 <usb_isr+0x21e>
    4bf6:	e8df f002 	tbb	[pc, r2]
    4bfa:	7c7c      	.short	0x7c7c
    4bfc:	86868686 	.word	0x86868686
    4c00:	86478686 	.word	0x86478686
    4c04:	8686      	.short	0x8686
    4c06:	07          	.byte	0x07
    4c07:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4c08:	6808      	ldr	r0, [r1, #0]
    4c0a:	4d70      	ldr	r5, [pc, #448]	; (4dcc <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    4c0c:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4c0e:	4f70      	ldr	r7, [pc, #448]	; (4dd0 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4c10:	4e70      	ldr	r6, [pc, #448]	; (4dd4 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4c12:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4c14:	b281      	uxth	r1, r0
    4c16:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4c1a:	4b67      	ldr	r3, [pc, #412]	; (4db8 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    4c1c:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4c1e:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4c22:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4c24:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4c26:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4c2a:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4c2c:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    4c30:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4c34:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4c38:	4c5b      	ldr	r4, [pc, #364]	; (4da8 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4c3a:	f200 80e3 	bhi.w	4e04 <usb_isr+0x31c>
    4c3e:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    4c42:	f080 8346 	bcs.w	52d2 <usb_isr+0x7ea>
    4c46:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    4c4a:	f000 82fc 	beq.w	5246 <usb_isr+0x75e>
    4c4e:	f200 828d 	bhi.w	516c <usb_isr+0x684>
    4c52:	2980      	cmp	r1, #128	; 0x80
    4c54:	f000 8377 	beq.w	5346 <usb_isr+0x85e>
    4c58:	2982      	cmp	r1, #130	; 0x82
    4c5a:	f040 82fa 	bne.w	5252 <usb_isr+0x76a>
    4c5e:	88a9      	ldrh	r1, [r5, #4]
    4c60:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    4c64:	2904      	cmp	r1, #4
    4c66:	f200 82f4 	bhi.w	5252 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4c6a:	485b      	ldr	r0, [pc, #364]	; (4dd8 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4c6c:	4c5b      	ldr	r4, [pc, #364]	; (4ddc <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4c6e:	0089      	lsls	r1, r1, #2
    4c70:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4c72:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    4c74:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4c76:	7802      	ldrb	r2, [r0, #0]
    4c78:	0793      	lsls	r3, r2, #30
    4c7a:	f140 8458 	bpl.w	552e <usb_isr+0xa46>
    4c7e:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    4c82:	f04f 0e02 	mov.w	lr, #2
    4c86:	e342      	b.n	530e <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    4c88:	4f51      	ldr	r7, [pc, #324]	; (4dd0 <usb_isr+0x2e8>)
    4c8a:	683a      	ldr	r2, [r7, #0]
		if (data) {
    4c8c:	b332      	cbz	r2, 4cdc <usb_isr+0x1f4>
			size = ep0_tx_len;
    4c8e:	4b54      	ldr	r3, [pc, #336]	; (4de0 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c90:	4e50      	ldr	r6, [pc, #320]	; (4dd4 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c92:	4954      	ldr	r1, [pc, #336]	; (4de4 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    4c94:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c96:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c98:	780d      	ldrb	r5, [r1, #0]
    4c9a:	2840      	cmp	r0, #64	; 0x40
    4c9c:	4686      	mov	lr, r0
    4c9e:	f045 0802 	orr.w	r8, r5, #2
    4ca2:	bf28      	it	cs
    4ca4:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4ca8:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    4caa:	f084 0401 	eor.w	r4, r4, #1
    4cae:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4cb0:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cb4:	bf0c      	ite	eq
    4cb6:	2488      	moveq	r4, #136	; 0x88
    4cb8:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4cba:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4cbe:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4cc0:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4cc8:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4cca:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4ccc:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    4cd0:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4cd2:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4cd4:	2800      	cmp	r0, #0
    4cd6:	f000 8145 	beq.w	4f64 <usb_isr+0x47c>
    4cda:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    4cdc:	4b3b      	ldr	r3, [pc, #236]	; (4dcc <usb_isr+0x2e4>)
    4cde:	881a      	ldrh	r2, [r3, #0]
    4ce0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    4ce4:	d10f      	bne.n	4d06 <usb_isr+0x21e>
			setup.bRequest = 0;
    4ce6:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4ce8:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    4cea:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4cec:	4b3e      	ldr	r3, [pc, #248]	; (4de8 <usb_isr+0x300>)
    4cee:	701a      	strb	r2, [r3, #0]
    4cf0:	e009      	b.n	4d06 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    4cf2:	4a36      	ldr	r2, [pc, #216]	; (4dcc <usb_isr+0x2e4>)
    4cf4:	8810      	ldrh	r0, [r2, #0]
    4cf6:	f242 0221 	movw	r2, #8225	; 0x2021
    4cfa:	4290      	cmp	r0, r2
    4cfc:	f000 8137 	beq.w	4f6e <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4d00:	4a2d      	ldr	r2, [pc, #180]	; (4db8 <usb_isr+0x2d0>)
    4d02:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4d06:	4a39      	ldr	r2, [pc, #228]	; (4dec <usb_isr+0x304>)
    4d08:	2301      	movs	r3, #1
    4d0a:	7013      	strb	r3, [r2, #0]
    4d0c:	e736      	b.n	4b7c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4d0e:	4a2a      	ldr	r2, [pc, #168]	; (4db8 <usb_isr+0x2d0>)
    4d10:	4b2a      	ldr	r3, [pc, #168]	; (4dbc <usb_isr+0x2d4>)
    4d12:	f019 0f08 	tst.w	r9, #8
    4d16:	bf18      	it	ne
    4d18:	4613      	movne	r3, r2
    4d1a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4d1e:	e72d      	b.n	4b7c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    4d20:	f000 fcd6 	bl	56d0 <usb_free>
				packet = tx_first[endpoint];
    4d24:	4a32      	ldr	r2, [pc, #200]	; (4df0 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4d26:	4933      	ldr	r1, [pc, #204]	; (4df4 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    4d28:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	f000 81d1 	beq.w	50d4 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4d32:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4d34:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4d36:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    4d3a:	f103 0208 	add.w	r2, r3, #8
    4d3e:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    4d42:	2c03      	cmp	r4, #3
    4d44:	d805      	bhi.n	4d52 <usb_isr+0x26a>
    4d46:	e8df f004 	tbb	[pc, r4]
    4d4a:	022c      	.short	0x022c
    4d4c:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    4d4e:	2202      	movs	r2, #2
    4d50:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    4d52:	881a      	ldrh	r2, [r3, #0]
    4d54:	f019 0f08 	tst.w	r9, #8
    4d58:	bf0c      	ite	eq
    4d5a:	2388      	moveq	r3, #136	; 0x88
    4d5c:	23c8      	movne	r3, #200	; 0xc8
    4d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4d62:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4d66:	e709      	b.n	4b7c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    4d68:	07e0      	lsls	r0, r4, #31
    4d6a:	f100 8181 	bmi.w	5070 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    4d6e:	0621      	lsls	r1, r4, #24
    4d70:	f100 81f2 	bmi.w	5158 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4d74:	07a2      	lsls	r2, r4, #30
    4d76:	d506      	bpl.n	4d86 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    4d78:	4a1f      	ldr	r2, [pc, #124]	; (4df8 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4d7a:	4920      	ldr	r1, [pc, #128]	; (4dfc <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4d7c:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4d7e:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4d80:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    4d82:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4d84:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    4d86:	06e3      	lsls	r3, r4, #27
    4d88:	d502      	bpl.n	4d90 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    4d8a:	4b1c      	ldr	r3, [pc, #112]	; (4dfc <usb_isr+0x314>)
    4d8c:	2210      	movs	r2, #16
    4d8e:	701a      	strb	r2, [r3, #0]
	}

}
    4d90:	b007      	add	sp, #28
    4d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    4d96:	2204      	movs	r2, #4
    4d98:	558a      	strb	r2, [r1, r6]
						break;
    4d9a:	e7da      	b.n	4d52 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    4d9c:	2205      	movs	r2, #5
    4d9e:	558a      	strb	r2, [r1, r6]
						break;
    4da0:	e7d7      	b.n	4d52 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    4da2:	2203      	movs	r2, #3
    4da4:	558a      	strb	r2, [r1, r6]
						break;
    4da6:	e7d4      	b.n	4d52 <usb_isr+0x26a>
    4da8:	1fff8000 	.word	0x1fff8000
    4dac:	1fffa22c 	.word	0x1fffa22c
    4db0:	1fffa1d8 	.word	0x1fffa1d8
    4db4:	1fffa420 	.word	0x1fffa420
    4db8:	004000c8 	.word	0x004000c8
    4dbc:	00400088 	.word	0x00400088
    4dc0:	1fffa2b4 	.word	0x1fffa2b4
    4dc4:	1fffa23d 	.word	0x1fffa23d
    4dc8:	1fffa2bc 	.word	0x1fffa2bc
    4dcc:	1fffa2a0 	.word	0x1fffa2a0
    4dd0:	1fffa1d4 	.word	0x1fffa1d4
    4dd4:	1fffa23c 	.word	0x1fffa23c
    4dd8:	400720c0 	.word	0x400720c0
    4ddc:	1fffa2ac 	.word	0x1fffa2ac
    4de0:	1fffa1e8 	.word	0x1fffa1e8
    4de4:	1fffa2a8 	.word	0x1fffa2a8
    4de8:	40072098 	.word	0x40072098
    4dec:	40072094 	.word	0x40072094
    4df0:	1fffa280 	.word	0x1fffa280
    4df4:	1fffa2b8 	.word	0x1fffa2b8
    4df8:	40072088 	.word	0x40072088
    4dfc:	40072080 	.word	0x40072080
    4e00:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4e04:	f242 0021 	movw	r0, #8225	; 0x2021
    4e08:	4281      	cmp	r1, r0
    4e0a:	f000 812a 	beq.w	5062 <usb_isr+0x57a>
    4e0e:	f200 80d8 	bhi.w	4fc2 <usb_isr+0x4da>
    4e12:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    4e16:	f000 8276 	beq.w	5306 <usb_isr+0x81e>
    4e1a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    4e1e:	f040 8218 	bne.w	5252 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4e22:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    4e24:	49b3      	ldr	r1, [pc, #716]	; (50f4 <usb_isr+0x60c>)
    4e26:	78a8      	ldrb	r0, [r5, #2]
    4e28:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4e2a:	0612      	lsls	r2, r2, #24
    4e2c:	f100 833a 	bmi.w	54a4 <usb_isr+0x9bc>
    4e30:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    4e34:	49b0      	ldr	r1, [pc, #704]	; (50f8 <usb_isr+0x610>)
    4e36:	0613      	lsls	r3, r2, #24
    4e38:	f100 830c 	bmi.w	5454 <usb_isr+0x96c>
    4e3c:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    4e40:	49ad      	ldr	r1, [pc, #692]	; (50f8 <usb_isr+0x610>)
    4e42:	0615      	lsls	r5, r2, #24
    4e44:	f100 8301 	bmi.w	544a <usb_isr+0x962>
    4e48:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    4e4c:	49aa      	ldr	r1, [pc, #680]	; (50f8 <usb_isr+0x610>)
    4e4e:	0614      	lsls	r4, r2, #24
    4e50:	f100 82f6 	bmi.w	5440 <usb_isr+0x958>
    4e54:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    4e58:	49a7      	ldr	r1, [pc, #668]	; (50f8 <usb_isr+0x610>)
    4e5a:	0610      	lsls	r0, r2, #24
    4e5c:	f100 834a 	bmi.w	54f4 <usb_isr+0xa0c>
    4e60:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    4e64:	49a4      	ldr	r1, [pc, #656]	; (50f8 <usb_isr+0x610>)
    4e66:	0612      	lsls	r2, r2, #24
    4e68:	f100 833f 	bmi.w	54ea <usb_isr+0xa02>
    4e6c:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    4e70:	49a1      	ldr	r1, [pc, #644]	; (50f8 <usb_isr+0x610>)
    4e72:	0613      	lsls	r3, r2, #24
    4e74:	f100 8334 	bmi.w	54e0 <usb_isr+0x9f8>
    4e78:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    4e7c:	499e      	ldr	r1, [pc, #632]	; (50f8 <usb_isr+0x610>)
    4e7e:	0615      	lsls	r5, r2, #24
    4e80:	f100 8329 	bmi.w	54d6 <usb_isr+0x9ee>
    4e84:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    4e88:	499b      	ldr	r1, [pc, #620]	; (50f8 <usb_isr+0x610>)
    4e8a:	0614      	lsls	r4, r2, #24
    4e8c:	f100 831e 	bmi.w	54cc <usb_isr+0x9e4>
    4e90:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    4e94:	4998      	ldr	r1, [pc, #608]	; (50f8 <usb_isr+0x610>)
    4e96:	0610      	lsls	r0, r2, #24
    4e98:	f100 8313 	bmi.w	54c2 <usb_isr+0x9da>
    4e9c:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    4ea0:	4995      	ldr	r1, [pc, #596]	; (50f8 <usb_isr+0x610>)
    4ea2:	0612      	lsls	r2, r2, #24
    4ea4:	f100 8308 	bmi.w	54b8 <usb_isr+0x9d0>
    4ea8:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    4eac:	4992      	ldr	r1, [pc, #584]	; (50f8 <usb_isr+0x610>)
    4eae:	0613      	lsls	r3, r2, #24
    4eb0:	f100 82fd 	bmi.w	54ae <usb_isr+0x9c6>
    4eb4:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    4eb8:	498f      	ldr	r1, [pc, #572]	; (50f8 <usb_isr+0x610>)
    4eba:	0615      	lsls	r5, r2, #24
    4ebc:	f100 8331 	bmi.w	5522 <usb_isr+0xa3a>
    4ec0:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    4ec4:	498c      	ldr	r1, [pc, #560]	; (50f8 <usb_isr+0x610>)
    4ec6:	0614      	lsls	r4, r2, #24
    4ec8:	f100 8325 	bmi.w	5516 <usb_isr+0xa2e>
    4ecc:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    4ed0:	4989      	ldr	r1, [pc, #548]	; (50f8 <usb_isr+0x610>)
    4ed2:	0610      	lsls	r0, r2, #24
    4ed4:	f100 8319 	bmi.w	550a <usb_isr+0xa22>
    4ed8:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    4edc:	4986      	ldr	r1, [pc, #536]	; (50f8 <usb_isr+0x610>)
    4ede:	0612      	lsls	r2, r2, #24
    4ee0:	f100 830d 	bmi.w	54fe <usb_isr+0xa16>
    4ee4:	4885      	ldr	r0, [pc, #532]	; (50fc <usb_isr+0x614>)
    4ee6:	4a86      	ldr	r2, [pc, #536]	; (5100 <usb_isr+0x618>)
    4ee8:	4986      	ldr	r1, [pc, #536]	; (5104 <usb_isr+0x61c>)
    4eea:	9001      	str	r0, [sp, #4]
    4eec:	4886      	ldr	r0, [pc, #536]	; (5108 <usb_isr+0x620>)
    4eee:	4d87      	ldr	r5, [pc, #540]	; (510c <usb_isr+0x624>)
    4ef0:	4c87      	ldr	r4, [pc, #540]	; (5110 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4ef2:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    4ef4:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4ef6:	9605      	str	r6, [sp, #20]
    4ef8:	9502      	str	r5, [sp, #8]
    4efa:	4680      	mov	r8, r0
    4efc:	460f      	mov	r7, r1
    4efe:	4616      	mov	r6, r2
    4f00:	461d      	mov	r5, r3
    4f02:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    4f04:	6830      	ldr	r0, [r6, #0]
			while (p) {
    4f06:	b128      	cbz	r0, 4f14 <usb_isr+0x42c>
				n = p->next;
    4f08:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4f0a:	f000 fbe1 	bl	56d0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    4f0e:	4620      	mov	r0, r4
    4f10:	2c00      	cmp	r4, #0
    4f12:	d1f9      	bne.n	4f08 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    4f14:	2300      	movs	r3, #0
    4f16:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    4f18:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    4f1a:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    4f1c:	461a      	mov	r2, r3
    4f1e:	2300      	movs	r3, #0
    4f20:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    4f24:	b128      	cbz	r0, 4f32 <usb_isr+0x44a>
				n = p->next;
    4f26:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4f28:	f000 fbd2 	bl	56d0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    4f2c:	4620      	mov	r0, r4
    4f2e:	2c00      	cmp	r4, #0
    4f30:	d1f9      	bne.n	4f26 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    4f32:	2200      	movs	r2, #0
    4f34:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    4f36:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4f38:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4f3c:	4611      	mov	r1, r2
    4f3e:	2200      	movs	r2, #0
    4f40:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    4f44:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4f46:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4f48:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    4f4a:	f04f 0100 	mov.w	r1, #0
    4f4e:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    4f52:	2b03      	cmp	r3, #3
    4f54:	f200 812b 	bhi.w	51ae <usb_isr+0x6c6>
    4f58:	e8df f013 	tbh	[pc, r3, lsl #1]
    4f5c:	01250170 	.word	0x01250170
    4f60:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4f64:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    4f68:	bf18      	it	ne
    4f6a:	2200      	movne	r2, #0
    4f6c:	e6b5      	b.n	4cda <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4f6e:	4a69      	ldr	r2, [pc, #420]	; (5114 <usb_isr+0x62c>)
    4f70:	780d      	ldrb	r5, [r1, #0]
    4f72:	7848      	ldrb	r0, [r1, #1]
    4f74:	7015      	strb	r5, [r2, #0]
    4f76:	7050      	strb	r0, [r2, #1]
    4f78:	788d      	ldrb	r5, [r1, #2]
    4f7a:	78c8      	ldrb	r0, [r1, #3]
    4f7c:	7095      	strb	r5, [r2, #2]
    4f7e:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4f80:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4f82:	790d      	ldrb	r5, [r1, #4]
    4f84:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4f86:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4f88:	794d      	ldrb	r5, [r1, #5]
    4f8a:	7989      	ldrb	r1, [r1, #6]
    4f8c:	7155      	strb	r5, [r2, #5]
    4f8e:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4f90:	f000 819b 	beq.w	52ca <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f94:	4960      	ldr	r1, [pc, #384]	; (5118 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f96:	4e61      	ldr	r6, [pc, #388]	; (511c <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f98:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f9a:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4f9c:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4fa0:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4fa2:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4fa6:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4fa8:	bf0c      	ite	eq
    4faa:	2188      	moveq	r1, #136	; 0x88
    4fac:	21c8      	movne	r1, #200	; 0xc8
    4fae:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4fb2:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4fb6:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4fba:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4fbc:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4fbe:	6051      	str	r1, [r2, #4]
    4fc0:	e69e      	b.n	4d00 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4fc2:	f242 2021 	movw	r0, #8737	; 0x2221
    4fc6:	4281      	cmp	r1, r0
    4fc8:	f040 81cb 	bne.w	5362 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4fcc:	4b54      	ldr	r3, [pc, #336]	; (5120 <usb_isr+0x638>)
    4fce:	4c55      	ldr	r4, [pc, #340]	; (5124 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    4fd0:	4955      	ldr	r1, [pc, #340]	; (5128 <usb_isr+0x640>)
    4fd2:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4fd4:	681d      	ldr	r5, [r3, #0]
    4fd6:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    4fd8:	f8cd e004 	str.w	lr, [sp, #4]
    4fdc:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4fde:	2000      	movs	r0, #0
    4fe0:	9002      	str	r0, [sp, #8]
    4fe2:	4680      	mov	r8, r0
    4fe4:	4684      	mov	ip, r0
    4fe6:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4fe8:	494b      	ldr	r1, [pc, #300]	; (5118 <usb_isr+0x630>)
    4fea:	780d      	ldrb	r5, [r1, #0]
    4fec:	f045 0e02 	orr.w	lr, r5, #2
    4ff0:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    4ff4:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4ff6:	9b01      	ldr	r3, [sp, #4]
    4ff8:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4ffa:	9b03      	ldr	r3, [sp, #12]
    4ffc:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4ffe:	bf0c      	ite	eq
    5000:	2488      	moveq	r4, #136	; 0x88
    5002:	24c8      	movne	r4, #200	; 0xc8
    5004:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5008:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    500c:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    5010:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    5012:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5014:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 50f8 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    5018:	4b40      	ldr	r3, [pc, #256]	; (511c <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    501a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 5118 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    501e:	2800      	cmp	r0, #0
    5020:	f040 811e 	bne.w	5260 <usb_isr+0x778>
    5024:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    5028:	d11b      	bne.n	5062 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    502a:	f044 0c02 	orr.w	ip, r4, #2
    502e:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    5032:	9c02      	ldr	r4, [sp, #8]
    5034:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 50f8 <usb_isr+0x610>
    5038:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    503a:	2a00      	cmp	r2, #0
    503c:	f040 8126 	bne.w	528c <usb_isr+0x7a4>
    5040:	0402      	lsls	r2, r0, #16
    5042:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    5046:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    504a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    504e:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    5050:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    5052:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5054:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    5056:	2840      	cmp	r0, #64	; 0x40
    5058:	d103      	bne.n	5062 <usb_isr+0x57a>
    505a:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    505c:	4a33      	ldr	r2, [pc, #204]	; (512c <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    505e:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    5060:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5062:	4a33      	ldr	r2, [pc, #204]	; (5130 <usb_isr+0x648>)
    5064:	2301      	movs	r3, #1
    5066:	7013      	strb	r3, [r2, #0]
    5068:	e64d      	b.n	4d06 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    506a:	f000 fc9d 	bl	59a8 <usb_serial_flush_callback>
    506e:	e5a5      	b.n	4bbc <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5070:	4b21      	ldr	r3, [pc, #132]	; (50f8 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5072:	482f      	ldr	r0, [pc, #188]	; (5130 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    5074:	4928      	ldr	r1, [pc, #160]	; (5118 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    5076:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5078:	f04f 0e02 	mov.w	lr, #2
    507c:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5080:	4f2c      	ldr	r7, [pc, #176]	; (5134 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    5082:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5084:	492c      	ldr	r1, [pc, #176]	; (5138 <usb_isr+0x650>)
    5086:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    5088:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    508a:	4e2c      	ldr	r6, [pc, #176]	; (513c <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    508c:	4d2c      	ldr	r5, [pc, #176]	; (5140 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    508e:	4c2d      	ldr	r4, [pc, #180]	; (5144 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    5090:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5092:	210d      	movs	r1, #13
    5094:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5096:	21ff      	movs	r1, #255	; 0xff
    5098:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    509a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 5154 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    509e:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    50a0:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    50a2:	4d29      	ldr	r5, [pc, #164]	; (5148 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    50a4:	4a29      	ldr	r2, [pc, #164]	; (514c <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    50a6:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    50aa:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    50ac:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    50ae:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    50b2:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    50b4:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    50b6:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    50b8:	b007      	add	sp, #28
    50ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    50be:	4a24      	ldr	r2, [pc, #144]	; (5150 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    50c0:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    50c4:	7813      	ldrb	r3, [r2, #0]
    50c6:	3301      	adds	r3, #1
    50c8:	7013      	strb	r3, [r2, #0]
    50ca:	e557      	b.n	4b7c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    50cc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    50d0:	4d0e      	ldr	r5, [pc, #56]	; (510c <usb_isr+0x624>)
    50d2:	e53a      	b.n	4b4a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    50d4:	5d8b      	ldrb	r3, [r1, r6]
    50d6:	2b03      	cmp	r3, #3
    50d8:	f200 80f0 	bhi.w	52bc <usb_isr+0x7d4>
    50dc:	a201      	add	r2, pc, #4	; (adr r2, 50e4 <usb_isr+0x5fc>)
    50de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    50e2:	bf00      	nop
    50e4:	00004b7d 	.word	0x00004b7d
    50e8:	00004b7d 	.word	0x00004b7d
    50ec:	000051a1 	.word	0x000051a1
    50f0:	0000519b 	.word	0x0000519b
    50f4:	1fffa2b4 	.word	0x1fffa2b4
    50f8:	1fff8000 	.word	0x1fff8000
    50fc:	1fffa290 	.word	0x1fffa290
    5100:	1fffa22c 	.word	0x1fffa22c
    5104:	1fffa280 	.word	0x1fffa280
    5108:	1fffa2b8 	.word	0x1fffa2b8
    510c:	1fffa1d8 	.word	0x1fffa1d8
    5110:	1fffa420 	.word	0x1fffa420
    5114:	1fffa428 	.word	0x1fffa428
    5118:	1fffa2a8 	.word	0x1fffa2a8
    511c:	1fffa23c 	.word	0x1fffa23c
    5120:	1fffa138 	.word	0x1fffa138
    5124:	1fffa430 	.word	0x1fffa430
    5128:	1fffa2cc 	.word	0x1fffa2cc
    512c:	1fffa1e8 	.word	0x1fffa1e8
    5130:	40072094 	.word	0x40072094
    5134:	400720c0 	.word	0x400720c0
    5138:	00400088 	.word	0x00400088
    513c:	40072088 	.word	0x40072088
    5140:	40072080 	.word	0x40072080
    5144:	40072098 	.word	0x40072098
    5148:	1fffa1ec 	.word	0x1fffa1ec
    514c:	1fffa240 	.word	0x1fffa240
    5150:	1fffa2a9 	.word	0x1fffa2a9
    5154:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5158:	49c1      	ldr	r1, [pc, #772]	; (5460 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    515a:	4bc2      	ldr	r3, [pc, #776]	; (5464 <usb_isr+0x97c>)
    515c:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    515e:	200d      	movs	r0, #13
    5160:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    5162:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5164:	07a2      	lsls	r2, r4, #30
    5166:	f57f ae0e 	bpl.w	4d86 <usb_isr+0x29e>
    516a:	e605      	b.n	4d78 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    516c:	f240 3202 	movw	r2, #770	; 0x302
    5170:	4291      	cmp	r1, r2
    5172:	f040 80ee 	bne.w	5352 <usb_isr+0x86a>
    5176:	88a9      	ldrh	r1, [r5, #4]
    5178:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    517c:	2904      	cmp	r1, #4
    517e:	d868      	bhi.n	5252 <usb_isr+0x76a>
    5180:	886a      	ldrh	r2, [r5, #2]
    5182:	2a00      	cmp	r2, #0
    5184:	d165      	bne.n	5252 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    5186:	48b6      	ldr	r0, [pc, #728]	; (5460 <usb_isr+0x978>)
    5188:	f8cd e004 	str.w	lr, [sp, #4]
    518c:	0089      	lsls	r1, r1, #2
    518e:	4408      	add	r0, r1
    5190:	7801      	ldrb	r1, [r0, #0]
    5192:	f041 0102 	orr.w	r1, r1, #2
    5196:	7001      	strb	r1, [r0, #0]
    5198:	e721      	b.n	4fde <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    519a:	2301      	movs	r3, #1
    519c:	558b      	strb	r3, [r1, r6]
						break;
    519e:	e4ed      	b.n	4b7c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    51a0:	2300      	movs	r3, #0
    51a2:	558b      	strb	r3, [r1, r6]
						break;
    51a4:	e4ea      	b.n	4b7c <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    51a6:	f04f 0301 	mov.w	r3, #1
    51aa:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    51ae:	3501      	adds	r5, #1
    51b0:	2d04      	cmp	r5, #4
    51b2:	f106 0604 	add.w	r6, r6, #4
    51b6:	f107 0704 	add.w	r7, r7, #4
    51ba:	f108 0801 	add.w	r8, r8, #1
    51be:	f47f aea1 	bne.w	4f04 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    51c2:	4ca9      	ldr	r4, [pc, #676]	; (5468 <usb_isr+0x980>)
			*reg = epconf;
    51c4:	4ba9      	ldr	r3, [pc, #676]	; (546c <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    51c6:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    51c8:	4da9      	ldr	r5, [pc, #676]	; (5470 <usb_isr+0x988>)
    51ca:	9f04      	ldr	r7, [sp, #16]
    51cc:	9e05      	ldr	r6, [sp, #20]
    51ce:	2100      	movs	r1, #0
    51d0:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    51d2:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    51d4:	0713      	lsls	r3, r2, #28
    51d6:	f100 8105 	bmi.w	53e4 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    51da:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    51dc:	49a5      	ldr	r1, [pc, #660]	; (5474 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51de:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 5480 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    51e2:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    51e4:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51e6:	f04f 0100 	mov.w	r1, #0
    51ea:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    51ee:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    51f2:	f100 80e0 	bmi.w	53b6 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    51f6:	49a0      	ldr	r1, [pc, #640]	; (5478 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    51f8:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    51fa:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51fc:	2100      	movs	r1, #0
    51fe:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    5202:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    5206:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5208:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5480 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    520c:	f100 8101 	bmi.w	5412 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5210:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    5212:	499a      	ldr	r1, [pc, #616]	; (547c <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5214:	4c9a      	ldr	r4, [pc, #616]	; (5480 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    5216:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5218:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    521a:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    521c:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    5220:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    5224:	f100 80b0 	bmi.w	5388 <usb_isr+0x8a0>
    5228:	7833      	ldrb	r3, [r6, #0]
    522a:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    522c:	2100      	movs	r1, #0
    522e:	f083 0201 	eor.w	r2, r3, #1
    5232:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    5236:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    523a:	e6d0      	b.n	4fde <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    523c:	f04f 0300 	mov.w	r3, #0
    5240:	f888 3000 	strb.w	r3, [r8]
    5244:	e7b3      	b.n	51ae <usb_isr+0x6c6>
    5246:	88a9      	ldrh	r1, [r5, #4]
    5248:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    524c:	2904      	cmp	r1, #4
    524e:	f240 808d 	bls.w	536c <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5252:	4a83      	ldr	r2, [pc, #524]	; (5460 <usb_isr+0x978>)
    5254:	230f      	movs	r3, #15
    5256:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5258:	4a8a      	ldr	r2, [pc, #552]	; (5484 <usb_isr+0x99c>)
    525a:	2301      	movs	r3, #1
    525c:	7013      	strb	r3, [r2, #0]
    525e:	e552      	b.n	4d06 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    5260:	2840      	cmp	r0, #64	; 0x40
    5262:	f67f aee2 	bls.w	502a <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5266:	f044 0402 	orr.w	r4, r4, #2
    526a:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    526e:	9e02      	ldr	r6, [sp, #8]
    5270:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5272:	b1ba      	cbz	r2, 52a4 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    5274:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5278:	4a83      	ldr	r2, [pc, #524]	; (5488 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    527a:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    527c:	4633      	mov	r3, r6
    527e:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5280:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5284:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5286:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    528a:	e6e7      	b.n	505c <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    528c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5290:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5292:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5294:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5296:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5298:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    529c:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    529e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    52a2:	e6d8      	b.n	5056 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    52a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    52a8:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    52aa:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52ac:	4a77      	ldr	r2, [pc, #476]	; (548c <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    52ae:	f888 5000 	strb.w	r5, [r8]
    52b2:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    52b4:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52b6:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    52ba:	e6cf      	b.n	505c <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    52bc:	f019 0f08 	tst.w	r9, #8
    52c0:	bf0c      	ite	eq
    52c2:	2302      	moveq	r3, #2
    52c4:	2303      	movne	r3, #3
    52c6:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    52c8:	e458      	b.n	4b7c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    52ca:	4a71      	ldr	r2, [pc, #452]	; (5490 <usb_isr+0x9a8>)
    52cc:	210f      	movs	r1, #15
    52ce:	7011      	strb	r1, [r2, #0]
    52d0:	e660      	b.n	4f94 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    52d2:	4a70      	ldr	r2, [pc, #448]	; (5494 <usb_isr+0x9ac>)
    52d4:	6854      	ldr	r4, [r2, #4]
    52d6:	2c00      	cmp	r4, #0
    52d8:	d0bb      	beq.n	5252 <usb_isr+0x76a>
    52da:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    52dc:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    52e0:	e003      	b.n	52ea <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    52e2:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    52e4:	6854      	ldr	r4, [r2, #4]
    52e6:	2c00      	cmp	r4, #0
    52e8:	d0b3      	beq.n	5252 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    52ea:	8813      	ldrh	r3, [r2, #0]
    52ec:	4283      	cmp	r3, r0
    52ee:	d1f8      	bne.n	52e2 <usb_isr+0x7fa>
    52f0:	8853      	ldrh	r3, [r2, #2]
    52f2:	4573      	cmp	r3, lr
    52f4:	d1f5      	bne.n	52e2 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    52f6:	0a00      	lsrs	r0, r0, #8
    52f8:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    52fa:	bf0c      	ite	eq
    52fc:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    5300:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    5304:	e003      	b.n	530e <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    5306:	4a64      	ldr	r2, [pc, #400]	; (5498 <usb_isr+0x9b0>)
    5308:	4c64      	ldr	r4, [pc, #400]	; (549c <usb_isr+0x9b4>)
    530a:	7812      	ldrb	r2, [r2, #0]
    530c:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    530e:	88e8      	ldrh	r0, [r5, #6]
    5310:	4570      	cmp	r0, lr
    5312:	f080 813f 	bcs.w	5594 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5316:	4962      	ldr	r1, [pc, #392]	; (54a0 <usb_isr+0x9b8>)
    5318:	780d      	ldrb	r5, [r1, #0]
    531a:	2840      	cmp	r0, #64	; 0x40
    531c:	4684      	mov	ip, r0
    531e:	f045 0e02 	orr.w	lr, r5, #2
    5322:	bf28      	it	cs
    5324:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    5328:	eb04 030c 	add.w	r3, r4, ip
    532c:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    5330:	9302      	str	r3, [sp, #8]
    5332:	2301      	movs	r3, #1
    5334:	6054      	str	r4, [r2, #4]
    5336:	ebcc 0000 	rsb	r0, ip, r0
    533a:	ea4f 480c 	mov.w	r8, ip, lsl #16
    533e:	2200      	movs	r2, #0
    5340:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5342:	24c8      	movs	r4, #200	; 0xc8
    5344:	e65e      	b.n	5004 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5346:	4c55      	ldr	r4, [pc, #340]	; (549c <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    5348:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    534c:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    534e:	7062      	strb	r2, [r4, #1]
    5350:	e7dd      	b.n	530e <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5352:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    5356:	f47f af7c 	bne.w	5252 <usb_isr+0x76a>
    535a:	2301      	movs	r3, #1
    535c:	2200      	movs	r2, #0
    535e:	9301      	str	r3, [sp, #4]
    5360:	e63d      	b.n	4fde <usb_isr+0x4f6>
    5362:	f242 3221 	movw	r2, #8993	; 0x2321
    5366:	4291      	cmp	r1, r2
    5368:	d0f7      	beq.n	535a <usb_isr+0x872>
    536a:	e772      	b.n	5252 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    536c:	886a      	ldrh	r2, [r5, #2]
    536e:	2a00      	cmp	r2, #0
    5370:	f47f af6f 	bne.w	5252 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5374:	483a      	ldr	r0, [pc, #232]	; (5460 <usb_isr+0x978>)
    5376:	f8cd e004 	str.w	lr, [sp, #4]
    537a:	0089      	lsls	r1, r1, #2
    537c:	4408      	add	r0, r1
    537e:	7801      	ldrb	r1, [r0, #0]
    5380:	f021 0102 	bic.w	r1, r1, #2
    5384:	7001      	strb	r1, [r0, #0]
    5386:	e62a      	b.n	4fde <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5388:	f000 f982 	bl	5690 <usb_malloc>
				if (p) {
    538c:	2800      	cmp	r0, #0
    538e:	f000 80ef 	beq.w	5570 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    5392:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5394:	4a3d      	ldr	r2, [pc, #244]	; (548c <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5396:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    539a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    539e:	f000 f977 	bl	5690 <usb_malloc>
				if (p) {
    53a2:	2800      	cmp	r0, #0
    53a4:	f000 80de 	beq.w	5564 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    53a8:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53aa:	4a37      	ldr	r2, [pc, #220]	; (5488 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    53ac:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53b0:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    53b4:	e738      	b.n	5228 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    53b6:	f000 f96b 	bl	5690 <usb_malloc>
				if (p) {
    53ba:	2800      	cmp	r0, #0
    53bc:	f000 80c0 	beq.w	5540 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    53c0:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    53c2:	4a32      	ldr	r2, [pc, #200]	; (548c <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    53c4:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    53c8:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    53cc:	f000 f960 	bl	5690 <usb_malloc>
				if (p) {
    53d0:	2800      	cmp	r0, #0
    53d2:	f000 80af 	beq.w	5534 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    53d6:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53d8:	4a2b      	ldr	r2, [pc, #172]	; (5488 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    53da:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53de:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    53e2:	e708      	b.n	51f6 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    53e4:	f000 f954 	bl	5690 <usb_malloc>
				if (p) {
    53e8:	2800      	cmp	r0, #0
    53ea:	f000 80cd 	beq.w	5588 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    53ee:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    53f0:	4a26      	ldr	r2, [pc, #152]	; (548c <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    53f2:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    53f6:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    53fa:	f000 f949 	bl	5690 <usb_malloc>
				if (p) {
    53fe:	2800      	cmp	r0, #0
    5400:	f000 80bc 	beq.w	557c <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    5404:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5406:	4a20      	ldr	r2, [pc, #128]	; (5488 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5408:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    540c:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    5410:	e6e3      	b.n	51da <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5412:	f000 f93d 	bl	5690 <usb_malloc>
				if (p) {
    5416:	2800      	cmp	r0, #0
    5418:	f000 809e 	beq.w	5558 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    541c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    541e:	4a1b      	ldr	r2, [pc, #108]	; (548c <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5420:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5424:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5428:	f000 f932 	bl	5690 <usb_malloc>
				if (p) {
    542c:	2800      	cmp	r0, #0
    542e:	f000 808d 	beq.w	554c <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    5432:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5434:	4a14      	ldr	r2, [pc, #80]	; (5488 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5436:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    543a:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    543e:	e6e7      	b.n	5210 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    5440:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    5442:	3808      	subs	r0, #8
    5444:	f000 f944 	bl	56d0 <usb_free>
    5448:	e504      	b.n	4e54 <usb_isr+0x36c>
    544a:	6b48      	ldr	r0, [r1, #52]	; 0x34
    544c:	3808      	subs	r0, #8
    544e:	f000 f93f 	bl	56d0 <usb_free>
    5452:	e4f9      	b.n	4e48 <usb_isr+0x360>
    5454:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    5456:	3808      	subs	r0, #8
    5458:	f000 f93a 	bl	56d0 <usb_free>
    545c:	e4ee      	b.n	4e3c <usb_isr+0x354>
    545e:	bf00      	nop
    5460:	400720c0 	.word	0x400720c0
    5464:	40072080 	.word	0x40072080
    5468:	000088bc 	.word	0x000088bc
    546c:	400720c4 	.word	0x400720c4
    5470:	1fffa2a9 	.word	0x1fffa2a9
    5474:	400720c8 	.word	0x400720c8
    5478:	400720cc 	.word	0x400720cc
    547c:	400720d0 	.word	0x400720d0
    5480:	1fff8000 	.word	0x1fff8000
    5484:	40072094 	.word	0x40072094
    5488:	004000c8 	.word	0x004000c8
    548c:	00400088 	.word	0x00400088
    5490:	1fffa23d 	.word	0x1fffa23d
    5494:	000088c0 	.word	0x000088c0
    5498:	1fffa2b4 	.word	0x1fffa2b4
    549c:	1fffa2ac 	.word	0x1fffa2ac
    54a0:	1fffa2a8 	.word	0x1fffa2a8
    54a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54a6:	3808      	subs	r0, #8
    54a8:	f000 f912 	bl	56d0 <usb_free>
    54ac:	e4c0      	b.n	4e30 <usb_isr+0x348>
    54ae:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    54b0:	3808      	subs	r0, #8
    54b2:	f000 f90d 	bl	56d0 <usb_free>
    54b6:	e4fd      	b.n	4eb4 <usb_isr+0x3cc>
    54b8:	6f48      	ldr	r0, [r1, #116]	; 0x74
    54ba:	3808      	subs	r0, #8
    54bc:	f000 f908 	bl	56d0 <usb_free>
    54c0:	e4f2      	b.n	4ea8 <usb_isr+0x3c0>
    54c2:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    54c4:	3808      	subs	r0, #8
    54c6:	f000 f903 	bl	56d0 <usb_free>
    54ca:	e4e7      	b.n	4e9c <usb_isr+0x3b4>
    54cc:	6e48      	ldr	r0, [r1, #100]	; 0x64
    54ce:	3808      	subs	r0, #8
    54d0:	f000 f8fe 	bl	56d0 <usb_free>
    54d4:	e4dc      	b.n	4e90 <usb_isr+0x3a8>
    54d6:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    54d8:	3808      	subs	r0, #8
    54da:	f000 f8f9 	bl	56d0 <usb_free>
    54de:	e4d1      	b.n	4e84 <usb_isr+0x39c>
    54e0:	6d48      	ldr	r0, [r1, #84]	; 0x54
    54e2:	3808      	subs	r0, #8
    54e4:	f000 f8f4 	bl	56d0 <usb_free>
    54e8:	e4c6      	b.n	4e78 <usb_isr+0x390>
    54ea:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    54ec:	3808      	subs	r0, #8
    54ee:	f000 f8ef 	bl	56d0 <usb_free>
    54f2:	e4bb      	b.n	4e6c <usb_isr+0x384>
    54f4:	6c48      	ldr	r0, [r1, #68]	; 0x44
    54f6:	3808      	subs	r0, #8
    54f8:	f000 f8ea 	bl	56d0 <usb_free>
    54fc:	e4b0      	b.n	4e60 <usb_isr+0x378>
    54fe:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    5502:	3808      	subs	r0, #8
    5504:	f000 f8e4 	bl	56d0 <usb_free>
    5508:	e4ec      	b.n	4ee4 <usb_isr+0x3fc>
    550a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    550e:	3808      	subs	r0, #8
    5510:	f000 f8de 	bl	56d0 <usb_free>
    5514:	e4e0      	b.n	4ed8 <usb_isr+0x3f0>
    5516:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    551a:	3808      	subs	r0, #8
    551c:	f000 f8d8 	bl	56d0 <usb_free>
    5520:	e4d4      	b.n	4ecc <usb_isr+0x3e4>
    5522:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    5526:	3808      	subs	r0, #8
    5528:	f000 f8d2 	bl	56d0 <usb_free>
    552c:	e4c8      	b.n	4ec0 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    552e:	f04f 0e02 	mov.w	lr, #2
    5532:	e6ec      	b.n	530e <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5534:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5536:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    553a:	3201      	adds	r2, #1
    553c:	702a      	strb	r2, [r5, #0]
    553e:	e65a      	b.n	51f6 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5540:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5542:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    5546:	3201      	adds	r2, #1
    5548:	702a      	strb	r2, [r5, #0]
    554a:	e73f      	b.n	53cc <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    554c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    554e:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    5552:	3201      	adds	r2, #1
    5554:	702a      	strb	r2, [r5, #0]
    5556:	e65b      	b.n	5210 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5558:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    555a:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    555e:	3201      	adds	r2, #1
    5560:	702a      	strb	r2, [r5, #0]
    5562:	e761      	b.n	5428 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5564:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5566:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    556a:	3201      	adds	r2, #1
    556c:	702a      	strb	r2, [r5, #0]
    556e:	e65b      	b.n	5228 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5570:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5572:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    5576:	3201      	adds	r2, #1
    5578:	702a      	strb	r2, [r5, #0]
    557a:	e710      	b.n	539e <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    557c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    557e:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    5582:	3201      	adds	r2, #1
    5584:	702a      	strb	r2, [r5, #0]
    5586:	e628      	b.n	51da <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5588:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    558a:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    558e:	3201      	adds	r2, #1
    5590:	702a      	strb	r2, [r5, #0]
    5592:	e732      	b.n	53fa <usb_isr+0x912>
    5594:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5598:	46f4      	mov	ip, lr
    559a:	bf28      	it	cs
    559c:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    55a0:	eb04 030c 	add.w	r3, r4, ip
    55a4:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    55a6:	2301      	movs	r3, #1
    55a8:	ebcc 000e 	rsb	r0, ip, lr
    55ac:	ea4f 480c 	mov.w	r8, ip, lsl #16
    55b0:	2200      	movs	r2, #0
    55b2:	9301      	str	r3, [sp, #4]
    55b4:	e518      	b.n	4fe8 <usb_isr+0x500>
    55b6:	bf00      	nop

000055b8 <usb_init>:
}



void usb_init(void)
{
    55b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    55ba:	f001 f83d 	bl	6638 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55be:	4b29      	ldr	r3, [pc, #164]	; (5664 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    55c0:	4829      	ldr	r0, [pc, #164]	; (5668 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    55c2:	4c2a      	ldr	r4, [pc, #168]	; (566c <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    55c4:	4f2a      	ldr	r7, [pc, #168]	; (5670 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    55c6:	4d2b      	ldr	r5, [pc, #172]	; (5674 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    55c8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 5688 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    55cc:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 568c <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    55d0:	4e29      	ldr	r6, [pc, #164]	; (5678 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55d2:	2200      	movs	r2, #0
    55d4:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    55d6:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55d8:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    55da:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55dc:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    55de:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55e0:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    55e2:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55e4:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    55e6:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55e8:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    55ea:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55ec:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    55ee:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55f0:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    55f2:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55f4:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    55f6:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55f8:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    55fa:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55fc:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    55fe:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5600:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    5602:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5604:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    5606:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5608:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    560a:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    560c:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    560e:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5610:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    5612:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5618:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    561a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    561e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    5622:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5624:	f3c3 2107 	ubfx	r1, r3, #8, #8
    5628:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    562a:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    562e:	4913      	ldr	r1, [pc, #76]	; (567c <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5630:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5632:	0e1b      	lsrs	r3, r3, #24
    5634:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5636:	23ff      	movs	r3, #255	; 0xff
    5638:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    563c:	4d10      	ldr	r5, [pc, #64]	; (5680 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    563e:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5642:	4810      	ldr	r0, [pc, #64]	; (5684 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5644:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5646:	2301      	movs	r3, #1
    5648:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    564a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    564e:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5650:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5654:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5656:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    565a:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    565c:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    565e:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    5662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5664:	1fff8000 	.word	0x1fff8000
    5668:	40048034 	.word	0x40048034
    566c:	4007209c 	.word	0x4007209c
    5670:	400720b0 	.word	0x400720b0
    5674:	400720b4 	.word	0x400720b4
    5678:	40072094 	.word	0x40072094
    567c:	40072010 	.word	0x40072010
    5680:	e000e449 	.word	0xe000e449
    5684:	e000e108 	.word	0xe000e108
    5688:	40072080 	.word	0x40072080
    568c:	40072088 	.word	0x40072088

00005690 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    5690:	b672      	cpsid	i
	avail = usb_buffer_available;
    5692:	480d      	ldr	r0, [pc, #52]	; (56c8 <usb_malloc+0x38>)
    5694:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5696:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    569a:	2b0b      	cmp	r3, #11
    569c:	dc10      	bgt.n	56c0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    569e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    56a2:	40d9      	lsrs	r1, r3
    56a4:	ea22 0201 	bic.w	r2, r2, r1
    56a8:	6002      	str	r2, [r0, #0]
	__enable_irq();
    56aa:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    56ac:	4807      	ldr	r0, [pc, #28]	; (56cc <usb_malloc+0x3c>)
    56ae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    56b2:	00db      	lsls	r3, r3, #3
    56b4:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    56b6:	2100      	movs	r1, #0
    56b8:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    56ba:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    56bc:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    56be:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    56c0:	b662      	cpsie	i
		return NULL;
    56c2:	2000      	movs	r0, #0
    56c4:	4770      	bx	lr
    56c6:	bf00      	nop
    56c8:	1fff8730 	.word	0x1fff8730
    56cc:	1fff83bc 	.word	0x1fff83bc

000056d0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    56d0:	4b0d      	ldr	r3, [pc, #52]	; (5708 <usb_free+0x38>)
    56d2:	4a0e      	ldr	r2, [pc, #56]	; (570c <usb_free+0x3c>)
    56d4:	1ac3      	subs	r3, r0, r3
    56d6:	fba2 2303 	umull	r2, r3, r2, r3
    56da:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    56dc:	2b0b      	cmp	r3, #11
    56de:	d80c      	bhi.n	56fa <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    56e0:	4a0b      	ldr	r2, [pc, #44]	; (5710 <usb_free+0x40>)
    56e2:	7812      	ldrb	r2, [r2, #0]
    56e4:	b952      	cbnz	r2, 56fc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    56e6:	b672      	cpsid	i
	usb_buffer_available |= mask;
    56e8:	480a      	ldr	r0, [pc, #40]	; (5714 <usb_free+0x44>)
    56ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    56ee:	6802      	ldr	r2, [r0, #0]
    56f0:	fa21 f303 	lsr.w	r3, r1, r3
    56f4:	431a      	orrs	r2, r3
    56f6:	6002      	str	r2, [r0, #0]
	__enable_irq();
    56f8:	b662      	cpsie	i
    56fa:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    56fc:	4a06      	ldr	r2, [pc, #24]	; (5718 <usb_free+0x48>)
    56fe:	7812      	ldrb	r2, [r2, #0]
    5700:	2a00      	cmp	r2, #0
    5702:	d0f0      	beq.n	56e6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    5704:	f7ff b94a 	b.w	499c <usb_rx_memory>
    5708:	1fff83bc 	.word	0x1fff83bc
    570c:	38e38e39 	.word	0x38e38e39
    5710:	1fffa2a9 	.word	0x1fffa2a9
    5714:	1fff8730 	.word	0x1fff8730
    5718:	1fffa2b4 	.word	0x1fffa2b4

0000571c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    571c:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    571e:	4d0f      	ldr	r5, [pc, #60]	; (575c <usb_serial_getchar+0x40>)
    5720:	6828      	ldr	r0, [r5, #0]
    5722:	b178      	cbz	r0, 5744 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    5724:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    5726:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5728:	18c1      	adds	r1, r0, r3
    572a:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    572c:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    572e:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    5730:	d202      	bcs.n	5738 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    5732:	8043      	strh	r3, [r0, #2]
	}
	return c;
    5734:	4620      	mov	r0, r4
}
    5736:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    5738:	f7ff ffca 	bl	56d0 <usb_free>
		rx_packet = NULL;
    573c:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    573e:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5740:	602b      	str	r3, [r5, #0]
    5742:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5744:	4b06      	ldr	r3, [pc, #24]	; (5760 <usb_serial_getchar+0x44>)
    5746:	781b      	ldrb	r3, [r3, #0]
    5748:	b12b      	cbz	r3, 5756 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    574a:	2003      	movs	r0, #3
    574c:	f7ff f8f2 	bl	4934 <usb_rx>
    5750:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    5752:	2800      	cmp	r0, #0
    5754:	d1e6      	bne.n	5724 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5756:	f04f 30ff 	mov.w	r0, #4294967295
    575a:	bd38      	pop	{r3, r4, r5, pc}
    575c:	1fffa2c8 	.word	0x1fffa2c8
    5760:	1fffa2b4 	.word	0x1fffa2b4

00005764 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5764:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5766:	4c09      	ldr	r4, [pc, #36]	; (578c <usb_serial_peekchar+0x28>)
    5768:	6820      	ldr	r0, [r4, #0]
    576a:	b118      	cbz	r0, 5774 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    576c:	8843      	ldrh	r3, [r0, #2]
    576e:	4418      	add	r0, r3
    5770:	7a00      	ldrb	r0, [r0, #8]
}
    5772:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5774:	4b06      	ldr	r3, [pc, #24]	; (5790 <usb_serial_peekchar+0x2c>)
    5776:	781b      	ldrb	r3, [r3, #0]
    5778:	b12b      	cbz	r3, 5786 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    577a:	2003      	movs	r0, #3
    577c:	f7ff f8da 	bl	4934 <usb_rx>
    5780:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5782:	2800      	cmp	r0, #0
    5784:	d1f2      	bne.n	576c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5786:	f04f 30ff 	mov.w	r0, #4294967295
    578a:	bd10      	pop	{r4, pc}
    578c:	1fffa2c8 	.word	0x1fffa2c8
    5790:	1fffa2b4 	.word	0x1fffa2b4

00005794 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5794:	4b04      	ldr	r3, [pc, #16]	; (57a8 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5796:	4a05      	ldr	r2, [pc, #20]	; (57ac <usb_serial_available+0x18>)
    5798:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    579a:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    579c:	b11b      	cbz	r3, 57a6 <usb_serial_available+0x12>
    579e:	881a      	ldrh	r2, [r3, #0]
    57a0:	885b      	ldrh	r3, [r3, #2]
    57a2:	1ad3      	subs	r3, r2, r3
    57a4:	4418      	add	r0, r3
	return count;
}
    57a6:	4770      	bx	lr
    57a8:	1fffa2c8 	.word	0x1fffa2c8
    57ac:	1fffa420 	.word	0x1fffa420

000057b0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    57b0:	4b0b      	ldr	r3, [pc, #44]	; (57e0 <usb_serial_flush_input+0x30>)
    57b2:	781b      	ldrb	r3, [r3, #0]
    57b4:	b19b      	cbz	r3, 57de <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    57b6:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    57b8:	4c0a      	ldr	r4, [pc, #40]	; (57e4 <usb_serial_flush_input+0x34>)
    57ba:	6820      	ldr	r0, [r4, #0]
    57bc:	b148      	cbz	r0, 57d2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    57be:	f7ff ff87 	bl	56d0 <usb_free>
		rx_packet = NULL;
    57c2:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    57c4:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    57c6:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    57c8:	f7ff f8b4 	bl	4934 <usb_rx>
		if (!rx) break;
    57cc:	b130      	cbz	r0, 57dc <usb_serial_flush_input+0x2c>
		usb_free(rx);
    57ce:	f7ff ff7f 	bl	56d0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    57d2:	2003      	movs	r0, #3
    57d4:	f7ff f8ae 	bl	4934 <usb_rx>
		if (!rx) break;
    57d8:	2800      	cmp	r0, #0
    57da:	d1f8      	bne.n	57ce <usb_serial_flush_input+0x1e>
    57dc:	bd10      	pop	{r4, pc}
    57de:	4770      	bx	lr
    57e0:	1fffa2b4 	.word	0x1fffa2b4
    57e4:	1fffa2c8 	.word	0x1fffa2c8

000057e8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    57e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    57ec:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 58e8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    57f0:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    57f2:	2201      	movs	r2, #1
    57f4:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    57f8:	9101      	str	r1, [sp, #4]
    57fa:	b369      	cbz	r1, 5858 <usb_serial_write+0x70>
    57fc:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 58ec <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5800:	4f36      	ldr	r7, [pc, #216]	; (58dc <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5802:	9e01      	ldr	r6, [sp, #4]
    5804:	4683      	mov	fp, r0
		if (!tx_packet) {
    5806:	f8d8 0000 	ldr.w	r0, [r8]
    580a:	b3b0      	cbz	r0, 587a <usb_serial_write+0x92>
    580c:	4d34      	ldr	r5, [pc, #208]	; (58e0 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    580e:	8844      	ldrh	r4, [r0, #2]
    5810:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    5814:	42b1      	cmp	r1, r6
    5816:	bf28      	it	cs
    5818:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    581a:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    581e:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5820:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5824:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    5826:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5828:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    582c:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    5830:	b151      	cbz	r1, 5848 <usb_serial_write+0x60>
    5832:	3c01      	subs	r4, #1
    5834:	4422      	add	r2, r4
    5836:	4459      	add	r1, fp
    5838:	f81b 4b01 	ldrb.w	r4, [fp], #1
    583c:	f802 4f01 	strb.w	r4, [r2, #1]!
    5840:	458b      	cmp	fp, r1
    5842:	d1f9      	bne.n	5838 <usb_serial_write+0x50>
    5844:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    5848:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    584c:	d80b      	bhi.n	5866 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    584e:	4a25      	ldr	r2, [pc, #148]	; (58e4 <usb_serial_write+0xfc>)
    5850:	2105      	movs	r1, #5
    5852:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5854:	2e00      	cmp	r6, #0
    5856:	d1d6      	bne.n	5806 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    5858:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    585a:	2300      	movs	r3, #0
    585c:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    5860:	b003      	add	sp, #12
    5862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    5866:	2240      	movs	r2, #64	; 0x40
    5868:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    586a:	4601      	mov	r1, r0
    586c:	2004      	movs	r0, #4
    586e:	f7ff f8f9 	bl	4a64 <usb_tx>
			tx_packet = NULL;
    5872:	2200      	movs	r2, #0
    5874:	f8c8 2000 	str.w	r2, [r8]
    5878:	e7e9      	b.n	584e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    587a:	783a      	ldrb	r2, [r7, #0]
    587c:	b32a      	cbz	r2, 58ca <usb_serial_write+0xe2>
    587e:	4d18      	ldr	r5, [pc, #96]	; (58e0 <usb_serial_write+0xf8>)
    5880:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    5884:	f04f 0a01 	mov.w	sl, #1
    5888:	e007      	b.n	589a <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    588a:	3c01      	subs	r4, #1
    588c:	d016      	beq.n	58bc <usb_serial_write+0xd4>
    588e:	782a      	ldrb	r2, [r5, #0]
    5890:	b9a2      	cbnz	r2, 58bc <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    5892:	f000 fcdb 	bl	624c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5896:	783a      	ldrb	r2, [r7, #0]
    5898:	b1ba      	cbz	r2, 58ca <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    589a:	2004      	movs	r0, #4
    589c:	f7ff f868 	bl	4970 <usb_tx_packet_count>
    58a0:	2807      	cmp	r0, #7
    58a2:	d8f2      	bhi.n	588a <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    58a4:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    58a8:	f7ff fef2 	bl	5690 <usb_malloc>
    58ac:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    58b0:	2800      	cmp	r0, #0
    58b2:	d1ac      	bne.n	580e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    58b4:	4b0c      	ldr	r3, [pc, #48]	; (58e8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    58b6:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    58b8:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    58ba:	d1e8      	bne.n	588e <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    58bc:	2301      	movs	r3, #1
					return -1;
    58be:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    58c2:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    58c4:	b003      	add	sp, #12
    58c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    58ca:	2300      	movs	r3, #0
					return -1;
    58cc:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    58d0:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    58d4:	b003      	add	sp, #12
    58d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58da:	bf00      	nop
    58dc:	1fffa2b4 	.word	0x1fffa2b4
    58e0:	1fffa2c4 	.word	0x1fffa2c4
    58e4:	1fffa2bc 	.word	0x1fffa2bc
    58e8:	1fffa2bd 	.word	0x1fffa2bd
    58ec:	1fffa2c0 	.word	0x1fffa2c0

000058f0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    58f0:	b500      	push	{lr}
    58f2:	b083      	sub	sp, #12
    58f4:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    58f6:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    58f8:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    58fc:	4618      	mov	r0, r3
    58fe:	f7ff ff73 	bl	57e8 <usb_serial_write>
}
    5902:	b003      	add	sp, #12
    5904:	f85d fb04 	ldr.w	pc, [sp], #4

00005908 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    5908:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    590a:	4d0e      	ldr	r5, [pc, #56]	; (5944 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    590c:	4c0e      	ldr	r4, [pc, #56]	; (5948 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    590e:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5910:	2301      	movs	r3, #1
    5912:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    5914:	b128      	cbz	r0, 5922 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5916:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    5918:	2300      	movs	r3, #0
    591a:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    591c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    5920:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5922:	4b0a      	ldr	r3, [pc, #40]	; (594c <usb_serial_write_buffer_free+0x44>)
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	b913      	cbnz	r3, 592e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    5928:	2000      	movs	r0, #0
    592a:	7020      	strb	r0, [r4, #0]
			return 0;
    592c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    592e:	2004      	movs	r0, #4
    5930:	f7ff f81e 	bl	4970 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5934:	2807      	cmp	r0, #7
    5936:	d8f7      	bhi.n	5928 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    5938:	f7ff feaa 	bl	5690 <usb_malloc>
    593c:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    593e:	2800      	cmp	r0, #0
    5940:	d1e9      	bne.n	5916 <usb_serial_write_buffer_free+0xe>
    5942:	e7f1      	b.n	5928 <usb_serial_write_buffer_free+0x20>
    5944:	1fffa2c0 	.word	0x1fffa2c0
    5948:	1fffa2bd 	.word	0x1fffa2bd
    594c:	1fffa2b4 	.word	0x1fffa2b4

00005950 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    5950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    5952:	4b11      	ldr	r3, [pc, #68]	; (5998 <usb_serial_flush_output+0x48>)
    5954:	781b      	ldrb	r3, [r3, #0]
    5956:	b18b      	cbz	r3, 597c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    5958:	4e10      	ldr	r6, [pc, #64]	; (599c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    595a:	4d11      	ldr	r5, [pc, #68]	; (59a0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    595c:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    595e:	2701      	movs	r7, #1
    5960:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    5962:	b164      	cbz	r4, 597e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    5964:	4a0f      	ldr	r2, [pc, #60]	; (59a4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    5966:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    5968:	2700      	movs	r7, #0
    596a:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    596c:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    596e:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5970:	2004      	movs	r0, #4
    5972:	f7ff f877 	bl	4a64 <usb_tx>
		tx_packet = NULL;
    5976:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    5978:	2300      	movs	r3, #0
    597a:	702b      	strb	r3, [r5, #0]
    597c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    597e:	f7ff fe87 	bl	5690 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5982:	4b08      	ldr	r3, [pc, #32]	; (59a4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    5984:	b128      	cbz	r0, 5992 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    5986:	4601      	mov	r1, r0
    5988:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    598a:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    598c:	f7ff f86a 	bl	4a64 <usb_tx>
    5990:	e7f2      	b.n	5978 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5992:	701f      	strb	r7, [r3, #0]
    5994:	e7f0      	b.n	5978 <usb_serial_flush_output+0x28>
    5996:	bf00      	nop
    5998:	1fffa2b4 	.word	0x1fffa2b4
    599c:	1fffa2c0 	.word	0x1fffa2c0
    59a0:	1fffa2bd 	.word	0x1fffa2bd
    59a4:	1fffa2bc 	.word	0x1fffa2bc

000059a8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    59a8:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    59aa:	4b0e      	ldr	r3, [pc, #56]	; (59e4 <usb_serial_flush_callback+0x3c>)
    59ac:	781b      	ldrb	r3, [r3, #0]
    59ae:	b973      	cbnz	r3, 59ce <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    59b0:	4c0d      	ldr	r4, [pc, #52]	; (59e8 <usb_serial_flush_callback+0x40>)
    59b2:	6821      	ldr	r1, [r4, #0]
    59b4:	b161      	cbz	r1, 59d0 <usb_serial_flush_callback+0x28>
    59b6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    59ba:	884b      	ldrh	r3, [r1, #2]
    59bc:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    59be:	2004      	movs	r0, #4
    59c0:	f7ff f850 	bl	4a64 <usb_tx>
		tx_packet = NULL;
    59c4:	6025      	str	r5, [r4, #0]
    59c6:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    59c8:	4b08      	ldr	r3, [pc, #32]	; (59ec <usb_serial_flush_callback+0x44>)
    59ca:	2201      	movs	r2, #1
    59cc:	701a      	strb	r2, [r3, #0]
    59ce:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    59d0:	f7ff fe5e 	bl	5690 <usb_malloc>
		if (tx) {
    59d4:	2800      	cmp	r0, #0
    59d6:	d0f7      	beq.n	59c8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    59d8:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    59da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    59de:	2004      	movs	r0, #4
    59e0:	f7ff b840 	b.w	4a64 <usb_tx>
    59e4:	1fffa2bd 	.word	0x1fffa2bd
    59e8:	1fffa2c0 	.word	0x1fffa2c0
    59ec:	1fffa2bc 	.word	0x1fffa2bc

000059f0 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    59f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    59f2:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    59f4:	b999      	cbnz	r1, 5a1e <DMAChannel::begin(bool)+0x2e>
    59f6:	6802      	ldr	r2, [r0, #0]
    59f8:	b18a      	cbz	r2, 5a1e <DMAChannel::begin(bool)+0x2e>
    59fa:	7903      	ldrb	r3, [r0, #4]
    59fc:	2b0f      	cmp	r3, #15
    59fe:	d80e      	bhi.n	5a1e <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    5a00:	4c27      	ldr	r4, [pc, #156]	; (5aa0 <DMAChannel::begin(bool)+0xb0>)
    5a02:	8821      	ldrh	r1, [r4, #0]
    5a04:	fa41 f503 	asr.w	r5, r1, r3
    5a08:	07ed      	lsls	r5, r5, #31
    5a0a:	d50a      	bpl.n	5a22 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    5a0c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    5a10:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    5a14:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
    5a18:	d103      	bne.n	5a22 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    5a1a:	b662      	cpsie	i
		return;
    5a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a1e:	4c20      	ldr	r4, [pc, #128]	; (5aa0 <DMAChannel::begin(bool)+0xb0>)
    5a20:	8821      	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    5a22:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    5a24:	fa41 f203 	asr.w	r2, r1, r3
    5a28:	f012 0201 	ands.w	r2, r2, #1
    5a2c:	d007      	beq.n	5a3e <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    5a2e:	3301      	adds	r3, #1
    5a30:	2b10      	cmp	r3, #16
    5a32:	d1f7      	bne.n	5a24 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    5a34:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    5a36:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    5a38:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    5a3a:	6002      	str	r2, [r0, #0]
    5a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    5a3e:	2501      	movs	r5, #1
    5a40:	409d      	lsls	r5, r3
    5a42:	4329      	orrs	r1, r5
    5a44:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    5a46:	b662      	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    5a48:	4e16      	ldr	r6, [pc, #88]	; (5aa4 <DMAChannel::begin(bool)+0xb4>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    5a4a:	4d17      	ldr	r5, [pc, #92]	; (5aa8 <DMAChannel::begin(bool)+0xb8>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    5a4c:	4f17      	ldr	r7, [pc, #92]	; (5aac <DMAChannel::begin(bool)+0xbc>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    5a4e:	f8df e064 	ldr.w	lr, [pc, #100]	; 5ab4 <DMAChannel::begin(bool)+0xc4>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    5a52:	b2d9      	uxtb	r1, r3
    5a54:	7101      	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    5a56:	6834      	ldr	r4, [r6, #0]
    5a58:	f044 0402 	orr.w	r4, r4, #2
    5a5c:	6034      	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    5a5e:	682c      	ldr	r4, [r5, #0]
    5a60:	f044 0402 	orr.w	r4, r4, #2
    5a64:	602c      	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    5a66:	f5a6 2680 	sub.w	r6, r6, #262144	; 0x40000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    5a6a:	2482      	movs	r4, #130	; 0x82
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    5a6c:	f5a5 2580 	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a70:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    5a74:	603c      	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a76:	f503 6390 	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    5a7a:	3e22      	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    5a7c:	3d24      	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    5a7e:	4c0c      	ldr	r4, [pc, #48]	; (5ab0 <DMAChannel::begin(bool)+0xc0>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    5a80:	f88e 1000 	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a84:	015b      	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    5a86:	7031      	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    5a88:	7029      	strb	r1, [r5, #0]
	DMA_CINT = ch;
    5a8a:	7021      	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a8c:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    5a8e:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    5a90:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    5a92:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    5a94:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    5a96:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    5a98:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    5a9a:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    5a9c:	61da      	str	r2, [r3, #28]
    5a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aa0:	1fffa2ce 	.word	0x1fffa2ce
    5aa4:	40048040 	.word	0x40048040
    5aa8:	4004803c 	.word	0x4004803c
    5aac:	40008000 	.word	0x40008000
    5ab0:	4000801f 	.word	0x4000801f
    5ab4:	4000801a 	.word	0x4000801a

00005ab8 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    5ab8:	7903      	ldrb	r3, [r0, #4]
    5aba:	2b0f      	cmp	r3, #15
    5abc:	d811      	bhi.n	5ae2 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    5abe:	4a09      	ldr	r2, [pc, #36]	; (5ae4 <DMAChannel::release()+0x2c>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    5ac0:	b410      	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    5ac2:	7013      	strb	r3, [r2, #0]
	__disable_irq();
    5ac4:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    5ac6:	4908      	ldr	r1, [pc, #32]	; (5ae8 <DMAChannel::release()+0x30>)
    5ac8:	7904      	ldrb	r4, [r0, #4]
    5aca:	880a      	ldrh	r2, [r1, #0]
    5acc:	2301      	movs	r3, #1
    5ace:	40a3      	lsls	r3, r4
    5ad0:	ea22 0303 	bic.w	r3, r2, r3
    5ad4:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    5ad6:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    5ad8:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    5ada:	2300      	movs	r3, #0
}
    5adc:	bc10      	pop	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    5ade:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    5ae0:	6003      	str	r3, [r0, #0]
}
    5ae2:	4770      	bx	lr
    5ae4:	4000801a 	.word	0x4000801a
    5ae8:	1fffa2ce 	.word	0x1fffa2ce

00005aec <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)>:
{
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
    5aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aee:	790e      	ldrb	r6, [r1, #4]
    5af0:	f892 e004 	ldrb.w	lr, [r2, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5af4:	f006 03fc 	and.w	r3, r6, #252	; 0xfc
    5af8:	f00e 04fc 	and.w	r4, lr, #252	; 0xfc
    5afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5b00:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    5b04:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
    5b08:	f504 4401 	add.w	r4, r4, #33024	; 0x8100
    5b0c:	681b      	ldr	r3, [r3, #0]
    5b0e:	6824      	ldr	r4, [r4, #0]
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5b10:	00f5      	lsls	r5, r6, #3
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5b12:	ea4f 0cce 	mov.w	ip, lr, lsl #3

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5b16:	ba1f      	rev	r7, r3
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5b18:	f005 0318 	and.w	r3, r5, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5b1c:	ba25      	rev	r5, r4
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5b1e:	f00c 0418 	and.w	r4, ip, #24
static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5b22:	fa27 f303 	lsr.w	r3, r7, r3
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5b26:	fa25 f404 	lsr.w	r4, r5, r4
static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5b2a:	f003 030f 	and.w	r3, r3, #15
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5b2e:	f004 040f 	and.w	r4, r4, #15
    5b32:	429c      	cmp	r4, r3
    5b34:	d915      	bls.n	5b62 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0x76>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    5b36:	f881 e004 	strb.w	lr, [r1, #4]
	c2.channel = c;
    5b3a:	7116      	strb	r6, [r2, #4]
	t = c1.TCD;
    5b3c:	680b      	ldr	r3, [r1, #0]
	c1.TCD = c2.TCD;
    5b3e:	6814      	ldr	r4, [r2, #0]
    5b40:	600c      	str	r4, [r1, #0]
	c2.TCD = t;
    5b42:	6013      	str	r3, [r2, #0]
    5b44:	790e      	ldrb	r6, [r1, #4]
    5b46:	f006 04fc 	and.w	r4, r6, #252	; 0xfc
    5b4a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    5b4e:	f504 4401 	add.w	r4, r4, #33024	; 0x8100
    5b52:	00f3      	lsls	r3, r6, #3
    5b54:	6824      	ldr	r4, [r4, #0]
    5b56:	f003 0518 	and.w	r5, r3, #24
    5b5a:	ba23      	rev	r3, r4
    5b5c:	40eb      	lsrs	r3, r5
    5b5e:	f003 030f 	and.w	r3, r3, #15
    5b62:	f890 e004 	ldrb.w	lr, [r0, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5b66:	f00e 05fc 	and.w	r5, lr, #252	; 0xfc
    5b6a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    5b6e:	f505 4501 	add.w	r5, r5, #33024	; 0x8100
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    5b72:	ea4f 04ce 	mov.w	r4, lr, lsl #3
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5b76:	682d      	ldr	r5, [r5, #0]
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    5b78:	f004 0718 	and.w	r7, r4, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5b7c:	ba2c      	rev	r4, r5
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    5b7e:	40fc      	lsrs	r4, r7
    5b80:	f004 040f 	and.w	r4, r4, #15
    5b84:	429c      	cmp	r4, r3
    5b86:	d215      	bcs.n	5bb4 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0xc8>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    5b88:	7106      	strb	r6, [r0, #4]
	c2.channel = c;
	t = c1.TCD;
	c1.TCD = c2.TCD;
    5b8a:	680c      	ldr	r4, [r1, #0]
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
	c2.channel = c;
    5b8c:	f881 e004 	strb.w	lr, [r1, #4]
	t = c1.TCD;
    5b90:	6803      	ldr	r3, [r0, #0]
	c1.TCD = c2.TCD;
    5b92:	6004      	str	r4, [r0, #0]
    5b94:	790e      	ldrb	r6, [r1, #4]
	c2.TCD = t;
    5b96:	600b      	str	r3, [r1, #0]
    5b98:	f006 00fc 	and.w	r0, r6, #252	; 0xfc
    5b9c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    5ba0:	f500 4001 	add.w	r0, r0, #33024	; 0x8100
    5ba4:	00f3      	lsls	r3, r6, #3
    5ba6:	6800      	ldr	r0, [r0, #0]
    5ba8:	f003 0418 	and.w	r4, r3, #24
    5bac:	ba03      	rev	r3, r0
    5bae:	40e3      	lsrs	r3, r4
    5bb0:	f003 030f 	and.w	r3, r3, #15
    5bb4:	7917      	ldrb	r7, [r2, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5bb6:	f007 04fc 	and.w	r4, r7, #252	; 0xfc
    5bba:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    5bbe:	f504 4401 	add.w	r4, r4, #33024	; 0x8100

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5bc2:	00f8      	lsls	r0, r7, #3
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5bc4:	6824      	ldr	r4, [r4, #0]

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5bc6:	f000 0518 	and.w	r5, r0, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5bca:	ba20      	rev	r0, r4

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5bcc:	40e8      	lsrs	r0, r5
    5bce:	f000 000f 	and.w	r0, r0, #15
    5bd2:	4298      	cmp	r0, r3
    5bd4:	d905      	bls.n	5be2 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0xf6>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    5bd6:	710f      	strb	r7, [r1, #4]
	c2.channel = c;
    5bd8:	7116      	strb	r6, [r2, #4]
	t = c1.TCD;
    5bda:	680b      	ldr	r3, [r1, #0]
	c1.TCD = c2.TCD;
    5bdc:	6810      	ldr	r0, [r2, #0]
    5bde:	6008      	str	r0, [r1, #0]
	c2.TCD = t;
    5be0:	6013      	str	r3, [r2, #0]
    5be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005be4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    5be4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5be6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5bea:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    5bec:	7f43      	ldrb	r3, [r0, #29]
    5bee:	b933      	cbnz	r3, 5bfe <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    5bf0:	7f01      	ldrb	r1, [r0, #28]
    5bf2:	2901      	cmp	r1, #1
    5bf4:	d007      	beq.n	5c06 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    5bf6:	2903      	cmp	r1, #3
    5bf8:	d00f      	beq.n	5c1a <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    5bfa:	2301      	movs	r3, #1
    5bfc:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5bfe:	b902      	cbnz	r2, 5c02 <EventResponder::triggerEventNotImmediate()+0x1e>
    5c00:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    5c02:	bc10      	pop	{r4}
    5c04:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    5c06:	4c12      	ldr	r4, [pc, #72]	; (5c50 <EventResponder::triggerEventNotImmediate()+0x6c>)
    5c08:	6821      	ldr	r1, [r4, #0]
    5c0a:	b1a1      	cbz	r1, 5c36 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5c0c:	4911      	ldr	r1, [pc, #68]	; (5c54 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    5c0e:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    5c10:	680b      	ldr	r3, [r1, #0]
    5c12:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    5c14:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    5c16:	6158      	str	r0, [r3, #20]
    5c18:	e7ef      	b.n	5bfa <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    5c1a:	4c0f      	ldr	r4, [pc, #60]	; (5c58 <EventResponder::triggerEventNotImmediate()+0x74>)
    5c1c:	6821      	ldr	r1, [r4, #0]
    5c1e:	b181      	cbz	r1, 5c42 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    5c20:	490e      	ldr	r1, [pc, #56]	; (5c5c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    5c22:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    5c24:	680b      	ldr	r3, [r1, #0]
    5c26:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    5c28:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    5c2a:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    5c2c:	4b0c      	ldr	r3, [pc, #48]	; (5c60 <EventResponder::triggerEventNotImmediate()+0x7c>)
    5c2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5c32:	6019      	str	r1, [r3, #0]
    5c34:	e7e1      	b.n	5bfa <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    5c36:	4b07      	ldr	r3, [pc, #28]	; (5c54 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    5c38:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5c3a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    5c3c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    5c3e:	6018      	str	r0, [r3, #0]
    5c40:	e7db      	b.n	5bfa <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    5c42:	4b06      	ldr	r3, [pc, #24]	; (5c5c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    5c44:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5c46:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    5c48:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    5c4a:	6018      	str	r0, [r3, #0]
    5c4c:	e7ee      	b.n	5c2c <EventResponder::triggerEventNotImmediate()+0x48>
    5c4e:	bf00      	nop
    5c50:	1fffa2e0 	.word	0x1fffa2e0
    5c54:	1fffa2dc 	.word	0x1fffa2dc
    5c58:	1fffa2d0 	.word	0x1fffa2d0
    5c5c:	1fffa2d4 	.word	0x1fffa2d4
    5c60:	e000ed04 	.word	0xe000ed04

00005c64 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    5c64:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5c66:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5c68:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5c6a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5c6c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    5c6e:	d002      	beq.n	5c76 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    5c70:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5c72:	f7ff bfb7 	b.w	5be4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5c76:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    5c78:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5c7a:	4718      	bx	r3

00005c7c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5c7c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5c7e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5c82:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5c84:	4c0c      	ldr	r4, [pc, #48]	; (5cb8 <EventResponder::runFromInterrupt()+0x3c>)
    5c86:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5c88:	b180      	cbz	r0, 5cac <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5c8a:	4e0c      	ldr	r6, [pc, #48]	; (5cbc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    5c8c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    5c8e:	6943      	ldr	r3, [r0, #20]
    5c90:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    5c92:	b173      	cbz	r3, 5cb2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    5c94:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5c96:	b902      	cbnz	r2, 5c9a <EventResponder::runFromInterrupt()+0x1e>
    5c98:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    5c9a:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    5c9c:	6883      	ldr	r3, [r0, #8]
    5c9e:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5ca0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5ca4:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5ca6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5ca8:	2800      	cmp	r0, #0
    5caa:	d1f0      	bne.n	5c8e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5cac:	b902      	cbnz	r2, 5cb0 <EventResponder::runFromInterrupt()+0x34>
    5cae:	b662      	cpsie	i
    5cb0:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5cb2:	6033      	str	r3, [r6, #0]
    5cb4:	e7ef      	b.n	5c96 <EventResponder::runFromInterrupt()+0x1a>
    5cb6:	bf00      	nop
    5cb8:	1fffa2d0 	.word	0x1fffa2d0
    5cbc:	1fffa2d4 	.word	0x1fffa2d4

00005cc0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    5cc0:	f7ff bfdc 	b.w	5c7c <EventResponder::runFromInterrupt()>

00005cc4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    5cc4:	4a18      	ldr	r2, [pc, #96]	; (5d28 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    5cc6:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    5cc8:	6814      	ldr	r4, [r2, #0]
    5cca:	2c00      	cmp	r4, #0
    5ccc:	d027      	beq.n	5d1e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    5cce:	6803      	ldr	r3, [r0, #0]
    5cd0:	6821      	ldr	r1, [r4, #0]
    5cd2:	428b      	cmp	r3, r1
    5cd4:	d20e      	bcs.n	5cf4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5cd6:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    5cd8:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    5cda:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5cdc:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5cde:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    5ce0:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    5ce2:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    5ce4:	2302      	movs	r3, #2
    5ce6:	7503      	strb	r3, [r0, #20]
}
    5ce8:	bc30      	pop	{r4, r5}
    5cea:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    5cec:	6811      	ldr	r1, [r2, #0]
    5cee:	428b      	cmp	r3, r1
    5cf0:	4614      	mov	r4, r2
    5cf2:	d308      	bcc.n	5d06 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5cf4:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    5cf6:	1a5b      	subs	r3, r3, r1
    5cf8:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5cfa:	2a00      	cmp	r2, #0
    5cfc:	d1f6      	bne.n	5cec <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    5cfe:	6082      	str	r2, [r0, #8]
		_prev = timer;
    5d00:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    5d02:	60a0      	str	r0, [r4, #8]
    5d04:	e7ee      	b.n	5ce4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    5d06:	68d2      	ldr	r2, [r2, #12]
    5d08:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    5d0a:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    5d0c:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    5d0e:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    5d10:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    5d12:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    5d14:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    5d16:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    5d18:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    5d1a:	bc30      	pop	{r4, r5}
    5d1c:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    5d1e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5d20:	60c4      	str	r4, [r0, #12]
		listActive = this;
    5d22:	6010      	str	r0, [r2, #0]
    5d24:	e7de      	b.n	5ce4 <MillisTimer::addToActiveList()+0x20>
    5d26:	bf00      	nop
    5d28:	1fffa2d8 	.word	0x1fffa2d8

00005d2c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    5d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    5d2e:	4e22      	ldr	r6, [pc, #136]	; (5db8 <MillisTimer::runFromTimer()+0x8c>)
    5d30:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    5d32:	b32c      	cbz	r4, 5d80 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5d34:	6823      	ldr	r3, [r4, #0]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d13a      	bne.n	5db0 <MillisTimer::runFromTimer()+0x84>
    5d3a:	4f20      	ldr	r7, [pc, #128]	; (5dbc <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    5d3c:	461d      	mov	r5, r3
    5d3e:	e004      	b.n	5d4a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    5d40:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    5d42:	b1ec      	cbz	r4, 5d80 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5d44:	6823      	ldr	r3, [r4, #0]
    5d46:	2b00      	cmp	r3, #0
    5d48:	d132      	bne.n	5db0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    5d4a:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    5d4c:	b103      	cbz	r3, 5d50 <MillisTimer::runFromTimer()+0x24>
    5d4e:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    5d50:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    5d52:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5d54:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    5d56:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	42bb      	cmp	r3, r7
    5d5c:	d121      	bne.n	5da2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5d5e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5d60:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5d62:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5d64:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    5d66:	d020      	beq.n	5daa <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5d68:	f7ff ff3c 	bl	5be4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    5d6c:	6863      	ldr	r3, [r4, #4]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d0e6      	beq.n	5d40 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    5d72:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    5d74:	4620      	mov	r0, r4
    5d76:	f7ff ffa5 	bl	5cc4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    5d7a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    5d7c:	2c00      	cmp	r4, #0
    5d7e:	d1e1      	bne.n	5d44 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5d80:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    5d84:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    5d86:	4a0e      	ldr	r2, [pc, #56]	; (5dc0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5d88:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    5d8a:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5d8c:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    5d8e:	b903      	cbnz	r3, 5d92 <MillisTimer::runFromTimer()+0x66>
    5d90:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    5d92:	b128      	cbz	r0, 5da0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    5d94:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    5d96:	f7ff ff95 	bl	5cc4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    5d9a:	4620      	mov	r0, r4
    5d9c:	2800      	cmp	r0, #0
    5d9e:	d1f9      	bne.n	5d94 <MillisTimer::runFromTimer()+0x68>
    5da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5da2:	4622      	mov	r2, r4
    5da4:	2100      	movs	r1, #0
    5da6:	4798      	blx	r3
    5da8:	e7e0      	b.n	5d6c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5daa:	6883      	ldr	r3, [r0, #8]
    5dac:	4798      	blx	r3
    5dae:	e7dd      	b.n	5d6c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    5db0:	3b01      	subs	r3, #1
    5db2:	6023      	str	r3, [r4, #0]
			break;
    5db4:	e7e4      	b.n	5d80 <MillisTimer::runFromTimer()+0x54>
    5db6:	bf00      	nop
    5db8:	1fffa2d8 	.word	0x1fffa2d8
    5dbc:	00005c65 	.word	0x00005c65
    5dc0:	1fffa2e8 	.word	0x1fffa2e8

00005dc4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    5dc4:	4a02      	ldr	r2, [pc, #8]	; (5dd0 <systick_isr+0xc>)
    5dc6:	6813      	ldr	r3, [r2, #0]
    5dc8:	3301      	adds	r3, #1
    5dca:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    5dcc:	f7ff bfae 	b.w	5d2c <MillisTimer::runFromTimer()>
    5dd0:	1fffa138 	.word	0x1fffa138

00005dd4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    5dd4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    5dd6:	f7fb fc69 	bl	16ac <setup>
	while (1) {
		loop();
    5dda:	f7fb fc8f 	bl	16fc <loop>
		yield();
    5dde:	f000 fa35 	bl	624c <yield>
    5de2:	e7fa      	b.n	5dda <main+0x6>

00005de4 <operator new(unsigned int)>:
    5de4:	f000 bfca 	b.w	6d7c <malloc>

00005de8 <Print::print(String const&)>:
	return count;
}


size_t Print::print(const String &s)
{
    5de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5dec:	688c      	ldr	r4, [r1, #8]
    5dee:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    5df0:	b1ec      	cbz	r4, 5e2e <Print::print(String const&)+0x46>
    5df2:	2500      	movs	r5, #0
    5df4:	4606      	mov	r6, r0
    5df6:	4689      	mov	r9, r1
    5df8:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    5dfa:	462b      	mov	r3, r5
    5dfc:	2221      	movs	r2, #33	; 0x21
    5dfe:	a901      	add	r1, sp, #4
    5e00:	4648      	mov	r0, r9
    5e02:	f000 f9df 	bl	61c4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    5e06:	6832      	ldr	r2, [r6, #0]
    5e08:	2c20      	cmp	r4, #32
    5e0a:	4623      	mov	r3, r4
    5e0c:	bf28      	it	cs
    5e0e:	2320      	movcs	r3, #32
    5e10:	f8d2 8004 	ldr.w	r8, [r2, #4]
    5e14:	a901      	add	r1, sp, #4
    5e16:	461a      	mov	r2, r3
    5e18:	4630      	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    5e1a:	441d      	add	r5, r3
		len -= nbytes;
    5e1c:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    5e1e:	47c0      	blx	r8
    5e20:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    5e22:	2c00      	cmp	r4, #0
    5e24:	d1e9      	bne.n	5dfa <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    5e26:	4638      	mov	r0, r7
    5e28:	b00b      	add	sp, #44	; 0x2c
    5e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    5e2e:	4627      	mov	r7, r4
    5e30:	e7f9      	b.n	5e26 <Print::print(String const&)+0x3e>
    5e32:	bf00      	nop

00005e34 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5e34:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    5e36:	4a06      	ldr	r2, [pc, #24]	; (5e50 <Print::println()+0x1c>)
	return write(buf, 2);
    5e38:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5e3a:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    5e3c:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5e3e:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    5e40:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5e42:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    5e46:	2202      	movs	r2, #2
    5e48:	4798      	blx	r3
}
    5e4a:	b003      	add	sp, #12
    5e4c:	f85d fb04 	ldr.w	pc, [sp], #4
    5e50:	00008890 	.word	0x00008890

00005e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    5e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e56:	4607      	mov	r7, r0
    5e58:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    5e5a:	2a00      	cmp	r2, #0
    5e5c:	d033      	beq.n	5ec6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    5e5e:	2a01      	cmp	r2, #1
    5e60:	bf08      	it	eq
    5e62:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    5e64:	b351      	cbz	r1, 5ebc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    5e66:	2421      	movs	r4, #33	; 0x21
    5e68:	e000      	b.n	5e6c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    5e6a:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    5e6c:	fbb1 f5f2 	udiv	r5, r1, r2
    5e70:	fb02 1115 	mls	r1, r2, r5, r1
    5e74:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5e76:	2909      	cmp	r1, #9
    5e78:	f100 0130 	add.w	r1, r0, #48	; 0x30
    5e7c:	bf98      	it	ls
    5e7e:	b2c8      	uxtbls	r0, r1
    5e80:	a90a      	add	r1, sp, #40	; 0x28
    5e82:	bf88      	it	hi
    5e84:	3037      	addhi	r0, #55	; 0x37
    5e86:	4421      	add	r1, r4
    5e88:	bf88      	it	hi
    5e8a:	b2c0      	uxtbhi	r0, r0
    5e8c:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    5e90:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    5e92:	4629      	mov	r1, r5
    5e94:	2d00      	cmp	r5, #0
    5e96:	d1e8      	bne.n	5e6a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    5e98:	b133      	cbz	r3, 5ea8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    5e9a:	3c01      	subs	r4, #1
    5e9c:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    5e9e:	ab0a      	add	r3, sp, #40	; 0x28
    5ea0:	4423      	add	r3, r4
    5ea2:	222d      	movs	r2, #45	; 0x2d
    5ea4:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    5ea8:	683b      	ldr	r3, [r7, #0]
    5eaa:	aa01      	add	r2, sp, #4
    5eac:	1911      	adds	r1, r2, r4
    5eae:	685b      	ldr	r3, [r3, #4]
    5eb0:	4638      	mov	r0, r7
    5eb2:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    5eb6:	4798      	blx	r3
}
    5eb8:	b00b      	add	sp, #44	; 0x2c
    5eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    5ebc:	2230      	movs	r2, #48	; 0x30
    5ebe:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    5ec2:	2421      	movs	r4, #33	; 0x21
    5ec4:	e7e8      	b.n	5e98 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    5ec6:	6803      	ldr	r3, [r0, #0]
    5ec8:	b2c9      	uxtb	r1, r1
    5eca:	681b      	ldr	r3, [r3, #0]
    5ecc:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    5ece:	b00b      	add	sp, #44	; 0x2c
    5ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ed2:	bf00      	nop

00005ed4 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    5ed4:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    5ed6:	bfba      	itte	lt
    5ed8:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    5eda:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    5edc:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    5ede:	220a      	movs	r2, #10
    5ee0:	f7ff bfb8 	b.w	5e54 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00005ee4 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    5ee4:	f7ff bc64 	b.w	57b0 <usb_serial_flush_input>

00005ee8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    5ee8:	f7ff bc3c 	b.w	5764 <usb_serial_peekchar>

00005eec <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    5eec:	f7ff bc16 	b.w	571c <usb_serial_getchar>

00005ef0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5ef0:	f7ff bc50 	b.w	5794 <usb_serial_available>

00005ef4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5ef4:	f7ff bd2c 	b.w	5950 <usb_serial_flush_output>

00005ef8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5ef8:	f7ff bd06 	b.w	5908 <usb_serial_write_buffer_free>

00005efc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5efc:	4608      	mov	r0, r1
    5efe:	4611      	mov	r1, r2
    5f00:	f7ff bc72 	b.w	57e8 <usb_serial_write>

00005f04 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5f04:	4608      	mov	r0, r1
    5f06:	f7ff bcf3 	b.w	58f0 <usb_serial_putchar>
    5f0a:	bf00      	nop

00005f0c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    5f0c:	4770      	bx	lr
    5f0e:	bf00      	nop

00005f10 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    5f10:	b5f0      	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    5f12:	4d16      	ldr	r5, [pc, #88]	; (5f6c <random(unsigned long) [clone .part.0]+0x5c>)
    5f14:	682a      	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    5f16:	b30a      	cbz	r2, 5f5c <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    5f18:	4915      	ldr	r1, [pc, #84]	; (5f70 <random(unsigned long) [clone .part.0]+0x60>)
    5f1a:	4b16      	ldr	r3, [pc, #88]	; (5f74 <random(unsigned long) [clone .part.0]+0x64>)
    5f1c:	f8df e05c 	ldr.w	lr, [pc, #92]	; 5f7c <random(unsigned long) [clone .part.0]+0x6c>
    5f20:	fb82 6701 	smull	r6, r7, r2, r1
    5f24:	fb81 1402 	smull	r1, r4, r1, r2
    5f28:	17d6      	asrs	r6, r2, #31
    5f2a:	19d1      	adds	r1, r2, r7
    5f2c:	4414      	add	r4, r2
    5f2e:	ebc6 4121 	rsb	r1, r6, r1, asr #16
    5f32:	ebc6 4424 	rsb	r4, r6, r4, asr #16
    5f36:	fb03 f404 	mul.w	r4, r3, r4
    5f3a:	fb0e 2211 	mls	r2, lr, r1, r2
    5f3e:	f244 13a7 	movw	r3, #16807	; 0x41a7
    5f42:	fb03 4302 	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    5f46:	2b00      	cmp	r3, #0
    5f48:	da02      	bge.n	5f50 <random(unsigned long) [clone .part.0]+0x40>
    5f4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    5f4e:	3b01      	subs	r3, #1
    5f50:	fbb3 f2f0 	udiv	r2, r3, r0
	seed = x;
    5f54:	602b      	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    5f56:	fb00 3012 	mls	r0, r0, r2, r3
    5f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    5f5c:	4b06      	ldr	r3, [pc, #24]	; (5f78 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    5f5e:	602b      	str	r3, [r5, #0]
    5f60:	fbb3 f2f0 	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    5f64:	fb00 3012 	mls	r0, r0, r2, r3
    5f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f6a:	bf00      	nop
    5f6c:	1fffa2ec 	.word	0x1fffa2ec
    5f70:	834e0b5f 	.word	0x834e0b5f
    5f74:	fffff4ec 	.word	0xfffff4ec
    5f78:	1f0cce42 	.word	0x1f0cce42
    5f7c:	0001f31d 	.word	0x0001f31d

00005f80 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    5f80:	b108      	cbz	r0, 5f86 <random(unsigned long)+0x6>
    5f82:	f7ff bfc5 	b.w	5f10 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    5f86:	4770      	bx	lr

00005f88 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    5f88:	b510      	push	{r4, lr}
    5f8a:	4604      	mov	r4, r0
{
	free(buffer);
    5f8c:	6800      	ldr	r0, [r0, #0]
    5f8e:	f000 fefd 	bl	6d8c <free>
}
    5f92:	4620      	mov	r0, r4
    5f94:	bd10      	pop	{r4, pc}
    5f96:	bf00      	nop

00005f98 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    5f98:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    5f9a:	6843      	ldr	r3, [r0, #4]
    5f9c:	428b      	cmp	r3, r1
    5f9e:	d301      	bcc.n	5fa4 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5fa0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    5fa2:	bd38      	pop	{r3, r4, r5, pc}
    5fa4:	460d      	mov	r5, r1
    5fa6:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5fa8:	3101      	adds	r1, #1
    5faa:	6800      	ldr	r0, [r0, #0]
    5fac:	f001 fa7a 	bl	74a4 <realloc>
	if (newbuffer) {
    5fb0:	2800      	cmp	r0, #0
    5fb2:	d0f6      	beq.n	5fa2 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5fb4:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    5fb6:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5fba:	2b00      	cmp	r3, #0
    5fbc:	d1f0      	bne.n	5fa0 <String::reserve(unsigned int)+0x8>
    5fbe:	7003      	strb	r3, [r0, #0]
    5fc0:	e7ee      	b.n	5fa0 <String::reserve(unsigned int)+0x8>
    5fc2:	bf00      	nop

00005fc4 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    5fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fc6:	4604      	mov	r4, r0
	if (length == 0) {
    5fc8:	4615      	mov	r5, r2
    5fca:	b932      	cbnz	r2, 5fda <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    5fcc:	6803      	ldr	r3, [r0, #0]
    5fce:	b103      	cbz	r3, 5fd2 <String::copy(char const*, unsigned int)+0xe>
    5fd0:	701a      	strb	r2, [r3, #0]
		len = 0;
    5fd2:	2300      	movs	r3, #0
    5fd4:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    5fd6:	4620      	mov	r0, r4
    5fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fda:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    5fdc:	4611      	mov	r1, r2
    5fde:	f7ff ffdb 	bl	5f98 <String::reserve(unsigned int)>
    5fe2:	4607      	mov	r7, r0
    5fe4:	b948      	cbnz	r0, 5ffa <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    5fe6:	6820      	ldr	r0, [r4, #0]
    5fe8:	b110      	cbz	r0, 5ff0 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    5fea:	f000 fecf 	bl	6d8c <free>
			buffer = NULL;
    5fee:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    5ff0:	2300      	movs	r3, #0
    5ff2:	6063      	str	r3, [r4, #4]
    5ff4:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    5ff6:	4620      	mov	r0, r4
    5ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    5ffa:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    5ffc:	4631      	mov	r1, r6
    5ffe:	6820      	ldr	r0, [r4, #0]
    6000:	f001 fdcc 	bl	7b9c <strcpy>
	return *this;
    6004:	e7e7      	b.n	5fd6 <String::copy(char const*, unsigned int)+0x12>
    6006:	bf00      	nop

00006008 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    6008:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    600a:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    600c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    600e:	6003      	str	r3, [r0, #0]
	capacity = 0;
    6010:	6043      	str	r3, [r0, #4]
	len = 0;
    6012:	6083      	str	r3, [r0, #8]
	flags = 0;
    6014:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    6016:	b141      	cbz	r1, 602a <String::String(char const*)+0x22>
    6018:	4608      	mov	r0, r1
    601a:	460d      	mov	r5, r1
    601c:	f001 fe30 	bl	7c80 <strlen>
    6020:	4629      	mov	r1, r5
    6022:	4602      	mov	r2, r0
    6024:	4620      	mov	r0, r4
    6026:	f7ff ffcd 	bl	5fc4 <String::copy(char const*, unsigned int)>
}
    602a:	4620      	mov	r0, r4
    602c:	bd38      	pop	{r3, r4, r5, pc}
    602e:	bf00      	nop

00006030 <String::String(__FlashStringHelper const*)>:

String::String(const __FlashStringHelper *pgmstr)
    6030:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6032:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    6034:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6036:	6003      	str	r3, [r0, #0]
	capacity = 0;
    6038:	6043      	str	r3, [r0, #4]
	len = 0;
    603a:	6083      	str	r3, [r0, #8]
	flags = 0;
    603c:	7303      	strb	r3, [r0, #12]
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}

	// copy and move
	String & copy(const char *cstr, unsigned int length);
	String & copy(const __FlashStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    603e:	4608      	mov	r0, r1
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    6040:	460d      	mov	r5, r1
    6042:	f001 fe1d 	bl	7c80 <strlen>
    6046:	4629      	mov	r1, r5
    6048:	4602      	mov	r2, r0
    604a:	4620      	mov	r0, r4
    604c:	f7ff ffba 	bl	5fc4 <String::copy(char const*, unsigned int)>
{
	init();
	*this = pgmstr;
}
    6050:	4620      	mov	r0, r4
    6052:	bd38      	pop	{r3, r4, r5, pc}

00006054 <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6054:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    6056:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    6058:	b510      	push	{r4, lr}
    605a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    605c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    605e:	6043      	str	r3, [r0, #4]
	len = 0;
    6060:	6083      	str	r3, [r0, #8]
	flags = 0;
    6062:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    6064:	d003      	beq.n	606e <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    6066:	688a      	ldr	r2, [r1, #8]
    6068:	6809      	ldr	r1, [r1, #0]
    606a:	f7ff ffab 	bl	5fc4 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    606e:	4620      	mov	r0, r4
    6070:	bd10      	pop	{r4, pc}
    6072:	bf00      	nop

00006074 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    6074:	b538      	push	{r3, r4, r5, lr}
    6076:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    6078:	4608      	mov	r0, r1
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    607a:	460c      	mov	r4, r1
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    607c:	f001 fe00 	bl	7c80 <strlen>
    6080:	4621      	mov	r1, r4
    6082:	4602      	mov	r2, r0
    6084:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    6086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    608a:	f7ff bf9b 	b.w	5fc4 <String::copy(char const*, unsigned int)>
    608e:	bf00      	nop

00006090 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    6090:	b510      	push	{r4, lr}
    6092:	4604      	mov	r4, r0
	if (cstr) {
    6094:	b119      	cbz	r1, 609e <String::operator=(char const*)+0xe>
    6096:	f7ff ffed 	bl	6074 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    609a:	4620      	mov	r0, r4
    609c:	bd10      	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    609e:	60a1      	str	r1, [r4, #8]
	}
	return *this;
}
    60a0:	4620      	mov	r0, r4
    60a2:	bd10      	pop	{r4, pc}

000060a4 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    60a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    60a8:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    60aa:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    60ac:	42bb      	cmp	r3, r7
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    60ae:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
    60b0:	6881      	ldr	r1, [r0, #8]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    60b2:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    60b4:	d80a      	bhi.n	60cc <String::append(char const*, unsigned int)+0x28>
    60b6:	185a      	adds	r2, r3, r1
    60b8:	4297      	cmp	r7, r2
    60ba:	d207      	bcs.n	60cc <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    60bc:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    60c0:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    60c4:	b935      	cbnz	r5, 60d4 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    60c6:	4620      	mov	r0, r4
    60c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    60cc:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    60d0:	2d00      	cmp	r5, #0
    60d2:	d0f8      	beq.n	60c6 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    60d4:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    60d6:	4631      	mov	r1, r6
    60d8:	4620      	mov	r0, r4
    60da:	f7ff ff5d 	bl	5f98 <String::reserve(unsigned int)>
    60de:	2800      	cmp	r0, #0
    60e0:	d0f1      	beq.n	60c6 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    60e2:	f1b8 0f00 	cmp.w	r8, #0
    60e6:	d00e      	beq.n	6106 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    60e8:	6823      	ldr	r3, [r4, #0]
    60ea:	68a0      	ldr	r0, [r4, #8]
    60ec:	462a      	mov	r2, r5
    60ee:	eb03 0109 	add.w	r1, r3, r9
    60f2:	4418      	add	r0, r3
    60f4:	f7fe f8c0 	bl	4278 <memcpy>
		buffer[newlen] = 0;
    60f8:	6823      	ldr	r3, [r4, #0]
    60fa:	2200      	movs	r2, #0
    60fc:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    60fe:	60a6      	str	r6, [r4, #8]
	return *this;
}
    6100:	4620      	mov	r0, r4
    6102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    6106:	6820      	ldr	r0, [r4, #0]
    6108:	68a3      	ldr	r3, [r4, #8]
    610a:	4639      	mov	r1, r7
    610c:	4418      	add	r0, r3
    610e:	f001 fd45 	bl	7b9c <strcpy>
    6112:	e7f4      	b.n	60fe <String::append(char const*, unsigned int)+0x5a>

00006114 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    6114:	b510      	push	{r4, lr}
    6116:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    6118:	2300      	movs	r3, #0
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    611a:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    611e:	2201      	movs	r2, #1
    6120:	a901      	add	r1, sp, #4
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    6122:	4604      	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    6124:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    6128:	f7ff ffbc 	bl	60a4 <String::append(char const*, unsigned int)>
	return *this;
}
    612c:	4620      	mov	r0, r4
    612e:	b002      	add	sp, #8
    6130:	bd10      	pop	{r4, pc}
    6132:	bf00      	nop

00006134 <String::compareTo(String const&) const>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
    6134:	6803      	ldr	r3, [r0, #0]
    6136:	b153      	cbz	r3, 614e <String::compareTo(String const&) const+0x1a>
    6138:	6809      	ldr	r1, [r1, #0]
    613a:	b111      	cbz	r1, 6142 <String::compareTo(String const&) const+0xe>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
    613c:	4618      	mov	r0, r3
    613e:	f001 bbc3 	b.w	78c8 <strcmp>

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
    6142:	6880      	ldr	r0, [r0, #8]
    6144:	b110      	cbz	r0, 614c <String::compareTo(String const&) const+0x18>
    6146:	7818      	ldrb	r0, [r3, #0]
    6148:	4770      	bx	lr
		return 0;
    614a:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
    614c:	4770      	bx	lr
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    614e:	680b      	ldr	r3, [r1, #0]
    6150:	2b00      	cmp	r3, #0
    6152:	d0fa      	beq.n	614a <String::compareTo(String const&) const+0x16>
    6154:	6888      	ldr	r0, [r1, #8]
    6156:	2800      	cmp	r0, #0
    6158:	d0f8      	beq.n	614c <String::compareTo(String const&) const+0x18>
    615a:	7818      	ldrb	r0, [r3, #0]
    615c:	4240      	negs	r0, r0
    615e:	4770      	bx	lr

00006160 <String::equals(String const&) const>:
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
    6160:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
    6162:	6882      	ldr	r2, [r0, #8]
    6164:	688b      	ldr	r3, [r1, #8]
    6166:	429a      	cmp	r2, r3
    6168:	d001      	beq.n	616e <String::equals(String const&) const+0xe>
    616a:	2000      	movs	r0, #0
}
    616c:	bd08      	pop	{r3, pc}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    616e:	f7ff ffe1 	bl	6134 <String::compareTo(String const&) const>
    6172:	fab0 f080 	clz	r0, r0
    6176:	0940      	lsrs	r0, r0, #5
    6178:	bd08      	pop	{r3, pc}
    617a:	bf00      	nop

0000617c <String::equals(char const*) const>:
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    617c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    617e:	b508      	push	{r3, lr}
    6180:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6182:	b92a      	cbnz	r2, 6190 <String::equals(char const*) const+0x14>
    6184:	b171      	cbz	r1, 61a4 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    6186:	7818      	ldrb	r0, [r3, #0]
    6188:	fab0 f080 	clz	r0, r0
    618c:	0940      	lsrs	r0, r0, #5
    618e:	bd08      	pop	{r3, pc}
    6190:	b131      	cbz	r1, 61a0 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    6192:	6800      	ldr	r0, [r0, #0]
    6194:	f001 fb98 	bl	78c8 <strcmp>
    6198:	fab0 f080 	clz	r0, r0
    619c:	0940      	lsrs	r0, r0, #5
}
    619e:	bd08      	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    61a0:	6803      	ldr	r3, [r0, #0]
    61a2:	e7f0      	b.n	6186 <String::equals(char const*) const+0xa>
    61a4:	2001      	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    61a6:	bd08      	pop	{r3, pc}

000061a8 <String::operator[](unsigned int)>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    61a8:	6883      	ldr	r3, [r0, #8]
    61aa:	428b      	cmp	r3, r1
    61ac:	d903      	bls.n	61b6 <String::operator[](unsigned int)+0xe>
    61ae:	6800      	ldr	r0, [r0, #0]
    61b0:	b108      	cbz	r0, 61b6 <String::operator[](unsigned int)+0xe>
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
    61b2:	4408      	add	r0, r1
}
    61b4:	4770      	bx	lr

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    61b6:	4902      	ldr	r1, [pc, #8]	; (61c0 <String::operator[](unsigned int)+0x18>)
    61b8:	2300      	movs	r3, #0
    61ba:	700b      	strb	r3, [r1, #0]
		return dummy_writable_char;
    61bc:	4608      	mov	r0, r1
    61be:	4770      	bx	lr
    61c0:	1fffa2f0 	.word	0x1fffa2f0

000061c4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    61c4:	b1b2      	cbz	r2, 61f4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    61c6:	b1a9      	cbz	r1, 61f4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    61c8:	b538      	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    61ca:	6884      	ldr	r4, [r0, #8]
    61cc:	429c      	cmp	r4, r3
    61ce:	d90e      	bls.n	61ee <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    61d0:	1ae4      	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    61d2:	3a01      	subs	r2, #1
    61d4:	460d      	mov	r5, r1
    61d6:	4294      	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    61d8:	6801      	ldr	r1, [r0, #0]
    61da:	bf28      	it	cs
    61dc:	4614      	movcs	r4, r2
    61de:	4419      	add	r1, r3
    61e0:	4622      	mov	r2, r4
    61e2:	4628      	mov	r0, r5
    61e4:	f001 fdba 	bl	7d5c <strncpy>
	buf[n] = 0;
    61e8:	2300      	movs	r3, #0
    61ea:	552b      	strb	r3, [r5, r4]
    61ec:	bd38      	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    61ee:	2300      	movs	r3, #0
    61f0:	700b      	strb	r3, [r1, #0]
		return;
    61f2:	bd38      	pop	{r3, r4, r5, pc}
    61f4:	4770      	bx	lr
    61f6:	bf00      	nop

000061f8 <String::substring(unsigned int, unsigned int) const>:
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    61f8:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    61fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61fc:	4604      	mov	r4, r0
    61fe:	460e      	mov	r6, r1
	if (left > right) {
    6200:	d902      	bls.n	6208 <String::substring(unsigned int, unsigned int) const+0x10>
    6202:	4611      	mov	r1, r2
    6204:	461a      	mov	r2, r3
    6206:	460b      	mov	r3, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6208:	2100      	movs	r1, #0
	capacity = 0;
	len = 0;
    620a:	60a1      	str	r1, [r4, #8]
	flags = 0;
    620c:	7321      	strb	r1, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    620e:	68b0      	ldr	r0, [r6, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6210:	6021      	str	r1, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    6212:	4282      	cmp	r2, r0
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    6214:	6061      	str	r1, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    6216:	d80e      	bhi.n	6236 <String::substring(unsigned int, unsigned int) const+0x3e>
    6218:	4283      	cmp	r3, r0
    621a:	bf28      	it	cs
    621c:	4603      	movcs	r3, r0
    621e:	461d      	mov	r5, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    6220:	6833      	ldr	r3, [r6, #0]
    6222:	5d5f      	ldrb	r7, [r3, r5]
	buffer[right] = '\0';	
    6224:	5559      	strb	r1, [r3, r5]
	out = buffer + left;  // pointer arithmetic
    6226:	6833      	ldr	r3, [r6, #0]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    6228:	1899      	adds	r1, r3, r2
    622a:	d006      	beq.n	623a <String::substring(unsigned int, unsigned int) const+0x42>
    622c:	4620      	mov	r0, r4
    622e:	f7ff ff21 	bl	6074 <String::operator=(char const*) [clone .part.3]>
    6232:	6833      	ldr	r3, [r6, #0]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    6234:	555f      	strb	r7, [r3, r5]
	return out;
}
    6236:	4620      	mov	r0, r4
    6238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    623a:	60a1      	str	r1, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    623c:	555f      	strb	r7, [r3, r5]
    623e:	e7fa      	b.n	6236 <String::substring(unsigned int, unsigned int) const+0x3e>

00006240 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    6240:	6800      	ldr	r0, [r0, #0]
    6242:	b108      	cbz	r0, 6248 <String::toInt() const+0x8>
    6244:	f000 bd5e 	b.w	6d04 <atol>
	return 0;
}
    6248:	4770      	bx	lr
    624a:	bf00      	nop

0000624c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    624c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    624e:	4c22      	ldr	r4, [pc, #136]	; (62d8 <yield+0x8c>)
    6250:	7823      	ldrb	r3, [r4, #0]
    6252:	b103      	cbz	r3, 6256 <yield+0xa>
    6254:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    6256:	2301      	movs	r3, #1
    6258:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    625a:	f7ff fa9b 	bl	5794 <usb_serial_available>
	if (Serial.available()) serialEvent();
    625e:	bb70      	cbnz	r0, 62be <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    6260:	f7fe fa9e 	bl	47a0 <serial_available>
	if (Serial1.available()) serialEvent1();
    6264:	bb40      	cbnz	r0, 62b8 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    6266:	f000 f8d5 	bl	6414 <serial2_available>
	if (Serial2.available()) serialEvent2();
    626a:	bb10      	cbnz	r0, 62b2 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    626c:	f000 f968 	bl	6540 <serial3_available>
	if (Serial3.available()) serialEvent3();
    6270:	b9e0      	cbnz	r0, 62ac <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    6272:	2300      	movs	r3, #0
    6274:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    6276:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    627a:	2b00      	cmp	r3, #0
    627c:	d1ea      	bne.n	6254 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    627e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    6282:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    6284:	4b15      	ldr	r3, [pc, #84]	; (62dc <yield+0x90>)
    6286:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    6288:	b1e0      	cbz	r0, 62c4 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    628a:	4c15      	ldr	r4, [pc, #84]	; (62e0 <yield+0x94>)
    628c:	7822      	ldrb	r2, [r4, #0]
    628e:	b9ca      	cbnz	r2, 62c4 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    6290:	6945      	ldr	r5, [r0, #20]
    6292:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    6294:	2301      	movs	r3, #1
    6296:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    6298:	b1c5      	cbz	r5, 62cc <yield+0x80>
			firstYield->_prev = nullptr;
    629a:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    629c:	b901      	cbnz	r1, 62a0 <yield+0x54>
    629e:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    62a0:	2500      	movs	r5, #0
    62a2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    62a4:	6883      	ldr	r3, [r0, #8]
    62a6:	4798      	blx	r3
		runningFromYield = false;
    62a8:	7025      	strb	r5, [r4, #0]
    62aa:	e7d3      	b.n	6254 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    62ac:	f000 fa08 	bl	66c0 <serialEvent3()>
    62b0:	e7df      	b.n	6272 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    62b2:	f000 fa03 	bl	66bc <serialEvent2()>
    62b6:	e7d9      	b.n	626c <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    62b8:	f7fb fa78 	bl	17ac <serialEvent1()>
    62bc:	e7d3      	b.n	6266 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    62be:	f7ff fe25 	bl	5f0c <serialEvent()>
    62c2:	e7cd      	b.n	6260 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    62c4:	2900      	cmp	r1, #0
    62c6:	d1c5      	bne.n	6254 <yield+0x8>
    62c8:	b662      	cpsie	i
    62ca:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    62cc:	4b05      	ldr	r3, [pc, #20]	; (62e4 <yield+0x98>)
    62ce:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    62d0:	2900      	cmp	r1, #0
    62d2:	d1e5      	bne.n	62a0 <yield+0x54>
    62d4:	e7e3      	b.n	629e <yield+0x52>
    62d6:	bf00      	nop
    62d8:	1fffa2f1 	.word	0x1fffa2f1
    62dc:	1fffa2e0 	.word	0x1fffa2e0
    62e0:	1fffa2e4 	.word	0x1fffa2e4
    62e4:	1fffa2dc 	.word	0x1fffa2dc

000062e8 <analog_init>:
#else
#error "F_BUS must be 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    62e8:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    62ea:	4829      	ldr	r0, [pc, #164]	; (6390 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    62ec:	4a29      	ldr	r2, [pc, #164]	; (6394 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    62ee:	4b2a      	ldr	r3, [pc, #168]	; (6398 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    62f0:	4d2a      	ldr	r5, [pc, #168]	; (639c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    62f2:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    62f4:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    62f6:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    62f8:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    62fa:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    62fc:	4c28      	ldr	r4, [pc, #160]	; (63a0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    62fe:	2b08      	cmp	r3, #8
    6300:	d030      	beq.n	6364 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    6302:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6304:	4827      	ldr	r0, [pc, #156]	; (63a4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6306:	4928      	ldr	r1, [pc, #160]	; (63a8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    6308:	d037      	beq.n	637a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    630a:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    630c:	bf0c      	ite	eq
    630e:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6310:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    6312:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6314:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    6316:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6318:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    631a:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    631c:	4b23      	ldr	r3, [pc, #140]	; (63ac <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    631e:	4924      	ldr	r1, [pc, #144]	; (63b0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    6320:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6322:	4a24      	ldr	r2, [pc, #144]	; (63b4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    6324:	b1bb      	cbz	r3, 6356 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6326:	2301      	movs	r3, #1
    6328:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    632a:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    632c:	4b22      	ldr	r3, [pc, #136]	; (63b8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    632e:	4923      	ldr	r1, [pc, #140]	; (63bc <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    6330:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    6332:	4a23      	ldr	r2, [pc, #140]	; (63c0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    6334:	2b01      	cmp	r3, #1
    6336:	d926      	bls.n	6386 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    6338:	2b04      	cmp	r3, #4
    633a:	d90f      	bls.n	635c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    633c:	2b08      	cmp	r3, #8
    633e:	d91e      	bls.n	637e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    6340:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    6342:	bf94      	ite	ls
    6344:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    6346:	2387      	movhi	r3, #135	; 0x87
    6348:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    634a:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    634c:	4b1d      	ldr	r3, [pc, #116]	; (63c4 <analog_init+0xdc>)
    634e:	2201      	movs	r2, #1
    6350:	701a      	strb	r2, [r3, #0]
}
    6352:	bc30      	pop	{r4, r5}
    6354:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    6356:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    6358:	6013      	str	r3, [r2, #0]
    635a:	e7e7      	b.n	632c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    635c:	2384      	movs	r3, #132	; 0x84
    635e:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    6360:	6013      	str	r3, [r2, #0]
    6362:	e7f3      	b.n	634c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6364:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6368:	490f      	ldr	r1, [pc, #60]	; (63a8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    636a:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    636c:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    636e:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6370:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6372:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6374:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6376:	600b      	str	r3, [r1, #0]
    6378:	e7d0      	b.n	631c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    637a:	2239      	movs	r2, #57	; 0x39
    637c:	e7f7      	b.n	636e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    637e:	2385      	movs	r3, #133	; 0x85
    6380:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    6382:	6013      	str	r3, [r2, #0]
    6384:	e7e2      	b.n	634c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    6386:	2380      	movs	r3, #128	; 0x80
    6388:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    638a:	6013      	str	r3, [r2, #0]
    638c:	e7de      	b.n	634c <analog_init+0x64>
    638e:	bf00      	nop
    6390:	40074000 	.word	0x40074000
    6394:	40074001 	.word	0x40074001
    6398:	1fff8744 	.word	0x1fff8744
    639c:	4003b008 	.word	0x4003b008
    63a0:	4003b00c 	.word	0x4003b00c
    63a4:	400bb008 	.word	0x400bb008
    63a8:	400bb00c 	.word	0x400bb00c
    63ac:	1fffa2f3 	.word	0x1fffa2f3
    63b0:	4003b020 	.word	0x4003b020
    63b4:	400bb020 	.word	0x400bb020
    63b8:	1fff8745 	.word	0x1fff8745
    63bc:	4003b024 	.word	0x4003b024
    63c0:	400bb024 	.word	0x400bb024
    63c4:	1fffa2f2 	.word	0x1fffa2f2

000063c8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    63c8:	b4f0      	push	{r4, r5, r6, r7}
    63ca:	1e4d      	subs	r5, r1, #1
    63cc:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    63ce:	2400      	movs	r4, #0
    63d0:	e000      	b.n	63d4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    63d2:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    63d4:	fbb0 f3f2 	udiv	r3, r0, r2
    63d8:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    63dc:	2809      	cmp	r0, #9
    63de:	f100 0730 	add.w	r7, r0, #48	; 0x30
    63e2:	bf8a      	itet	hi
    63e4:	3037      	addhi	r0, #55	; 0x37
    63e6:	b2f8      	uxtbls	r0, r7
    63e8:	b2c0      	uxtbhi	r0, r0
    63ea:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    63ee:	4618      	mov	r0, r3
    63f0:	2b00      	cmp	r3, #0
    63f2:	d1ee      	bne.n	63d2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    63f4:	190a      	adds	r2, r1, r4
    63f6:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    63f8:	b14c      	cbz	r4, 640e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    63fa:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    63fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    6400:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6402:	3301      	adds	r3, #1
    6404:	1ae0      	subs	r0, r4, r3
    6406:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    6408:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    640c:	dbf5      	blt.n	63fa <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    640e:	4608      	mov	r0, r1
    6410:	bcf0      	pop	{r4, r5, r6, r7}
    6412:	4770      	bx	lr

00006414 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6414:	4a05      	ldr	r2, [pc, #20]	; (642c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    6416:	4b06      	ldr	r3, [pc, #24]	; (6430 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6418:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    641a:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    641c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    641e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6420:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    6422:	bf38      	it	cc
    6424:	3040      	addcc	r0, #64	; 0x40
    6426:	1ac0      	subs	r0, r0, r3
}
    6428:	4770      	bx	lr
    642a:	bf00      	nop
    642c:	1fffa364 	.word	0x1fffa364
    6430:	1fffa2f9 	.word	0x1fffa2f9

00006434 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    6434:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    6436:	4b38      	ldr	r3, [pc, #224]	; (6518 <uart1_status_isr+0xe4>)
    6438:	791a      	ldrb	r2, [r3, #4]
    643a:	f012 0f30 	tst.w	r2, #48	; 0x30
    643e:	d02c      	beq.n	649a <uart1_status_isr+0x66>
		__disable_irq();
    6440:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    6442:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    6444:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    6448:	2900      	cmp	r1, #0
    644a:	d03d      	beq.n	64c8 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    644c:	b662      	cpsie	i
			head = rx_buffer_head;
    644e:	4f33      	ldr	r7, [pc, #204]	; (651c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    6450:	4933      	ldr	r1, [pc, #204]	; (6520 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    6452:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    6454:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    6456:	4e33      	ldr	r6, [pc, #204]	; (6524 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    6458:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    645a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    645c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    645e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6460:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    6462:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6464:	bf28      	it	cs
    6466:	2300      	movcs	r3, #0
				if (newhead != tail) {
    6468:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    646a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    646e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    6470:	bf1c      	itt	ne
    6472:	54f1      	strbne	r1, [r6, r3]
    6474:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    6476:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    647a:	d1f0      	bne.n	645e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    647c:	4b2a      	ldr	r3, [pc, #168]	; (6528 <uart1_status_isr+0xf4>)
    647e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    6480:	b2c2      	uxtb	r2, r0
    6482:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    6484:	b14b      	cbz	r3, 649a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    6486:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6488:	bf36      	itet	cc
    648a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    648e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6490:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    6492:	2827      	cmp	r0, #39	; 0x27
    6494:	bfc4      	itt	gt
    6496:	2201      	movgt	r2, #1
    6498:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    649a:	491f      	ldr	r1, [pc, #124]	; (6518 <uart1_status_isr+0xe4>)
    649c:	78ca      	ldrb	r2, [r1, #3]
    649e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    64a0:	0615      	lsls	r5, r2, #24
    64a2:	d416      	bmi.n	64d2 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    64a4:	0652      	lsls	r2, r2, #25
    64a6:	d50d      	bpl.n	64c4 <uart1_status_isr+0x90>
    64a8:	4b1b      	ldr	r3, [pc, #108]	; (6518 <uart1_status_isr+0xe4>)
    64aa:	791b      	ldrb	r3, [r3, #4]
    64ac:	065b      	lsls	r3, r3, #25
    64ae:	d509      	bpl.n	64c4 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    64b0:	4b1e      	ldr	r3, [pc, #120]	; (652c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    64b2:	491f      	ldr	r1, [pc, #124]	; (6530 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    64b4:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    64b6:	2200      	movs	r2, #0
    64b8:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    64ba:	b103      	cbz	r3, 64be <uart1_status_isr+0x8a>
    64bc:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    64be:	4b16      	ldr	r3, [pc, #88]	; (6518 <uart1_status_isr+0xe4>)
    64c0:	223c      	movs	r2, #60	; 0x3c
    64c2:	70da      	strb	r2, [r3, #3]
	}
}
    64c4:	bcf0      	pop	{r4, r5, r6, r7}
    64c6:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    64c8:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    64ca:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    64cc:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    64ce:	b662      	cpsie	i
    64d0:	e7e3      	b.n	649a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    64d2:	790b      	ldrb	r3, [r1, #4]
    64d4:	061c      	lsls	r4, r3, #24
    64d6:	d5e5      	bpl.n	64a4 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    64d8:	4b16      	ldr	r3, [pc, #88]	; (6534 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    64da:	4e17      	ldr	r6, [pc, #92]	; (6538 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    64dc:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    64de:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    64e0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    64e2:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    64e4:	429c      	cmp	r4, r3
    64e6:	d00e      	beq.n	6506 <uart1_status_isr+0xd2>
    64e8:	4d14      	ldr	r5, [pc, #80]	; (653c <uart1_status_isr+0x108>)
    64ea:	e001      	b.n	64f0 <uart1_status_isr+0xbc>
    64ec:	42a3      	cmp	r3, r4
    64ee:	d00a      	beq.n	6506 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    64f0:	3301      	adds	r3, #1
    64f2:	2b28      	cmp	r3, #40	; 0x28
    64f4:	bf28      	it	cs
    64f6:	2300      	movcs	r3, #0
			avail = UART1_S1;
    64f8:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    64fa:	5ce8      	ldrb	r0, [r5, r3]
    64fc:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    64fe:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    6500:	7d08      	ldrb	r0, [r1, #20]
    6502:	2807      	cmp	r0, #7
    6504:	d9f2      	bls.n	64ec <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    6506:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    6508:	4903      	ldr	r1, [pc, #12]	; (6518 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    650a:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    650c:	790b      	ldrb	r3, [r1, #4]
    650e:	0618      	lsls	r0, r3, #24
    6510:	bf44      	itt	mi
    6512:	237c      	movmi	r3, #124	; 0x7c
    6514:	70cb      	strbmi	r3, [r1, #3]
    6516:	e7c5      	b.n	64a4 <uart1_status_isr+0x70>
    6518:	4006b000 	.word	0x4006b000
    651c:	1fffa364 	.word	0x1fffa364
    6520:	1fffa2f9 	.word	0x1fffa2f9
    6524:	1fffa324 	.word	0x1fffa324
    6528:	1fffa2f4 	.word	0x1fffa2f4
    652c:	1fffa368 	.word	0x1fffa368
    6530:	1fffa2f8 	.word	0x1fffa2f8
    6534:	1fffa36c 	.word	0x1fffa36c
    6538:	1fffa365 	.word	0x1fffa365
    653c:	1fffa2fc 	.word	0x1fffa2fc

00006540 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6540:	4a05      	ldr	r2, [pc, #20]	; (6558 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    6542:	4b06      	ldr	r3, [pc, #24]	; (655c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6544:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    6546:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6548:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    654a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    654c:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    654e:	bf38      	it	cc
    6550:	3040      	addcc	r0, #64	; 0x40
    6552:	1ac0      	subs	r0, r0, r3
}
    6554:	4770      	bx	lr
    6556:	bf00      	nop
    6558:	1fffa374 	.word	0x1fffa374
    655c:	1fffa375 	.word	0x1fffa375

00006560 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    6560:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    6562:	4b2b      	ldr	r3, [pc, #172]	; (6610 <uart2_status_isr+0xb0>)
    6564:	791a      	ldrb	r2, [r3, #4]
    6566:	0694      	lsls	r4, r2, #26
    6568:	d51f      	bpl.n	65aa <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    656a:	482a      	ldr	r0, [pc, #168]	; (6614 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    656c:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    656e:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6570:	4929      	ldr	r1, [pc, #164]	; (6618 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6572:	3301      	adds	r3, #1
    6574:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6576:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6578:	bfc8      	it	gt
    657a:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    657c:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    657e:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6580:	d003      	beq.n	658a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    6582:	4c26      	ldr	r4, [pc, #152]	; (661c <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    6584:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    6586:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    6588:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    658a:	4a25      	ldr	r2, [pc, #148]	; (6620 <uart2_status_isr+0xc0>)
    658c:	6811      	ldr	r1, [r2, #0]
    658e:	b161      	cbz	r1, 65aa <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    6590:	4a24      	ldr	r2, [pc, #144]	; (6624 <uart2_status_isr+0xc4>)
    6592:	7812      	ldrb	r2, [r2, #0]
    6594:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    6596:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    6598:	bf36      	itet	cc
    659a:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    659e:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    65a0:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    65a2:	2b27      	cmp	r3, #39	; 0x27
    65a4:	bfc4      	itt	gt
    65a6:	2301      	movgt	r3, #1
    65a8:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    65aa:	4a19      	ldr	r2, [pc, #100]	; (6610 <uart2_status_isr+0xb0>)
    65ac:	78d3      	ldrb	r3, [r2, #3]
    65ae:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    65b0:	0618      	lsls	r0, r3, #24
    65b2:	d411      	bmi.n	65d8 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    65b4:	065a      	lsls	r2, r3, #25
    65b6:	d50d      	bpl.n	65d4 <uart2_status_isr+0x74>
    65b8:	4b15      	ldr	r3, [pc, #84]	; (6610 <uart2_status_isr+0xb0>)
    65ba:	791b      	ldrb	r3, [r3, #4]
    65bc:	065b      	lsls	r3, r3, #25
    65be:	d509      	bpl.n	65d4 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    65c0:	4b19      	ldr	r3, [pc, #100]	; (6628 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    65c2:	491a      	ldr	r1, [pc, #104]	; (662c <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    65c4:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    65c6:	2200      	movs	r2, #0
    65c8:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    65ca:	b103      	cbz	r3, 65ce <uart2_status_isr+0x6e>
    65cc:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    65ce:	4b10      	ldr	r3, [pc, #64]	; (6610 <uart2_status_isr+0xb0>)
    65d0:	222c      	movs	r2, #44	; 0x2c
    65d2:	70da      	strb	r2, [r3, #3]
	}
}
    65d4:	bc30      	pop	{r4, r5}
    65d6:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    65d8:	7911      	ldrb	r1, [r2, #4]
    65da:	0609      	lsls	r1, r1, #24
    65dc:	d5ea      	bpl.n	65b4 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    65de:	4914      	ldr	r1, [pc, #80]	; (6630 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    65e0:	4810      	ldr	r0, [pc, #64]	; (6624 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    65e2:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    65e4:	7801      	ldrb	r1, [r0, #0]
    65e6:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    65e8:	428c      	cmp	r4, r1
    65ea:	d00d      	beq.n	6608 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    65ec:	1c4a      	adds	r2, r1, #1
    65ee:	2a27      	cmp	r2, #39	; 0x27
    65f0:	bf84      	itt	hi
    65f2:	2100      	movhi	r1, #0
    65f4:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    65f6:	4d0f      	ldr	r5, [pc, #60]	; (6634 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    65f8:	4c05      	ldr	r4, [pc, #20]	; (6610 <uart2_status_isr+0xb0>)
    65fa:	bf98      	it	ls
    65fc:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    65fe:	5caa      	ldrb	r2, [r5, r2]
    6600:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    6602:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    6604:	7001      	strb	r1, [r0, #0]
    6606:	e7d5      	b.n	65b4 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    6608:	216c      	movs	r1, #108	; 0x6c
    660a:	70d1      	strb	r1, [r2, #3]
    660c:	e7d2      	b.n	65b4 <uart2_status_isr+0x54>
    660e:	bf00      	nop
    6610:	4006c000 	.word	0x4006c000
    6614:	1fffa374 	.word	0x1fffa374
    6618:	1fffa375 	.word	0x1fffa375
    661c:	1fffa3a0 	.word	0x1fffa3a0
    6620:	1fffa370 	.word	0x1fffa370
    6624:	1fffa3e1 	.word	0x1fffa3e1
    6628:	1fffa3e4 	.word	0x1fffa3e4
    662c:	1fffa3e0 	.word	0x1fffa3e0
    6630:	1fffa3e8 	.word	0x1fffa3e8
    6634:	1fffa378 	.word	0x1fffa378

00006638 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    6638:	b570      	push	{r4, r5, r6, lr}
    663a:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    663c:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    663e:	4b19      	ldr	r3, [pc, #100]	; (66a4 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    6640:	4d19      	ldr	r5, [pc, #100]	; (66a8 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    6642:	481a      	ldr	r0, [pc, #104]	; (66ac <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6644:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    6646:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    6648:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    664a:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    664c:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    664e:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    6650:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    6652:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    6654:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    6656:	7813      	ldrb	r3, [r2, #0]
    6658:	061b      	lsls	r3, r3, #24
    665a:	d5fc      	bpl.n	6656 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    665c:	4b14      	ldr	r3, [pc, #80]	; (66b0 <usb_init_serialnumber+0x78>)
    665e:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    6660:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6662:	4b14      	ldr	r3, [pc, #80]	; (66b4 <usb_init_serialnumber+0x7c>)
    6664:	4c14      	ldr	r4, [pc, #80]	; (66b8 <usb_init_serialnumber+0x80>)
    6666:	4298      	cmp	r0, r3
    6668:	bf98      	it	ls
    666a:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    666e:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6670:	bf98      	it	ls
    6672:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    6674:	220a      	movs	r2, #10
    6676:	f7ff fea7 	bl	63c8 <ultoa>
    667a:	a901      	add	r1, sp, #4
    667c:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    667e:	2300      	movs	r3, #0
		char c = buf[i];
    6680:	f811 2b01 	ldrb.w	r2, [r1], #1
    6684:	3301      	adds	r3, #1
		if (!c) break;
    6686:	b13a      	cbz	r2, 6698 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    6688:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    668a:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    668e:	d1f7      	bne.n	6680 <usb_init_serialnumber+0x48>
    6690:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6692:	7023      	strb	r3, [r4, #0]
}
    6694:	b004      	add	sp, #16
    6696:	bd70      	pop	{r4, r5, r6, pc}
    6698:	005b      	lsls	r3, r3, #1
    669a:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    669c:	7023      	strb	r3, [r4, #0]
}
    669e:	b004      	add	sp, #16
    66a0:	bd70      	pop	{r4, r5, r6, pc}
    66a2:	bf00      	nop
    66a4:	40020000 	.word	0x40020000
    66a8:	40020007 	.word	0x40020007
    66ac:	40020006 	.word	0x40020006
    66b0:	40020008 	.word	0x40020008
    66b4:	0098967f 	.word	0x0098967f
    66b8:	1fff87d4 	.word	0x1fff87d4

000066bc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    66bc:	4770      	bx	lr
    66be:	bf00      	nop

000066c0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    66c0:	4770      	bx	lr
    66c2:	bf00      	nop

000066c4 <__aeabi_frsub>:
    66c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    66c8:	e002      	b.n	66d0 <__addsf3>
    66ca:	bf00      	nop

000066cc <__aeabi_fsub>:
    66cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000066d0 <__addsf3>:
    66d0:	0042      	lsls	r2, r0, #1
    66d2:	bf1f      	itttt	ne
    66d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    66d8:	ea92 0f03 	teqne	r2, r3
    66dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    66e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    66e4:	d06a      	beq.n	67bc <__addsf3+0xec>
    66e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    66ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    66ee:	bfc1      	itttt	gt
    66f0:	18d2      	addgt	r2, r2, r3
    66f2:	4041      	eorgt	r1, r0
    66f4:	4048      	eorgt	r0, r1
    66f6:	4041      	eorgt	r1, r0
    66f8:	bfb8      	it	lt
    66fa:	425b      	neglt	r3, r3
    66fc:	2b19      	cmp	r3, #25
    66fe:	bf88      	it	hi
    6700:	4770      	bxhi	lr
    6702:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6706:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    670a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    670e:	bf18      	it	ne
    6710:	4240      	negne	r0, r0
    6712:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6716:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    671a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    671e:	bf18      	it	ne
    6720:	4249      	negne	r1, r1
    6722:	ea92 0f03 	teq	r2, r3
    6726:	d03f      	beq.n	67a8 <__addsf3+0xd8>
    6728:	f1a2 0201 	sub.w	r2, r2, #1
    672c:	fa41 fc03 	asr.w	ip, r1, r3
    6730:	eb10 000c 	adds.w	r0, r0, ip
    6734:	f1c3 0320 	rsb	r3, r3, #32
    6738:	fa01 f103 	lsl.w	r1, r1, r3
    673c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6740:	d502      	bpl.n	6748 <__addsf3+0x78>
    6742:	4249      	negs	r1, r1
    6744:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    6748:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    674c:	d313      	bcc.n	6776 <__addsf3+0xa6>
    674e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    6752:	d306      	bcc.n	6762 <__addsf3+0x92>
    6754:	0840      	lsrs	r0, r0, #1
    6756:	ea4f 0131 	mov.w	r1, r1, rrx
    675a:	f102 0201 	add.w	r2, r2, #1
    675e:	2afe      	cmp	r2, #254	; 0xfe
    6760:	d251      	bcs.n	6806 <__addsf3+0x136>
    6762:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6766:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    676a:	bf08      	it	eq
    676c:	f020 0001 	biceq.w	r0, r0, #1
    6770:	ea40 0003 	orr.w	r0, r0, r3
    6774:	4770      	bx	lr
    6776:	0049      	lsls	r1, r1, #1
    6778:	eb40 0000 	adc.w	r0, r0, r0
    677c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    6780:	f1a2 0201 	sub.w	r2, r2, #1
    6784:	d1ed      	bne.n	6762 <__addsf3+0x92>
    6786:	fab0 fc80 	clz	ip, r0
    678a:	f1ac 0c08 	sub.w	ip, ip, #8
    678e:	ebb2 020c 	subs.w	r2, r2, ip
    6792:	fa00 f00c 	lsl.w	r0, r0, ip
    6796:	bfaa      	itet	ge
    6798:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    679c:	4252      	neglt	r2, r2
    679e:	4318      	orrge	r0, r3
    67a0:	bfbc      	itt	lt
    67a2:	40d0      	lsrlt	r0, r2
    67a4:	4318      	orrlt	r0, r3
    67a6:	4770      	bx	lr
    67a8:	f092 0f00 	teq	r2, #0
    67ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    67b0:	bf06      	itte	eq
    67b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    67b6:	3201      	addeq	r2, #1
    67b8:	3b01      	subne	r3, #1
    67ba:	e7b5      	b.n	6728 <__addsf3+0x58>
    67bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    67c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    67c4:	bf18      	it	ne
    67c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    67ca:	d021      	beq.n	6810 <__addsf3+0x140>
    67cc:	ea92 0f03 	teq	r2, r3
    67d0:	d004      	beq.n	67dc <__addsf3+0x10c>
    67d2:	f092 0f00 	teq	r2, #0
    67d6:	bf08      	it	eq
    67d8:	4608      	moveq	r0, r1
    67da:	4770      	bx	lr
    67dc:	ea90 0f01 	teq	r0, r1
    67e0:	bf1c      	itt	ne
    67e2:	2000      	movne	r0, #0
    67e4:	4770      	bxne	lr
    67e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    67ea:	d104      	bne.n	67f6 <__addsf3+0x126>
    67ec:	0040      	lsls	r0, r0, #1
    67ee:	bf28      	it	cs
    67f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    67f4:	4770      	bx	lr
    67f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    67fa:	bf3c      	itt	cc
    67fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6800:	4770      	bxcc	lr
    6802:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6806:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    680a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    680e:	4770      	bx	lr
    6810:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6814:	bf16      	itet	ne
    6816:	4608      	movne	r0, r1
    6818:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    681c:	4601      	movne	r1, r0
    681e:	0242      	lsls	r2, r0, #9
    6820:	bf06      	itte	eq
    6822:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6826:	ea90 0f01 	teqeq	r0, r1
    682a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    682e:	4770      	bx	lr

00006830 <__aeabi_ui2f>:
    6830:	f04f 0300 	mov.w	r3, #0
    6834:	e004      	b.n	6840 <__aeabi_i2f+0x8>
    6836:	bf00      	nop

00006838 <__aeabi_i2f>:
    6838:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    683c:	bf48      	it	mi
    683e:	4240      	negmi	r0, r0
    6840:	ea5f 0c00 	movs.w	ip, r0
    6844:	bf08      	it	eq
    6846:	4770      	bxeq	lr
    6848:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    684c:	4601      	mov	r1, r0
    684e:	f04f 0000 	mov.w	r0, #0
    6852:	e01c      	b.n	688e <__aeabi_l2f+0x2a>

00006854 <__aeabi_ul2f>:
    6854:	ea50 0201 	orrs.w	r2, r0, r1
    6858:	bf08      	it	eq
    685a:	4770      	bxeq	lr
    685c:	f04f 0300 	mov.w	r3, #0
    6860:	e00a      	b.n	6878 <__aeabi_l2f+0x14>
    6862:	bf00      	nop

00006864 <__aeabi_l2f>:
    6864:	ea50 0201 	orrs.w	r2, r0, r1
    6868:	bf08      	it	eq
    686a:	4770      	bxeq	lr
    686c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6870:	d502      	bpl.n	6878 <__aeabi_l2f+0x14>
    6872:	4240      	negs	r0, r0
    6874:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6878:	ea5f 0c01 	movs.w	ip, r1
    687c:	bf02      	ittt	eq
    687e:	4684      	moveq	ip, r0
    6880:	4601      	moveq	r1, r0
    6882:	2000      	moveq	r0, #0
    6884:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6888:	bf08      	it	eq
    688a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    688e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6892:	fabc f28c 	clz	r2, ip
    6896:	3a08      	subs	r2, #8
    6898:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    689c:	db10      	blt.n	68c0 <__aeabi_l2f+0x5c>
    689e:	fa01 fc02 	lsl.w	ip, r1, r2
    68a2:	4463      	add	r3, ip
    68a4:	fa00 fc02 	lsl.w	ip, r0, r2
    68a8:	f1c2 0220 	rsb	r2, r2, #32
    68ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    68b0:	fa20 f202 	lsr.w	r2, r0, r2
    68b4:	eb43 0002 	adc.w	r0, r3, r2
    68b8:	bf08      	it	eq
    68ba:	f020 0001 	biceq.w	r0, r0, #1
    68be:	4770      	bx	lr
    68c0:	f102 0220 	add.w	r2, r2, #32
    68c4:	fa01 fc02 	lsl.w	ip, r1, r2
    68c8:	f1c2 0220 	rsb	r2, r2, #32
    68cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    68d0:	fa21 f202 	lsr.w	r2, r1, r2
    68d4:	eb43 0002 	adc.w	r0, r3, r2
    68d8:	bf08      	it	eq
    68da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    68de:	4770      	bx	lr

000068e0 <__aeabi_fmul>:
    68e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    68e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    68e8:	bf1e      	ittt	ne
    68ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    68ee:	ea92 0f0c 	teqne	r2, ip
    68f2:	ea93 0f0c 	teqne	r3, ip
    68f6:	d06f      	beq.n	69d8 <__aeabi_fmul+0xf8>
    68f8:	441a      	add	r2, r3
    68fa:	ea80 0c01 	eor.w	ip, r0, r1
    68fe:	0240      	lsls	r0, r0, #9
    6900:	bf18      	it	ne
    6902:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    6906:	d01e      	beq.n	6946 <__aeabi_fmul+0x66>
    6908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    690c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    6910:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    6914:	fba0 3101 	umull	r3, r1, r0, r1
    6918:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    691c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6920:	bf3e      	ittt	cc
    6922:	0049      	lslcc	r1, r1, #1
    6924:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    6928:	005b      	lslcc	r3, r3, #1
    692a:	ea40 0001 	orr.w	r0, r0, r1
    692e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    6932:	2afd      	cmp	r2, #253	; 0xfd
    6934:	d81d      	bhi.n	6972 <__aeabi_fmul+0x92>
    6936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    693a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    693e:	bf08      	it	eq
    6940:	f020 0001 	biceq.w	r0, r0, #1
    6944:	4770      	bx	lr
    6946:	f090 0f00 	teq	r0, #0
    694a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    694e:	bf08      	it	eq
    6950:	0249      	lsleq	r1, r1, #9
    6952:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    6956:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    695a:	3a7f      	subs	r2, #127	; 0x7f
    695c:	bfc2      	ittt	gt
    695e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    6962:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6966:	4770      	bxgt	lr
    6968:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    696c:	f04f 0300 	mov.w	r3, #0
    6970:	3a01      	subs	r2, #1
    6972:	dc5d      	bgt.n	6a30 <__aeabi_fmul+0x150>
    6974:	f112 0f19 	cmn.w	r2, #25
    6978:	bfdc      	itt	le
    697a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    697e:	4770      	bxle	lr
    6980:	f1c2 0200 	rsb	r2, r2, #0
    6984:	0041      	lsls	r1, r0, #1
    6986:	fa21 f102 	lsr.w	r1, r1, r2
    698a:	f1c2 0220 	rsb	r2, r2, #32
    698e:	fa00 fc02 	lsl.w	ip, r0, r2
    6992:	ea5f 0031 	movs.w	r0, r1, rrx
    6996:	f140 0000 	adc.w	r0, r0, #0
    699a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    699e:	bf08      	it	eq
    69a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    69a4:	4770      	bx	lr
    69a6:	f092 0f00 	teq	r2, #0
    69aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    69ae:	bf02      	ittt	eq
    69b0:	0040      	lsleq	r0, r0, #1
    69b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    69b6:	3a01      	subeq	r2, #1
    69b8:	d0f9      	beq.n	69ae <__aeabi_fmul+0xce>
    69ba:	ea40 000c 	orr.w	r0, r0, ip
    69be:	f093 0f00 	teq	r3, #0
    69c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    69c6:	bf02      	ittt	eq
    69c8:	0049      	lsleq	r1, r1, #1
    69ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    69ce:	3b01      	subeq	r3, #1
    69d0:	d0f9      	beq.n	69c6 <__aeabi_fmul+0xe6>
    69d2:	ea41 010c 	orr.w	r1, r1, ip
    69d6:	e78f      	b.n	68f8 <__aeabi_fmul+0x18>
    69d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    69dc:	ea92 0f0c 	teq	r2, ip
    69e0:	bf18      	it	ne
    69e2:	ea93 0f0c 	teqne	r3, ip
    69e6:	d00a      	beq.n	69fe <__aeabi_fmul+0x11e>
    69e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    69ec:	bf18      	it	ne
    69ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    69f2:	d1d8      	bne.n	69a6 <__aeabi_fmul+0xc6>
    69f4:	ea80 0001 	eor.w	r0, r0, r1
    69f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    69fc:	4770      	bx	lr
    69fe:	f090 0f00 	teq	r0, #0
    6a02:	bf17      	itett	ne
    6a04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    6a08:	4608      	moveq	r0, r1
    6a0a:	f091 0f00 	teqne	r1, #0
    6a0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    6a12:	d014      	beq.n	6a3e <__aeabi_fmul+0x15e>
    6a14:	ea92 0f0c 	teq	r2, ip
    6a18:	d101      	bne.n	6a1e <__aeabi_fmul+0x13e>
    6a1a:	0242      	lsls	r2, r0, #9
    6a1c:	d10f      	bne.n	6a3e <__aeabi_fmul+0x15e>
    6a1e:	ea93 0f0c 	teq	r3, ip
    6a22:	d103      	bne.n	6a2c <__aeabi_fmul+0x14c>
    6a24:	024b      	lsls	r3, r1, #9
    6a26:	bf18      	it	ne
    6a28:	4608      	movne	r0, r1
    6a2a:	d108      	bne.n	6a3e <__aeabi_fmul+0x15e>
    6a2c:	ea80 0001 	eor.w	r0, r0, r1
    6a30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6a34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6a38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6a3c:	4770      	bx	lr
    6a3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6a42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    6a46:	4770      	bx	lr

00006a48 <__aeabi_fdiv>:
    6a48:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6a4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    6a50:	bf1e      	ittt	ne
    6a52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    6a56:	ea92 0f0c 	teqne	r2, ip
    6a5a:	ea93 0f0c 	teqne	r3, ip
    6a5e:	d069      	beq.n	6b34 <__aeabi_fdiv+0xec>
    6a60:	eba2 0203 	sub.w	r2, r2, r3
    6a64:	ea80 0c01 	eor.w	ip, r0, r1
    6a68:	0249      	lsls	r1, r1, #9
    6a6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    6a6e:	d037      	beq.n	6ae0 <__aeabi_fdiv+0x98>
    6a70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    6a78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    6a7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    6a80:	428b      	cmp	r3, r1
    6a82:	bf38      	it	cc
    6a84:	005b      	lslcc	r3, r3, #1
    6a86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    6a8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    6a8e:	428b      	cmp	r3, r1
    6a90:	bf24      	itt	cs
    6a92:	1a5b      	subcs	r3, r3, r1
    6a94:	ea40 000c 	orrcs.w	r0, r0, ip
    6a98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    6a9c:	bf24      	itt	cs
    6a9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    6aa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6aa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    6aaa:	bf24      	itt	cs
    6aac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    6ab0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    6ab4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    6ab8:	bf24      	itt	cs
    6aba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    6abe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6ac2:	011b      	lsls	r3, r3, #4
    6ac4:	bf18      	it	ne
    6ac6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    6aca:	d1e0      	bne.n	6a8e <__aeabi_fdiv+0x46>
    6acc:	2afd      	cmp	r2, #253	; 0xfd
    6ace:	f63f af50 	bhi.w	6972 <__aeabi_fmul+0x92>
    6ad2:	428b      	cmp	r3, r1
    6ad4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6ad8:	bf08      	it	eq
    6ada:	f020 0001 	biceq.w	r0, r0, #1
    6ade:	4770      	bx	lr
    6ae0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    6ae4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    6ae8:	327f      	adds	r2, #127	; 0x7f
    6aea:	bfc2      	ittt	gt
    6aec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    6af0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6af4:	4770      	bxgt	lr
    6af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6afa:	f04f 0300 	mov.w	r3, #0
    6afe:	3a01      	subs	r2, #1
    6b00:	e737      	b.n	6972 <__aeabi_fmul+0x92>
    6b02:	f092 0f00 	teq	r2, #0
    6b06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    6b0a:	bf02      	ittt	eq
    6b0c:	0040      	lsleq	r0, r0, #1
    6b0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    6b12:	3a01      	subeq	r2, #1
    6b14:	d0f9      	beq.n	6b0a <__aeabi_fdiv+0xc2>
    6b16:	ea40 000c 	orr.w	r0, r0, ip
    6b1a:	f093 0f00 	teq	r3, #0
    6b1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6b22:	bf02      	ittt	eq
    6b24:	0049      	lsleq	r1, r1, #1
    6b26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    6b2a:	3b01      	subeq	r3, #1
    6b2c:	d0f9      	beq.n	6b22 <__aeabi_fdiv+0xda>
    6b2e:	ea41 010c 	orr.w	r1, r1, ip
    6b32:	e795      	b.n	6a60 <__aeabi_fdiv+0x18>
    6b34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6b38:	ea92 0f0c 	teq	r2, ip
    6b3c:	d108      	bne.n	6b50 <__aeabi_fdiv+0x108>
    6b3e:	0242      	lsls	r2, r0, #9
    6b40:	f47f af7d 	bne.w	6a3e <__aeabi_fmul+0x15e>
    6b44:	ea93 0f0c 	teq	r3, ip
    6b48:	f47f af70 	bne.w	6a2c <__aeabi_fmul+0x14c>
    6b4c:	4608      	mov	r0, r1
    6b4e:	e776      	b.n	6a3e <__aeabi_fmul+0x15e>
    6b50:	ea93 0f0c 	teq	r3, ip
    6b54:	d104      	bne.n	6b60 <__aeabi_fdiv+0x118>
    6b56:	024b      	lsls	r3, r1, #9
    6b58:	f43f af4c 	beq.w	69f4 <__aeabi_fmul+0x114>
    6b5c:	4608      	mov	r0, r1
    6b5e:	e76e      	b.n	6a3e <__aeabi_fmul+0x15e>
    6b60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6b64:	bf18      	it	ne
    6b66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    6b6a:	d1ca      	bne.n	6b02 <__aeabi_fdiv+0xba>
    6b6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    6b70:	f47f af5c 	bne.w	6a2c <__aeabi_fmul+0x14c>
    6b74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    6b78:	f47f af3c 	bne.w	69f4 <__aeabi_fmul+0x114>
    6b7c:	e75f      	b.n	6a3e <__aeabi_fmul+0x15e>
    6b7e:	bf00      	nop

00006b80 <__gesf2>:
    6b80:	f04f 3cff 	mov.w	ip, #4294967295
    6b84:	e006      	b.n	6b94 <__cmpsf2+0x4>
    6b86:	bf00      	nop

00006b88 <__lesf2>:
    6b88:	f04f 0c01 	mov.w	ip, #1
    6b8c:	e002      	b.n	6b94 <__cmpsf2+0x4>
    6b8e:	bf00      	nop

00006b90 <__cmpsf2>:
    6b90:	f04f 0c01 	mov.w	ip, #1
    6b94:	f84d cd04 	str.w	ip, [sp, #-4]!
    6b98:	ea4f 0240 	mov.w	r2, r0, lsl #1
    6b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6ba4:	bf18      	it	ne
    6ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6baa:	d011      	beq.n	6bd0 <__cmpsf2+0x40>
    6bac:	b001      	add	sp, #4
    6bae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    6bb2:	bf18      	it	ne
    6bb4:	ea90 0f01 	teqne	r0, r1
    6bb8:	bf58      	it	pl
    6bba:	ebb2 0003 	subspl.w	r0, r2, r3
    6bbe:	bf88      	it	hi
    6bc0:	17c8      	asrhi	r0, r1, #31
    6bc2:	bf38      	it	cc
    6bc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    6bc8:	bf18      	it	ne
    6bca:	f040 0001 	orrne.w	r0, r0, #1
    6bce:	4770      	bx	lr
    6bd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6bd4:	d102      	bne.n	6bdc <__cmpsf2+0x4c>
    6bd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    6bda:	d105      	bne.n	6be8 <__cmpsf2+0x58>
    6bdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    6be0:	d1e4      	bne.n	6bac <__cmpsf2+0x1c>
    6be2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    6be6:	d0e1      	beq.n	6bac <__cmpsf2+0x1c>
    6be8:	f85d 0b04 	ldr.w	r0, [sp], #4
    6bec:	4770      	bx	lr
    6bee:	bf00      	nop

00006bf0 <__aeabi_cfrcmple>:
    6bf0:	4684      	mov	ip, r0
    6bf2:	4608      	mov	r0, r1
    6bf4:	4661      	mov	r1, ip
    6bf6:	e7ff      	b.n	6bf8 <__aeabi_cfcmpeq>

00006bf8 <__aeabi_cfcmpeq>:
    6bf8:	b50f      	push	{r0, r1, r2, r3, lr}
    6bfa:	f7ff ffc9 	bl	6b90 <__cmpsf2>
    6bfe:	2800      	cmp	r0, #0
    6c00:	bf48      	it	mi
    6c02:	f110 0f00 	cmnmi.w	r0, #0
    6c06:	bd0f      	pop	{r0, r1, r2, r3, pc}

00006c08 <__aeabi_fcmpeq>:
    6c08:	f84d ed08 	str.w	lr, [sp, #-8]!
    6c0c:	f7ff fff4 	bl	6bf8 <__aeabi_cfcmpeq>
    6c10:	bf0c      	ite	eq
    6c12:	2001      	moveq	r0, #1
    6c14:	2000      	movne	r0, #0
    6c16:	f85d fb08 	ldr.w	pc, [sp], #8
    6c1a:	bf00      	nop

00006c1c <__aeabi_fcmplt>:
    6c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6c20:	f7ff ffea 	bl	6bf8 <__aeabi_cfcmpeq>
    6c24:	bf34      	ite	cc
    6c26:	2001      	movcc	r0, #1
    6c28:	2000      	movcs	r0, #0
    6c2a:	f85d fb08 	ldr.w	pc, [sp], #8
    6c2e:	bf00      	nop

00006c30 <__aeabi_fcmple>:
    6c30:	f84d ed08 	str.w	lr, [sp, #-8]!
    6c34:	f7ff ffe0 	bl	6bf8 <__aeabi_cfcmpeq>
    6c38:	bf94      	ite	ls
    6c3a:	2001      	movls	r0, #1
    6c3c:	2000      	movhi	r0, #0
    6c3e:	f85d fb08 	ldr.w	pc, [sp], #8
    6c42:	bf00      	nop

00006c44 <__aeabi_fcmpge>:
    6c44:	f84d ed08 	str.w	lr, [sp, #-8]!
    6c48:	f7ff ffd2 	bl	6bf0 <__aeabi_cfrcmple>
    6c4c:	bf94      	ite	ls
    6c4e:	2001      	movls	r0, #1
    6c50:	2000      	movhi	r0, #0
    6c52:	f85d fb08 	ldr.w	pc, [sp], #8
    6c56:	bf00      	nop

00006c58 <__aeabi_fcmpgt>:
    6c58:	f84d ed08 	str.w	lr, [sp, #-8]!
    6c5c:	f7ff ffc8 	bl	6bf0 <__aeabi_cfrcmple>
    6c60:	bf34      	ite	cc
    6c62:	2001      	movcc	r0, #1
    6c64:	2000      	movcs	r0, #0
    6c66:	f85d fb08 	ldr.w	pc, [sp], #8
    6c6a:	bf00      	nop

00006c6c <__aeabi_f2iz>:
    6c6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    6c70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    6c74:	d30f      	bcc.n	6c96 <__aeabi_f2iz+0x2a>
    6c76:	f04f 039e 	mov.w	r3, #158	; 0x9e
    6c7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    6c7e:	d90d      	bls.n	6c9c <__aeabi_f2iz+0x30>
    6c80:	ea4f 2300 	mov.w	r3, r0, lsl #8
    6c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6c88:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6c8c:	fa23 f002 	lsr.w	r0, r3, r2
    6c90:	bf18      	it	ne
    6c92:	4240      	negne	r0, r0
    6c94:	4770      	bx	lr
    6c96:	f04f 0000 	mov.w	r0, #0
    6c9a:	4770      	bx	lr
    6c9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    6ca0:	d101      	bne.n	6ca6 <__aeabi_f2iz+0x3a>
    6ca2:	0242      	lsls	r2, r0, #9
    6ca4:	d105      	bne.n	6cb2 <__aeabi_f2iz+0x46>
    6ca6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    6caa:	bf08      	it	eq
    6cac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    6cb0:	4770      	bx	lr
    6cb2:	f04f 0000 	mov.w	r0, #0
    6cb6:	4770      	bx	lr

00006cb8 <__aeabi_f2uiz>:
    6cb8:	0042      	lsls	r2, r0, #1
    6cba:	d20e      	bcs.n	6cda <__aeabi_f2uiz+0x22>
    6cbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    6cc0:	d30b      	bcc.n	6cda <__aeabi_f2uiz+0x22>
    6cc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
    6cc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    6cca:	d409      	bmi.n	6ce0 <__aeabi_f2uiz+0x28>
    6ccc:	ea4f 2300 	mov.w	r3, r0, lsl #8
    6cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6cd4:	fa23 f002 	lsr.w	r0, r3, r2
    6cd8:	4770      	bx	lr
    6cda:	f04f 0000 	mov.w	r0, #0
    6cde:	4770      	bx	lr
    6ce0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    6ce4:	d101      	bne.n	6cea <__aeabi_f2uiz+0x32>
    6ce6:	0242      	lsls	r2, r0, #9
    6ce8:	d102      	bne.n	6cf0 <__aeabi_f2uiz+0x38>
    6cea:	f04f 30ff 	mov.w	r0, #4294967295
    6cee:	4770      	bx	lr
    6cf0:	f04f 0000 	mov.w	r0, #0
    6cf4:	4770      	bx	lr
    6cf6:	bf00      	nop

00006cf8 <__aeabi_atexit>:
    6cf8:	460b      	mov	r3, r1
    6cfa:	4601      	mov	r1, r0
    6cfc:	4618      	mov	r0, r3
    6cfe:	f000 b805 	b.w	6d0c <__cxa_atexit>
    6d02:	bf00      	nop

00006d04 <atol>:
    6d04:	220a      	movs	r2, #10
    6d06:	2100      	movs	r1, #0
    6d08:	f001 b8f8 	b.w	7efc <strtol>

00006d0c <__cxa_atexit>:
    6d0c:	4613      	mov	r3, r2
    6d0e:	460a      	mov	r2, r1
    6d10:	4601      	mov	r1, r0
    6d12:	2002      	movs	r0, #2
    6d14:	f001 b916 	b.w	7f44 <__register_exitproc>

00006d18 <__errno>:
    6d18:	4b01      	ldr	r3, [pc, #4]	; (6d20 <__errno+0x8>)
    6d1a:	6818      	ldr	r0, [r3, #0]
    6d1c:	4770      	bx	lr
    6d1e:	bf00      	nop
    6d20:	1fff8c18 	.word	0x1fff8c18

00006d24 <__libc_init_array>:
    6d24:	b570      	push	{r4, r5, r6, lr}
    6d26:	4e0f      	ldr	r6, [pc, #60]	; (6d64 <__libc_init_array+0x40>)
    6d28:	4d0f      	ldr	r5, [pc, #60]	; (6d68 <__libc_init_array+0x44>)
    6d2a:	1b76      	subs	r6, r6, r5
    6d2c:	10b6      	asrs	r6, r6, #2
    6d2e:	bf18      	it	ne
    6d30:	2400      	movne	r4, #0
    6d32:	d005      	beq.n	6d40 <__libc_init_array+0x1c>
    6d34:	3401      	adds	r4, #1
    6d36:	f855 3b04 	ldr.w	r3, [r5], #4
    6d3a:	4798      	blx	r3
    6d3c:	42a6      	cmp	r6, r4
    6d3e:	d1f9      	bne.n	6d34 <__libc_init_array+0x10>
    6d40:	4e0a      	ldr	r6, [pc, #40]	; (6d6c <__libc_init_array+0x48>)
    6d42:	4d0b      	ldr	r5, [pc, #44]	; (6d70 <__libc_init_array+0x4c>)
    6d44:	1b76      	subs	r6, r6, r5
    6d46:	f001 fe71 	bl	8a2c <_init>
    6d4a:	10b6      	asrs	r6, r6, #2
    6d4c:	bf18      	it	ne
    6d4e:	2400      	movne	r4, #0
    6d50:	d006      	beq.n	6d60 <__libc_init_array+0x3c>
    6d52:	3401      	adds	r4, #1
    6d54:	f855 3b04 	ldr.w	r3, [r5], #4
    6d58:	4798      	blx	r3
    6d5a:	42a6      	cmp	r6, r4
    6d5c:	d1f9      	bne.n	6d52 <__libc_init_array+0x2e>
    6d5e:	bd70      	pop	{r4, r5, r6, pc}
    6d60:	bd70      	pop	{r4, r5, r6, pc}
    6d62:	bf00      	nop
    6d64:	00008a38 	.word	0x00008a38
    6d68:	00008a38 	.word	0x00008a38
    6d6c:	00008a58 	.word	0x00008a58
    6d70:	00008a38 	.word	0x00008a38

00006d74 <__locale_ctype_ptr_l>:
    6d74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    6d78:	4770      	bx	lr
    6d7a:	bf00      	nop

00006d7c <malloc>:
    6d7c:	4b02      	ldr	r3, [pc, #8]	; (6d88 <malloc+0xc>)
    6d7e:	4601      	mov	r1, r0
    6d80:	6818      	ldr	r0, [r3, #0]
    6d82:	f000 b80b 	b.w	6d9c <_malloc_r>
    6d86:	bf00      	nop
    6d88:	1fff8c18 	.word	0x1fff8c18

00006d8c <free>:
    6d8c:	4b02      	ldr	r3, [pc, #8]	; (6d98 <free+0xc>)
    6d8e:	4601      	mov	r1, r0
    6d90:	6818      	ldr	r0, [r3, #0]
    6d92:	f001 b995 	b.w	80c0 <_free_r>
    6d96:	bf00      	nop
    6d98:	1fff8c18 	.word	0x1fff8c18

00006d9c <_malloc_r>:
    6d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6da0:	f101 050b 	add.w	r5, r1, #11
    6da4:	2d16      	cmp	r5, #22
    6da6:	b083      	sub	sp, #12
    6da8:	4606      	mov	r6, r0
    6daa:	f240 809f 	bls.w	6eec <_malloc_r+0x150>
    6dae:	f035 0507 	bics.w	r5, r5, #7
    6db2:	f100 80bf 	bmi.w	6f34 <_malloc_r+0x198>
    6db6:	42a9      	cmp	r1, r5
    6db8:	f200 80bc 	bhi.w	6f34 <_malloc_r+0x198>
    6dbc:	f000 fb6e 	bl	749c <__malloc_lock>
    6dc0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    6dc4:	f0c0 829c 	bcc.w	7300 <_malloc_r+0x564>
    6dc8:	0a6b      	lsrs	r3, r5, #9
    6dca:	f000 80ba 	beq.w	6f42 <_malloc_r+0x1a6>
    6dce:	2b04      	cmp	r3, #4
    6dd0:	f200 8183 	bhi.w	70da <_malloc_r+0x33e>
    6dd4:	09a8      	lsrs	r0, r5, #6
    6dd6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    6dda:	ea4f 034e 	mov.w	r3, lr, lsl #1
    6dde:	3038      	adds	r0, #56	; 0x38
    6de0:	4fc4      	ldr	r7, [pc, #784]	; (70f4 <_malloc_r+0x358>)
    6de2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6de6:	f1a3 0108 	sub.w	r1, r3, #8
    6dea:	685c      	ldr	r4, [r3, #4]
    6dec:	42a1      	cmp	r1, r4
    6dee:	d107      	bne.n	6e00 <_malloc_r+0x64>
    6df0:	e0ac      	b.n	6f4c <_malloc_r+0x1b0>
    6df2:	2a00      	cmp	r2, #0
    6df4:	f280 80ac 	bge.w	6f50 <_malloc_r+0x1b4>
    6df8:	68e4      	ldr	r4, [r4, #12]
    6dfa:	42a1      	cmp	r1, r4
    6dfc:	f000 80a6 	beq.w	6f4c <_malloc_r+0x1b0>
    6e00:	6863      	ldr	r3, [r4, #4]
    6e02:	f023 0303 	bic.w	r3, r3, #3
    6e06:	1b5a      	subs	r2, r3, r5
    6e08:	2a0f      	cmp	r2, #15
    6e0a:	ddf2      	ble.n	6df2 <_malloc_r+0x56>
    6e0c:	49b9      	ldr	r1, [pc, #740]	; (70f4 <_malloc_r+0x358>)
    6e0e:	693c      	ldr	r4, [r7, #16]
    6e10:	f101 0e08 	add.w	lr, r1, #8
    6e14:	4574      	cmp	r4, lr
    6e16:	f000 81b3 	beq.w	7180 <_malloc_r+0x3e4>
    6e1a:	6863      	ldr	r3, [r4, #4]
    6e1c:	f023 0303 	bic.w	r3, r3, #3
    6e20:	1b5a      	subs	r2, r3, r5
    6e22:	2a0f      	cmp	r2, #15
    6e24:	f300 8199 	bgt.w	715a <_malloc_r+0x3be>
    6e28:	2a00      	cmp	r2, #0
    6e2a:	f8c1 e014 	str.w	lr, [r1, #20]
    6e2e:	f8c1 e010 	str.w	lr, [r1, #16]
    6e32:	f280 809e 	bge.w	6f72 <_malloc_r+0x1d6>
    6e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6e3a:	f080 8167 	bcs.w	710c <_malloc_r+0x370>
    6e3e:	08db      	lsrs	r3, r3, #3
    6e40:	f103 0c01 	add.w	ip, r3, #1
    6e44:	2201      	movs	r2, #1
    6e46:	109b      	asrs	r3, r3, #2
    6e48:	fa02 f303 	lsl.w	r3, r2, r3
    6e4c:	684a      	ldr	r2, [r1, #4]
    6e4e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    6e52:	f8c4 8008 	str.w	r8, [r4, #8]
    6e56:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    6e5a:	431a      	orrs	r2, r3
    6e5c:	f1a9 0308 	sub.w	r3, r9, #8
    6e60:	60e3      	str	r3, [r4, #12]
    6e62:	604a      	str	r2, [r1, #4]
    6e64:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    6e68:	f8c8 400c 	str.w	r4, [r8, #12]
    6e6c:	1083      	asrs	r3, r0, #2
    6e6e:	2401      	movs	r4, #1
    6e70:	409c      	lsls	r4, r3
    6e72:	4294      	cmp	r4, r2
    6e74:	f200 808a 	bhi.w	6f8c <_malloc_r+0x1f0>
    6e78:	4214      	tst	r4, r2
    6e7a:	d106      	bne.n	6e8a <_malloc_r+0xee>
    6e7c:	f020 0003 	bic.w	r0, r0, #3
    6e80:	0064      	lsls	r4, r4, #1
    6e82:	4214      	tst	r4, r2
    6e84:	f100 0004 	add.w	r0, r0, #4
    6e88:	d0fa      	beq.n	6e80 <_malloc_r+0xe4>
    6e8a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    6e8e:	46cc      	mov	ip, r9
    6e90:	4680      	mov	r8, r0
    6e92:	f8dc 100c 	ldr.w	r1, [ip, #12]
    6e96:	458c      	cmp	ip, r1
    6e98:	d107      	bne.n	6eaa <_malloc_r+0x10e>
    6e9a:	e173      	b.n	7184 <_malloc_r+0x3e8>
    6e9c:	2a00      	cmp	r2, #0
    6e9e:	f280 8181 	bge.w	71a4 <_malloc_r+0x408>
    6ea2:	68c9      	ldr	r1, [r1, #12]
    6ea4:	458c      	cmp	ip, r1
    6ea6:	f000 816d 	beq.w	7184 <_malloc_r+0x3e8>
    6eaa:	684b      	ldr	r3, [r1, #4]
    6eac:	f023 0303 	bic.w	r3, r3, #3
    6eb0:	1b5a      	subs	r2, r3, r5
    6eb2:	2a0f      	cmp	r2, #15
    6eb4:	ddf2      	ble.n	6e9c <_malloc_r+0x100>
    6eb6:	460c      	mov	r4, r1
    6eb8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    6ebc:	f854 8f08 	ldr.w	r8, [r4, #8]!
    6ec0:	194b      	adds	r3, r1, r5
    6ec2:	f045 0501 	orr.w	r5, r5, #1
    6ec6:	604d      	str	r5, [r1, #4]
    6ec8:	f042 0101 	orr.w	r1, r2, #1
    6ecc:	f8c8 c00c 	str.w	ip, [r8, #12]
    6ed0:	4630      	mov	r0, r6
    6ed2:	f8cc 8008 	str.w	r8, [ip, #8]
    6ed6:	617b      	str	r3, [r7, #20]
    6ed8:	613b      	str	r3, [r7, #16]
    6eda:	f8c3 e00c 	str.w	lr, [r3, #12]
    6ede:	f8c3 e008 	str.w	lr, [r3, #8]
    6ee2:	6059      	str	r1, [r3, #4]
    6ee4:	509a      	str	r2, [r3, r2]
    6ee6:	f000 fadb 	bl	74a0 <__malloc_unlock>
    6eea:	e01f      	b.n	6f2c <_malloc_r+0x190>
    6eec:	2910      	cmp	r1, #16
    6eee:	d821      	bhi.n	6f34 <_malloc_r+0x198>
    6ef0:	f000 fad4 	bl	749c <__malloc_lock>
    6ef4:	2510      	movs	r5, #16
    6ef6:	2306      	movs	r3, #6
    6ef8:	2002      	movs	r0, #2
    6efa:	4f7e      	ldr	r7, [pc, #504]	; (70f4 <_malloc_r+0x358>)
    6efc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6f00:	f1a3 0208 	sub.w	r2, r3, #8
    6f04:	685c      	ldr	r4, [r3, #4]
    6f06:	4294      	cmp	r4, r2
    6f08:	f000 8145 	beq.w	7196 <_malloc_r+0x3fa>
    6f0c:	6863      	ldr	r3, [r4, #4]
    6f0e:	68e1      	ldr	r1, [r4, #12]
    6f10:	68a5      	ldr	r5, [r4, #8]
    6f12:	f023 0303 	bic.w	r3, r3, #3
    6f16:	4423      	add	r3, r4
    6f18:	4630      	mov	r0, r6
    6f1a:	685a      	ldr	r2, [r3, #4]
    6f1c:	60e9      	str	r1, [r5, #12]
    6f1e:	f042 0201 	orr.w	r2, r2, #1
    6f22:	608d      	str	r5, [r1, #8]
    6f24:	605a      	str	r2, [r3, #4]
    6f26:	f000 fabb 	bl	74a0 <__malloc_unlock>
    6f2a:	3408      	adds	r4, #8
    6f2c:	4620      	mov	r0, r4
    6f2e:	b003      	add	sp, #12
    6f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f34:	2400      	movs	r4, #0
    6f36:	230c      	movs	r3, #12
    6f38:	4620      	mov	r0, r4
    6f3a:	6033      	str	r3, [r6, #0]
    6f3c:	b003      	add	sp, #12
    6f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f42:	2380      	movs	r3, #128	; 0x80
    6f44:	f04f 0e40 	mov.w	lr, #64	; 0x40
    6f48:	203f      	movs	r0, #63	; 0x3f
    6f4a:	e749      	b.n	6de0 <_malloc_r+0x44>
    6f4c:	4670      	mov	r0, lr
    6f4e:	e75d      	b.n	6e0c <_malloc_r+0x70>
    6f50:	4423      	add	r3, r4
    6f52:	68e1      	ldr	r1, [r4, #12]
    6f54:	685a      	ldr	r2, [r3, #4]
    6f56:	68a5      	ldr	r5, [r4, #8]
    6f58:	f042 0201 	orr.w	r2, r2, #1
    6f5c:	60e9      	str	r1, [r5, #12]
    6f5e:	4630      	mov	r0, r6
    6f60:	608d      	str	r5, [r1, #8]
    6f62:	605a      	str	r2, [r3, #4]
    6f64:	f000 fa9c 	bl	74a0 <__malloc_unlock>
    6f68:	3408      	adds	r4, #8
    6f6a:	4620      	mov	r0, r4
    6f6c:	b003      	add	sp, #12
    6f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f72:	4423      	add	r3, r4
    6f74:	4630      	mov	r0, r6
    6f76:	685a      	ldr	r2, [r3, #4]
    6f78:	f042 0201 	orr.w	r2, r2, #1
    6f7c:	605a      	str	r2, [r3, #4]
    6f7e:	f000 fa8f 	bl	74a0 <__malloc_unlock>
    6f82:	3408      	adds	r4, #8
    6f84:	4620      	mov	r0, r4
    6f86:	b003      	add	sp, #12
    6f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f8c:	68bc      	ldr	r4, [r7, #8]
    6f8e:	6863      	ldr	r3, [r4, #4]
    6f90:	f023 0803 	bic.w	r8, r3, #3
    6f94:	45a8      	cmp	r8, r5
    6f96:	d304      	bcc.n	6fa2 <_malloc_r+0x206>
    6f98:	ebc5 0308 	rsb	r3, r5, r8
    6f9c:	2b0f      	cmp	r3, #15
    6f9e:	f300 808c 	bgt.w	70ba <_malloc_r+0x31e>
    6fa2:	4b55      	ldr	r3, [pc, #340]	; (70f8 <_malloc_r+0x35c>)
    6fa4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7108 <_malloc_r+0x36c>
    6fa8:	681a      	ldr	r2, [r3, #0]
    6faa:	f8d9 3000 	ldr.w	r3, [r9]
    6fae:	3301      	adds	r3, #1
    6fb0:	442a      	add	r2, r5
    6fb2:	eb04 0a08 	add.w	sl, r4, r8
    6fb6:	f000 8160 	beq.w	727a <_malloc_r+0x4de>
    6fba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6fbe:	320f      	adds	r2, #15
    6fc0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    6fc4:	f022 020f 	bic.w	r2, r2, #15
    6fc8:	4611      	mov	r1, r2
    6fca:	4630      	mov	r0, r6
    6fcc:	9201      	str	r2, [sp, #4]
    6fce:	f000 fc61 	bl	7894 <_sbrk_r>
    6fd2:	f1b0 3fff 	cmp.w	r0, #4294967295
    6fd6:	4683      	mov	fp, r0
    6fd8:	9a01      	ldr	r2, [sp, #4]
    6fda:	f000 8158 	beq.w	728e <_malloc_r+0x4f2>
    6fde:	4582      	cmp	sl, r0
    6fe0:	f200 80fc 	bhi.w	71dc <_malloc_r+0x440>
    6fe4:	4b45      	ldr	r3, [pc, #276]	; (70fc <_malloc_r+0x360>)
    6fe6:	6819      	ldr	r1, [r3, #0]
    6fe8:	45da      	cmp	sl, fp
    6fea:	4411      	add	r1, r2
    6fec:	6019      	str	r1, [r3, #0]
    6fee:	f000 8153 	beq.w	7298 <_malloc_r+0x4fc>
    6ff2:	f8d9 0000 	ldr.w	r0, [r9]
    6ff6:	f8df e110 	ldr.w	lr, [pc, #272]	; 7108 <_malloc_r+0x36c>
    6ffa:	3001      	adds	r0, #1
    6ffc:	bf1b      	ittet	ne
    6ffe:	ebca 0a0b 	rsbne	sl, sl, fp
    7002:	4451      	addne	r1, sl
    7004:	f8ce b000 	streq.w	fp, [lr]
    7008:	6019      	strne	r1, [r3, #0]
    700a:	f01b 0107 	ands.w	r1, fp, #7
    700e:	f000 8117 	beq.w	7240 <_malloc_r+0x4a4>
    7012:	f1c1 0008 	rsb	r0, r1, #8
    7016:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    701a:	4483      	add	fp, r0
    701c:	3108      	adds	r1, #8
    701e:	445a      	add	r2, fp
    7020:	f3c2 020b 	ubfx	r2, r2, #0, #12
    7024:	ebc2 0901 	rsb	r9, r2, r1
    7028:	4649      	mov	r1, r9
    702a:	4630      	mov	r0, r6
    702c:	9301      	str	r3, [sp, #4]
    702e:	f000 fc31 	bl	7894 <_sbrk_r>
    7032:	1c43      	adds	r3, r0, #1
    7034:	9b01      	ldr	r3, [sp, #4]
    7036:	f000 813f 	beq.w	72b8 <_malloc_r+0x51c>
    703a:	ebcb 0200 	rsb	r2, fp, r0
    703e:	444a      	add	r2, r9
    7040:	f042 0201 	orr.w	r2, r2, #1
    7044:	6819      	ldr	r1, [r3, #0]
    7046:	f8c7 b008 	str.w	fp, [r7, #8]
    704a:	4449      	add	r1, r9
    704c:	42bc      	cmp	r4, r7
    704e:	f8cb 2004 	str.w	r2, [fp, #4]
    7052:	6019      	str	r1, [r3, #0]
    7054:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 70fc <_malloc_r+0x360>
    7058:	d016      	beq.n	7088 <_malloc_r+0x2ec>
    705a:	f1b8 0f0f 	cmp.w	r8, #15
    705e:	f240 80fd 	bls.w	725c <_malloc_r+0x4c0>
    7062:	6862      	ldr	r2, [r4, #4]
    7064:	f1a8 030c 	sub.w	r3, r8, #12
    7068:	f023 0307 	bic.w	r3, r3, #7
    706c:	18e0      	adds	r0, r4, r3
    706e:	f002 0201 	and.w	r2, r2, #1
    7072:	f04f 0e05 	mov.w	lr, #5
    7076:	431a      	orrs	r2, r3
    7078:	2b0f      	cmp	r3, #15
    707a:	6062      	str	r2, [r4, #4]
    707c:	f8c0 e004 	str.w	lr, [r0, #4]
    7080:	f8c0 e008 	str.w	lr, [r0, #8]
    7084:	f200 811c 	bhi.w	72c0 <_malloc_r+0x524>
    7088:	4b1d      	ldr	r3, [pc, #116]	; (7100 <_malloc_r+0x364>)
    708a:	68bc      	ldr	r4, [r7, #8]
    708c:	681a      	ldr	r2, [r3, #0]
    708e:	4291      	cmp	r1, r2
    7090:	bf88      	it	hi
    7092:	6019      	strhi	r1, [r3, #0]
    7094:	4b1b      	ldr	r3, [pc, #108]	; (7104 <_malloc_r+0x368>)
    7096:	681a      	ldr	r2, [r3, #0]
    7098:	4291      	cmp	r1, r2
    709a:	6862      	ldr	r2, [r4, #4]
    709c:	bf88      	it	hi
    709e:	6019      	strhi	r1, [r3, #0]
    70a0:	f022 0203 	bic.w	r2, r2, #3
    70a4:	4295      	cmp	r5, r2
    70a6:	eba2 0305 	sub.w	r3, r2, r5
    70aa:	d801      	bhi.n	70b0 <_malloc_r+0x314>
    70ac:	2b0f      	cmp	r3, #15
    70ae:	dc04      	bgt.n	70ba <_malloc_r+0x31e>
    70b0:	4630      	mov	r0, r6
    70b2:	f000 f9f5 	bl	74a0 <__malloc_unlock>
    70b6:	2400      	movs	r4, #0
    70b8:	e738      	b.n	6f2c <_malloc_r+0x190>
    70ba:	1962      	adds	r2, r4, r5
    70bc:	f043 0301 	orr.w	r3, r3, #1
    70c0:	f045 0501 	orr.w	r5, r5, #1
    70c4:	6065      	str	r5, [r4, #4]
    70c6:	4630      	mov	r0, r6
    70c8:	60ba      	str	r2, [r7, #8]
    70ca:	6053      	str	r3, [r2, #4]
    70cc:	f000 f9e8 	bl	74a0 <__malloc_unlock>
    70d0:	3408      	adds	r4, #8
    70d2:	4620      	mov	r0, r4
    70d4:	b003      	add	sp, #12
    70d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70da:	2b14      	cmp	r3, #20
    70dc:	d971      	bls.n	71c2 <_malloc_r+0x426>
    70de:	2b54      	cmp	r3, #84	; 0x54
    70e0:	f200 80a4 	bhi.w	722c <_malloc_r+0x490>
    70e4:	0b28      	lsrs	r0, r5, #12
    70e6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    70ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
    70ee:	306e      	adds	r0, #110	; 0x6e
    70f0:	e676      	b.n	6de0 <_malloc_r+0x44>
    70f2:	bf00      	nop
    70f4:	1fff8d88 	.word	0x1fff8d88
    70f8:	1fffa3f4 	.word	0x1fffa3f4
    70fc:	1fffa3f8 	.word	0x1fffa3f8
    7100:	1fffa3f0 	.word	0x1fffa3f0
    7104:	1fffa3ec 	.word	0x1fffa3ec
    7108:	1fff9194 	.word	0x1fff9194
    710c:	0a5a      	lsrs	r2, r3, #9
    710e:	2a04      	cmp	r2, #4
    7110:	d95e      	bls.n	71d0 <_malloc_r+0x434>
    7112:	2a14      	cmp	r2, #20
    7114:	f200 80b3 	bhi.w	727e <_malloc_r+0x4e2>
    7118:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    711c:	0049      	lsls	r1, r1, #1
    711e:	325b      	adds	r2, #91	; 0x5b
    7120:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    7124:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    7128:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 7308 <_malloc_r+0x56c>
    712c:	f1ac 0c08 	sub.w	ip, ip, #8
    7130:	458c      	cmp	ip, r1
    7132:	f000 8088 	beq.w	7246 <_malloc_r+0x4aa>
    7136:	684a      	ldr	r2, [r1, #4]
    7138:	f022 0203 	bic.w	r2, r2, #3
    713c:	4293      	cmp	r3, r2
    713e:	d202      	bcs.n	7146 <_malloc_r+0x3aa>
    7140:	6889      	ldr	r1, [r1, #8]
    7142:	458c      	cmp	ip, r1
    7144:	d1f7      	bne.n	7136 <_malloc_r+0x39a>
    7146:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    714a:	687a      	ldr	r2, [r7, #4]
    714c:	f8c4 c00c 	str.w	ip, [r4, #12]
    7150:	60a1      	str	r1, [r4, #8]
    7152:	f8cc 4008 	str.w	r4, [ip, #8]
    7156:	60cc      	str	r4, [r1, #12]
    7158:	e688      	b.n	6e6c <_malloc_r+0xd0>
    715a:	1963      	adds	r3, r4, r5
    715c:	f042 0701 	orr.w	r7, r2, #1
    7160:	f045 0501 	orr.w	r5, r5, #1
    7164:	6065      	str	r5, [r4, #4]
    7166:	4630      	mov	r0, r6
    7168:	614b      	str	r3, [r1, #20]
    716a:	610b      	str	r3, [r1, #16]
    716c:	f8c3 e00c 	str.w	lr, [r3, #12]
    7170:	f8c3 e008 	str.w	lr, [r3, #8]
    7174:	605f      	str	r7, [r3, #4]
    7176:	509a      	str	r2, [r3, r2]
    7178:	3408      	adds	r4, #8
    717a:	f000 f991 	bl	74a0 <__malloc_unlock>
    717e:	e6d5      	b.n	6f2c <_malloc_r+0x190>
    7180:	684a      	ldr	r2, [r1, #4]
    7182:	e673      	b.n	6e6c <_malloc_r+0xd0>
    7184:	f108 0801 	add.w	r8, r8, #1
    7188:	f018 0f03 	tst.w	r8, #3
    718c:	f10c 0c08 	add.w	ip, ip, #8
    7190:	f47f ae7f 	bne.w	6e92 <_malloc_r+0xf6>
    7194:	e030      	b.n	71f8 <_malloc_r+0x45c>
    7196:	68dc      	ldr	r4, [r3, #12]
    7198:	42a3      	cmp	r3, r4
    719a:	bf08      	it	eq
    719c:	3002      	addeq	r0, #2
    719e:	f43f ae35 	beq.w	6e0c <_malloc_r+0x70>
    71a2:	e6b3      	b.n	6f0c <_malloc_r+0x170>
    71a4:	440b      	add	r3, r1
    71a6:	460c      	mov	r4, r1
    71a8:	685a      	ldr	r2, [r3, #4]
    71aa:	68c9      	ldr	r1, [r1, #12]
    71ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
    71b0:	f042 0201 	orr.w	r2, r2, #1
    71b4:	605a      	str	r2, [r3, #4]
    71b6:	4630      	mov	r0, r6
    71b8:	60e9      	str	r1, [r5, #12]
    71ba:	608d      	str	r5, [r1, #8]
    71bc:	f000 f970 	bl	74a0 <__malloc_unlock>
    71c0:	e6b4      	b.n	6f2c <_malloc_r+0x190>
    71c2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    71c6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    71ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
    71ce:	e607      	b.n	6de0 <_malloc_r+0x44>
    71d0:	099a      	lsrs	r2, r3, #6
    71d2:	f102 0139 	add.w	r1, r2, #57	; 0x39
    71d6:	0049      	lsls	r1, r1, #1
    71d8:	3238      	adds	r2, #56	; 0x38
    71da:	e7a1      	b.n	7120 <_malloc_r+0x384>
    71dc:	42bc      	cmp	r4, r7
    71de:	4b4a      	ldr	r3, [pc, #296]	; (7308 <_malloc_r+0x56c>)
    71e0:	f43f af00 	beq.w	6fe4 <_malloc_r+0x248>
    71e4:	689c      	ldr	r4, [r3, #8]
    71e6:	6862      	ldr	r2, [r4, #4]
    71e8:	f022 0203 	bic.w	r2, r2, #3
    71ec:	e75a      	b.n	70a4 <_malloc_r+0x308>
    71ee:	f859 3908 	ldr.w	r3, [r9], #-8
    71f2:	4599      	cmp	r9, r3
    71f4:	f040 8082 	bne.w	72fc <_malloc_r+0x560>
    71f8:	f010 0f03 	tst.w	r0, #3
    71fc:	f100 30ff 	add.w	r0, r0, #4294967295
    7200:	d1f5      	bne.n	71ee <_malloc_r+0x452>
    7202:	687b      	ldr	r3, [r7, #4]
    7204:	ea23 0304 	bic.w	r3, r3, r4
    7208:	607b      	str	r3, [r7, #4]
    720a:	0064      	lsls	r4, r4, #1
    720c:	429c      	cmp	r4, r3
    720e:	f63f aebd 	bhi.w	6f8c <_malloc_r+0x1f0>
    7212:	2c00      	cmp	r4, #0
    7214:	f43f aeba 	beq.w	6f8c <_malloc_r+0x1f0>
    7218:	421c      	tst	r4, r3
    721a:	4640      	mov	r0, r8
    721c:	f47f ae35 	bne.w	6e8a <_malloc_r+0xee>
    7220:	0064      	lsls	r4, r4, #1
    7222:	421c      	tst	r4, r3
    7224:	f100 0004 	add.w	r0, r0, #4
    7228:	d0fa      	beq.n	7220 <_malloc_r+0x484>
    722a:	e62e      	b.n	6e8a <_malloc_r+0xee>
    722c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7230:	d818      	bhi.n	7264 <_malloc_r+0x4c8>
    7232:	0be8      	lsrs	r0, r5, #15
    7234:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    7238:	ea4f 034e 	mov.w	r3, lr, lsl #1
    723c:	3077      	adds	r0, #119	; 0x77
    723e:	e5cf      	b.n	6de0 <_malloc_r+0x44>
    7240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7244:	e6eb      	b.n	701e <_malloc_r+0x282>
    7246:	2101      	movs	r1, #1
    7248:	f8d8 3004 	ldr.w	r3, [r8, #4]
    724c:	1092      	asrs	r2, r2, #2
    724e:	fa01 f202 	lsl.w	r2, r1, r2
    7252:	431a      	orrs	r2, r3
    7254:	f8c8 2004 	str.w	r2, [r8, #4]
    7258:	4661      	mov	r1, ip
    725a:	e777      	b.n	714c <_malloc_r+0x3b0>
    725c:	2301      	movs	r3, #1
    725e:	f8cb 3004 	str.w	r3, [fp, #4]
    7262:	e725      	b.n	70b0 <_malloc_r+0x314>
    7264:	f240 5254 	movw	r2, #1364	; 0x554
    7268:	4293      	cmp	r3, r2
    726a:	d820      	bhi.n	72ae <_malloc_r+0x512>
    726c:	0ca8      	lsrs	r0, r5, #18
    726e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    7272:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7276:	307c      	adds	r0, #124	; 0x7c
    7278:	e5b2      	b.n	6de0 <_malloc_r+0x44>
    727a:	3210      	adds	r2, #16
    727c:	e6a4      	b.n	6fc8 <_malloc_r+0x22c>
    727e:	2a54      	cmp	r2, #84	; 0x54
    7280:	d826      	bhi.n	72d0 <_malloc_r+0x534>
    7282:	0b1a      	lsrs	r2, r3, #12
    7284:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    7288:	0049      	lsls	r1, r1, #1
    728a:	326e      	adds	r2, #110	; 0x6e
    728c:	e748      	b.n	7120 <_malloc_r+0x384>
    728e:	68bc      	ldr	r4, [r7, #8]
    7290:	6862      	ldr	r2, [r4, #4]
    7292:	f022 0203 	bic.w	r2, r2, #3
    7296:	e705      	b.n	70a4 <_malloc_r+0x308>
    7298:	f3ca 000b 	ubfx	r0, sl, #0, #12
    729c:	2800      	cmp	r0, #0
    729e:	f47f aea8 	bne.w	6ff2 <_malloc_r+0x256>
    72a2:	4442      	add	r2, r8
    72a4:	68bb      	ldr	r3, [r7, #8]
    72a6:	f042 0201 	orr.w	r2, r2, #1
    72aa:	605a      	str	r2, [r3, #4]
    72ac:	e6ec      	b.n	7088 <_malloc_r+0x2ec>
    72ae:	23fe      	movs	r3, #254	; 0xfe
    72b0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    72b4:	207e      	movs	r0, #126	; 0x7e
    72b6:	e593      	b.n	6de0 <_malloc_r+0x44>
    72b8:	2201      	movs	r2, #1
    72ba:	f04f 0900 	mov.w	r9, #0
    72be:	e6c1      	b.n	7044 <_malloc_r+0x2a8>
    72c0:	f104 0108 	add.w	r1, r4, #8
    72c4:	4630      	mov	r0, r6
    72c6:	f000 fefb 	bl	80c0 <_free_r>
    72ca:	f8d9 1000 	ldr.w	r1, [r9]
    72ce:	e6db      	b.n	7088 <_malloc_r+0x2ec>
    72d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    72d4:	d805      	bhi.n	72e2 <_malloc_r+0x546>
    72d6:	0bda      	lsrs	r2, r3, #15
    72d8:	f102 0178 	add.w	r1, r2, #120	; 0x78
    72dc:	0049      	lsls	r1, r1, #1
    72de:	3277      	adds	r2, #119	; 0x77
    72e0:	e71e      	b.n	7120 <_malloc_r+0x384>
    72e2:	f240 5154 	movw	r1, #1364	; 0x554
    72e6:	428a      	cmp	r2, r1
    72e8:	d805      	bhi.n	72f6 <_malloc_r+0x55a>
    72ea:	0c9a      	lsrs	r2, r3, #18
    72ec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    72f0:	0049      	lsls	r1, r1, #1
    72f2:	327c      	adds	r2, #124	; 0x7c
    72f4:	e714      	b.n	7120 <_malloc_r+0x384>
    72f6:	21fe      	movs	r1, #254	; 0xfe
    72f8:	227e      	movs	r2, #126	; 0x7e
    72fa:	e711      	b.n	7120 <_malloc_r+0x384>
    72fc:	687b      	ldr	r3, [r7, #4]
    72fe:	e784      	b.n	720a <_malloc_r+0x46e>
    7300:	08e8      	lsrs	r0, r5, #3
    7302:	1c43      	adds	r3, r0, #1
    7304:	005b      	lsls	r3, r3, #1
    7306:	e5f8      	b.n	6efa <_malloc_r+0x15e>
    7308:	1fff8d88 	.word	0x1fff8d88

0000730c <__ascii_mbtowc>:
    730c:	b082      	sub	sp, #8
    730e:	b149      	cbz	r1, 7324 <__ascii_mbtowc+0x18>
    7310:	b15a      	cbz	r2, 732a <__ascii_mbtowc+0x1e>
    7312:	b16b      	cbz	r3, 7330 <__ascii_mbtowc+0x24>
    7314:	7813      	ldrb	r3, [r2, #0]
    7316:	600b      	str	r3, [r1, #0]
    7318:	7812      	ldrb	r2, [r2, #0]
    731a:	1c10      	adds	r0, r2, #0
    731c:	bf18      	it	ne
    731e:	2001      	movne	r0, #1
    7320:	b002      	add	sp, #8
    7322:	4770      	bx	lr
    7324:	a901      	add	r1, sp, #4
    7326:	2a00      	cmp	r2, #0
    7328:	d1f3      	bne.n	7312 <__ascii_mbtowc+0x6>
    732a:	4610      	mov	r0, r2
    732c:	b002      	add	sp, #8
    732e:	4770      	bx	lr
    7330:	f06f 0001 	mvn.w	r0, #1
    7334:	e7f4      	b.n	7320 <__ascii_mbtowc+0x14>
    7336:	bf00      	nop

00007338 <memmove>:
    7338:	4288      	cmp	r0, r1
    733a:	b5f0      	push	{r4, r5, r6, r7, lr}
    733c:	d90d      	bls.n	735a <memmove+0x22>
    733e:	188b      	adds	r3, r1, r2
    7340:	4298      	cmp	r0, r3
    7342:	d20a      	bcs.n	735a <memmove+0x22>
    7344:	1881      	adds	r1, r0, r2
    7346:	2a00      	cmp	r2, #0
    7348:	d051      	beq.n	73ee <memmove+0xb6>
    734a:	1a9a      	subs	r2, r3, r2
    734c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    7350:	f801 4d01 	strb.w	r4, [r1, #-1]!
    7354:	4293      	cmp	r3, r2
    7356:	d1f9      	bne.n	734c <memmove+0x14>
    7358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    735a:	2a0f      	cmp	r2, #15
    735c:	d948      	bls.n	73f0 <memmove+0xb8>
    735e:	ea41 0300 	orr.w	r3, r1, r0
    7362:	079b      	lsls	r3, r3, #30
    7364:	d146      	bne.n	73f4 <memmove+0xbc>
    7366:	f100 0410 	add.w	r4, r0, #16
    736a:	f101 0310 	add.w	r3, r1, #16
    736e:	4615      	mov	r5, r2
    7370:	f853 6c10 	ldr.w	r6, [r3, #-16]
    7374:	f844 6c10 	str.w	r6, [r4, #-16]
    7378:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    737c:	f844 6c0c 	str.w	r6, [r4, #-12]
    7380:	f853 6c08 	ldr.w	r6, [r3, #-8]
    7384:	f844 6c08 	str.w	r6, [r4, #-8]
    7388:	3d10      	subs	r5, #16
    738a:	f853 6c04 	ldr.w	r6, [r3, #-4]
    738e:	f844 6c04 	str.w	r6, [r4, #-4]
    7392:	2d0f      	cmp	r5, #15
    7394:	f103 0310 	add.w	r3, r3, #16
    7398:	f104 0410 	add.w	r4, r4, #16
    739c:	d8e8      	bhi.n	7370 <memmove+0x38>
    739e:	f1a2 0310 	sub.w	r3, r2, #16
    73a2:	f023 030f 	bic.w	r3, r3, #15
    73a6:	f002 0e0f 	and.w	lr, r2, #15
    73aa:	3310      	adds	r3, #16
    73ac:	f1be 0f03 	cmp.w	lr, #3
    73b0:	4419      	add	r1, r3
    73b2:	4403      	add	r3, r0
    73b4:	d921      	bls.n	73fa <memmove+0xc2>
    73b6:	1f1e      	subs	r6, r3, #4
    73b8:	460d      	mov	r5, r1
    73ba:	4674      	mov	r4, lr
    73bc:	3c04      	subs	r4, #4
    73be:	f855 7b04 	ldr.w	r7, [r5], #4
    73c2:	f846 7f04 	str.w	r7, [r6, #4]!
    73c6:	2c03      	cmp	r4, #3
    73c8:	d8f8      	bhi.n	73bc <memmove+0x84>
    73ca:	f1ae 0404 	sub.w	r4, lr, #4
    73ce:	f024 0403 	bic.w	r4, r4, #3
    73d2:	3404      	adds	r4, #4
    73d4:	4423      	add	r3, r4
    73d6:	4421      	add	r1, r4
    73d8:	f002 0203 	and.w	r2, r2, #3
    73dc:	b162      	cbz	r2, 73f8 <memmove+0xc0>
    73de:	3b01      	subs	r3, #1
    73e0:	440a      	add	r2, r1
    73e2:	f811 4b01 	ldrb.w	r4, [r1], #1
    73e6:	f803 4f01 	strb.w	r4, [r3, #1]!
    73ea:	428a      	cmp	r2, r1
    73ec:	d1f9      	bne.n	73e2 <memmove+0xaa>
    73ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73f0:	4603      	mov	r3, r0
    73f2:	e7f3      	b.n	73dc <memmove+0xa4>
    73f4:	4603      	mov	r3, r0
    73f6:	e7f2      	b.n	73de <memmove+0xa6>
    73f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73fa:	4672      	mov	r2, lr
    73fc:	e7ee      	b.n	73dc <memmove+0xa4>
    73fe:	bf00      	nop

00007400 <memset>:
    7400:	b470      	push	{r4, r5, r6}
    7402:	0784      	lsls	r4, r0, #30
    7404:	d046      	beq.n	7494 <memset+0x94>
    7406:	1e54      	subs	r4, r2, #1
    7408:	2a00      	cmp	r2, #0
    740a:	d041      	beq.n	7490 <memset+0x90>
    740c:	b2cd      	uxtb	r5, r1
    740e:	4603      	mov	r3, r0
    7410:	e002      	b.n	7418 <memset+0x18>
    7412:	1e62      	subs	r2, r4, #1
    7414:	b3e4      	cbz	r4, 7490 <memset+0x90>
    7416:	4614      	mov	r4, r2
    7418:	f803 5b01 	strb.w	r5, [r3], #1
    741c:	079a      	lsls	r2, r3, #30
    741e:	d1f8      	bne.n	7412 <memset+0x12>
    7420:	2c03      	cmp	r4, #3
    7422:	d92e      	bls.n	7482 <memset+0x82>
    7424:	b2cd      	uxtb	r5, r1
    7426:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    742a:	2c0f      	cmp	r4, #15
    742c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    7430:	d919      	bls.n	7466 <memset+0x66>
    7432:	f103 0210 	add.w	r2, r3, #16
    7436:	4626      	mov	r6, r4
    7438:	3e10      	subs	r6, #16
    743a:	2e0f      	cmp	r6, #15
    743c:	f842 5c10 	str.w	r5, [r2, #-16]
    7440:	f842 5c0c 	str.w	r5, [r2, #-12]
    7444:	f842 5c08 	str.w	r5, [r2, #-8]
    7448:	f842 5c04 	str.w	r5, [r2, #-4]
    744c:	f102 0210 	add.w	r2, r2, #16
    7450:	d8f2      	bhi.n	7438 <memset+0x38>
    7452:	f1a4 0210 	sub.w	r2, r4, #16
    7456:	f022 020f 	bic.w	r2, r2, #15
    745a:	f004 040f 	and.w	r4, r4, #15
    745e:	3210      	adds	r2, #16
    7460:	2c03      	cmp	r4, #3
    7462:	4413      	add	r3, r2
    7464:	d90d      	bls.n	7482 <memset+0x82>
    7466:	461e      	mov	r6, r3
    7468:	4622      	mov	r2, r4
    746a:	3a04      	subs	r2, #4
    746c:	2a03      	cmp	r2, #3
    746e:	f846 5b04 	str.w	r5, [r6], #4
    7472:	d8fa      	bhi.n	746a <memset+0x6a>
    7474:	1f22      	subs	r2, r4, #4
    7476:	f022 0203 	bic.w	r2, r2, #3
    747a:	3204      	adds	r2, #4
    747c:	4413      	add	r3, r2
    747e:	f004 0403 	and.w	r4, r4, #3
    7482:	b12c      	cbz	r4, 7490 <memset+0x90>
    7484:	b2c9      	uxtb	r1, r1
    7486:	441c      	add	r4, r3
    7488:	f803 1b01 	strb.w	r1, [r3], #1
    748c:	42a3      	cmp	r3, r4
    748e:	d1fb      	bne.n	7488 <memset+0x88>
    7490:	bc70      	pop	{r4, r5, r6}
    7492:	4770      	bx	lr
    7494:	4614      	mov	r4, r2
    7496:	4603      	mov	r3, r0
    7498:	e7c2      	b.n	7420 <memset+0x20>
    749a:	bf00      	nop

0000749c <__malloc_lock>:
    749c:	4770      	bx	lr
    749e:	bf00      	nop

000074a0 <__malloc_unlock>:
    74a0:	4770      	bx	lr
    74a2:	bf00      	nop

000074a4 <realloc>:
    74a4:	4b02      	ldr	r3, [pc, #8]	; (74b0 <realloc+0xc>)
    74a6:	460a      	mov	r2, r1
    74a8:	4601      	mov	r1, r0
    74aa:	6818      	ldr	r0, [r3, #0]
    74ac:	f000 b802 	b.w	74b4 <_realloc_r>
    74b0:	1fff8c18 	.word	0x1fff8c18

000074b4 <_realloc_r>:
    74b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74b8:	4617      	mov	r7, r2
    74ba:	b083      	sub	sp, #12
    74bc:	2900      	cmp	r1, #0
    74be:	f000 80c1 	beq.w	7644 <_realloc_r+0x190>
    74c2:	460e      	mov	r6, r1
    74c4:	4681      	mov	r9, r0
    74c6:	f107 050b 	add.w	r5, r7, #11
    74ca:	f7ff ffe7 	bl	749c <__malloc_lock>
    74ce:	f856 ec04 	ldr.w	lr, [r6, #-4]
    74d2:	2d16      	cmp	r5, #22
    74d4:	f02e 0403 	bic.w	r4, lr, #3
    74d8:	f1a6 0808 	sub.w	r8, r6, #8
    74dc:	d840      	bhi.n	7560 <_realloc_r+0xac>
    74de:	2210      	movs	r2, #16
    74e0:	4615      	mov	r5, r2
    74e2:	42af      	cmp	r7, r5
    74e4:	d841      	bhi.n	756a <_realloc_r+0xb6>
    74e6:	4294      	cmp	r4, r2
    74e8:	da75      	bge.n	75d6 <_realloc_r+0x122>
    74ea:	4bc9      	ldr	r3, [pc, #804]	; (7810 <_realloc_r+0x35c>)
    74ec:	6899      	ldr	r1, [r3, #8]
    74ee:	eb08 0004 	add.w	r0, r8, r4
    74f2:	4288      	cmp	r0, r1
    74f4:	6841      	ldr	r1, [r0, #4]
    74f6:	f000 80d9 	beq.w	76ac <_realloc_r+0x1f8>
    74fa:	f021 0301 	bic.w	r3, r1, #1
    74fe:	4403      	add	r3, r0
    7500:	685b      	ldr	r3, [r3, #4]
    7502:	07db      	lsls	r3, r3, #31
    7504:	d57d      	bpl.n	7602 <_realloc_r+0x14e>
    7506:	f01e 0f01 	tst.w	lr, #1
    750a:	d035      	beq.n	7578 <_realloc_r+0xc4>
    750c:	4639      	mov	r1, r7
    750e:	4648      	mov	r0, r9
    7510:	f7ff fc44 	bl	6d9c <_malloc_r>
    7514:	4607      	mov	r7, r0
    7516:	b1e0      	cbz	r0, 7552 <_realloc_r+0x9e>
    7518:	f856 3c04 	ldr.w	r3, [r6, #-4]
    751c:	f023 0301 	bic.w	r3, r3, #1
    7520:	4443      	add	r3, r8
    7522:	f1a0 0208 	sub.w	r2, r0, #8
    7526:	429a      	cmp	r2, r3
    7528:	f000 8144 	beq.w	77b4 <_realloc_r+0x300>
    752c:	1f22      	subs	r2, r4, #4
    752e:	2a24      	cmp	r2, #36	; 0x24
    7530:	f200 8131 	bhi.w	7796 <_realloc_r+0x2e2>
    7534:	2a13      	cmp	r2, #19
    7536:	f200 8104 	bhi.w	7742 <_realloc_r+0x28e>
    753a:	4603      	mov	r3, r0
    753c:	4632      	mov	r2, r6
    753e:	6811      	ldr	r1, [r2, #0]
    7540:	6019      	str	r1, [r3, #0]
    7542:	6851      	ldr	r1, [r2, #4]
    7544:	6059      	str	r1, [r3, #4]
    7546:	6892      	ldr	r2, [r2, #8]
    7548:	609a      	str	r2, [r3, #8]
    754a:	4631      	mov	r1, r6
    754c:	4648      	mov	r0, r9
    754e:	f000 fdb7 	bl	80c0 <_free_r>
    7552:	4648      	mov	r0, r9
    7554:	f7ff ffa4 	bl	74a0 <__malloc_unlock>
    7558:	4638      	mov	r0, r7
    755a:	b003      	add	sp, #12
    755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7560:	f025 0507 	bic.w	r5, r5, #7
    7564:	2d00      	cmp	r5, #0
    7566:	462a      	mov	r2, r5
    7568:	dabb      	bge.n	74e2 <_realloc_r+0x2e>
    756a:	230c      	movs	r3, #12
    756c:	2000      	movs	r0, #0
    756e:	f8c9 3000 	str.w	r3, [r9]
    7572:	b003      	add	sp, #12
    7574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7578:	f856 3c08 	ldr.w	r3, [r6, #-8]
    757c:	ebc3 0a08 	rsb	sl, r3, r8
    7580:	f8da 3004 	ldr.w	r3, [sl, #4]
    7584:	f023 0c03 	bic.w	ip, r3, #3
    7588:	eb04 030c 	add.w	r3, r4, ip
    758c:	4293      	cmp	r3, r2
    758e:	dbbd      	blt.n	750c <_realloc_r+0x58>
    7590:	4657      	mov	r7, sl
    7592:	f8da 100c 	ldr.w	r1, [sl, #12]
    7596:	f857 0f08 	ldr.w	r0, [r7, #8]!
    759a:	1f22      	subs	r2, r4, #4
    759c:	2a24      	cmp	r2, #36	; 0x24
    759e:	60c1      	str	r1, [r0, #12]
    75a0:	6088      	str	r0, [r1, #8]
    75a2:	f200 8117 	bhi.w	77d4 <_realloc_r+0x320>
    75a6:	2a13      	cmp	r2, #19
    75a8:	f240 8112 	bls.w	77d0 <_realloc_r+0x31c>
    75ac:	6831      	ldr	r1, [r6, #0]
    75ae:	f8ca 1008 	str.w	r1, [sl, #8]
    75b2:	6871      	ldr	r1, [r6, #4]
    75b4:	f8ca 100c 	str.w	r1, [sl, #12]
    75b8:	2a1b      	cmp	r2, #27
    75ba:	f200 812b 	bhi.w	7814 <_realloc_r+0x360>
    75be:	3608      	adds	r6, #8
    75c0:	f10a 0210 	add.w	r2, sl, #16
    75c4:	6831      	ldr	r1, [r6, #0]
    75c6:	6011      	str	r1, [r2, #0]
    75c8:	6871      	ldr	r1, [r6, #4]
    75ca:	6051      	str	r1, [r2, #4]
    75cc:	68b1      	ldr	r1, [r6, #8]
    75ce:	6091      	str	r1, [r2, #8]
    75d0:	463e      	mov	r6, r7
    75d2:	461c      	mov	r4, r3
    75d4:	46d0      	mov	r8, sl
    75d6:	1b63      	subs	r3, r4, r5
    75d8:	2b0f      	cmp	r3, #15
    75da:	d81d      	bhi.n	7618 <_realloc_r+0x164>
    75dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    75e0:	f003 0301 	and.w	r3, r3, #1
    75e4:	4323      	orrs	r3, r4
    75e6:	4444      	add	r4, r8
    75e8:	f8c8 3004 	str.w	r3, [r8, #4]
    75ec:	6863      	ldr	r3, [r4, #4]
    75ee:	f043 0301 	orr.w	r3, r3, #1
    75f2:	6063      	str	r3, [r4, #4]
    75f4:	4648      	mov	r0, r9
    75f6:	f7ff ff53 	bl	74a0 <__malloc_unlock>
    75fa:	4630      	mov	r0, r6
    75fc:	b003      	add	sp, #12
    75fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7602:	f021 0103 	bic.w	r1, r1, #3
    7606:	4421      	add	r1, r4
    7608:	4291      	cmp	r1, r2
    760a:	db21      	blt.n	7650 <_realloc_r+0x19c>
    760c:	68c3      	ldr	r3, [r0, #12]
    760e:	6882      	ldr	r2, [r0, #8]
    7610:	460c      	mov	r4, r1
    7612:	60d3      	str	r3, [r2, #12]
    7614:	609a      	str	r2, [r3, #8]
    7616:	e7de      	b.n	75d6 <_realloc_r+0x122>
    7618:	f8d8 2004 	ldr.w	r2, [r8, #4]
    761c:	eb08 0105 	add.w	r1, r8, r5
    7620:	f002 0201 	and.w	r2, r2, #1
    7624:	4315      	orrs	r5, r2
    7626:	f043 0201 	orr.w	r2, r3, #1
    762a:	440b      	add	r3, r1
    762c:	f8c8 5004 	str.w	r5, [r8, #4]
    7630:	604a      	str	r2, [r1, #4]
    7632:	685a      	ldr	r2, [r3, #4]
    7634:	f042 0201 	orr.w	r2, r2, #1
    7638:	3108      	adds	r1, #8
    763a:	605a      	str	r2, [r3, #4]
    763c:	4648      	mov	r0, r9
    763e:	f000 fd3f 	bl	80c0 <_free_r>
    7642:	e7d7      	b.n	75f4 <_realloc_r+0x140>
    7644:	4611      	mov	r1, r2
    7646:	b003      	add	sp, #12
    7648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    764c:	f7ff bba6 	b.w	6d9c <_malloc_r>
    7650:	f01e 0f01 	tst.w	lr, #1
    7654:	f47f af5a 	bne.w	750c <_realloc_r+0x58>
    7658:	f856 3c08 	ldr.w	r3, [r6, #-8]
    765c:	ebc3 0a08 	rsb	sl, r3, r8
    7660:	f8da 3004 	ldr.w	r3, [sl, #4]
    7664:	f023 0c03 	bic.w	ip, r3, #3
    7668:	eb01 0e0c 	add.w	lr, r1, ip
    766c:	4596      	cmp	lr, r2
    766e:	db8b      	blt.n	7588 <_realloc_r+0xd4>
    7670:	68c3      	ldr	r3, [r0, #12]
    7672:	6882      	ldr	r2, [r0, #8]
    7674:	4657      	mov	r7, sl
    7676:	60d3      	str	r3, [r2, #12]
    7678:	609a      	str	r2, [r3, #8]
    767a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    767e:	f8da 300c 	ldr.w	r3, [sl, #12]
    7682:	60cb      	str	r3, [r1, #12]
    7684:	1f22      	subs	r2, r4, #4
    7686:	2a24      	cmp	r2, #36	; 0x24
    7688:	6099      	str	r1, [r3, #8]
    768a:	f200 8099 	bhi.w	77c0 <_realloc_r+0x30c>
    768e:	2a13      	cmp	r2, #19
    7690:	d962      	bls.n	7758 <_realloc_r+0x2a4>
    7692:	6833      	ldr	r3, [r6, #0]
    7694:	f8ca 3008 	str.w	r3, [sl, #8]
    7698:	6873      	ldr	r3, [r6, #4]
    769a:	f8ca 300c 	str.w	r3, [sl, #12]
    769e:	2a1b      	cmp	r2, #27
    76a0:	f200 80a0 	bhi.w	77e4 <_realloc_r+0x330>
    76a4:	3608      	adds	r6, #8
    76a6:	f10a 0310 	add.w	r3, sl, #16
    76aa:	e056      	b.n	775a <_realloc_r+0x2a6>
    76ac:	f021 0b03 	bic.w	fp, r1, #3
    76b0:	44a3      	add	fp, r4
    76b2:	f105 0010 	add.w	r0, r5, #16
    76b6:	4583      	cmp	fp, r0
    76b8:	da59      	bge.n	776e <_realloc_r+0x2ba>
    76ba:	f01e 0f01 	tst.w	lr, #1
    76be:	f47f af25 	bne.w	750c <_realloc_r+0x58>
    76c2:	f856 1c08 	ldr.w	r1, [r6, #-8]
    76c6:	ebc1 0a08 	rsb	sl, r1, r8
    76ca:	f8da 1004 	ldr.w	r1, [sl, #4]
    76ce:	f021 0c03 	bic.w	ip, r1, #3
    76d2:	44e3      	add	fp, ip
    76d4:	4558      	cmp	r0, fp
    76d6:	f73f af57 	bgt.w	7588 <_realloc_r+0xd4>
    76da:	4657      	mov	r7, sl
    76dc:	f8da 100c 	ldr.w	r1, [sl, #12]
    76e0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    76e4:	1f22      	subs	r2, r4, #4
    76e6:	2a24      	cmp	r2, #36	; 0x24
    76e8:	60c1      	str	r1, [r0, #12]
    76ea:	6088      	str	r0, [r1, #8]
    76ec:	f200 80b4 	bhi.w	7858 <_realloc_r+0x3a4>
    76f0:	2a13      	cmp	r2, #19
    76f2:	f240 80a5 	bls.w	7840 <_realloc_r+0x38c>
    76f6:	6831      	ldr	r1, [r6, #0]
    76f8:	f8ca 1008 	str.w	r1, [sl, #8]
    76fc:	6871      	ldr	r1, [r6, #4]
    76fe:	f8ca 100c 	str.w	r1, [sl, #12]
    7702:	2a1b      	cmp	r2, #27
    7704:	f200 80af 	bhi.w	7866 <_realloc_r+0x3b2>
    7708:	3608      	adds	r6, #8
    770a:	f10a 0210 	add.w	r2, sl, #16
    770e:	6831      	ldr	r1, [r6, #0]
    7710:	6011      	str	r1, [r2, #0]
    7712:	6871      	ldr	r1, [r6, #4]
    7714:	6051      	str	r1, [r2, #4]
    7716:	68b1      	ldr	r1, [r6, #8]
    7718:	6091      	str	r1, [r2, #8]
    771a:	eb0a 0105 	add.w	r1, sl, r5
    771e:	ebc5 020b 	rsb	r2, r5, fp
    7722:	f042 0201 	orr.w	r2, r2, #1
    7726:	6099      	str	r1, [r3, #8]
    7728:	604a      	str	r2, [r1, #4]
    772a:	f8da 3004 	ldr.w	r3, [sl, #4]
    772e:	f003 0301 	and.w	r3, r3, #1
    7732:	431d      	orrs	r5, r3
    7734:	4648      	mov	r0, r9
    7736:	f8ca 5004 	str.w	r5, [sl, #4]
    773a:	f7ff feb1 	bl	74a0 <__malloc_unlock>
    773e:	4638      	mov	r0, r7
    7740:	e75c      	b.n	75fc <_realloc_r+0x148>
    7742:	6833      	ldr	r3, [r6, #0]
    7744:	6003      	str	r3, [r0, #0]
    7746:	6873      	ldr	r3, [r6, #4]
    7748:	6043      	str	r3, [r0, #4]
    774a:	2a1b      	cmp	r2, #27
    774c:	d827      	bhi.n	779e <_realloc_r+0x2ea>
    774e:	f100 0308 	add.w	r3, r0, #8
    7752:	f106 0208 	add.w	r2, r6, #8
    7756:	e6f2      	b.n	753e <_realloc_r+0x8a>
    7758:	463b      	mov	r3, r7
    775a:	6832      	ldr	r2, [r6, #0]
    775c:	601a      	str	r2, [r3, #0]
    775e:	6872      	ldr	r2, [r6, #4]
    7760:	605a      	str	r2, [r3, #4]
    7762:	68b2      	ldr	r2, [r6, #8]
    7764:	609a      	str	r2, [r3, #8]
    7766:	463e      	mov	r6, r7
    7768:	4674      	mov	r4, lr
    776a:	46d0      	mov	r8, sl
    776c:	e733      	b.n	75d6 <_realloc_r+0x122>
    776e:	eb08 0105 	add.w	r1, r8, r5
    7772:	ebc5 0b0b 	rsb	fp, r5, fp
    7776:	f04b 0201 	orr.w	r2, fp, #1
    777a:	6099      	str	r1, [r3, #8]
    777c:	604a      	str	r2, [r1, #4]
    777e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    7782:	f003 0301 	and.w	r3, r3, #1
    7786:	431d      	orrs	r5, r3
    7788:	4648      	mov	r0, r9
    778a:	f846 5c04 	str.w	r5, [r6, #-4]
    778e:	f7ff fe87 	bl	74a0 <__malloc_unlock>
    7792:	4630      	mov	r0, r6
    7794:	e732      	b.n	75fc <_realloc_r+0x148>
    7796:	4631      	mov	r1, r6
    7798:	f7ff fdce 	bl	7338 <memmove>
    779c:	e6d5      	b.n	754a <_realloc_r+0x96>
    779e:	68b3      	ldr	r3, [r6, #8]
    77a0:	6083      	str	r3, [r0, #8]
    77a2:	68f3      	ldr	r3, [r6, #12]
    77a4:	60c3      	str	r3, [r0, #12]
    77a6:	2a24      	cmp	r2, #36	; 0x24
    77a8:	d028      	beq.n	77fc <_realloc_r+0x348>
    77aa:	f100 0310 	add.w	r3, r0, #16
    77ae:	f106 0210 	add.w	r2, r6, #16
    77b2:	e6c4      	b.n	753e <_realloc_r+0x8a>
    77b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
    77b8:	f023 0303 	bic.w	r3, r3, #3
    77bc:	441c      	add	r4, r3
    77be:	e70a      	b.n	75d6 <_realloc_r+0x122>
    77c0:	4631      	mov	r1, r6
    77c2:	4638      	mov	r0, r7
    77c4:	4674      	mov	r4, lr
    77c6:	46d0      	mov	r8, sl
    77c8:	f7ff fdb6 	bl	7338 <memmove>
    77cc:	463e      	mov	r6, r7
    77ce:	e702      	b.n	75d6 <_realloc_r+0x122>
    77d0:	463a      	mov	r2, r7
    77d2:	e6f7      	b.n	75c4 <_realloc_r+0x110>
    77d4:	4631      	mov	r1, r6
    77d6:	4638      	mov	r0, r7
    77d8:	461c      	mov	r4, r3
    77da:	46d0      	mov	r8, sl
    77dc:	f7ff fdac 	bl	7338 <memmove>
    77e0:	463e      	mov	r6, r7
    77e2:	e6f8      	b.n	75d6 <_realloc_r+0x122>
    77e4:	68b3      	ldr	r3, [r6, #8]
    77e6:	f8ca 3010 	str.w	r3, [sl, #16]
    77ea:	68f3      	ldr	r3, [r6, #12]
    77ec:	f8ca 3014 	str.w	r3, [sl, #20]
    77f0:	2a24      	cmp	r2, #36	; 0x24
    77f2:	d01b      	beq.n	782c <_realloc_r+0x378>
    77f4:	3610      	adds	r6, #16
    77f6:	f10a 0318 	add.w	r3, sl, #24
    77fa:	e7ae      	b.n	775a <_realloc_r+0x2a6>
    77fc:	6933      	ldr	r3, [r6, #16]
    77fe:	6103      	str	r3, [r0, #16]
    7800:	6973      	ldr	r3, [r6, #20]
    7802:	6143      	str	r3, [r0, #20]
    7804:	f106 0218 	add.w	r2, r6, #24
    7808:	f100 0318 	add.w	r3, r0, #24
    780c:	e697      	b.n	753e <_realloc_r+0x8a>
    780e:	bf00      	nop
    7810:	1fff8d88 	.word	0x1fff8d88
    7814:	68b1      	ldr	r1, [r6, #8]
    7816:	f8ca 1010 	str.w	r1, [sl, #16]
    781a:	68f1      	ldr	r1, [r6, #12]
    781c:	f8ca 1014 	str.w	r1, [sl, #20]
    7820:	2a24      	cmp	r2, #36	; 0x24
    7822:	d00f      	beq.n	7844 <_realloc_r+0x390>
    7824:	3610      	adds	r6, #16
    7826:	f10a 0218 	add.w	r2, sl, #24
    782a:	e6cb      	b.n	75c4 <_realloc_r+0x110>
    782c:	6933      	ldr	r3, [r6, #16]
    782e:	f8ca 3018 	str.w	r3, [sl, #24]
    7832:	6973      	ldr	r3, [r6, #20]
    7834:	f8ca 301c 	str.w	r3, [sl, #28]
    7838:	3618      	adds	r6, #24
    783a:	f10a 0320 	add.w	r3, sl, #32
    783e:	e78c      	b.n	775a <_realloc_r+0x2a6>
    7840:	463a      	mov	r2, r7
    7842:	e764      	b.n	770e <_realloc_r+0x25a>
    7844:	6932      	ldr	r2, [r6, #16]
    7846:	f8ca 2018 	str.w	r2, [sl, #24]
    784a:	6972      	ldr	r2, [r6, #20]
    784c:	f8ca 201c 	str.w	r2, [sl, #28]
    7850:	3618      	adds	r6, #24
    7852:	f10a 0220 	add.w	r2, sl, #32
    7856:	e6b5      	b.n	75c4 <_realloc_r+0x110>
    7858:	4631      	mov	r1, r6
    785a:	4638      	mov	r0, r7
    785c:	9301      	str	r3, [sp, #4]
    785e:	f7ff fd6b 	bl	7338 <memmove>
    7862:	9b01      	ldr	r3, [sp, #4]
    7864:	e759      	b.n	771a <_realloc_r+0x266>
    7866:	68b1      	ldr	r1, [r6, #8]
    7868:	f8ca 1010 	str.w	r1, [sl, #16]
    786c:	68f1      	ldr	r1, [r6, #12]
    786e:	f8ca 1014 	str.w	r1, [sl, #20]
    7872:	2a24      	cmp	r2, #36	; 0x24
    7874:	d003      	beq.n	787e <_realloc_r+0x3ca>
    7876:	3610      	adds	r6, #16
    7878:	f10a 0218 	add.w	r2, sl, #24
    787c:	e747      	b.n	770e <_realloc_r+0x25a>
    787e:	6932      	ldr	r2, [r6, #16]
    7880:	f8ca 2018 	str.w	r2, [sl, #24]
    7884:	6972      	ldr	r2, [r6, #20]
    7886:	f8ca 201c 	str.w	r2, [sl, #28]
    788a:	3618      	adds	r6, #24
    788c:	f10a 0220 	add.w	r2, sl, #32
    7890:	e73d      	b.n	770e <_realloc_r+0x25a>
    7892:	bf00      	nop

00007894 <_sbrk_r>:
    7894:	b538      	push	{r3, r4, r5, lr}
    7896:	4c07      	ldr	r4, [pc, #28]	; (78b4 <_sbrk_r+0x20>)
    7898:	2300      	movs	r3, #0
    789a:	4605      	mov	r5, r0
    789c:	4608      	mov	r0, r1
    789e:	6023      	str	r3, [r4, #0]
    78a0:	f7fc fdb4 	bl	440c <_sbrk>
    78a4:	1c43      	adds	r3, r0, #1
    78a6:	d000      	beq.n	78aa <_sbrk_r+0x16>
    78a8:	bd38      	pop	{r3, r4, r5, pc}
    78aa:	6823      	ldr	r3, [r4, #0]
    78ac:	2b00      	cmp	r3, #0
    78ae:	d0fb      	beq.n	78a8 <_sbrk_r+0x14>
    78b0:	602b      	str	r3, [r5, #0]
    78b2:	bd38      	pop	{r3, r4, r5, pc}
    78b4:	1fffa434 	.word	0x1fffa434
    78b8:	ffffffff 	.word	0xffffffff
    78bc:	ffffffff 	.word	0xffffffff
    78c0:	eba2 0003 	sub.w	r0, r2, r3
    78c4:	4770      	bx	lr
    78c6:	bf00      	nop

000078c8 <strcmp>:
    78c8:	7802      	ldrb	r2, [r0, #0]
    78ca:	780b      	ldrb	r3, [r1, #0]
    78cc:	2a01      	cmp	r2, #1
    78ce:	bf28      	it	cs
    78d0:	429a      	cmpcs	r2, r3
    78d2:	d1f5      	bne.n	78c0 <_sbrk_r+0x2c>
    78d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    78d8:	ea40 0401 	orr.w	r4, r0, r1
    78dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    78e0:	f06f 0c00 	mvn.w	ip, #0
    78e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    78e8:	b312      	cbz	r2, 7930 <strcmp+0x68>
    78ea:	ea80 0401 	eor.w	r4, r0, r1
    78ee:	f014 0f07 	tst.w	r4, #7
    78f2:	d16a      	bne.n	79ca <strcmp+0x102>
    78f4:	f000 0407 	and.w	r4, r0, #7
    78f8:	f020 0007 	bic.w	r0, r0, #7
    78fc:	f004 0503 	and.w	r5, r4, #3
    7900:	f021 0107 	bic.w	r1, r1, #7
    7904:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7908:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    790c:	f014 0f04 	tst.w	r4, #4
    7910:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    7914:	fa0c f405 	lsl.w	r4, ip, r5
    7918:	ea62 0204 	orn	r2, r2, r4
    791c:	ea66 0604 	orn	r6, r6, r4
    7920:	d00a      	beq.n	7938 <strcmp+0x70>
    7922:	ea63 0304 	orn	r3, r3, r4
    7926:	4662      	mov	r2, ip
    7928:	ea67 0704 	orn	r7, r7, r4
    792c:	4666      	mov	r6, ip
    792e:	e003      	b.n	7938 <strcmp+0x70>
    7930:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    7934:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    7938:	fa82 f54c 	uadd8	r5, r2, ip
    793c:	ea82 0406 	eor.w	r4, r2, r6
    7940:	faa4 f48c 	sel	r4, r4, ip
    7944:	bb6c      	cbnz	r4, 79a2 <strcmp+0xda>
    7946:	fa83 f54c 	uadd8	r5, r3, ip
    794a:	ea83 0507 	eor.w	r5, r3, r7
    794e:	faa5 f58c 	sel	r5, r5, ip
    7952:	b995      	cbnz	r5, 797a <strcmp+0xb2>
    7954:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    7958:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    795c:	fa82 f54c 	uadd8	r5, r2, ip
    7960:	ea82 0406 	eor.w	r4, r2, r6
    7964:	faa4 f48c 	sel	r4, r4, ip
    7968:	fa83 f54c 	uadd8	r5, r3, ip
    796c:	ea83 0507 	eor.w	r5, r3, r7
    7970:	faa5 f58c 	sel	r5, r5, ip
    7974:	4325      	orrs	r5, r4
    7976:	d0db      	beq.n	7930 <strcmp+0x68>
    7978:	b99c      	cbnz	r4, 79a2 <strcmp+0xda>
    797a:	ba2d      	rev	r5, r5
    797c:	fab5 f485 	clz	r4, r5
    7980:	f024 0407 	bic.w	r4, r4, #7
    7984:	fa27 f104 	lsr.w	r1, r7, r4
    7988:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    798c:	fa23 f304 	lsr.w	r3, r3, r4
    7990:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    7994:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7998:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    799c:	eba0 0001 	sub.w	r0, r0, r1
    79a0:	4770      	bx	lr
    79a2:	ba24      	rev	r4, r4
    79a4:	fab4 f484 	clz	r4, r4
    79a8:	f024 0407 	bic.w	r4, r4, #7
    79ac:	fa26 f104 	lsr.w	r1, r6, r4
    79b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    79b4:	fa22 f204 	lsr.w	r2, r2, r4
    79b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    79bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    79c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    79c4:	eba0 0001 	sub.w	r0, r0, r1
    79c8:	4770      	bx	lr
    79ca:	f014 0f03 	tst.w	r4, #3
    79ce:	d13c      	bne.n	7a4a <strcmp+0x182>
    79d0:	f010 0403 	ands.w	r4, r0, #3
    79d4:	d128      	bne.n	7a28 <strcmp+0x160>
    79d6:	f850 2b08 	ldr.w	r2, [r0], #8
    79da:	f851 3b08 	ldr.w	r3, [r1], #8
    79de:	fa82 f54c 	uadd8	r5, r2, ip
    79e2:	ea82 0503 	eor.w	r5, r2, r3
    79e6:	faa5 f58c 	sel	r5, r5, ip
    79ea:	b95d      	cbnz	r5, 7a04 <strcmp+0x13c>
    79ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
    79f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    79f4:	fa82 f54c 	uadd8	r5, r2, ip
    79f8:	ea82 0503 	eor.w	r5, r2, r3
    79fc:	faa5 f58c 	sel	r5, r5, ip
    7a00:	2d00      	cmp	r5, #0
    7a02:	d0e8      	beq.n	79d6 <strcmp+0x10e>
    7a04:	ba2d      	rev	r5, r5
    7a06:	fab5 f485 	clz	r4, r5
    7a0a:	f024 0407 	bic.w	r4, r4, #7
    7a0e:	fa23 f104 	lsr.w	r1, r3, r4
    7a12:	fa22 f204 	lsr.w	r2, r2, r4
    7a16:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    7a1a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7a1e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7a22:	eba0 0001 	sub.w	r0, r0, r1
    7a26:	4770      	bx	lr
    7a28:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    7a2c:	f020 0003 	bic.w	r0, r0, #3
    7a30:	f850 2b08 	ldr.w	r2, [r0], #8
    7a34:	f021 0103 	bic.w	r1, r1, #3
    7a38:	f851 3b08 	ldr.w	r3, [r1], #8
    7a3c:	fa0c f404 	lsl.w	r4, ip, r4
    7a40:	ea62 0204 	orn	r2, r2, r4
    7a44:	ea63 0304 	orn	r3, r3, r4
    7a48:	e7c9      	b.n	79de <strcmp+0x116>
    7a4a:	f010 0403 	ands.w	r4, r0, #3
    7a4e:	d01a      	beq.n	7a86 <strcmp+0x1be>
    7a50:	eba1 0104 	sub.w	r1, r1, r4
    7a54:	f020 0003 	bic.w	r0, r0, #3
    7a58:	07e4      	lsls	r4, r4, #31
    7a5a:	f850 2b04 	ldr.w	r2, [r0], #4
    7a5e:	d006      	beq.n	7a6e <strcmp+0x1a6>
    7a60:	d20f      	bcs.n	7a82 <strcmp+0x1ba>
    7a62:	788b      	ldrb	r3, [r1, #2]
    7a64:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    7a68:	1ae4      	subs	r4, r4, r3
    7a6a:	d106      	bne.n	7a7a <strcmp+0x1b2>
    7a6c:	b12b      	cbz	r3, 7a7a <strcmp+0x1b2>
    7a6e:	78cb      	ldrb	r3, [r1, #3]
    7a70:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    7a74:	1ae4      	subs	r4, r4, r3
    7a76:	d100      	bne.n	7a7a <strcmp+0x1b2>
    7a78:	b91b      	cbnz	r3, 7a82 <strcmp+0x1ba>
    7a7a:	4620      	mov	r0, r4
    7a7c:	f85d 4b10 	ldr.w	r4, [sp], #16
    7a80:	4770      	bx	lr
    7a82:	f101 0104 	add.w	r1, r1, #4
    7a86:	f850 2b04 	ldr.w	r2, [r0], #4
    7a8a:	07cc      	lsls	r4, r1, #31
    7a8c:	f021 0103 	bic.w	r1, r1, #3
    7a90:	f851 3b04 	ldr.w	r3, [r1], #4
    7a94:	d848      	bhi.n	7b28 <strcmp+0x260>
    7a96:	d224      	bcs.n	7ae2 <strcmp+0x21a>
    7a98:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    7a9c:	fa82 f54c 	uadd8	r5, r2, ip
    7aa0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    7aa4:	faa5 f58c 	sel	r5, r5, ip
    7aa8:	d10a      	bne.n	7ac0 <strcmp+0x1f8>
    7aaa:	b965      	cbnz	r5, 7ac6 <strcmp+0x1fe>
    7aac:	f851 3b04 	ldr.w	r3, [r1], #4
    7ab0:	ea84 0402 	eor.w	r4, r4, r2
    7ab4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    7ab8:	d10e      	bne.n	7ad8 <strcmp+0x210>
    7aba:	f850 2b04 	ldr.w	r2, [r0], #4
    7abe:	e7eb      	b.n	7a98 <strcmp+0x1d0>
    7ac0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    7ac4:	e055      	b.n	7b72 <strcmp+0x2aa>
    7ac6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    7aca:	d14d      	bne.n	7b68 <strcmp+0x2a0>
    7acc:	7808      	ldrb	r0, [r1, #0]
    7ace:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7ad2:	f1c0 0000 	rsb	r0, r0, #0
    7ad6:	4770      	bx	lr
    7ad8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    7adc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    7ae0:	e047      	b.n	7b72 <strcmp+0x2aa>
    7ae2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    7ae6:	fa82 f54c 	uadd8	r5, r2, ip
    7aea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    7aee:	faa5 f58c 	sel	r5, r5, ip
    7af2:	d10a      	bne.n	7b0a <strcmp+0x242>
    7af4:	b965      	cbnz	r5, 7b10 <strcmp+0x248>
    7af6:	f851 3b04 	ldr.w	r3, [r1], #4
    7afa:	ea84 0402 	eor.w	r4, r4, r2
    7afe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    7b02:	d10c      	bne.n	7b1e <strcmp+0x256>
    7b04:	f850 2b04 	ldr.w	r2, [r0], #4
    7b08:	e7eb      	b.n	7ae2 <strcmp+0x21a>
    7b0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    7b0e:	e030      	b.n	7b72 <strcmp+0x2aa>
    7b10:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    7b14:	d128      	bne.n	7b68 <strcmp+0x2a0>
    7b16:	880b      	ldrh	r3, [r1, #0]
    7b18:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7b1c:	e029      	b.n	7b72 <strcmp+0x2aa>
    7b1e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7b22:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    7b26:	e024      	b.n	7b72 <strcmp+0x2aa>
    7b28:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    7b2c:	fa82 f54c 	uadd8	r5, r2, ip
    7b30:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    7b34:	faa5 f58c 	sel	r5, r5, ip
    7b38:	d10a      	bne.n	7b50 <strcmp+0x288>
    7b3a:	b965      	cbnz	r5, 7b56 <strcmp+0x28e>
    7b3c:	f851 3b04 	ldr.w	r3, [r1], #4
    7b40:	ea84 0402 	eor.w	r4, r4, r2
    7b44:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    7b48:	d109      	bne.n	7b5e <strcmp+0x296>
    7b4a:	f850 2b04 	ldr.w	r2, [r0], #4
    7b4e:	e7eb      	b.n	7b28 <strcmp+0x260>
    7b50:	ea4f 6313 	mov.w	r3, r3, lsr #24
    7b54:	e00d      	b.n	7b72 <strcmp+0x2aa>
    7b56:	f015 0fff 	tst.w	r5, #255	; 0xff
    7b5a:	d105      	bne.n	7b68 <strcmp+0x2a0>
    7b5c:	680b      	ldr	r3, [r1, #0]
    7b5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    7b62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7b66:	e004      	b.n	7b72 <strcmp+0x2aa>
    7b68:	f04f 0000 	mov.w	r0, #0
    7b6c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7b70:	4770      	bx	lr
    7b72:	ba12      	rev	r2, r2
    7b74:	ba1b      	rev	r3, r3
    7b76:	fa82 f44c 	uadd8	r4, r2, ip
    7b7a:	ea82 0403 	eor.w	r4, r2, r3
    7b7e:	faa4 f58c 	sel	r5, r4, ip
    7b82:	fab5 f485 	clz	r4, r5
    7b86:	fa02 f204 	lsl.w	r2, r2, r4
    7b8a:	fa03 f304 	lsl.w	r3, r3, r4
    7b8e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    7b92:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7b96:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    7b9a:	4770      	bx	lr

00007b9c <strcpy>:
    7b9c:	ea80 0201 	eor.w	r2, r0, r1
    7ba0:	4684      	mov	ip, r0
    7ba2:	f012 0f03 	tst.w	r2, #3
    7ba6:	d14f      	bne.n	7c48 <strcpy+0xac>
    7ba8:	f011 0f03 	tst.w	r1, #3
    7bac:	d132      	bne.n	7c14 <strcpy+0x78>
    7bae:	f84d 4d04 	str.w	r4, [sp, #-4]!
    7bb2:	f011 0f04 	tst.w	r1, #4
    7bb6:	f851 3b04 	ldr.w	r3, [r1], #4
    7bba:	d00b      	beq.n	7bd4 <strcpy+0x38>
    7bbc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7bc0:	439a      	bics	r2, r3
    7bc2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7bc6:	bf04      	itt	eq
    7bc8:	f84c 3b04 	streq.w	r3, [ip], #4
    7bcc:	f851 3b04 	ldreq.w	r3, [r1], #4
    7bd0:	d116      	bne.n	7c00 <strcpy+0x64>
    7bd2:	bf00      	nop
    7bd4:	f851 4b04 	ldr.w	r4, [r1], #4
    7bd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7bdc:	439a      	bics	r2, r3
    7bde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7be2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    7be6:	d10b      	bne.n	7c00 <strcpy+0x64>
    7be8:	f84c 3b04 	str.w	r3, [ip], #4
    7bec:	43a2      	bics	r2, r4
    7bee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7bf2:	bf04      	itt	eq
    7bf4:	f851 3b04 	ldreq.w	r3, [r1], #4
    7bf8:	f84c 4b04 	streq.w	r4, [ip], #4
    7bfc:	d0ea      	beq.n	7bd4 <strcpy+0x38>
    7bfe:	4623      	mov	r3, r4
    7c00:	f80c 3b01 	strb.w	r3, [ip], #1
    7c04:	f013 0fff 	tst.w	r3, #255	; 0xff
    7c08:	ea4f 2333 	mov.w	r3, r3, ror #8
    7c0c:	d1f8      	bne.n	7c00 <strcpy+0x64>
    7c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7c12:	4770      	bx	lr
    7c14:	f011 0f01 	tst.w	r1, #1
    7c18:	d006      	beq.n	7c28 <strcpy+0x8c>
    7c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
    7c1e:	f80c 2b01 	strb.w	r2, [ip], #1
    7c22:	2a00      	cmp	r2, #0
    7c24:	bf08      	it	eq
    7c26:	4770      	bxeq	lr
    7c28:	f011 0f02 	tst.w	r1, #2
    7c2c:	d0bf      	beq.n	7bae <strcpy+0x12>
    7c2e:	f831 2b02 	ldrh.w	r2, [r1], #2
    7c32:	f012 0fff 	tst.w	r2, #255	; 0xff
    7c36:	bf16      	itet	ne
    7c38:	f82c 2b02 	strhne.w	r2, [ip], #2
    7c3c:	f88c 2000 	strbeq.w	r2, [ip]
    7c40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    7c44:	d1b3      	bne.n	7bae <strcpy+0x12>
    7c46:	4770      	bx	lr
    7c48:	f811 2b01 	ldrb.w	r2, [r1], #1
    7c4c:	f80c 2b01 	strb.w	r2, [ip], #1
    7c50:	2a00      	cmp	r2, #0
    7c52:	d1f9      	bne.n	7c48 <strcpy+0xac>
    7c54:	4770      	bx	lr
    7c56:	bf00      	nop
    7c58:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c5c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c60:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c64:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c68:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c70:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c74:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c78:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7c7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00007c80 <strlen>:
    7c80:	f890 f000 	pld	[r0]
    7c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    7c88:	f020 0107 	bic.w	r1, r0, #7
    7c8c:	f06f 0c00 	mvn.w	ip, #0
    7c90:	f010 0407 	ands.w	r4, r0, #7
    7c94:	f891 f020 	pld	[r1, #32]
    7c98:	f040 8049 	bne.w	7d2e <strlen+0xae>
    7c9c:	f04f 0400 	mov.w	r4, #0
    7ca0:	f06f 0007 	mvn.w	r0, #7
    7ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
    7ca8:	f891 f040 	pld	[r1, #64]	; 0x40
    7cac:	f100 0008 	add.w	r0, r0, #8
    7cb0:	fa82 f24c 	uadd8	r2, r2, ip
    7cb4:	faa4 f28c 	sel	r2, r4, ip
    7cb8:	fa83 f34c 	uadd8	r3, r3, ip
    7cbc:	faa2 f38c 	sel	r3, r2, ip
    7cc0:	bb4b      	cbnz	r3, 7d16 <strlen+0x96>
    7cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    7cc6:	fa82 f24c 	uadd8	r2, r2, ip
    7cca:	f100 0008 	add.w	r0, r0, #8
    7cce:	faa4 f28c 	sel	r2, r4, ip
    7cd2:	fa83 f34c 	uadd8	r3, r3, ip
    7cd6:	faa2 f38c 	sel	r3, r2, ip
    7cda:	b9e3      	cbnz	r3, 7d16 <strlen+0x96>
    7cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    7ce0:	fa82 f24c 	uadd8	r2, r2, ip
    7ce4:	f100 0008 	add.w	r0, r0, #8
    7ce8:	faa4 f28c 	sel	r2, r4, ip
    7cec:	fa83 f34c 	uadd8	r3, r3, ip
    7cf0:	faa2 f38c 	sel	r3, r2, ip
    7cf4:	b97b      	cbnz	r3, 7d16 <strlen+0x96>
    7cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    7cfa:	f101 0120 	add.w	r1, r1, #32
    7cfe:	fa82 f24c 	uadd8	r2, r2, ip
    7d02:	f100 0008 	add.w	r0, r0, #8
    7d06:	faa4 f28c 	sel	r2, r4, ip
    7d0a:	fa83 f34c 	uadd8	r3, r3, ip
    7d0e:	faa2 f38c 	sel	r3, r2, ip
    7d12:	2b00      	cmp	r3, #0
    7d14:	d0c6      	beq.n	7ca4 <strlen+0x24>
    7d16:	2a00      	cmp	r2, #0
    7d18:	bf04      	itt	eq
    7d1a:	3004      	addeq	r0, #4
    7d1c:	461a      	moveq	r2, r3
    7d1e:	ba12      	rev	r2, r2
    7d20:	fab2 f282 	clz	r2, r2
    7d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    7d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    7d2c:	4770      	bx	lr
    7d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    7d32:	f004 0503 	and.w	r5, r4, #3
    7d36:	f1c4 0000 	rsb	r0, r4, #0
    7d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7d3e:	f014 0f04 	tst.w	r4, #4
    7d42:	f891 f040 	pld	[r1, #64]	; 0x40
    7d46:	fa0c f505 	lsl.w	r5, ip, r5
    7d4a:	ea62 0205 	orn	r2, r2, r5
    7d4e:	bf1c      	itt	ne
    7d50:	ea63 0305 	ornne	r3, r3, r5
    7d54:	4662      	movne	r2, ip
    7d56:	f04f 0400 	mov.w	r4, #0
    7d5a:	e7a9      	b.n	7cb0 <strlen+0x30>

00007d5c <strncpy>:
    7d5c:	ea40 0301 	orr.w	r3, r0, r1
    7d60:	079b      	lsls	r3, r3, #30
    7d62:	b470      	push	{r4, r5, r6}
    7d64:	d12b      	bne.n	7dbe <strncpy+0x62>
    7d66:	2a03      	cmp	r2, #3
    7d68:	d929      	bls.n	7dbe <strncpy+0x62>
    7d6a:	460c      	mov	r4, r1
    7d6c:	4603      	mov	r3, r0
    7d6e:	4621      	mov	r1, r4
    7d70:	f854 6b04 	ldr.w	r6, [r4], #4
    7d74:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    7d78:	ea25 0506 	bic.w	r5, r5, r6
    7d7c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    7d80:	d106      	bne.n	7d90 <strncpy+0x34>
    7d82:	3a04      	subs	r2, #4
    7d84:	2a03      	cmp	r2, #3
    7d86:	f843 6b04 	str.w	r6, [r3], #4
    7d8a:	4621      	mov	r1, r4
    7d8c:	d8ef      	bhi.n	7d6e <strncpy+0x12>
    7d8e:	b1a2      	cbz	r2, 7dba <strncpy+0x5e>
    7d90:	780c      	ldrb	r4, [r1, #0]
    7d92:	701c      	strb	r4, [r3, #0]
    7d94:	3a01      	subs	r2, #1
    7d96:	3301      	adds	r3, #1
    7d98:	3101      	adds	r1, #1
    7d9a:	b13c      	cbz	r4, 7dac <strncpy+0x50>
    7d9c:	b16a      	cbz	r2, 7dba <strncpy+0x5e>
    7d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7da2:	f803 4b01 	strb.w	r4, [r3], #1
    7da6:	3a01      	subs	r2, #1
    7da8:	2c00      	cmp	r4, #0
    7daa:	d1f7      	bne.n	7d9c <strncpy+0x40>
    7dac:	b12a      	cbz	r2, 7dba <strncpy+0x5e>
    7dae:	441a      	add	r2, r3
    7db0:	2100      	movs	r1, #0
    7db2:	f803 1b01 	strb.w	r1, [r3], #1
    7db6:	429a      	cmp	r2, r3
    7db8:	d1fb      	bne.n	7db2 <strncpy+0x56>
    7dba:	bc70      	pop	{r4, r5, r6}
    7dbc:	4770      	bx	lr
    7dbe:	4603      	mov	r3, r0
    7dc0:	e7e5      	b.n	7d8e <strncpy+0x32>
    7dc2:	bf00      	nop

00007dc4 <_strtol_l.isra.0>:
    7dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    7dcc:	460f      	mov	r7, r1
    7dce:	4680      	mov	r8, r0
    7dd0:	4616      	mov	r6, r2
    7dd2:	461d      	mov	r5, r3
    7dd4:	468b      	mov	fp, r1
    7dd6:	e000      	b.n	7dda <_strtol_l.isra.0+0x16>
    7dd8:	46a3      	mov	fp, r4
    7dda:	465c      	mov	r4, fp
    7ddc:	4648      	mov	r0, r9
    7dde:	f814 ab01 	ldrb.w	sl, [r4], #1
    7de2:	f7fe ffc7 	bl	6d74 <__locale_ctype_ptr_l>
    7de6:	4450      	add	r0, sl
    7de8:	7841      	ldrb	r1, [r0, #1]
    7dea:	f001 0108 	and.w	r1, r1, #8
    7dee:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    7df2:	2900      	cmp	r1, #0
    7df4:	d1f0      	bne.n	7dd8 <_strtol_l.isra.0+0x14>
    7df6:	4652      	mov	r2, sl
    7df8:	2a2d      	cmp	r2, #45	; 0x2d
    7dfa:	d061      	beq.n	7ec0 <_strtol_l.isra.0+0xfc>
    7dfc:	2a2b      	cmp	r2, #43	; 0x2b
    7dfe:	bf04      	itt	eq
    7e00:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    7e04:	f10b 0402 	addeq.w	r4, fp, #2
    7e08:	2d00      	cmp	r5, #0
    7e0a:	d043      	beq.n	7e94 <_strtol_l.isra.0+0xd0>
    7e0c:	2d10      	cmp	r5, #16
    7e0e:	d065      	beq.n	7edc <_strtol_l.isra.0+0x118>
    7e10:	46a9      	mov	r9, r5
    7e12:	f1bc 0f00 	cmp.w	ip, #0
    7e16:	bf0c      	ite	eq
    7e18:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    7e1c:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    7e20:	2100      	movs	r1, #0
    7e22:	fbba fef9 	udiv	lr, sl, r9
    7e26:	4608      	mov	r0, r1
    7e28:	fb09 aa1e 	mls	sl, r9, lr, sl
    7e2c:	e005      	b.n	7e3a <_strtol_l.isra.0+0x76>
    7e2e:	d029      	beq.n	7e84 <_strtol_l.isra.0+0xc0>
    7e30:	fb09 3000 	mla	r0, r9, r0, r3
    7e34:	2101      	movs	r1, #1
    7e36:	f814 2b01 	ldrb.w	r2, [r4], #1
    7e3a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    7e3e:	2b09      	cmp	r3, #9
    7e40:	d905      	bls.n	7e4e <_strtol_l.isra.0+0x8a>
    7e42:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    7e46:	2b19      	cmp	r3, #25
    7e48:	d80a      	bhi.n	7e60 <_strtol_l.isra.0+0x9c>
    7e4a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    7e4e:	429d      	cmp	r5, r3
    7e50:	dd0e      	ble.n	7e70 <_strtol_l.isra.0+0xac>
    7e52:	1c4a      	adds	r2, r1, #1
    7e54:	d0ef      	beq.n	7e36 <_strtol_l.isra.0+0x72>
    7e56:	4586      	cmp	lr, r0
    7e58:	d2e9      	bcs.n	7e2e <_strtol_l.isra.0+0x6a>
    7e5a:	f04f 31ff 	mov.w	r1, #4294967295
    7e5e:	e7ea      	b.n	7e36 <_strtol_l.isra.0+0x72>
    7e60:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    7e64:	2b19      	cmp	r3, #25
    7e66:	d803      	bhi.n	7e70 <_strtol_l.isra.0+0xac>
    7e68:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    7e6c:	429d      	cmp	r5, r3
    7e6e:	dcf0      	bgt.n	7e52 <_strtol_l.isra.0+0x8e>
    7e70:	1c4b      	adds	r3, r1, #1
    7e72:	d015      	beq.n	7ea0 <_strtol_l.isra.0+0xdc>
    7e74:	f1bc 0f00 	cmp.w	ip, #0
    7e78:	d110      	bne.n	7e9c <_strtol_l.isra.0+0xd8>
    7e7a:	b14e      	cbz	r6, 7e90 <_strtol_l.isra.0+0xcc>
    7e7c:	b9e1      	cbnz	r1, 7eb8 <_strtol_l.isra.0+0xf4>
    7e7e:	6037      	str	r7, [r6, #0]
    7e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e84:	459a      	cmp	sl, r3
    7e86:	dad3      	bge.n	7e30 <_strtol_l.isra.0+0x6c>
    7e88:	4670      	mov	r0, lr
    7e8a:	f04f 31ff 	mov.w	r1, #4294967295
    7e8e:	e7d2      	b.n	7e36 <_strtol_l.isra.0+0x72>
    7e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e94:	2a30      	cmp	r2, #48	; 0x30
    7e96:	d01a      	beq.n	7ece <_strtol_l.isra.0+0x10a>
    7e98:	250a      	movs	r5, #10
    7e9a:	e7b9      	b.n	7e10 <_strtol_l.isra.0+0x4c>
    7e9c:	4240      	negs	r0, r0
    7e9e:	e7ec      	b.n	7e7a <_strtol_l.isra.0+0xb6>
    7ea0:	f1bc 0f00 	cmp.w	ip, #0
    7ea4:	f04f 0322 	mov.w	r3, #34	; 0x22
    7ea8:	bf0c      	ite	eq
    7eaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    7eae:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    7eb2:	f8c8 3000 	str.w	r3, [r8]
    7eb6:	b1f6      	cbz	r6, 7ef6 <_strtol_l.isra.0+0x132>
    7eb8:	1e67      	subs	r7, r4, #1
    7eba:	6037      	str	r7, [r6, #0]
    7ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ec0:	f10b 0402 	add.w	r4, fp, #2
    7ec4:	f89b 2001 	ldrb.w	r2, [fp, #1]
    7ec8:	f04f 0c01 	mov.w	ip, #1
    7ecc:	e79c      	b.n	7e08 <_strtol_l.isra.0+0x44>
    7ece:	7823      	ldrb	r3, [r4, #0]
    7ed0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7ed4:	2b58      	cmp	r3, #88	; 0x58
    7ed6:	d008      	beq.n	7eea <_strtol_l.isra.0+0x126>
    7ed8:	2508      	movs	r5, #8
    7eda:	e799      	b.n	7e10 <_strtol_l.isra.0+0x4c>
    7edc:	2a30      	cmp	r2, #48	; 0x30
    7ede:	d197      	bne.n	7e10 <_strtol_l.isra.0+0x4c>
    7ee0:	7823      	ldrb	r3, [r4, #0]
    7ee2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7ee6:	2b58      	cmp	r3, #88	; 0x58
    7ee8:	d192      	bne.n	7e10 <_strtol_l.isra.0+0x4c>
    7eea:	f04f 0910 	mov.w	r9, #16
    7eee:	7862      	ldrb	r2, [r4, #1]
    7ef0:	464d      	mov	r5, r9
    7ef2:	3402      	adds	r4, #2
    7ef4:	e78d      	b.n	7e12 <_strtol_l.isra.0+0x4e>
    7ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7efa:	bf00      	nop

00007efc <strtol>:
    7efc:	b530      	push	{r4, r5, lr}
    7efe:	4c08      	ldr	r4, [pc, #32]	; (7f20 <strtol+0x24>)
    7f00:	4b08      	ldr	r3, [pc, #32]	; (7f24 <strtol+0x28>)
    7f02:	6825      	ldr	r5, [r4, #0]
    7f04:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    7f06:	b083      	sub	sp, #12
    7f08:	2c00      	cmp	r4, #0
    7f0a:	bf08      	it	eq
    7f0c:	461c      	moveq	r4, r3
    7f0e:	9400      	str	r4, [sp, #0]
    7f10:	4613      	mov	r3, r2
    7f12:	460a      	mov	r2, r1
    7f14:	4601      	mov	r1, r0
    7f16:	4628      	mov	r0, r5
    7f18:	f7ff ff54 	bl	7dc4 <_strtol_l.isra.0>
    7f1c:	b003      	add	sp, #12
    7f1e:	bd30      	pop	{r4, r5, pc}
    7f20:	1fff8c18 	.word	0x1fff8c18
    7f24:	1fff8c1c 	.word	0x1fff8c1c

00007f28 <__ascii_wctomb>:
    7f28:	b121      	cbz	r1, 7f34 <__ascii_wctomb+0xc>
    7f2a:	2aff      	cmp	r2, #255	; 0xff
    7f2c:	d804      	bhi.n	7f38 <__ascii_wctomb+0x10>
    7f2e:	700a      	strb	r2, [r1, #0]
    7f30:	2001      	movs	r0, #1
    7f32:	4770      	bx	lr
    7f34:	4608      	mov	r0, r1
    7f36:	4770      	bx	lr
    7f38:	238a      	movs	r3, #138	; 0x8a
    7f3a:	6003      	str	r3, [r0, #0]
    7f3c:	f04f 30ff 	mov.w	r0, #4294967295
    7f40:	4770      	bx	lr
    7f42:	bf00      	nop

00007f44 <__register_exitproc>:
    7f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f48:	4c25      	ldr	r4, [pc, #148]	; (7fe0 <__register_exitproc+0x9c>)
    7f4a:	6825      	ldr	r5, [r4, #0]
    7f4c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    7f50:	4606      	mov	r6, r0
    7f52:	4688      	mov	r8, r1
    7f54:	4692      	mov	sl, r2
    7f56:	4699      	mov	r9, r3
    7f58:	b3c4      	cbz	r4, 7fcc <__register_exitproc+0x88>
    7f5a:	6860      	ldr	r0, [r4, #4]
    7f5c:	281f      	cmp	r0, #31
    7f5e:	dc17      	bgt.n	7f90 <__register_exitproc+0x4c>
    7f60:	1c43      	adds	r3, r0, #1
    7f62:	b176      	cbz	r6, 7f82 <__register_exitproc+0x3e>
    7f64:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    7f68:	2201      	movs	r2, #1
    7f6a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    7f6e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    7f72:	4082      	lsls	r2, r0
    7f74:	4311      	orrs	r1, r2
    7f76:	2e02      	cmp	r6, #2
    7f78:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    7f7c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    7f80:	d01e      	beq.n	7fc0 <__register_exitproc+0x7c>
    7f82:	3002      	adds	r0, #2
    7f84:	6063      	str	r3, [r4, #4]
    7f86:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    7f8a:	2000      	movs	r0, #0
    7f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f90:	4b14      	ldr	r3, [pc, #80]	; (7fe4 <__register_exitproc+0xa0>)
    7f92:	b303      	cbz	r3, 7fd6 <__register_exitproc+0x92>
    7f94:	f44f 70c8 	mov.w	r0, #400	; 0x190
    7f98:	f7fe fef0 	bl	6d7c <malloc>
    7f9c:	4604      	mov	r4, r0
    7f9e:	b1d0      	cbz	r0, 7fd6 <__register_exitproc+0x92>
    7fa0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    7fa4:	2700      	movs	r7, #0
    7fa6:	e880 0088 	stmia.w	r0, {r3, r7}
    7faa:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    7fae:	4638      	mov	r0, r7
    7fb0:	2301      	movs	r3, #1
    7fb2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    7fb6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    7fba:	2e00      	cmp	r6, #0
    7fbc:	d0e1      	beq.n	7f82 <__register_exitproc+0x3e>
    7fbe:	e7d1      	b.n	7f64 <__register_exitproc+0x20>
    7fc0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    7fc4:	430a      	orrs	r2, r1
    7fc6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    7fca:	e7da      	b.n	7f82 <__register_exitproc+0x3e>
    7fcc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    7fd0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    7fd4:	e7c1      	b.n	7f5a <__register_exitproc+0x16>
    7fd6:	f04f 30ff 	mov.w	r0, #4294967295
    7fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fde:	bf00      	nop
    7fe0:	00008914 	.word	0x00008914
    7fe4:	00006d7d 	.word	0x00006d7d

00007fe8 <register_fini>:
    7fe8:	4b02      	ldr	r3, [pc, #8]	; (7ff4 <register_fini+0xc>)
    7fea:	b113      	cbz	r3, 7ff2 <register_fini+0xa>
    7fec:	4802      	ldr	r0, [pc, #8]	; (7ff8 <register_fini+0x10>)
    7fee:	f7f9 bf75 	b.w	1edc <atexit>
    7ff2:	4770      	bx	lr
    7ff4:	00000000 	.word	0x00000000
    7ff8:	00007ffd 	.word	0x00007ffd

00007ffc <__libc_fini_array>:
    7ffc:	b538      	push	{r3, r4, r5, lr}
    7ffe:	4d07      	ldr	r5, [pc, #28]	; (801c <__libc_fini_array+0x20>)
    8000:	4c07      	ldr	r4, [pc, #28]	; (8020 <__libc_fini_array+0x24>)
    8002:	1b2c      	subs	r4, r5, r4
    8004:	10a4      	asrs	r4, r4, #2
    8006:	d005      	beq.n	8014 <__libc_fini_array+0x18>
    8008:	3c01      	subs	r4, #1
    800a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    800e:	4798      	blx	r3
    8010:	2c00      	cmp	r4, #0
    8012:	d1f9      	bne.n	8008 <__libc_fini_array+0xc>
    8014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8018:	f000 bd1e 	b.w	8a58 <__init_array_end>
	...

00008024 <_malloc_trim_r>:
    8024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8026:	4f23      	ldr	r7, [pc, #140]	; (80b4 <_malloc_trim_r+0x90>)
    8028:	460c      	mov	r4, r1
    802a:	4606      	mov	r6, r0
    802c:	f7ff fa36 	bl	749c <__malloc_lock>
    8030:	68bb      	ldr	r3, [r7, #8]
    8032:	685d      	ldr	r5, [r3, #4]
    8034:	f025 0503 	bic.w	r5, r5, #3
    8038:	1b29      	subs	r1, r5, r4
    803a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    803e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    8042:	f021 010f 	bic.w	r1, r1, #15
    8046:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    804a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    804e:	db07      	blt.n	8060 <_malloc_trim_r+0x3c>
    8050:	2100      	movs	r1, #0
    8052:	4630      	mov	r0, r6
    8054:	f7ff fc1e 	bl	7894 <_sbrk_r>
    8058:	68bb      	ldr	r3, [r7, #8]
    805a:	442b      	add	r3, r5
    805c:	4298      	cmp	r0, r3
    805e:	d004      	beq.n	806a <_malloc_trim_r+0x46>
    8060:	4630      	mov	r0, r6
    8062:	f7ff fa1d 	bl	74a0 <__malloc_unlock>
    8066:	2000      	movs	r0, #0
    8068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    806a:	4261      	negs	r1, r4
    806c:	4630      	mov	r0, r6
    806e:	f7ff fc11 	bl	7894 <_sbrk_r>
    8072:	3001      	adds	r0, #1
    8074:	d00d      	beq.n	8092 <_malloc_trim_r+0x6e>
    8076:	4b10      	ldr	r3, [pc, #64]	; (80b8 <_malloc_trim_r+0x94>)
    8078:	68ba      	ldr	r2, [r7, #8]
    807a:	6819      	ldr	r1, [r3, #0]
    807c:	1b2d      	subs	r5, r5, r4
    807e:	f045 0501 	orr.w	r5, r5, #1
    8082:	4630      	mov	r0, r6
    8084:	1b09      	subs	r1, r1, r4
    8086:	6055      	str	r5, [r2, #4]
    8088:	6019      	str	r1, [r3, #0]
    808a:	f7ff fa09 	bl	74a0 <__malloc_unlock>
    808e:	2001      	movs	r0, #1
    8090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8092:	2100      	movs	r1, #0
    8094:	4630      	mov	r0, r6
    8096:	f7ff fbfd 	bl	7894 <_sbrk_r>
    809a:	68ba      	ldr	r2, [r7, #8]
    809c:	1a83      	subs	r3, r0, r2
    809e:	2b0f      	cmp	r3, #15
    80a0:	ddde      	ble.n	8060 <_malloc_trim_r+0x3c>
    80a2:	4c06      	ldr	r4, [pc, #24]	; (80bc <_malloc_trim_r+0x98>)
    80a4:	4904      	ldr	r1, [pc, #16]	; (80b8 <_malloc_trim_r+0x94>)
    80a6:	6824      	ldr	r4, [r4, #0]
    80a8:	f043 0301 	orr.w	r3, r3, #1
    80ac:	1b00      	subs	r0, r0, r4
    80ae:	6053      	str	r3, [r2, #4]
    80b0:	6008      	str	r0, [r1, #0]
    80b2:	e7d5      	b.n	8060 <_malloc_trim_r+0x3c>
    80b4:	1fff8d88 	.word	0x1fff8d88
    80b8:	1fffa3f8 	.word	0x1fffa3f8
    80bc:	1fff9194 	.word	0x1fff9194

000080c0 <_free_r>:
    80c0:	2900      	cmp	r1, #0
    80c2:	d045      	beq.n	8150 <_free_r+0x90>
    80c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80c8:	460d      	mov	r5, r1
    80ca:	4680      	mov	r8, r0
    80cc:	f7ff f9e6 	bl	749c <__malloc_lock>
    80d0:	f855 7c04 	ldr.w	r7, [r5, #-4]
    80d4:	496a      	ldr	r1, [pc, #424]	; (8280 <_free_r+0x1c0>)
    80d6:	f027 0301 	bic.w	r3, r7, #1
    80da:	f1a5 0408 	sub.w	r4, r5, #8
    80de:	18e2      	adds	r2, r4, r3
    80e0:	688e      	ldr	r6, [r1, #8]
    80e2:	6850      	ldr	r0, [r2, #4]
    80e4:	42b2      	cmp	r2, r6
    80e6:	f020 0003 	bic.w	r0, r0, #3
    80ea:	d062      	beq.n	81b2 <_free_r+0xf2>
    80ec:	07fe      	lsls	r6, r7, #31
    80ee:	6050      	str	r0, [r2, #4]
    80f0:	d40b      	bmi.n	810a <_free_r+0x4a>
    80f2:	f855 7c08 	ldr.w	r7, [r5, #-8]
    80f6:	1be4      	subs	r4, r4, r7
    80f8:	f101 0e08 	add.w	lr, r1, #8
    80fc:	68a5      	ldr	r5, [r4, #8]
    80fe:	4575      	cmp	r5, lr
    8100:	443b      	add	r3, r7
    8102:	d06f      	beq.n	81e4 <_free_r+0x124>
    8104:	68e7      	ldr	r7, [r4, #12]
    8106:	60ef      	str	r7, [r5, #12]
    8108:	60bd      	str	r5, [r7, #8]
    810a:	1815      	adds	r5, r2, r0
    810c:	686d      	ldr	r5, [r5, #4]
    810e:	07ed      	lsls	r5, r5, #31
    8110:	d542      	bpl.n	8198 <_free_r+0xd8>
    8112:	f043 0201 	orr.w	r2, r3, #1
    8116:	6062      	str	r2, [r4, #4]
    8118:	50e3      	str	r3, [r4, r3]
    811a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    811e:	d218      	bcs.n	8152 <_free_r+0x92>
    8120:	08db      	lsrs	r3, r3, #3
    8122:	1c5a      	adds	r2, r3, #1
    8124:	684d      	ldr	r5, [r1, #4]
    8126:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    812a:	60a7      	str	r7, [r4, #8]
    812c:	2001      	movs	r0, #1
    812e:	109b      	asrs	r3, r3, #2
    8130:	fa00 f303 	lsl.w	r3, r0, r3
    8134:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    8138:	431d      	orrs	r5, r3
    813a:	3808      	subs	r0, #8
    813c:	60e0      	str	r0, [r4, #12]
    813e:	604d      	str	r5, [r1, #4]
    8140:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    8144:	60fc      	str	r4, [r7, #12]
    8146:	4640      	mov	r0, r8
    8148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    814c:	f7ff b9a8 	b.w	74a0 <__malloc_unlock>
    8150:	4770      	bx	lr
    8152:	0a5a      	lsrs	r2, r3, #9
    8154:	2a04      	cmp	r2, #4
    8156:	d853      	bhi.n	8200 <_free_r+0x140>
    8158:	099a      	lsrs	r2, r3, #6
    815a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    815e:	007f      	lsls	r7, r7, #1
    8160:	f102 0538 	add.w	r5, r2, #56	; 0x38
    8164:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    8168:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    816c:	4944      	ldr	r1, [pc, #272]	; (8280 <_free_r+0x1c0>)
    816e:	3808      	subs	r0, #8
    8170:	4290      	cmp	r0, r2
    8172:	d04d      	beq.n	8210 <_free_r+0x150>
    8174:	6851      	ldr	r1, [r2, #4]
    8176:	f021 0103 	bic.w	r1, r1, #3
    817a:	428b      	cmp	r3, r1
    817c:	d202      	bcs.n	8184 <_free_r+0xc4>
    817e:	6892      	ldr	r2, [r2, #8]
    8180:	4290      	cmp	r0, r2
    8182:	d1f7      	bne.n	8174 <_free_r+0xb4>
    8184:	68d0      	ldr	r0, [r2, #12]
    8186:	60e0      	str	r0, [r4, #12]
    8188:	60a2      	str	r2, [r4, #8]
    818a:	6084      	str	r4, [r0, #8]
    818c:	60d4      	str	r4, [r2, #12]
    818e:	4640      	mov	r0, r8
    8190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8194:	f7ff b984 	b.w	74a0 <__malloc_unlock>
    8198:	6895      	ldr	r5, [r2, #8]
    819a:	4f3a      	ldr	r7, [pc, #232]	; (8284 <_free_r+0x1c4>)
    819c:	42bd      	cmp	r5, r7
    819e:	4403      	add	r3, r0
    81a0:	d03f      	beq.n	8222 <_free_r+0x162>
    81a2:	68d0      	ldr	r0, [r2, #12]
    81a4:	60e8      	str	r0, [r5, #12]
    81a6:	f043 0201 	orr.w	r2, r3, #1
    81aa:	6085      	str	r5, [r0, #8]
    81ac:	6062      	str	r2, [r4, #4]
    81ae:	50e3      	str	r3, [r4, r3]
    81b0:	e7b3      	b.n	811a <_free_r+0x5a>
    81b2:	07ff      	lsls	r7, r7, #31
    81b4:	4403      	add	r3, r0
    81b6:	d407      	bmi.n	81c8 <_free_r+0x108>
    81b8:	f855 2c08 	ldr.w	r2, [r5, #-8]
    81bc:	1aa4      	subs	r4, r4, r2
    81be:	4413      	add	r3, r2
    81c0:	68a0      	ldr	r0, [r4, #8]
    81c2:	68e2      	ldr	r2, [r4, #12]
    81c4:	60c2      	str	r2, [r0, #12]
    81c6:	6090      	str	r0, [r2, #8]
    81c8:	4a2f      	ldr	r2, [pc, #188]	; (8288 <_free_r+0x1c8>)
    81ca:	6812      	ldr	r2, [r2, #0]
    81cc:	f043 0001 	orr.w	r0, r3, #1
    81d0:	4293      	cmp	r3, r2
    81d2:	6060      	str	r0, [r4, #4]
    81d4:	608c      	str	r4, [r1, #8]
    81d6:	d3b6      	bcc.n	8146 <_free_r+0x86>
    81d8:	4b2c      	ldr	r3, [pc, #176]	; (828c <_free_r+0x1cc>)
    81da:	4640      	mov	r0, r8
    81dc:	6819      	ldr	r1, [r3, #0]
    81de:	f7ff ff21 	bl	8024 <_malloc_trim_r>
    81e2:	e7b0      	b.n	8146 <_free_r+0x86>
    81e4:	1811      	adds	r1, r2, r0
    81e6:	6849      	ldr	r1, [r1, #4]
    81e8:	07c9      	lsls	r1, r1, #31
    81ea:	d444      	bmi.n	8276 <_free_r+0x1b6>
    81ec:	6891      	ldr	r1, [r2, #8]
    81ee:	68d2      	ldr	r2, [r2, #12]
    81f0:	60ca      	str	r2, [r1, #12]
    81f2:	4403      	add	r3, r0
    81f4:	f043 0001 	orr.w	r0, r3, #1
    81f8:	6091      	str	r1, [r2, #8]
    81fa:	6060      	str	r0, [r4, #4]
    81fc:	50e3      	str	r3, [r4, r3]
    81fe:	e7a2      	b.n	8146 <_free_r+0x86>
    8200:	2a14      	cmp	r2, #20
    8202:	d817      	bhi.n	8234 <_free_r+0x174>
    8204:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    8208:	007f      	lsls	r7, r7, #1
    820a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    820e:	e7a9      	b.n	8164 <_free_r+0xa4>
    8210:	10aa      	asrs	r2, r5, #2
    8212:	684b      	ldr	r3, [r1, #4]
    8214:	2501      	movs	r5, #1
    8216:	fa05 f202 	lsl.w	r2, r5, r2
    821a:	4313      	orrs	r3, r2
    821c:	604b      	str	r3, [r1, #4]
    821e:	4602      	mov	r2, r0
    8220:	e7b1      	b.n	8186 <_free_r+0xc6>
    8222:	f043 0201 	orr.w	r2, r3, #1
    8226:	614c      	str	r4, [r1, #20]
    8228:	610c      	str	r4, [r1, #16]
    822a:	60e5      	str	r5, [r4, #12]
    822c:	60a5      	str	r5, [r4, #8]
    822e:	6062      	str	r2, [r4, #4]
    8230:	50e3      	str	r3, [r4, r3]
    8232:	e788      	b.n	8146 <_free_r+0x86>
    8234:	2a54      	cmp	r2, #84	; 0x54
    8236:	d806      	bhi.n	8246 <_free_r+0x186>
    8238:	0b1a      	lsrs	r2, r3, #12
    823a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    823e:	007f      	lsls	r7, r7, #1
    8240:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    8244:	e78e      	b.n	8164 <_free_r+0xa4>
    8246:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    824a:	d806      	bhi.n	825a <_free_r+0x19a>
    824c:	0bda      	lsrs	r2, r3, #15
    824e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    8252:	007f      	lsls	r7, r7, #1
    8254:	f102 0577 	add.w	r5, r2, #119	; 0x77
    8258:	e784      	b.n	8164 <_free_r+0xa4>
    825a:	f240 5054 	movw	r0, #1364	; 0x554
    825e:	4282      	cmp	r2, r0
    8260:	d806      	bhi.n	8270 <_free_r+0x1b0>
    8262:	0c9a      	lsrs	r2, r3, #18
    8264:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    8268:	007f      	lsls	r7, r7, #1
    826a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    826e:	e779      	b.n	8164 <_free_r+0xa4>
    8270:	27fe      	movs	r7, #254	; 0xfe
    8272:	257e      	movs	r5, #126	; 0x7e
    8274:	e776      	b.n	8164 <_free_r+0xa4>
    8276:	f043 0201 	orr.w	r2, r3, #1
    827a:	6062      	str	r2, [r4, #4]
    827c:	50e3      	str	r3, [r4, r3]
    827e:	e762      	b.n	8146 <_free_r+0x86>
    8280:	1fff8d88 	.word	0x1fff8d88
    8284:	1fff8d90 	.word	0x1fff8d90
    8288:	1fff9190 	.word	0x1fff9190
    828c:	1fffa3f4 	.word	0x1fffa3f4

00008290 <vtable for COctoWS2811Controller<(EOrder)66, (unsigned char)0>>:
	...
    8298:	000009b5 000008dd 00000475 000007d5     ........u.......
    82a8:	0000046d 00000471 00000479 0000203a     m...q...y...: ..
    82b8:	30303030 00000000 67676f54 676e696c     0000....Toggling
    82c8:	65754820 00000000 74746553 20676e69      Hue....Setting 
    82d8:	74746170 206e7265 626d756e 00007265     pattern number..
    82e8:	74746553 20676e69 20706f74 69736f70     Setting top posi
    82f8:	6e6f6974 00000000 74746553 20676e69     tion....Setting 
    8308:	74746f62 70206d6f 7469736f 006e6f69     bottom position.
    8318:	74746553 20676e69 65666665 6e207463     Setting effect n
    8328:	65626d75 00000072 74746553 20676e69     umber...Setting 
    8338:	65646f6d 6d756e20 00726562 61736944     mode number.Disa
    8348:	6e696c62 75412067 4d206f74 2e65646f     bling Auto Mode.
    8358:	00000000 74746553 20676e69 6f747541     ....Setting Auto
    8368:	74615020 6e726574 646f4d20 00002e65      Pattern Mode...
    8378:	74746553 20676e69 6f747541 646f4d20     Setting Auto Mod
    8388:	6f4d2065 002e6564 74746553 20676e69     e Mode..Setting 
    8398:	6f747541 74615020 6e726574 646f4d20     Auto Pattern Mod
    83a8:	6f4d2065 002e6564 74746553 20676e69     e Mode..Setting 
    83b8:	6f747541 656c5320 4d207065 2e65646f     Auto Sleep Mode.
    83c8:	00000000 656d6f53 6e696874 65772067     ....Something we
    83d8:	7720746e 676e6f72 61657220 676e6964     nt wrong reading
    83e8:	72657320 206c6169 6d6d6f63 00646e61      serial command.
    83f8:	656d6f53 6e696874 65772067 7720746e     Something went w
    8408:	676e6f72 61657220 676e6964 72657320     rong reading ser
    8418:	2c6c6169 6d6f6320 646e616d 73617720     ial, command was
    8428:	616c6220 002e6b6e 74746553 20676e69      blank..Setting 
    8438:	6c616e41 4520676f 63656666 00000074     Analog Effect...
    8448:	74746553 20676e69 6c616e41 5020676f     Setting Analog P
    8458:	65747461 00006e72 69726553 70206c61     attern..Serial p
    8468:	2074726f 6e65706f 002e6465 65636552     ort opened..Rece
    8478:	64657669 706e6920 73207475 6e697274     ived input strin
    8488:	00000067 50444d56 7c315f56 4d565f31     g...VMDPV_1|1_VM
    8498:	0d565044 0000000a ffff007c              DPV.....|...

000084a4 <RainbowColors_p>:
    84a4:	00ff0000 00d52a00 00ab5500 00ab7f00     .....*...U......
    84b4:	00abab00 0056d500 0000ff00 0000d52a     ......V.....*...
    84c4:	0000ab55 000056aa 000000ff 002a00d5     U....V........*.
    84d4:	005500ab 007f0081 00ab0055 00d5002b     ..U.....U...+...

000084e4 <PartyColors_p>:
    84e4:	005500ab 0084007c 00b5004b 00e5001b     ..U.|...K.......
    84f4:	00e81700 00b84700 00ab7700 00abab00     .....G...w......
    8504:	00ab5500 00dd2200 00f2000e 00c2003e     .U..."......>...
    8514:	008f0071 005f00a1 002f00d0 000007f9     q....._.../.....

00008524 <CloudColors_p>:
    8524:	000000ff 0000008b 0000008b 0000008b     ................
    8534:	0000008b 0000008b 0000008b 0000008b     ................
    8544:	000000ff 0000008b 0087ceeb 0087ceeb     ................
    8554:	00add8e6 00ffffff 00add8e6 0087ceeb     ................

00008564 <HeatColors_p>:
    8564:	00000000 00330000 00660000 00990000     ......3...f.....
    8574:	00cc0000 00ff0000 00ff3300 00ff6600     .........3...f..
    8584:	00ff9900 00ffcc00 00ffff00 00ffff33     ............3...
    8594:	00ffff66 00ffff99 00ffffcc 00ffffff     f...............

000085a4 <ForestColors_p>:
    85a4:	00006400 00006400 00556b2f 00006400     .d...d../kU..d..
    85b4:	00008000 00228b22 006b8e23 00008000     ....".".#.k.....
    85c4:	002e8b57 0066cdaa 0032cd32 009acd32     W.....f.2.2.2...
    85d4:	0090ee90 007cfc00 0066cdaa 00228b22     ......|...f.".".
    85e4:	000025a9 00000000 00002fe1 00000000     .%......./......
    85f4:	00002069 00000000 000035fd 00000000     i .......5......
    8604:	00002a29 00000000 00002ce1 00000000     )*.......,......
    8614:	000021bd 00000000 00002351 00000000     .!......Q#......
    8624:	00002065 00000000 00002145 00000000     e ......E!......

00008634 <sin16_C(unsigned short)::base>:
    8634:	18f90000 471c30fb 6a6d5a82 7d897641     .....0.G.ZmjAv.}

00008644 <b_m16_interleave>:
    8644:	29313100 0a751b5a                       .11)Z.u.

0000864c <CSWTCH.134>:
    864c:	00000005 00000007 00000009              ............

00008658 <sin16_C(unsigned short)::slope>:
    8658:	262c3031 040e171f 4e525450 00000000     10,&....PTRN....
    8668:	54434645 00000000 45444f4d 00000000     EFCT....MODE....
    8678:	54495242 00000000 31455548 00000000     BRIT....HUE1....
    8688:	32455548 00000000 33455548 00000000     HUE2....HUE3....
    8698:	34455548 00000000 35455548 00000000     HUE4....HUE5....
    86a8:	52424c46 00000000 50504f54 00000000     FLBR....TOPP....
    86b8:	50544f42 00000000 48544f42 00000000     BOTP....BOTH....
    86c8:	54504e41 00000000 46454e41 00000000     ANPT....ANEF....
    86d8:	53554150 00000000 43415541 00000000     PAUS....AUAC....
    86e8:	4f4e5541 00000000 4c535541 00000000     AUNO....AUSL....
    86f8:	54505541 00000000 4f4d5541 00000000     AUPT....AUMO....
    8708:	4d505541 ffffff00 50444d56 00005f45     AUPM....VMDPE_..
    8718:	003a323a 0000003a 444d565f 00004550     :2:.:..._VMDPE..
    8728:	50444d56 00005f43 444d565f 00004350     VMDPC_.._VMDPC..
    8738:	6f727245 41203a72 6d657474 74207470     Error: Attempt t
    8748:	6573206f 20612074 64616572 6c6e6f2d     o set a read-onl
    8758:	61762079 62616972 6f20656c 61642072     y variable or da
    8768:	74206174 20657079 20746f6e 70707573     ta type not supp
    8778:	6574726f 000a0d64                       orted...

00008780 <digital_pin_to_info_PGM>:
    8780:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    8790:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    87a0:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    87b0:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    87c0:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    87d0:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    87e0:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    87f0:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    8800:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    8810:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    8820:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    8830:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    8840:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
    8850:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
    8860:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
    8870:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
    8880:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@
    8890:	ffff0a0d                                ....

00008894 <vtable for usb_serial_class>:
	...
    889c:	00005f05 00005efd 00005ef9 00005ef5     ._...^...^...^..
    88ac:	00005ef1 00005eed 00005ee9 00005ee5     .^...^...^...^..

000088bc <usb_endpoint_config_table>:
    88bc:	15191500                                ....

000088c0 <usb_descriptor_list>:
    88c0:	00000100 1fff8748 00000012 00000200     ....H...........
    88d0:	1fff8774 00000043 00000300 1fff87d0     t...C...........
    88e0:	00000000 04090301 1fff875c 00000000     ........\.......
    88f0:	04090302 1fff87b8 00000000 04090303     ................
    8900:	1fff87d4 00000000 00000000 00000000     ................
    8910:	00000000                                ....

00008914 <_global_impure_ptr>:
    8914:	1fff87f0 00000043 49534f50 00000058     ....C...POSIX...
    8924:	0000002e                                ....

00008928 <_ctype_>:
    8928:	20202000 20202020 28282020 20282828     .         ((((( 
    8938:	20202020 20202020 20202020 20202020                     
    8948:	10108820 10101010 10101010 10101010      ...............
    8958:	04040410 04040404 10040404 10101010     ................
    8968:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8978:	01010101 01010101 01010101 10101010     ................
    8988:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8998:	02020202 02020202 02020202 10101010     ................
    89a8:	00000020 00000000 00000000 00000000      ...............
	...
    8a28:	ffffff00                                ....

00008a2c <_init>:
    8a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a2e:	bf00      	nop
    8a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8a32:	bc08      	pop	{r3}
    8a34:	469e      	mov	lr, r3
    8a36:	4770      	bx	lr

00008a38 <__init_array_start>:
    8a38:	00007fe9 	.word	0x00007fe9

00008a3c <__frame_dummy_init_array_entry>:
    8a3c:	00000435 00001bdd 00001ee1 00003d0d     5............=..
    8a4c:	00003f2d 00003f51 00004265              -?..Q?..eB..

Disassembly of section .fini:

00008a58 <_fini>:
    8a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a5a:	bf00      	nop
