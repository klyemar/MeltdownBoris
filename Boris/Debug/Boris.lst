
C:\Users\klyem\AppData\Local\Temp\VMBuilds\Boris\teensy31_teensy3\Debug/Boris.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	00 80 00 20 bd 01 00 00 91 43 00 00 49 43 00 00     ... .....C..IC..
      10:	49 43 00 00 49 43 00 00 49 43 00 00 49 43 00 00     IC..IC..IC..IC..
      20:	49 43 00 00 49 43 00 00 49 43 00 00 91 43 00 00     IC..IC..IC...C..
      30:	91 43 00 00 49 43 00 00 5d 5c 00 00 61 5d 00 00     .C..IC..]\..a]..
      40:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      50:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      60:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      70:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      80:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      90:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      a0:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      b0:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      c0:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      d0:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      e0:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
      f0:	91 43 00 00 c5 47 00 00 91 43 00 00 d1 63 00 00     .C...G...C...c..
     100:	91 43 00 00 fd 64 00 00 91 43 00 00 91 43 00 00     .C...d...C...C..
     110:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     120:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     130:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     140:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     150:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     160:	91 43 00 00 85 4a 00 00 91 43 00 00 91 43 00 00     .C...J...C...C..
     170:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     180:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     190:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     1a0:	91 43 00 00 91 43 00 00 91 43 00 00 91 43 00 00     .C...C...C...C..
     1b0:	91 43 00 00 91 43 00 00 91 43 00 00                 .C...C...C..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f004 f8e2 	bl	4398 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 216000000 || F_CPU == 180000000
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f004 f94c 	bl	4570 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f004 f8bd 	bl	4460 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f004 f8ae 	bl	4460 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f006 fcda 	bl	6cc0 <__libc_init_array>

	startup_late_hook();
     30c:	f004 f84a 	bl	43a4 <startup_late_hook>
	main();
     310:	f005 fd2e 	bl	5d70 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff9198 	.word	0x1fff9198
     33c:	000089d8 	.word	0x000089d8
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff9198 	.word	0x1fff9198
     348:	1fffd69c 	.word	0x1fffd69c
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5d23b25f 	.word	0x5d23b25f
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff9198 	.word	0x1fff9198
     42c:	00000000 	.word	0x00000000
     430:	000089dc 	.word	0x000089dc

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff919c 	.word	0x1fff919c
     460:	000089dc 	.word	0x000089dc
     464:	1fff9198 	.word	0x1fff9198
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::init()>:
  }
public:
  COctoWS2811Controller() { pocto = NULL; }


  virtual void init() { /* do nothing yet */ }
     474:	4770      	bx	lr
     476:	bf00      	nop

00000478 <Meltdown::executeSpokes(int) [clone .part.40]>:
		}*/
	}

	void executeSpokes(int numLeds)
	{
		if (MeltdownLED.GetTop())
     478:	b570      	push	{r4, r5, r6, lr}
			int GetPatternNumber(int offset = 0) 
			{
				// A value less than zero indicates we want the base pattern.
				if (offset < 0) return 0;

				return (gCurrentPatternNumber + offset) % ARRAY_SIZE(gPatterns); 
     47a:	4c1b      	ldr	r4, [pc, #108]	; (4e8 <Meltdown::executeSpokes(int) [clone .part.40]+0x70>)
				return SetPatternNumber(gCurrentPatternNumber + 1);
			}

			void ExecutePattern(CRGB leds[], uint16_t indexes[], int numLeds, int patternOffset = 0, int modeOffset = 0)
			{
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);
     47c:	6823      	ldr	r3, [r4, #0]
     47e:	f003 0307 	and.w	r3, r3, #7
     482:	3309      	adds	r3, #9
     484:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     488:	4605      	mov	r5, r0
     48a:	6898      	ldr	r0, [r3, #8]
     48c:	685e      	ldr	r6, [r3, #4]
     48e:	07c2      	lsls	r2, r0, #31
     490:	b082      	sub	sp, #8
     492:	d523      	bpl.n	4dc <Meltdown::executeSpokes(int) [clone .part.40]+0x64>
     494:	1043      	asrs	r3, r0, #1
     496:	1918      	adds	r0, r3, r4
     498:	591b      	ldr	r3, [r3, r4]
     49a:	599e      	ldr	r6, [r3, r6]
     49c:	4a13      	ldr	r2, [pc, #76]	; (4ec <Meltdown::executeSpokes(int) [clone .part.40]+0x74>)
     49e:	4914      	ldr	r1, [pc, #80]	; (4f0 <Meltdown::executeSpokes(int) [clone .part.40]+0x78>)
     4a0:	2300      	movs	r3, #0
     4a2:	9300      	str	r3, [sp, #0]
     4a4:	462b      	mov	r3, r5
     4a6:	47b0      	blx	r6
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
     4a8:	6863      	ldr	r3, [r4, #4]

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
     4aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     4ac:	490e      	ldr	r1, [pc, #56]	; (4e8 <Meltdown::executeSpokes(int) [clone .part.40]+0x70>)
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
     4ae:	f003 0301 	and.w	r3, r3, #1
     4b2:	3311      	adds	r3, #17
     4b4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }

			void IncrementFrame() { gFrame++; }
     4b8:	3201      	adds	r2, #1
     4ba:	62e2      	str	r2, [r4, #44]	; 0x2c
			int IncrementEffectNumber() 
			{ 
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
     4bc:	6898      	ldr	r0, [r3, #8]
     4be:	685c      	ldr	r4, [r3, #4]
     4c0:	07c3      	lsls	r3, r0, #31
     4c2:	d50e      	bpl.n	4e2 <Meltdown::executeSpokes(int) [clone .part.40]+0x6a>
     4c4:	1043      	asrs	r3, r0, #1
     4c6:	1858      	adds	r0, r3, r1
     4c8:	585b      	ldr	r3, [r3, r1]
     4ca:	591c      	ldr	r4, [r3, r4]
     4cc:	4a07      	ldr	r2, [pc, #28]	; (4ec <Meltdown::executeSpokes(int) [clone .part.40]+0x74>)
     4ce:	4908      	ldr	r1, [pc, #32]	; (4f0 <Meltdown::executeSpokes(int) [clone .part.40]+0x78>)
     4d0:	462b      	mov	r3, r5
     4d2:	46a4      	mov	ip, r4
		{
			MeltdownLED.MaximizeBrightness(leds, ledIndexes, numLeds);
		}*/
	}

	void executeLoop()
     4d4:	b002      	add	sp, #8
     4d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     4da:	4760      	bx	ip
     4dc:	eb04 0060 	add.w	r0, r4, r0, asr #1
     4e0:	e7dc      	b.n	49c <Meltdown::executeSpokes(int) [clone .part.40]+0x24>
     4e2:	eb01 0060 	add.w	r0, r1, r0, asr #1
     4e6:	e7f1      	b.n	4cc <Meltdown::executeSpokes(int) [clone .part.40]+0x54>
     4e8:	1fffd13c 	.word	0x1fffd13c
     4ec:	1fff91e0 	.word	0x1fff91e0
     4f0:	1fffab18 	.word	0x1fffab18

000004f4 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)>:
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
     4f8:	6986      	ldr	r6, [r0, #24]
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     4fa:	b085      	sub	sp, #20
     4fc:	4605      	mov	r5, r0
     4fe:	460c      	mov	r4, r1
class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
     500:	2e00      	cmp	r6, #0
     502:	f000 8171 	beq.w	7e8 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x2f4>

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
     506:	68a3      	ldr	r3, [r4, #8]
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
     508:	69ea      	ldr	r2, [r5, #28]
    while(pixels.has(1)) {
     50a:	2b00      	cmp	r3, #0
     50c:	f340 8166 	ble.w	7dc <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x2e8>
     510:	4627      	mov	r7, r4
     512:	3218      	adds	r2, #24
     514:	f857 8b14 	ldr.w	r8, [r7], #20
     518:	f104 0034 	add.w	r0, r4, #52	; 0x34
     51c:	f894 9013 	ldrb.w	r9, [r4, #19]
     520:	f10d 0607 	add.w	r6, sp, #7
     524:	4639      	mov	r1, r7
     526:	f109 0901 	add.w	r9, r9, #1
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     52a:	46b4      	mov	ip, r6
     52c:	46be      	mov	lr, r7
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     52e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     532:	4443      	add	r3, r8
     534:	785b      	ldrb	r3, [r3, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     536:	b143      	cbz	r3, 54a <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x56>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     538:	f894 a00d 	ldrb.w	sl, [r4, #13]
     53c:	fa83 f35a 	uqadd8	r3, r3, sl
     540:	b2db      	uxtb	r3, r3
     542:	fb09 f303 	mul.w	r3, r9, r3
     546:	f3c3 2307 	ubfx	r3, r3, #8, #8

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
      Lines b;

      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale0(i); }
     54a:	4586      	cmp	lr, r0
     54c:	f80c 3f01 	strb.w	r3, [ip, #1]!
     550:	d1ed      	bne.n	52e <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x3a>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     552:	f8dd 8008 	ldr.w	r8, [sp, #8]
  x = *(unsigned int*)(A+4);
     556:	9b03      	ldr	r3, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     558:	ea88 1cd8 	eor.w	ip, r8, r8, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     55c:	ea83 1ed3 	eor.w	lr, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     560:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     564:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     568:	ea88 080c 	eor.w	r8, r8, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     56c:	ea83 030e 	eor.w	r3, r3, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     570:	ea88 1ccc 	eor.w	ip, r8, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     574:	ea83 1ece 	eor.w	lr, r3, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     578:	f64c 48cc 	movw	r8, #52428	; 0xcccc
     57c:	ea8c 3a9c 	eor.w	sl, ip, ip, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     580:	ea8e 399e 	eor.w	r9, lr, lr, lsr #14
     584:	4643      	mov	r3, r8
     586:	ea09 0303 	and.w	r3, r9, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     58a:	ea0a 0808 	and.w	r8, sl, r8
     58e:	ea8c 0c08 	eor.w	ip, ip, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     592:	ea8e 0e03 	eor.w	lr, lr, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     596:	ea8c 3c88 	eor.w	ip, ip, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     59a:	ea8e 3e83 	eor.w	lr, lr, r3, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     59e:	ea4f 180e 	mov.w	r8, lr, lsl #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     5a2:	ea4f 131c 	mov.w	r3, ip, lsr #4
     5a6:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     5aa:	f00c 3c0f 	and.w	ip, ip, #252645135	; 0xf0f0f0f
     5ae:	f008 38f0 	and.w	r8, r8, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     5b2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
     5b6:	ea43 030e 	orr.w	r3, r3, lr
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     5ba:	ea48 0e0c 	orr.w	lr, r8, ip
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     5be:	ea4f 491e 	mov.w	r9, lr, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     5c2:	ea4f 681e 	mov.w	r8, lr, lsr #24

  B[3] = x; x >>= 8;
     5c6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     5ca:	f802 ec11 	strb.w	lr, [r2, #-17]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     5ce:	f802 3c15 	strb.w	r3, [r2, #-21]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     5d2:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     5d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     5da:	0e1b      	lsrs	r3, r3, #24
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     5dc:	f802 cc16 	strb.w	ip, [r2, #-22]
  B[1] = x; x >>= 8;
     5e0:	f802 ec17 	strb.w	lr, [r2, #-23]
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     5e4:	f802 ac12 	strb.w	sl, [r2, #-18]
  B[5] = y; y >>= 8;
     5e8:	f802 9c13 	strb.w	r9, [r2, #-19]
  B[4] = y;
     5ec:	f802 8c14 	strb.w	r8, [r2, #-20]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     5f0:	f802 3c18 	strb.w	r3, [r2, #-24]
     5f4:	f894 9012 	ldrb.w	r9, [r4, #18]
     5f8:	f8d4 8000 	ldr.w	r8, [r4]
     5fc:	f109 0901 	add.w	r9, r9, #1
     600:	f10d 0c07 	add.w	ip, sp, #7
     604:	46be      	mov	lr, r7
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     606:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     60a:	f818 3003 	ldrb.w	r3, [r8, r3]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     60e:	b143      	cbz	r3, 622 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x12e>
     610:	f894 a00c 	ldrb.w	sl, [r4, #12]
     614:	fa83 f35a 	uqadd8	r3, r3, sl
     618:	b2db      	uxtb	r3, r3
     61a:	fb09 f303 	mul.w	r3, r9, r3
     61e:	f3c3 2307 	ubfx	r3, r3, #8, #8
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale1(i); }
     622:	4586      	cmp	lr, r0
     624:	f80c 3f01 	strb.w	r3, [ip, #1]!
     628:	d1ed      	bne.n	606 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x112>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     62a:	f8dd 8008 	ldr.w	r8, [sp, #8]
  x = *(unsigned int*)(A+4);
     62e:	9b03      	ldr	r3, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     630:	ea88 1cd8 	eor.w	ip, r8, r8, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     634:	ea83 1ed3 	eor.w	lr, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     638:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     63c:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     640:	ea88 080c 	eor.w	r8, r8, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     644:	ea83 030e 	eor.w	r3, r3, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     648:	ea88 1ccc 	eor.w	ip, r8, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     64c:	ea83 1ece 	eor.w	lr, r3, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     650:	f64c 48cc 	movw	r8, #52428	; 0xcccc
     654:	ea8c 3a9c 	eor.w	sl, ip, ip, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     658:	ea8e 399e 	eor.w	r9, lr, lr, lsr #14
     65c:	4643      	mov	r3, r8
     65e:	ea09 0303 	and.w	r3, r9, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     662:	ea0a 0808 	and.w	r8, sl, r8
     666:	ea8c 0c08 	eor.w	ip, ip, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     66a:	ea8e 0e03 	eor.w	lr, lr, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     66e:	ea8c 3c88 	eor.w	ip, ip, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     672:	ea8e 3e83 	eor.w	lr, lr, r3, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     676:	ea4f 180e 	mov.w	r8, lr, lsl #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     67a:	ea4f 131c 	mov.w	r3, ip, lsr #4
     67e:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     682:	f00c 3c0f 	and.w	ip, ip, #252645135	; 0xf0f0f0f
     686:	f008 38f0 	and.w	r8, r8, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     68a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
     68e:	ea43 030e 	orr.w	r3, r3, lr
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     692:	ea48 0e0c 	orr.w	lr, r8, ip
  x = t;

  B[7] = y; y >>= 8;
     696:	f802 ec09 	strb.w	lr, [r2, #-9]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     69a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
     69e:	f802 3c0d 	strb.w	r3, [r2, #-13]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     6a2:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
  B[6] = y; y >>= 8;
     6a6:	ea4f 491e 	mov.w	r9, lr, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     6aa:	ea4f 681e 	mov.w	r8, lr, lsr #24

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     6ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     6b2:	0e1b      	lsrs	r3, r3, #24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     6b4:	f802 ac0a 	strb.w	sl, [r2, #-10]
  B[5] = y; y >>= 8;
     6b8:	f802 9c0b 	strb.w	r9, [r2, #-11]
  B[4] = y;
     6bc:	f802 8c0c 	strb.w	r8, [r2, #-12]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     6c0:	f802 cc0e 	strb.w	ip, [r2, #-14]
  B[1] = x; x >>= 8;
     6c4:	f802 ec0f 	strb.w	lr, [r2, #-15]
  B[0] = x; /* */
     6c8:	f802 3c10 	strb.w	r3, [r2, #-16]
     6cc:	f894 c014 	ldrb.w	ip, [r4, #20]
     6d0:	f8d4 e000 	ldr.w	lr, [r4]
     6d4:	f10c 0c01 	add.w	ip, ip, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     6d8:	f851 3f04 	ldr.w	r3, [r1, #4]!
     6dc:	4473      	add	r3, lr
     6de:	789b      	ldrb	r3, [r3, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     6e0:	b143      	cbz	r3, 6f4 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x200>
     6e2:	f894 800e 	ldrb.w	r8, [r4, #14]
     6e6:	fa83 f358 	uqadd8	r3, r3, r8
     6ea:	b2db      	uxtb	r3, r3
     6ec:	fb0c f303 	mul.w	r3, ip, r3
     6f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale2(i); }
     6f4:	4288      	cmp	r0, r1
     6f6:	f806 3f01 	strb.w	r3, [r6, #1]!
     6fa:	d1ed      	bne.n	6d8 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x1e4>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     6fc:	9b02      	ldr	r3, [sp, #8]
  x = *(unsigned int*)(A+4);
     6fe:	9e03      	ldr	r6, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     700:	ea83 11d3 	eor.w	r1, r3, r3, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     704:	ea86 1ed6 	eor.w	lr, r6, r6, lsr #7
     708:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     70c:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
     710:	404b      	eors	r3, r1
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     712:	ea86 060e 	eor.w	r6, r6, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     716:	ea83 11c1 	eor.w	r1, r3, r1, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     71a:	ea86 16ce 	eor.w	r6, r6, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     71e:	f64c 43cc 	movw	r3, #52428	; 0xcccc
     722:	ea81 3891 	eor.w	r8, r1, r1, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     726:	ea86 3c96 	eor.w	ip, r6, r6, lsr #14
     72a:	469e      	mov	lr, r3
     72c:	ea0c 0e0e 	and.w	lr, ip, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     730:	ea08 0303 	and.w	r3, r8, r3
     734:	4059      	eors	r1, r3
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     736:	ea86 060e 	eor.w	r6, r6, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     73a:	ea81 3183 	eor.w	r1, r1, r3, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     73e:	ea86 368e 	eor.w	r6, r6, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     742:	0133      	lsls	r3, r6, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     744:	ea4f 1e11 	mov.w	lr, r1, lsr #4
     748:	f00e 3e0f 	and.w	lr, lr, #252645135	; 0xf0f0f0f
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     74c:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     750:	f006 36f0 	and.w	r6, r6, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     754:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
     758:	430b      	orrs	r3, r1
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     75a:	ea4e 0606 	orr.w	r6, lr, r6
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     75e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  B[6] = y; y >>= 8;
     762:	ea4f 4913 	mov.w	r9, r3, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     766:	ea4f 6813 	mov.w	r8, r3, lsr #24

  B[3] = x; x >>= 8;
     76a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
  B[2] = x; x >>= 8;
     76e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     772:	0e31      	lsrs	r1, r6, #24
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     774:	f802 3c01 	strb.w	r3, [r2, #-1]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     778:	f802 6c05 	strb.w	r6, [r2, #-5]
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     77c:	f802 ac02 	strb.w	sl, [r2, #-2]
  B[5] = y; y >>= 8;
     780:	f802 9c03 	strb.w	r9, [r2, #-3]
  B[4] = y;
     784:	f802 8c04 	strb.w	r8, [r2, #-4]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     788:	f802 cc06 	strb.w	ip, [r2, #-6]
  B[1] = x; x >>= 8;
     78c:	f802 ec07 	strb.w	lr, [r2, #-7]
  B[0] = x; /* */
     790:	f802 1c08 	strb.w	r1, [r2, #-8]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     794:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     796:	f894 c00c 	ldrb.w	ip, [r4, #12]
                d[1] = e[1] - d[1];
     79a:	f894 e00d 	ldrb.w	lr, [r4, #13]
                d[2] = e[2] - d[2];
     79e:	f894 900e 	ldrb.w	r9, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7a2:	6826      	ldr	r6, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     7a4:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
     7a8:	f894 a010 	ldrb.w	sl, [r4, #16]
                d[2] = e[2] - d[2];
     7ac:	7c61      	ldrb	r1, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7ae:	f994 8015 	ldrsb.w	r8, [r4, #21]
     7b2:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     7b4:	ebcc 0c0b 	rsb	ip, ip, fp
                d[1] = e[1] - d[1];
     7b8:	ebce 0e0a 	rsb	lr, lr, sl
                d[2] = e[2] - d[2];
     7bc:	ebc9 0101 	rsb	r1, r9, r1

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7c0:	44b0      	add	r8, r6

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
     7c2:	2b00      	cmp	r3, #0
     7c4:	f102 0218 	add.w	r2, r2, #24

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     7c8:	f884 c00c 	strb.w	ip, [r4, #12]
                d[1] = e[1] - d[1];
     7cc:	f884 e00d 	strb.w	lr, [r4, #13]
                d[2] = e[2] - d[2];
     7d0:	73a1      	strb	r1, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7d2:	f8c4 8000 	str.w	r8, [r4]
     7d6:	60a3      	str	r3, [r4, #8]
     7d8:	f73f aea0 	bgt.w	51c <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x28>
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      pixels.stepDithering();
      pixels.advanceData();
    }

    pocto->show();
     7dc:	69a8      	ldr	r0, [r5, #24]
  }
     7de:	b005      	add	sp, #20
     7e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      pixels.stepDithering();
      pixels.advanceData();
    }

    pocto->show();
     7e4:	f001 b952 	b.w	1a8c <OctoWS2811::show()>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     7e8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 8 * 3);
     7ec:	eb08 0748 	add.w	r7, r8, r8, lsl #1
     7f0:	00ff      	lsls	r7, r7, #3
     7f2:	4638      	mov	r0, r7
     7f4:	f006 fa90 	bl	6d18 <malloc>
     7f8:	61e8      	str	r0, [r5, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 8 * 3);
     7fa:	4638      	mov	r0, r7
     7fc:	f006 fa8c 	bl	6d18 <malloc>
     800:	6228      	str	r0, [r5, #32]

      // byte ordering is handled in show by the pixel controller
      int config = WS2811_RGB;
      config |= CHIP;

      pocto = new OctoWS2811(nLeds, framebuffer, drawbuffer, config);
     802:	2001      	movs	r0, #1
     804:	f005 fabc 	bl	5d80 <operator new(unsigned int)>
     808:	69eb      	ldr	r3, [r5, #28]
     80a:	6a2a      	ldr	r2, [r5, #32]
     80c:	9600      	str	r6, [sp, #0]
     80e:	4607      	mov	r7, r0
     810:	4641      	mov	r1, r8
     812:	f000 ffb7 	bl	1784 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)>
     816:	61af      	str	r7, [r5, #24]

      pocto->begin();
     818:	4638      	mov	r0, r7
     81a:	f000 ffc9 	bl	17b0 <OctoWS2811::begin()>
     81e:	e672      	b.n	506 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x12>

00000820 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.47]>:
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
     820:	b538      	push	{r3, r4, r5, lr}
		{
			if (!m_isDebug) return;

			serial.print(msg);
     822:	4c09      	ldr	r4, [pc, #36]	; (848 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.47]+0x28>)
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
     824:	460d      	mov	r5, r1
		{
			if (!m_isDebug) return;

			serial.print(msg);
     826:	4601      	mov	r1, r0
     828:	4620      	mov	r0, r4
     82a:	f005 faab 	bl	5d84 <Print::print(String const&)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     82e:	2102      	movs	r1, #2
     830:	4806      	ldr	r0, [pc, #24]	; (84c <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.47]+0x2c>)
     832:	f004 ffa7 	bl	5784 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     836:	4629      	mov	r1, r5
     838:	4620      	mov	r0, r4
     83a:	f005 fb19 	bl	5e70 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     83e:	4620      	mov	r0, r4
			serial.print(": ");
			serial.println(value);
		}
     840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     844:	f005 bac4 	b.w	5dd0 <Print::println()>
     848:	1fff8734 	.word	0x1fff8734
     84c:	00008234 	.word	0x00008234

00000850 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     850:	b5f0      	push	{r4, r5, r6, r7, lr}
     852:	b091      	sub	sp, #68	; 0x44
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     854:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     856:	6805      	ldr	r5, [r0, #0]
     858:	f88d 3000 	strb.w	r3, [sp]
     85c:	f88d 3001 	strb.w	r3, [sp, #1]
     860:	f88d 3002 	strb.w	r3, [sp, #2]
     864:	682e      	ldr	r6, [r5, #0]
     866:	4a3a      	ldr	r2, [pc, #232]	; (950 <CLEDController::clearLeds(int)+0x100>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     868:	f88d 3004 	strb.w	r3, [sp, #4]
     86c:	4296      	cmp	r6, r2
     86e:	f88d 3005 	strb.w	r3, [sp, #5]
     872:	f88d 3006 	strb.w	r3, [sp, #6]
     876:	d164      	bne.n	942 <CLEDController::clearLeds(int)+0xf2>
     878:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     87a:	9103      	str	r1, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     87c:	2a01      	cmp	r2, #1
     87e:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     880:	9104      	str	r1, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     882:	f88d 301a 	strb.w	r3, [sp, #26]
        g = rhs.g;
     886:	f88d 301b 	strb.w	r3, [sp, #27]
        b = rhs.b;
     88a:	f88d 301c 	strb.w	r3, [sp, #28]
     88e:	f8cd d008 	str.w	sp, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     892:	d01a      	beq.n	8ca <CLEDController::clearLeds(int)+0x7a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     894:	f88d 3019 	strb.w	r3, [sp, #25]
     898:	f88d 3018 	strb.w	r3, [sp, #24]
     89c:	f88d 3017 	strb.w	r3, [sp, #23]
     8a0:	f88d 3016 	strb.w	r3, [sp, #22]
     8a4:	f88d 3015 	strb.w	r3, [sp, #21]
     8a8:	f88d 3014 	strb.w	r3, [sp, #20]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     8ac:	2200      	movs	r2, #0
     8ae:	f88d 201d 	strb.w	r2, [sp, #29]
     8b2:	ab07      	add	r3, sp, #28
     8b4:	a90f      	add	r1, sp, #60	; 0x3c
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     8b6:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     8ba:	4299      	cmp	r1, r3
     8bc:	d1fb      	bne.n	8b6 <CLEDController::clearLeds(int)+0x66>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8be:	69ab      	ldr	r3, [r5, #24]
     8c0:	4620      	mov	r0, r4
     8c2:	a902      	add	r1, sp, #8
     8c4:	4798      	blx	r3

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     8c6:	b011      	add	sp, #68	; 0x44
     8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     8ca:	4a22      	ldr	r2, [pc, #136]	; (954 <CLEDController::clearLeds(int)+0x104>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     8cc:	7813      	ldrb	r3, [r2, #0]
     8ce:	3301      	adds	r3, #1
     8d0:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     8d4:	f013 0f01 	tst.w	r3, #1
     8d8:	bf14      	ite	ne
     8da:	2180      	movne	r1, #128	; 0x80
     8dc:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     8de:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     8e0:	079a      	lsls	r2, r3, #30
     8e2:	bf44      	itt	mi
     8e4:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     8e8:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     8ea:	075b      	lsls	r3, r3, #29
     8ec:	bf48      	it	mi
     8ee:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     8f2:	3110      	adds	r1, #16
     8f4:	2200      	movs	r2, #0
     8f6:	b2c9      	uxtb	r1, r1
     8f8:	f10d 0317 	add.w	r3, sp, #23
     8fc:	f10d 071a 	add.w	r7, sp, #26
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     900:	f44f 7e80 	mov.w	lr, #256	; 0x100
     904:	b1aa      	cbz	r2, 932 <CLEDController::clearLeds(int)+0xe2>
     906:	fb9e f2f2 	sdiv	r2, lr, r2
     90a:	b2d2      	uxtb	r2, r2
     90c:	1c50      	adds	r0, r2, #1
     90e:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     910:	fb00 1501 	mla	r5, r0, r1, r1
     914:	122d      	asrs	r5, r5, #8
     916:	7018      	strb	r0, [r3, #0]
     918:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     91a:	b105      	cbz	r5, 91e <CLEDController::clearLeds(int)+0xce>
     91c:	3e01      	subs	r6, #1
     91e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     922:	b100      	cbz	r0, 926 <CLEDController::clearLeds(int)+0xd6>
     924:	701a      	strb	r2, [r3, #0]
     926:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     928:	429f      	cmp	r7, r3
     92a:	d008      	beq.n	93e <CLEDController::clearLeds(int)+0xee>
     92c:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     92e:	2a00      	cmp	r2, #0
     930:	d1e9      	bne.n	906 <CLEDController::clearLeds(int)+0xb6>
     932:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     934:	f803 2c03 	strb.w	r2, [r3, #-3]
     938:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     93a:	429f      	cmp	r7, r3
     93c:	d1f6      	bne.n	92c <CLEDController::clearLeds(int)+0xdc>
     93e:	6825      	ldr	r5, [r4, #0]
     940:	e7b4      	b.n	8ac <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     942:	460a      	mov	r2, r1
     944:	ab01      	add	r3, sp, #4
     946:	4669      	mov	r1, sp
     948:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     94a:	b011      	add	sp, #68	; 0x44
     94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     94e:	bf00      	nop
     950:	00000959 	.word	0x00000959
     954:	1fff91b4 	.word	0x1fff91b4

00000958 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     958:	b5f0      	push	{r4, r5, r6, r7, lr}
     95a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     95c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     95e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     960:	789b      	ldrb	r3, [r3, #2]
     962:	b08f      	sub	sp, #60	; 0x3c
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     964:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     966:	e88d 0006 	stmia.w	sp, {r1, r2}
     96a:	9202      	str	r2, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     96c:	f88d 4012 	strb.w	r4, [sp, #18]
        g = rhs.g;
     970:	f88d 6013 	strb.w	r6, [sp, #19]
        b = rhs.b;
     974:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     978:	d01b      	beq.n	9b2 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x5a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     97a:	2300      	movs	r3, #0
     97c:	f88d 3011 	strb.w	r3, [sp, #17]
     980:	f88d 3010 	strb.w	r3, [sp, #16]
     984:	f88d 300f 	strb.w	r3, [sp, #15]
     988:	f88d 300e 	strb.w	r3, [sp, #14]
     98c:	f88d 300d 	strb.w	r3, [sp, #13]
     990:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     994:	2200      	movs	r2, #0
     996:	f88d 2015 	strb.w	r2, [sp, #21]
     99a:	ab05      	add	r3, sp, #20
     99c:	a90d      	add	r1, sp, #52	; 0x34
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     99e:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     9a2:	428b      	cmp	r3, r1
     9a4:	d1fb      	bne.n	99e <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x46>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     9a6:	6803      	ldr	r3, [r0, #0]
     9a8:	4669      	mov	r1, sp
     9aa:	699b      	ldr	r3, [r3, #24]
     9ac:	4798      	blx	r3
  }
     9ae:	b00f      	add	sp, #60	; 0x3c
     9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     9b2:	4a1b      	ldr	r2, [pc, #108]	; (a20 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     9b4:	7813      	ldrb	r3, [r2, #0]
     9b6:	3301      	adds	r3, #1
     9b8:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     9bc:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     9c0:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     9c2:	bf14      	ite	ne
     9c4:	2280      	movne	r2, #128	; 0x80
     9c6:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     9c8:	0799      	lsls	r1, r3, #30
     9ca:	bf44      	itt	mi
     9cc:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     9d0:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     9d2:	075b      	lsls	r3, r3, #29
     9d4:	bf48      	it	mi
     9d6:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     9da:	3210      	adds	r2, #16
     9dc:	b2d2      	uxtb	r2, r2
     9de:	f10d 030f 	add.w	r3, sp, #15
     9e2:	f10d 0712 	add.w	r7, sp, #18
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     9e6:	f44f 7e80 	mov.w	lr, #256	; 0x100
     9ea:	b1ac      	cbz	r4, a18 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc0>
     9ec:	fb9e f4f4 	sdiv	r4, lr, r4
     9f0:	b2e4      	uxtb	r4, r4
     9f2:	1c61      	adds	r1, r4, #1
     9f4:	b2c9      	uxtb	r1, r1
     9f6:	fb01 2502 	mla	r5, r1, r2, r2
     9fa:	122d      	asrs	r5, r5, #8
     9fc:	7019      	strb	r1, [r3, #0]
     9fe:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     a00:	b105      	cbz	r5, a04 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xac>
     a02:	3e01      	subs	r6, #1
     a04:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     a08:	b101      	cbz	r1, a0c <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb4>
     a0a:	701c      	strb	r4, [r3, #0]
     a0c:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     a0e:	429f      	cmp	r7, r3
     a10:	d0c0      	beq.n	994 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     a12:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a14:	2c00      	cmp	r4, #0
     a16:	d1e9      	bne.n	9ec <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x94>
     a18:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     a1a:	f803 4c03 	strb.w	r4, [r3, #-3]
     a1e:	e7f5      	b.n	a0c <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb4>
     a20:	1fff91b4 	.word	0x1fff91b4

00000a24 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     a24:	b5f0      	push	{r4, r5, r6, r7, lr}
     a26:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a28:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     a2a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     a2c:	789b      	ldrb	r3, [r3, #2]
     a2e:	b08f      	sub	sp, #60	; 0x3c
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     a30:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     a32:	e88d 0006 	stmia.w	sp, {r1, r2}
     a36:	9202      	str	r2, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a38:	f88d 4012 	strb.w	r4, [sp, #18]
        g = rhs.g;
     a3c:	f88d 6013 	strb.w	r6, [sp, #19]
        b = rhs.b;
     a40:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     a44:	d020      	beq.n	a88 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x64>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     a46:	2300      	movs	r3, #0
     a48:	f88d 3011 	strb.w	r3, [sp, #17]
     a4c:	f88d 3010 	strb.w	r3, [sp, #16]
     a50:	f88d 300f 	strb.w	r3, [sp, #15]
     a54:	f88d 300e 	strb.w	r3, [sp, #14]
     a58:	f88d 300d 	strb.w	r3, [sp, #13]
     a5c:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     a60:	2103      	movs	r1, #3
            for(int i = 0; i < LANES; i++) { mOffsets[i] = other.mOffsets[i]; }

        }

        void initOffsets(int len) {
          int nOffset = 0;
     a62:	2300      	movs	r3, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     a64:	f88d 1015 	strb.w	r1, [sp, #21]
     a68:	eb02 0242 	add.w	r2, r2, r2, lsl #1

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     a6c:	4619      	mov	r1, r3
     a6e:	ac05      	add	r4, sp, #20
     a70:	3101      	adds	r1, #1
     a72:	2908      	cmp	r1, #8
            mOffsets[i] = nOffset;
     a74:	f844 3f04 	str.w	r3, [r4, #4]!
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     a78:	4413      	add	r3, r2

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     a7a:	d1f9      	bne.n	a70 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x4c>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     a7c:	6803      	ldr	r3, [r0, #0]
     a7e:	4669      	mov	r1, sp
     a80:	699b      	ldr	r3, [r3, #24]
     a82:	4798      	blx	r3
  }
     a84:	b00f      	add	sp, #60	; 0x3c
     a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     a88:	491b      	ldr	r1, [pc, #108]	; (af8 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xd4>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a8a:	780b      	ldrb	r3, [r1, #0]
     a8c:	3301      	adds	r3, #1
     a8e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a92:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a96:	700b      	strb	r3, [r1, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a98:	bf14      	ite	ne
     a9a:	2180      	movne	r1, #128	; 0x80
     a9c:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     a9e:	079d      	lsls	r5, r3, #30
     aa0:	bf44      	itt	mi
     aa2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     aa6:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     aa8:	075b      	lsls	r3, r3, #29
     aaa:	bf48      	it	mi
     aac:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     ab0:	3110      	adds	r1, #16
     ab2:	b2c9      	uxtb	r1, r1
     ab4:	f10d 030f 	add.w	r3, sp, #15
     ab8:	f10d 0e12 	add.w	lr, sp, #18
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     abc:	f44f 7c80 	mov.w	ip, #256	; 0x100
     ac0:	b1ac      	cbz	r4, aee <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xca>
     ac2:	fb9c f4f4 	sdiv	r4, ip, r4
     ac6:	b2e4      	uxtb	r4, r4
     ac8:	1c65      	adds	r5, r4, #1
     aca:	b2ed      	uxtb	r5, r5
     acc:	fb05 1601 	mla	r6, r5, r1, r1
     ad0:	1236      	asrs	r6, r6, #8
     ad2:	701d      	strb	r5, [r3, #0]
     ad4:	b2f7      	uxtb	r7, r6
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     ad6:	b106      	cbz	r6, ada <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xb6>
     ad8:	3f01      	subs	r7, #1
     ada:	f803 7c03 	strb.w	r7, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     ade:	b105      	cbz	r5, ae2 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xbe>
     ae0:	701c      	strb	r4, [r3, #0]
     ae2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     ae4:	4573      	cmp	r3, lr
     ae6:	d0bb      	beq.n	a60 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x3c>
     ae8:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     aea:	2c00      	cmp	r4, #0
     aec:	d1e9      	bne.n	ac2 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x9e>
     aee:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     af0:	f803 4c03 	strb.w	r4, [r3, #-3]
     af4:	e7f5      	b.n	ae2 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xbe>
     af6:	bf00      	nop
     af8:	1fff91b4 	.word	0x1fff91b4

00000afc <Print::println(String const&)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     afc:	b538      	push	{r3, r4, r5, lr}
     afe:	4605      	mov	r5, r0
     b00:	f005 f940 	bl	5d84 <Print::print(String const&)>
     b04:	4604      	mov	r4, r0
     b06:	4628      	mov	r0, r5
     b08:	f005 f962 	bl	5dd0 <Print::println()>
     b0c:	4420      	add	r0, r4
     b0e:	bd38      	pop	{r3, r4, r5, pc}

00000b10 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]>:
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
     b10:	b538      	push	{r3, r4, r5, lr}
		{
			if (!m_isDebug) return;

			serial.print(msg);
     b12:	4c0a      	ldr	r4, [pc, #40]	; (b3c <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]+0x2c>)
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
     b14:	460d      	mov	r5, r1
		{
			if (!m_isDebug) return;

			serial.print(msg);
     b16:	4601      	mov	r1, r0
     b18:	4620      	mov	r0, r4
     b1a:	f005 f933 	bl	5d84 <Print::print(String const&)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     b1e:	4620      	mov	r0, r4
     b20:	2202      	movs	r2, #2
     b22:	4907      	ldr	r1, [pc, #28]	; (b40 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]+0x30>)
     b24:	f005 f9b8 	bl	5e98 <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     b28:	4629      	mov	r1, r5
     b2a:	4620      	mov	r0, r4
     b2c:	f005 f9a0 	bl	5e70 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     b30:	4620      	mov	r0, r4
			serial.print(": ");
			serial.println(value);
		}
     b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     b36:	f005 b94b 	b.w	5dd0 <Print::println()>
     b3a:	bf00      	nop
     b3c:	1fff8734 	.word	0x1fff8734
     b40:	00008234 	.word	0x00008234

00000b44 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>:
			String m_inputString;
			boolean m_inputStringComplete; // whether the String is complete

#pragma region INPUTS

			int GetAnalogValue(int currVal)
     b44:	b570      	push	{r4, r5, r6, lr}
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     b46:	1d05      	adds	r5, r0, #4
			String m_inputString;
			boolean m_inputStringComplete; // whether the String is complete

#pragma region INPUTS

			int GetAnalogValue(int currVal)
     b48:	b088      	sub	sp, #32
     b4a:	460e      	mov	r6, r1
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     b4c:	4628      	mov	r0, r5
     b4e:	491b      	ldr	r1, [pc, #108]	; (bbc <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x78>)
     b50:	f005 fae2 	bl	6118 <String::equals(char const*) const>
     b54:	b110      	cbz	r0, b5c <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x18>
				{
					val = GetSerialValue(m_inputString, currVal);
				}

				return val;
			}
     b56:	4630      	mov	r0, r6
     b58:	b008      	add	sp, #32
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	4604      	mov	r4, r0
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     b5e:	4629      	mov	r1, r5
     b60:	4668      	mov	r0, sp
     b62:	f005 fa45 	bl	5ff0 <String::String(String const&)>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     b66:	4621      	mov	r1, r4
     b68:	4668      	mov	r0, sp
     b6a:	f005 faeb 	bl	6144 <String::operator[](unsigned int)>
     b6e:	7803      	ldrb	r3, [r0, #0]
     b70:	2b23      	cmp	r3, #35	; 0x23
     b72:	d005      	beq.n	b80 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x3c>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     b74:	4668      	mov	r0, sp
     b76:	f005 f9d5 	bl	5f24 <String::~String()>
				}

				return val;
			}
     b7a:	4630      	mov	r0, r6
     b7c:	b008      	add	sp, #32
     b7e:	bd70      	pop	{r4, r5, r6, pc}
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     b80:	9b02      	ldr	r3, [sp, #8]
     b82:	2b09      	cmp	r3, #9
     b84:	d9f6      	bls.n	b74 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>
				{
					String valString = inputString.substring(5, 9);
     b86:	a804      	add	r0, sp, #16
     b88:	2309      	movs	r3, #9
     b8a:	2205      	movs	r2, #5
     b8c:	4669      	mov	r1, sp
     b8e:	f005 fb01 	bl	6194 <String::substring(unsigned int, unsigned int) const>
					int val = valString.toInt();
     b92:	a804      	add	r0, sp, #16
     b94:	f005 fb22 	bl	61dc <String::toInt() const>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     b98:	4604      	mov	r4, r0
     b9a:	b120      	cbz	r0, ba6 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x62>
					{
						return val;
     b9c:	a804      	add	r0, sp, #16
     b9e:	f005 f9c1 	bl	5f24 <String::~String()>
			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
					int val = valString.toInt();
     ba2:	4626      	mov	r6, r4
     ba4:	e7e6      	b.n	b74 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     ba6:	4906      	ldr	r1, [pc, #24]	; (bc0 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x7c>)
     ba8:	a804      	add	r0, sp, #16
     baa:	f005 fab5 	bl	6118 <String::equals(char const*) const>
     bae:	2800      	cmp	r0, #0
     bb0:	d1f4      	bne.n	b9c <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x58>

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
     bb2:	a804      	add	r0, sp, #16
     bb4:	f005 f9b6 	bl	5f24 <String::~String()>
     bb8:	e7dc      	b.n	b74 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>
     bba:	bf00      	nop
     bbc:	000082d8 	.word	0x000082d8
     bc0:	00008238 	.word	0x00008238

00000bc4 <Meltdown::CMeltdownSerial::GetValue()>:
					return m_inputString.substring(1, 5);
				}
				return "";
			}

			int GetValue()
     bc4:	b530      	push	{r4, r5, lr}
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     bc6:	1d04      	adds	r4, r0, #4
					return m_inputString.substring(1, 5);
				}
				return "";
			}

			int GetValue()
     bc8:	b085      	sub	sp, #20
     bca:	4605      	mov	r5, r0
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     bcc:	2100      	movs	r1, #0
     bce:	4620      	mov	r0, r4
     bd0:	f005 fab8 	bl	6144 <String::operator[](unsigned int)>
     bd4:	7803      	ldrb	r3, [r0, #0]
     bd6:	2b23      	cmp	r3, #35	; 0x23
     bd8:	d003      	beq.n	be2 <Meltdown::CMeltdownSerial::GetValue()+0x1e>
				return "";
			}

			int GetValue()
			{
				int val = 0;
     bda:	2400      	movs	r4, #0
				{
					String valString = m_inputString.substring(5, 9);
					val = valString.toInt();
				}
				return val;
			}
     bdc:	4620      	mov	r0, r4
     bde:	b005      	add	sp, #20
     be0:	bd30      	pop	{r4, r5, pc}
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     be2:	68eb      	ldr	r3, [r5, #12]
     be4:	2b09      	cmp	r3, #9
     be6:	d9f8      	bls.n	bda <Meltdown::CMeltdownSerial::GetValue()+0x16>
				{
					String valString = m_inputString.substring(5, 9);
     be8:	4621      	mov	r1, r4
     bea:	2309      	movs	r3, #9
     bec:	2205      	movs	r2, #5
     bee:	4668      	mov	r0, sp
     bf0:	f005 fad0 	bl	6194 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
     bf4:	4668      	mov	r0, sp
     bf6:	f005 faf1 	bl	61dc <String::toInt() const>
     bfa:	4604      	mov	r4, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
     bfc:	4668      	mov	r0, sp
     bfe:	f005 f991 	bl	5f24 <String::~String()>
					val = valString.toInt();
				}
				return val;
			}
     c02:	4620      	mov	r0, r4
     c04:	b005      	add	sp, #20
     c06:	bd30      	pop	{r4, r5, pc}

00000c08 <Meltdown::setIndexesForWheels()>:

	/// Set the indexes for all wheel sections, treating them as one long contiguous strip.
	void setIndexesForWheels()
	{
		clearLedIndexes();

     c08:	4b14      	ldr	r3, [pc, #80]	; (c5c <Meltdown::setIndexesForWheels()+0x54>)
     c0a:	4915      	ldr	r1, [pc, #84]	; (c60 <Meltdown::setIndexesForWheels()+0x58>)
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
     c0c:	2200      	movs	r2, #0
     c0e:	f823 2f02 	strh.w	r2, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
     c12:	4299      	cmp	r1, r3
     c14:	d1fb      	bne.n	c0e <Meltdown::setIndexesForWheels()+0x6>

	/// Set the indexes for all wheel sections, treating them as one long contiguous strip.
	void setIndexesForWheels()
	{
		clearLedIndexes();

     c16:	b470      	push	{r4, r5, r6}
     c18:	4d12      	ldr	r5, [pc, #72]	; (c64 <Meltdown::setIndexesForWheels()+0x5c>)

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
     c1a:	f240 2485 	movw	r4, #645	; 0x285
	{
		clearLedIndexes();

		for (int i = 0; i < NUM_PENTS; i++)
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
     c1e:	f640 761e 	movw	r6, #3870	; 0xf1e
     c22:	f46f 7321 	mvn.w	r3, #644	; 0x284
     c26:	18e0      	adds	r0, r4, r3
     c28:	b280      	uxth	r0, r0

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
     c2a:	4629      	mov	r1, r5
     c2c:	f1a1 0278 	sub.w	r2, r1, #120	; 0x78
     c30:	4603      	mov	r3, r0
			{
				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
				{
					ledIndexes[(i * NUM_WHEEL_LEDS_PER_PENT) + (j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
				}
			}
     c32:	f822 3f02 	strh.w	r3, [r2, #2]!
     c36:	3301      	adds	r3, #1
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
			{
				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
				{
					ledIndexes[(i * NUM_WHEEL_LEDS_PER_PENT) + (j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
     c38:	428a      	cmp	r2, r1
     c3a:	b29b      	uxth	r3, r3
     c3c:	d1f9      	bne.n	c32 <Meltdown::setIndexesForWheels()+0x2a>
     c3e:	3081      	adds	r0, #129	; 0x81
     c40:	b280      	uxth	r0, r0

		for (int i = 0; i < NUM_PENTS; i++)
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
			{
				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
     c42:	4284      	cmp	r4, r0
     c44:	f102 0178 	add.w	r1, r2, #120	; 0x78
     c48:	d1f0      	bne.n	c2c <Meltdown::setIndexesForWheels()+0x24>
     c4a:	f204 2485 	addw	r4, r4, #645	; 0x285
     c4e:	b2a4      	uxth	r4, r4
	{
		clearLedIndexes();

		for (int i = 0; i < NUM_PENTS; i++)
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
     c50:	42b4      	cmp	r4, r6
     c52:	f505 7516 	add.w	r5, r5, #600	; 0x258
     c56:	d1e4      	bne.n	c22 <Meltdown::setIndexesForWheels()+0x1a>
				}
			}
		}
	}

	/// Set the indexes for the wheel section of a single pent.
     c58:	bc70      	pop	{r4, r5, r6}
     c5a:	4770      	bx	lr
     c5c:	1fff91de 	.word	0x1fff91de
     c60:	1fffab10 	.word	0x1fffab10
     c64:	1fff9256 	.word	0x1fff9256

00000c68 <Meltdown::setIndexesForWheel(int)>:
	void setIndexesForWheel(int pentNumber)
	{
		clearLedIndexes();

     c68:	4a0e      	ldr	r2, [pc, #56]	; (ca4 <Meltdown::setIndexesForWheel(int)+0x3c>)
     c6a:	b410      	push	{r4}
     c6c:	4c0e      	ldr	r4, [pc, #56]	; (ca8 <Meltdown::setIndexesForWheel(int)+0x40>)
     c6e:	4613      	mov	r3, r2
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
     c70:	2100      	movs	r1, #0
     c72:	f823 1f02 	strh.w	r1, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
     c76:	429c      	cmp	r4, r3
     c78:	d1fb      	bne.n	c72 <Meltdown::setIndexesForWheel(int)+0xa>
     c7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     c7e:	eb00 10c0 	add.w	r0, r0, r0, lsl #7
     c82:	4c0a      	ldr	r4, [pc, #40]	; (cac <Meltdown::setIndexesForWheel(int)+0x44>)
     c84:	b280      	uxth	r0, r0
     c86:	f102 0178 	add.w	r1, r2, #120	; 0x78

	/// Set the indexes for the wheel section of a single pent.
	void setIndexesForWheel(int pentNumber)
	{
		clearLedIndexes();

     c8a:	4603      	mov	r3, r0
		{
			for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
			{
				ledIndexes[(j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
			}
		}
     c8c:	f822 3f02 	strh.w	r3, [r2, #2]!
     c90:	3301      	adds	r3, #1

		for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
		{
			for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
			{
				ledIndexes[(j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
     c92:	428a      	cmp	r2, r1
     c94:	b29b      	uxth	r3, r3
     c96:	d1f9      	bne.n	c8c <Meltdown::setIndexesForWheel(int)+0x24>
     c98:	3081      	adds	r0, #129	; 0x81
	{
		clearLedIndexes();

		for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
		{
			for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
     c9a:	4294      	cmp	r4, r2
     c9c:	b280      	uxth	r0, r0
     c9e:	d1f2      	bne.n	c86 <Meltdown::setIndexesForWheel(int)+0x1e>
				ledIndexes[(j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
			}
		}
	}

	/// Set the indexes for all spoke sections, treating them as one long contigous strip.
     ca0:	bc10      	pop	{r4}
     ca2:	4770      	bx	lr
     ca4:	1fff91de 	.word	0x1fff91de
     ca8:	1fffab10 	.word	0x1fffab10
     cac:	1fff9436 	.word	0x1fff9436

00000cb0 <Meltdown::setIndexesForSpokes()>:
	void setIndexesForSpokes()
	{
		clearLedIndexes();

     cb0:	4b14      	ldr	r3, [pc, #80]	; (d04 <Meltdown::setIndexesForSpokes()+0x54>)
     cb2:	4915      	ldr	r1, [pc, #84]	; (d08 <Meltdown::setIndexesForSpokes()+0x58>)
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
     cb4:	2200      	movs	r2, #0
     cb6:	f823 2f02 	strh.w	r2, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
     cba:	4299      	cmp	r1, r3
     cbc:	d1fb      	bne.n	cb6 <Meltdown::setIndexesForSpokes()+0x6>

	/// Set the indexes for all spoke sections, treating them as one long contigous strip.
	void setIndexesForSpokes()
	{
		clearLedIndexes();

     cbe:	b470      	push	{r4, r5, r6}
     cc0:	4d12      	ldr	r5, [pc, #72]	; (d0c <Meltdown::setIndexesForSpokes()+0x5c>)

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
     cc2:	f240 24c1 	movw	r4, #705	; 0x2c1
	{
		clearLedIndexes();

		for (int i = 0; i < NUM_PENTS; i++)
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
     cc6:	f640 765a 	movw	r6, #3930	; 0xf5a
     cca:	f46f 7321 	mvn.w	r3, #644	; 0x284
     cce:	18e0      	adds	r0, r4, r3
     cd0:	b280      	uxth	r0, r0

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
     cd2:	4629      	mov	r1, r5
     cd4:	f1a1 028a 	sub.w	r2, r1, #138	; 0x8a
     cd8:	4603      	mov	r3, r0
			{
				for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
				{
					ledIndexes[(i * NUM_SPOKE_LEDS_PER_PENT) + (j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
				}
			}
     cda:	f822 3f02 	strh.w	r3, [r2, #2]!
     cde:	3301      	adds	r3, #1
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
			{
				for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
				{
					ledIndexes[(i * NUM_SPOKE_LEDS_PER_PENT) + (j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
     ce0:	428a      	cmp	r2, r1
     ce2:	b29b      	uxth	r3, r3
     ce4:	d1f9      	bne.n	cda <Meltdown::setIndexesForSpokes()+0x2a>
     ce6:	3081      	adds	r0, #129	; 0x81
     ce8:	b280      	uxth	r0, r0

		for (int i = 0; i < NUM_PENTS; i++)
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
			{
				for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
     cea:	4284      	cmp	r4, r0
     cec:	f102 018a 	add.w	r1, r2, #138	; 0x8a
     cf0:	d1f0      	bne.n	cd4 <Meltdown::setIndexesForSpokes()+0x24>
     cf2:	f204 2485 	addw	r4, r4, #645	; 0x285
     cf6:	b2a4      	uxth	r4, r4
	{
		clearLedIndexes();

		for (int i = 0; i < NUM_PENTS; i++)
		{
			for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
     cf8:	42b4      	cmp	r4, r6
     cfa:	f205 25b2 	addw	r5, r5, #690	; 0x2b2
     cfe:	d1e4      	bne.n	cca <Meltdown::setIndexesForSpokes()+0x1a>
				}
			}
		}
	}

	/// Set the indexes for the spokes of a single pent.
     d00:	bc70      	pop	{r4, r5, r6}
     d02:	4770      	bx	lr
     d04:	1fff91de 	.word	0x1fff91de
     d08:	1fffab10 	.word	0x1fffab10
     d0c:	1fff9268 	.word	0x1fff9268

00000d10 <Meltdown::tryExecuteCommand() [clone .part.42]>:
		MeltdownLED.Sunrise(leds, ledIndexes, NUM_SPOKE_LEDS);
	}

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
     d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
     d14:	4da8      	ldr	r5, [pc, #672]	; (fb8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2a8>)
     d16:	2300      	movs	r3, #0

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     d18:	4619      	mov	r1, r3

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
     d1a:	752b      	strb	r3, [r5, #20]
     d1c:	b08d      	sub	sp, #52	; 0x34

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     d1e:	1d28      	adds	r0, r5, #4
     d20:	f005 fa10 	bl	6144 <String::operator[](unsigned int)>
     d24:	7803      	ldrb	r3, [r0, #0]
     d26:	2b23      	cmp	r3, #35	; 0x23
     d28:	d071      	beq.n	e0e <Meltdown::tryExecuteCommand() [clone .part.42]+0xfe>
				{
					return m_inputString.substring(1, 5);
				}
				return "";
     d2a:	4668      	mov	r0, sp
     d2c:	49a3      	ldr	r1, [pc, #652]	; (fbc <Meltdown::tryExecuteCommand() [clone .part.42]+0x2ac>)
     d2e:	466c      	mov	r4, sp
     d30:	f005 f938 	bl	5fa4 <String::String(char const*)>
			MeltdownSerial.SetInputStringComplete(false);

			String command = MeltdownSerial.GetCommand();
			if (!command.equals(""))
			{
				if (command.equals(MeltdownSerial.BRIGHTNESS))
     d34:	49a1      	ldr	r1, [pc, #644]	; (fbc <Meltdown::tryExecuteCommand() [clone .part.42]+0x2ac>)
     d36:	4620      	mov	r0, r4
     d38:	f005 f9ee 	bl	6118 <String::equals(char const*) const>
     d3c:	b990      	cbnz	r0, d64 <Meltdown::tryExecuteCommand() [clone .part.42]+0x54>
				{
					MeltdownLED.SetBrightness(-1);
     d3e:	49a0      	ldr	r1, [pc, #640]	; (fc0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b0>)
     d40:	4620      	mov	r0, r4
     d42:	f005 f9db 	bl	60fc <String::equals(String const&) const>
     d46:	b318      	cbz	r0, d90 <Meltdown::tryExecuteCommand() [clone .part.42]+0x80>

			// BRIGHTNESS //

			int SetBrightness(int pin)
			{
				gBrightness = MeltdownSerial.GetAnalogValue(pin, gBrightness);
     d48:	4d9e      	ldr	r5, [pc, #632]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)

			int GetAnalogValue(int currVal)
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     d4a:	499c      	ldr	r1, [pc, #624]	; (fbc <Meltdown::tryExecuteCommand() [clone .part.42]+0x2ac>)
     d4c:	489e      	ldr	r0, [pc, #632]	; (fc8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b8>)
     d4e:	692f      	ldr	r7, [r5, #16]
     d50:	f005 f9e2 	bl	6118 <String::equals(char const*) const>
     d54:	4606      	mov	r6, r0
     d56:	2800      	cmp	r0, #0
     d58:	f000 8084 	beq.w	e64 <Meltdown::tryExecuteCommand() [clone .part.42]+0x154>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     d5c:	4b9b      	ldr	r3, [pc, #620]	; (fcc <Meltdown::tryExecuteCommand() [clone .part.42]+0x2bc>)
     d5e:	612f      	str	r7, [r5, #16]
     d60:	701f      	strb	r7, [r3, #0]
     d62:	e00b      	b.n	d7c <Meltdown::tryExecuteCommand() [clone .part.42]+0x6c>
			}
			else
			{
				MeltdownLogger.Debug(Serial, F("Something went wrong reading serial, command was blank."));
			}

     d64:	ae08      	add	r6, sp, #32
     d66:	4630      	mov	r0, r6
     d68:	4999      	ldr	r1, [pc, #612]	; (fd0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2c0>)
     d6a:	f005 f92f 	bl	5fcc <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
     d6e:	4b99      	ldr	r3, [pc, #612]	; (fd4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2c4>)
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	2b00      	cmp	r3, #0
     d74:	d156      	bne.n	e24 <Meltdown::tryExecuteCommand() [clone .part.42]+0x114>
     d76:	4630      	mov	r0, r6
     d78:	f005 f8d4 	bl	5f24 <String::~String()>
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
			}

			String GetInputString() { return m_inputString; }

			void ClearInputString() { m_inputString = ""; }
     d7c:	498f      	ldr	r1, [pc, #572]	; (fbc <Meltdown::tryExecuteCommand() [clone .part.42]+0x2ac>)
     d7e:	4892      	ldr	r0, [pc, #584]	; (fc8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b8>)
     d80:	f005 f954 	bl	602c <String::operator=(char const*)>
		{
			MeltdownSerial.SetInputStringComplete(false);

			String command = MeltdownSerial.GetCommand();
			if (!command.equals(""))
			{
     d84:	4620      	mov	r0, r4
     d86:	f005 f8cd 	bl	5f24 <String::~String()>

			MeltdownSerial.ClearInputString();
		}
	}

#pragma endregion COMMANDS
     d8a:	b00d      	add	sp, #52	; 0x34
     d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				{
					MeltdownLED.SetBrightness(-1);
				}
				else if (command.equals(MeltdownSerial.HUE1))
				{
					bool hueValue = MeltdownLED.ToggleHue(1);
     d90:	4991      	ldr	r1, [pc, #580]	; (fd8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2c8>)
     d92:	4620      	mov	r0, r4
     d94:	f005 f9b2 	bl	60fc <String::equals(String const&) const>
     d98:	2800      	cmp	r0, #0
     d9a:	d04b      	beq.n	e34 <Meltdown::tryExecuteCommand() [clone .part.42]+0x124>
			{
				bool hueVal = false;
				switch (index)
				{
				case 1:
					gHue1 = !gHue1;
     d9c:	4d89      	ldr	r5, [pc, #548]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)
     d9e:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     da2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
     da6:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
     daa:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     dae:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			{
				bool hueVal = false;
				switch (index)
				{
				case 1:
					gHue1 = !gHue1;
     db2:	f087 0701 	eor.w	r7, r7, #1
     db6:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     dba:	2b00      	cmp	r3, #0
     dbc:	d063      	beq.n	e86 <Meltdown::tryExecuteCommand() [clone .part.42]+0x176>
     dbe:	1c7b      	adds	r3, r7, #1
				if (gHue3) val++;
     dc0:	b100      	cbz	r0, dc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb4>
     dc2:	3301      	adds	r3, #1
				if (gHue4) val++;
     dc4:	b101      	cbz	r1, dc8 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb8>
     dc6:	3301      	adds	r3, #1
				if (gHue5) val++;
     dc8:	b102      	cbz	r2, dcc <Meltdown::tryExecuteCommand() [clone .part.42]+0xbc>
     dca:	3301      	adds	r3, #1
				}
			}

			void SetHue()
			{
				gHue = map(GetToggledHueCount(), 0, 6, 0, 255);
     dcc:	4a83      	ldr	r2, [pc, #524]	; (fdc <Meltdown::tryExecuteCommand() [clone .part.42]+0x2cc>)
				else if (command.equals(MeltdownSerial.HUE5))
				{
					bool hueValue = MeltdownLED.ToggleHue(5);
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.PAUSE))
     dce:	4984      	ldr	r1, [pc, #528]	; (fe0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2d0>)
     dd0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
     dd4:	fb82 0203 	smull	r0, r2, r2, r3
     dd8:	ae08      	add	r6, sp, #32
     dda:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
     dde:	4630      	mov	r0, r6
     de0:	616b      	str	r3, [r5, #20]
     de2:	f005 f8f3 	bl	5fcc <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
		{
			if (!m_isDebug) return;
     de6:	4b7b      	ldr	r3, [pc, #492]	; (fd4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2c4>)
     de8:	781b      	ldrb	r3, [r3, #0]
     dea:	2b00      	cmp	r3, #0
     dec:	d0c3      	beq.n	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>

			serial.print(msg);
     dee:	4631      	mov	r1, r6
     df0:	487c      	ldr	r0, [pc, #496]	; (fe4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2d4>)
     df2:	f004 ffc7 	bl	5d84 <Print::print(String const&)>
     df6:	2102      	movs	r1, #2
     df8:	487b      	ldr	r0, [pc, #492]	; (fe8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2d8>)
     dfa:	f004 fcc3 	bl	5784 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     dfe:	4639      	mov	r1, r7
     e00:	4878      	ldr	r0, [pc, #480]	; (fe4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2d4>)
     e02:	f005 f835 	bl	5e70 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e06:	4877      	ldr	r0, [pc, #476]	; (fe4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2d4>)
     e08:	f004 ffe2 	bl	5dd0 <Print::println()>
     e0c:	e7b3      	b.n	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     e0e:	68eb      	ldr	r3, [r5, #12]
     e10:	2b05      	cmp	r3, #5
     e12:	d98a      	bls.n	d2a <Meltdown::tryExecuteCommand() [clone .part.42]+0x1a>
				{
					return m_inputString.substring(1, 5);
     e14:	4668      	mov	r0, sp
     e16:	2305      	movs	r3, #5
     e18:	2201      	movs	r2, #1
     e1a:	1d29      	adds	r1, r5, #4
     e1c:	466c      	mov	r4, sp
     e1e:	f005 f9b9 	bl	6194 <String::substring(unsigned int, unsigned int) const>
     e22:	e787      	b.n	d34 <Meltdown::tryExecuteCommand() [clone .part.42]+0x24>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     e24:	4631      	mov	r1, r6
     e26:	486f      	ldr	r0, [pc, #444]	; (fe4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2d4>)
     e28:	f004 ffac 	bl	5d84 <Print::print(String const&)>
     e2c:	486d      	ldr	r0, [pc, #436]	; (fe4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2d4>)
     e2e:	f004 ffcf 	bl	5dd0 <Print::println()>
     e32:	e7a0      	b.n	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
					bool hueValue = MeltdownLED.ToggleHue(1);
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE2))
				{
					bool hueValue = MeltdownLED.ToggleHue(2);
     e34:	496d      	ldr	r1, [pc, #436]	; (fec <Meltdown::tryExecuteCommand() [clone .part.42]+0x2dc>)
     e36:	4620      	mov	r0, r4
     e38:	f005 f960 	bl	60fc <String::equals(String const&) const>
     e3c:	b328      	cbz	r0, e8a <Meltdown::tryExecuteCommand() [clone .part.42]+0x17a>
				case 1:
					gHue1 = !gHue1;
					hueVal = gHue1;
					break;
				case 2:
					gHue2 = !gHue2;
     e3e:	4d61      	ldr	r5, [pc, #388]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)
     e40:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
     e44:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
     e48:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     e4c:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     e50:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 1:
					gHue1 = !gHue1;
					hueVal = gHue1;
					break;
				case 2:
					gHue2 = !gHue2;
     e54:	f087 0701 	eor.w	r7, r7, #1
     e58:	f885 7031 	strb.w	r7, [r5, #49]	; 0x31
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     e5c:	2f00      	cmp	r7, #0
     e5e:	d0af      	beq.n	dc0 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb0>
     e60:	3301      	adds	r3, #1
     e62:	e7ad      	b.n	dc0 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb0>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     e64:	f10d 0810 	add.w	r8, sp, #16
     e68:	4957      	ldr	r1, [pc, #348]	; (fc8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b8>)
     e6a:	4640      	mov	r0, r8
     e6c:	f005 f8c0 	bl	5ff0 <String::String(String const&)>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     e70:	4631      	mov	r1, r6
     e72:	4640      	mov	r0, r8
     e74:	f005 f966 	bl	6144 <String::operator[](unsigned int)>
     e78:	7803      	ldrb	r3, [r0, #0]
     e7a:	2b23      	cmp	r3, #35	; 0x23
     e7c:	d03c      	beq.n	ef8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x1e8>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     e7e:	4640      	mov	r0, r8
     e80:	f005 f850 	bl	5f24 <String::~String()>
     e84:	e76a      	b.n	d5c <Meltdown::tryExecuteCommand() [clone .part.42]+0x4c>
     e86:	463b      	mov	r3, r7
     e88:	e79a      	b.n	dc0 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb0>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE3))
				{
					bool hueValue = MeltdownLED.ToggleHue(3);
     e8a:	4959      	ldr	r1, [pc, #356]	; (ff0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2e0>)
     e8c:	4620      	mov	r0, r4
     e8e:	f005 f935 	bl	60fc <String::equals(String const&) const>
     e92:	b9e0      	cbnz	r0, ece <Meltdown::tryExecuteCommand() [clone .part.42]+0x1be>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE4))
				{
					bool hueValue = MeltdownLED.ToggleHue(4);
     e94:	4957      	ldr	r1, [pc, #348]	; (ff4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2e4>)
     e96:	4620      	mov	r0, r4
     e98:	f005 f930 	bl	60fc <String::equals(String const&) const>
     e9c:	2800      	cmp	r0, #0
     e9e:	d03f      	beq.n	f20 <Meltdown::tryExecuteCommand() [clone .part.42]+0x210>
				case 3:
					gHue3 = !gHue3;
					hueVal = gHue3;
					break;
				case 4:
					gHue4 = !gHue4;
     ea0:	4d48      	ldr	r5, [pc, #288]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)
     ea2:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     ea6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     eaa:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
     eae:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     eb2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 3:
					gHue3 = !gHue3;
					hueVal = gHue3;
					break;
				case 4:
					gHue4 = !gHue4;
     eb6:	f087 0701 	eor.w	r7, r7, #1
     eba:	f885 7033 	strb.w	r7, [r5, #51]	; 0x33
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     ebe:	b100      	cbz	r0, ec2 <Meltdown::tryExecuteCommand() [clone .part.42]+0x1b2>
     ec0:	3301      	adds	r3, #1
				if (gHue3) val++;
     ec2:	b101      	cbz	r1, ec6 <Meltdown::tryExecuteCommand() [clone .part.42]+0x1b6>
     ec4:	3301      	adds	r3, #1
				if (gHue4) val++;
     ec6:	2f00      	cmp	r7, #0
     ec8:	f43f af7e 	beq.w	dc8 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb8>
     ecc:	e77b      	b.n	dc6 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb6>
				case 2:
					gHue2 = !gHue2;
					hueVal = gHue2;
					break;
				case 3:
					gHue3 = !gHue3;
     ece:	4d3d      	ldr	r5, [pc, #244]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)
     ed0:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     ed4:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     ed8:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     edc:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     ee0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 2:
					gHue2 = !gHue2;
					hueVal = gHue2;
					break;
				case 3:
					gHue3 = !gHue3;
     ee4:	f087 0701 	eor.w	r7, r7, #1
     ee8:	f885 7032 	strb.w	r7, [r5, #50]	; 0x32
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     eec:	b100      	cbz	r0, ef0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x1e0>
     eee:	3301      	adds	r3, #1
				if (gHue3) val++;
     ef0:	2f00      	cmp	r7, #0
     ef2:	f43f af67 	beq.w	dc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb4>
     ef6:	e764      	b.n	dc2 <Meltdown::tryExecuteCommand() [clone .part.42]+0xb2>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     ef8:	9b06      	ldr	r3, [sp, #24]
     efa:	2b09      	cmp	r3, #9
     efc:	d9bf      	bls.n	e7e <Meltdown::tryExecuteCommand() [clone .part.42]+0x16e>
				{
					String valString = inputString.substring(5, 9);
     efe:	ae08      	add	r6, sp, #32
     f00:	4630      	mov	r0, r6
     f02:	2309      	movs	r3, #9
     f04:	2205      	movs	r2, #5
     f06:	4641      	mov	r1, r8
     f08:	f005 f944 	bl	6194 <String::substring(unsigned int, unsigned int) const>
					int val = valString.toInt();
     f0c:	4630      	mov	r0, r6
     f0e:	f005 f965 	bl	61dc <String::toInt() const>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     f12:	4681      	mov	r9, r0
     f14:	b318      	cbz	r0, f5e <Meltdown::tryExecuteCommand() [clone .part.42]+0x24e>
					{
						return val;
     f16:	4630      	mov	r0, r6
     f18:	f005 f804 	bl	5f24 <String::~String()>
			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
					int val = valString.toInt();
     f1c:	464f      	mov	r7, r9
     f1e:	e7ae      	b.n	e7e <Meltdown::tryExecuteCommand() [clone .part.42]+0x16e>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE5))
				{
					bool hueValue = MeltdownLED.ToggleHue(5);
     f20:	4935      	ldr	r1, [pc, #212]	; (ff8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2e8>)
     f22:	4620      	mov	r0, r4
     f24:	f005 f8ea 	bl	60fc <String::equals(String const&) const>
     f28:	4606      	mov	r6, r0
     f2a:	b310      	cbz	r0, f72 <Meltdown::tryExecuteCommand() [clone .part.42]+0x262>
				case 4:
					gHue4 = !gHue4;
					hueVal = gHue4;
					break;
				case 5:
					gHue5 = !gHue5;
     f2c:	4d25      	ldr	r5, [pc, #148]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)
     f2e:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     f32:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     f36:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
     f3a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
     f3e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
				case 4:
					gHue4 = !gHue4;
					hueVal = gHue4;
					break;
				case 5:
					gHue5 = !gHue5;
     f42:	f087 0701 	eor.w	r7, r7, #1
     f46:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
     f4a:	b100      	cbz	r0, f4e <Meltdown::tryExecuteCommand() [clone .part.42]+0x23e>
     f4c:	3301      	adds	r3, #1
				if (gHue3) val++;
     f4e:	b101      	cbz	r1, f52 <Meltdown::tryExecuteCommand() [clone .part.42]+0x242>
     f50:	3301      	adds	r3, #1
				if (gHue4) val++;
     f52:	b102      	cbz	r2, f56 <Meltdown::tryExecuteCommand() [clone .part.42]+0x246>
     f54:	3301      	adds	r3, #1
				if (gHue5) val++;
     f56:	2f00      	cmp	r7, #0
     f58:	f47f af37 	bne.w	dca <Meltdown::tryExecuteCommand() [clone .part.42]+0xba>
     f5c:	e736      	b.n	dcc <Meltdown::tryExecuteCommand() [clone .part.42]+0xbc>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     f5e:	4927      	ldr	r1, [pc, #156]	; (ffc <Meltdown::tryExecuteCommand() [clone .part.42]+0x2ec>)
     f60:	4630      	mov	r0, r6
     f62:	f005 f8d9 	bl	6118 <String::equals(char const*) const>
     f66:	2800      	cmp	r0, #0
     f68:	d1d5      	bne.n	f16 <Meltdown::tryExecuteCommand() [clone .part.42]+0x206>

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
     f6a:	4630      	mov	r0, r6
     f6c:	f004 ffda 	bl	5f24 <String::~String()>
     f70:	e785      	b.n	e7e <Meltdown::tryExecuteCommand() [clone .part.42]+0x16e>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.PAUSE))
				{
					MeltdownLED.SetPause();
     f72:	4923      	ldr	r1, [pc, #140]	; (1000 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2f0>)
     f74:	4620      	mov	r0, r4
     f76:	f005 f8c1 	bl	60fc <String::equals(String const&) const>
     f7a:	4607      	mov	r7, r0
     f7c:	b150      	cbz	r0, f94 <Meltdown::tryExecuteCommand() [clone .part.42]+0x284>
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     f7e:	4631      	mov	r1, r6
     f80:	4811      	ldr	r0, [pc, #68]	; (fc8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b8>)
     f82:	f005 f8df 	bl	6144 <String::operator[](unsigned int)>
     f86:	7803      	ldrb	r3, [r0, #0]
     f88:	2b23      	cmp	r3, #35	; 0x23
     f8a:	d07b      	beq.n	1084 <Meltdown::tryExecuteCommand() [clone .part.42]+0x374>
			bool TogglePause()
			{
				gPause = !gPause;
				return gPause;
			}
			void SetPause() { gPause = MeltdownSerial.GetBoolValue(); }
     f8c:	4b0d      	ldr	r3, [pc, #52]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)
     f8e:	f883 6038 	strb.w	r6, [r3, #56]	; 0x38
     f92:	e6f3      	b.n	d7c <Meltdown::tryExecuteCommand() [clone .part.42]+0x6c>
				}
				else if (command.equals(MeltdownSerial.FULL_BRIGHT))
				{
					MeltdownLED.SetFullBright();
     f94:	491b      	ldr	r1, [pc, #108]	; (1004 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2f4>)
     f96:	4620      	mov	r0, r4
     f98:	f005 f8b0 	bl	60fc <String::equals(String const&) const>
     f9c:	b3a0      	cbz	r0, 1008 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2f8>
     f9e:	4639      	mov	r1, r7
     fa0:	4809      	ldr	r0, [pc, #36]	; (fc8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b8>)
     fa2:	f005 f8cf 	bl	6144 <String::operator[](unsigned int)>
     fa6:	7803      	ldrb	r3, [r0, #0]
     fa8:	2b23      	cmp	r3, #35	; 0x23
     faa:	f000 80a1 	beq.w	10f0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x3e0>
     fae:	2300      	movs	r3, #0
			bool ToggleFullBright()
			{
				gFullBright = !gFullBright;
				return gFullBright;
			}
			void SetFullBright() { gFullBright = MeltdownSerial.GetBoolValue(); }
     fb0:	4a04      	ldr	r2, [pc, #16]	; (fc4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2b4>)
     fb2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
     fb6:	e6e1      	b.n	d7c <Meltdown::tryExecuteCommand() [clone .part.42]+0x6c>
     fb8:	1fffd1d8 	.word	0x1fffd1d8
     fbc:	000082d8 	.word	0x000082d8
     fc0:	1fffd220 	.word	0x1fffd220
     fc4:	1fffd13c 	.word	0x1fffd13c
     fc8:	1fffd1dc 	.word	0x1fffd1dc
     fcc:	1fffd118 	.word	0x1fffd118
     fd0:	00008378 	.word	0x00008378
     fd4:	1fffd350 	.word	0x1fffd350
     fd8:	1fffd230 	.word	0x1fffd230
     fdc:	2aaaaaab 	.word	0x2aaaaaab
     fe0:	00008240 	.word	0x00008240
     fe4:	1fff8734 	.word	0x1fff8734
     fe8:	00008234 	.word	0x00008234
     fec:	1fffd240 	.word	0x1fffd240
     ff0:	1fffd250 	.word	0x1fffd250
     ff4:	1fffd260 	.word	0x1fffd260
     ff8:	1fffd270 	.word	0x1fffd270
     ffc:	00008238 	.word	0x00008238
    1000:	1fffd2e0 	.word	0x1fffd2e0
    1004:	1fffd280 	.word	0x1fffd280
				}
				else if (command.equals(MeltdownSerial.PATTERN))
				{
					// Set to black.
    1008:	49b3      	ldr	r1, [pc, #716]	; (12d8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5c8>)
    100a:	4620      	mov	r0, r4
    100c:	f005 f876 	bl	60fc <String::equals(String const&) const>
    1010:	2800      	cmp	r0, #0
    1012:	d04d      	beq.n	10b0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x3a0>
    1014:	4eb1      	ldr	r6, [pc, #708]	; (12dc <Meltdown::tryExecuteCommand() [clone .part.42]+0x5cc>)
    1016:	4db2      	ldr	r5, [pc, #712]	; (12e0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d0>)
					setIndexesForWheels();
					MeltdownLED.SetAllColor(leds, ledIndexes, NUM_WHEEL_LEDS, CRGB::Black);
					setIndexesForSpokes();
    1018:	f7ff fdf6 	bl	c08 <Meltdown::setIndexesForWheels()>
    101c:	f606 37b8 	addw	r7, r6, #3000	; 0xbb8
    1020:	4631      	mov	r1, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1022:	2200      	movs	r2, #0

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
				{
					leds[indexes[i]] = color;
    1024:	f831 3f02 	ldrh.w	r3, [r1, #2]!
    1028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    102c:	18e8      	adds	r0, r5, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
    102e:	42b9      	cmp	r1, r7
    1030:	54ea      	strb	r2, [r5, r3]
        g = (colorcode >>  8) & 0xFF;
    1032:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1034:	7082      	strb	r2, [r0, #2]
    1036:	d1f5      	bne.n	1024 <Meltdown::tryExecuteCommand() [clone .part.42]+0x314>
					MeltdownLED.SetAllColor(leds, ledIndexes, NUM_SPOKE_LEDS, CRGB::Black);

    1038:	f7ff fe3a 	bl	cb0 <Meltdown::setIndexesForSpokes()>
    103c:	48a9      	ldr	r0, [pc, #676]	; (12e4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d4>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    103e:	2200      	movs	r2, #0
				{
					leds[indexes[i]] = color;
    1040:	f836 3f02 	ldrh.w	r3, [r6, #2]!
    1044:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1048:	18e9      	adds	r1, r5, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
    104a:	42b0      	cmp	r0, r6
    104c:	54ea      	strb	r2, [r5, r3]
    104e:	f04f 0300 	mov.w	r3, #0
        g = (colorcode >>  8) & 0xFF;
    1052:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
    1054:	708a      	strb	r2, [r1, #2]
    1056:	d1f3      	bne.n	1040 <Meltdown::tryExecuteCommand() [clone .part.42]+0x330>
			}
			void SetBottom() { gBottom = MeltdownSerial.GetBoolValue(); }

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }
    1058:	4fa3      	ldr	r7, [pc, #652]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)

			int SetPatternNumber()
			{
				ResetFrame();

				gCurrentPatternNumber = MeltdownSerial.GetValue();
    105a:	48a4      	ldr	r0, [pc, #656]	; (12ec <Meltdown::tryExecuteCommand() [clone .part.42]+0x5dc>)
			}
			void SetBottom() { gBottom = MeltdownSerial.GetBoolValue(); }

			bool GetBottom() { return gBottom; }

			void ResetFrame() { gFrame = 0; }
    105c:	62fb      	str	r3, [r7, #44]	; 0x2c

			int SetPatternNumber()
			{
				ResetFrame();

				gCurrentPatternNumber = MeltdownSerial.GetValue();
    105e:	f7ff fdb1 	bl	bc4 <Meltdown::CMeltdownSerial::GetValue()>
					int patternNumber = MeltdownLED.SetPatternNumber();
					MeltdownLogger.Debug(Serial, F("Setting pattern number"), patternNumber);
				}
				else if (command.equals(MeltdownSerial.TOP))
    1062:	49a3      	ldr	r1, [pc, #652]	; (12f0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e0>)
    1064:	6038      	str	r0, [r7, #0]
    1066:	ae08      	add	r6, sp, #32
    1068:	4605      	mov	r5, r0
				else if (command.equals(MeltdownSerial.MODE))
				{
					int modeNumber = MeltdownLED.SetModeNumber();
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
    106a:	4630      	mov	r0, r6
    106c:	f004 ffae 	bl	5fcc <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
		{
			if (!m_isDebug) return;
    1070:	4ba0      	ldr	r3, [pc, #640]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e4>)
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	2b00      	cmp	r3, #0
    1076:	f43f ae7e 	beq.w	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
    107a:	4629      	mov	r1, r5
    107c:	4630      	mov	r0, r6
    107e:	f7ff fd47 	bl	b10 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]>
    1082:	e678      	b.n	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
    1084:	68eb      	ldr	r3, [r5, #12]
    1086:	2b09      	cmp	r3, #9
    1088:	d801      	bhi.n	108e <Meltdown::tryExecuteCommand() [clone .part.42]+0x37e>
    108a:	2600      	movs	r6, #0
    108c:	e77e      	b.n	f8c <Meltdown::tryExecuteCommand() [clone .part.42]+0x27c>
				{
					String valString = m_inputString.substring(5, 9);
    108e:	2309      	movs	r3, #9
    1090:	2205      	movs	r2, #5
    1092:	4999      	ldr	r1, [pc, #612]	; (12f8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e8>)
    1094:	a808      	add	r0, sp, #32
    1096:	f005 f87d 	bl	6194 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
    109a:	a808      	add	r0, sp, #32
    109c:	f005 f89e 	bl	61dc <String::toInt() const>
    10a0:	4606      	mov	r6, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
    10a2:	a808      	add	r0, sp, #32
    10a4:	f004 ff3e 	bl	5f24 <String::~String()>
    10a8:	3600      	adds	r6, #0
    10aa:	bf18      	it	ne
    10ac:	2601      	movne	r6, #1
    10ae:	e76d      	b.n	f8c <Meltdown::tryExecuteCommand() [clone .part.42]+0x27c>
					int patternNumber = MeltdownLED.SetPatternNumber();
					MeltdownLogger.Debug(Serial, F("Setting pattern number"), patternNumber);
				}
				else if (command.equals(MeltdownSerial.TOP))
				{
					bool topVal = MeltdownLED.ToggleTop();
    10b0:	4d92      	ldr	r5, [pc, #584]	; (12fc <Meltdown::tryExecuteCommand() [clone .part.42]+0x5ec>)
    10b2:	4620      	mov	r0, r4
    10b4:	4629      	mov	r1, r5
    10b6:	f005 f821 	bl	60fc <String::equals(String const&) const>
    10ba:	4606      	mov	r6, r0
    10bc:	b368      	cbz	r0, 111a <Meltdown::tryExecuteCommand() [clone .part.42]+0x40a>

			// POSITION //

			bool ToggleTop()
			{
				gBottom = false;
    10be:	4b8a      	ldr	r3, [pc, #552]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
					MeltdownLogger.Debug(Serial, F("Setting top position"), topVal);
				}
				else if (command.equals(MeltdownSerial.BOTTOM))
    10c0:	498f      	ldr	r1, [pc, #572]	; (1300 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5f0>)
				gTop = !gTop;
    10c2:	f893 5039 	ldrb.w	r5, [r3, #57]	; 0x39

			// POSITION //

			bool ToggleTop()
			{
				gBottom = false;
    10c6:	2200      	movs	r2, #0
    10c8:	ae08      	add	r6, sp, #32
				gTop = !gTop;
    10ca:	f085 0501 	eor.w	r5, r5, #1

			// POSITION //

			bool ToggleTop()
			{
				gBottom = false;
    10ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				gTop = !gTop;
    10d2:	f883 5039 	strb.w	r5, [r3, #57]	; 0x39
    10d6:	4630      	mov	r0, r6
    10d8:	f004 ff78 	bl	5fcc <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
		{
			if (!m_isDebug) return;
    10dc:	4b85      	ldr	r3, [pc, #532]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e4>)
    10de:	781b      	ldrb	r3, [r3, #0]
    10e0:	2b00      	cmp	r3, #0
    10e2:	f43f ae48 	beq.w	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
    10e6:	4629      	mov	r1, r5
    10e8:	4630      	mov	r0, r6
    10ea:	f7ff fb99 	bl	820 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.9] [clone .constprop.47]>
    10ee:	e642      	b.n	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
    10f0:	68eb      	ldr	r3, [r5, #12]
    10f2:	2b09      	cmp	r3, #9
    10f4:	f67f af5b 	bls.w	fae <Meltdown::tryExecuteCommand() [clone .part.42]+0x29e>
				{
					String valString = m_inputString.substring(5, 9);
    10f8:	2309      	movs	r3, #9
    10fa:	2205      	movs	r2, #5
    10fc:	497e      	ldr	r1, [pc, #504]	; (12f8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e8>)
    10fe:	a808      	add	r0, sp, #32
    1100:	f005 f848 	bl	6194 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
    1104:	a808      	add	r0, sp, #32
    1106:	f005 f869 	bl	61dc <String::toInt() const>
    110a:	4605      	mov	r5, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
    110c:	a808      	add	r0, sp, #32
    110e:	f004 ff09 	bl	5f24 <String::~String()>
    1112:	1c2b      	adds	r3, r5, #0
    1114:	bf18      	it	ne
    1116:	2301      	movne	r3, #1
    1118:	e74a      	b.n	fb0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x2a0>
				{
					bool bottomVal = MeltdownLED.ToggleBottom();
    111a:	f105 0110 	add.w	r1, r5, #16
    111e:	4620      	mov	r0, r4
    1120:	f004 ffec 	bl	60fc <String::equals(String const&) const>
    1124:	b198      	cbz	r0, 114e <Meltdown::tryExecuteCommand() [clone .part.42]+0x43e>

			bool GetTop() { return gTop; }

			bool ToggleBottom()
			{
				gTop = false;
    1126:	4b70      	ldr	r3, [pc, #448]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
					MeltdownLogger.Debug(Serial, F("Setting bottom position"), bottomVal);
				}
				else if (command.equals(MeltdownSerial.EFFECT))
    1128:	4976      	ldr	r1, [pc, #472]	; (1304 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5f4>)
				gBottom = !gBottom;
    112a:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a

			bool GetTop() { return gTop; }

			bool ToggleBottom()
			{
				gTop = false;
    112e:	f883 6039 	strb.w	r6, [r3, #57]	; 0x39
				gBottom = !gBottom;
    1132:	f085 0501 	eor.w	r5, r5, #1
    1136:	ae08      	add	r6, sp, #32
    1138:	f883 503a 	strb.w	r5, [r3, #58]	; 0x3a
    113c:	4630      	mov	r0, r6
    113e:	f004 ff45 	bl	5fcc <String::String(__FlashStringHelper const*)>
    1142:	4b6c      	ldr	r3, [pc, #432]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e4>)
    1144:	781b      	ldrb	r3, [r3, #0]
    1146:	2b00      	cmp	r3, #0
    1148:	f43f ae15 	beq.w	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
    114c:	e7cb      	b.n	10e6 <Meltdown::tryExecuteCommand() [clone .part.42]+0x3d6>
				{
					int effectNumber = MeltdownLED.SetEffectNumber();
    114e:	f1a5 0190 	sub.w	r1, r5, #144	; 0x90
    1152:	4620      	mov	r0, r4
    1154:	f004 ffd2 	bl	60fc <String::equals(String const&) const>
    1158:	b148      	cbz	r0, 116e <Meltdown::tryExecuteCommand() [clone .part.42]+0x45e>
				return gCurrentEffectNumber;
			}

			int SetEffectNumber()
			{
				gCurrentEffectNumber = MeltdownSerial.GetValue();
    115a:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
    115e:	f7ff fd31 	bl	bc4 <Meltdown::CMeltdownSerial::GetValue()>
    1162:	4b61      	ldr	r3, [pc, #388]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
					MeltdownLogger.Debug(Serial, F("Setting effect number"), effectNumber);
				}
				else if (command.equals(MeltdownSerial.MODE))
    1164:	4968      	ldr	r1, [pc, #416]	; (1308 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5f8>)
    1166:	6058      	str	r0, [r3, #4]
    1168:	4605      	mov	r5, r0
				{
					int modeNumber = MeltdownLED.SetModeNumber();
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
    116a:	ae08      	add	r6, sp, #32
    116c:	e77d      	b.n	106a <Meltdown::tryExecuteCommand() [clone .part.42]+0x35a>
					int effectNumber = MeltdownLED.SetEffectNumber();
					MeltdownLogger.Debug(Serial, F("Setting effect number"), effectNumber);
				}
				else if (command.equals(MeltdownSerial.MODE))
				{
					int modeNumber = MeltdownLED.SetModeNumber();
    116e:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
    1172:	4620      	mov	r0, r4
    1174:	f004 ffc2 	bl	60fc <String::equals(String const&) const>
    1178:	b140      	cbz	r0, 118c <Meltdown::tryExecuteCommand() [clone .part.42]+0x47c>
				return gCurrentModeNumber;
			}

			int SetModeNumber() 
			{ 
				gCurrentModeNumber = MeltdownSerial.GetValue(); 
    117a:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
    117e:	f7ff fd21 	bl	bc4 <Meltdown::CMeltdownSerial::GetValue()>
    1182:	4b59      	ldr	r3, [pc, #356]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
    1184:	4961      	ldr	r1, [pc, #388]	; (130c <Meltdown::tryExecuteCommand() [clone .part.42]+0x5fc>)
    1186:	6098      	str	r0, [r3, #8]
    1188:	4605      	mov	r5, r0
    118a:	e7ee      	b.n	116a <Meltdown::tryExecuteCommand() [clone .part.42]+0x45a>
				{
					int currVal = MeltdownLED.GetAnalogEffect();
    118c:	f105 0140 	add.w	r1, r5, #64	; 0x40
    1190:	4620      	mov	r0, r4
    1192:	f004 ffb3 	bl	60fc <String::equals(String const&) const>
    1196:	b318      	cbz	r0, 11e0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x4d0>
    1198:	f8df 814c 	ldr.w	r8, [pc, #332]	; 12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>
    119c:	f8d8 6020 	ldr.w	r6, [r8, #32]

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    11a0:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
    11a4:	4631      	mov	r1, r6
    11a6:	f7ff fccd 	bl	b44 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>
    11aa:	f855 3cb8 	ldr.w	r3, [r5, #-184]

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }

			int SetAnalogEffect(int pin)
			{
				gAnalogEffect = MeltdownSerial.GetAnalogValue(pin, gAnalogEffect);
    11ae:	f8c8 0020 	str.w	r0, [r8, #32]
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    11b2:	1af2      	subs	r2, r6, r3
    11b4:	4282      	cmp	r2, r0

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    11b6:	4607      	mov	r7, r0
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    11b8:	da03      	bge.n	11c2 <Meltdown::tryExecuteCommand() [clone .part.42]+0x4b2>
    11ba:	4433      	add	r3, r6
    11bc:	4283      	cmp	r3, r0
    11be:	f73f addd 	bgt.w	d7c <Meltdown::tryExecuteCommand() [clone .part.42]+0x6c>

					if (MeltdownSerial.HasChanged(currVal, modeVal))
					{
						MeltdownLogger.Debug(Serial, F("Setting Analog Effect"), modeVal);
					}
				}
    11c2:	ae08      	add	r6, sp, #32
    11c4:	4630      	mov	r0, r6
    11c6:	4952      	ldr	r1, [pc, #328]	; (1310 <Meltdown::tryExecuteCommand() [clone .part.42]+0x600>)
    11c8:	f004 ff00 	bl	5fcc <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
		{
			if (!m_isDebug) return;
    11cc:	4b49      	ldr	r3, [pc, #292]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e4>)
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	2b00      	cmp	r3, #0
    11d2:	f43f add0 	beq.w	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
    11d6:	4639      	mov	r1, r7
    11d8:	4630      	mov	r0, r6
    11da:	f7ff fc99 	bl	b10 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.8] [clone .constprop.48]>
    11de:	e5ca      	b.n	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
				else if (command.equals(MeltdownSerial.ANALOG_PATTERN))
				{
					int currVal = MeltdownLED.GetAnalogPattern();
    11e0:	f105 0130 	add.w	r1, r5, #48	; 0x30
    11e4:	4620      	mov	r0, r4
    11e6:	f004 ff89 	bl	60fc <String::equals(String const&) const>
    11ea:	4607      	mov	r7, r0
    11ec:	b1f8      	cbz	r0, 122e <Meltdown::tryExecuteCommand() [clone .part.42]+0x51e>
    11ee:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>
    11f2:	f8d8 601c 	ldr.w	r6, [r8, #28]

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    11f6:	f1a5 00b8 	sub.w	r0, r5, #184	; 0xb8
    11fa:	4631      	mov	r1, r6
    11fc:	f7ff fca2 	bl	b44 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>
    1200:	f855 3cb8 	ldr.w	r3, [r5, #-184]

			// ANALOG //

			int SetAnalogPattern(int pin)
			{
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
    1204:	f8c8 001c 	str.w	r0, [r8, #28]
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    1208:	1af2      	subs	r2, r6, r3
    120a:	4282      	cmp	r2, r0

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    120c:	4607      	mov	r7, r0
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    120e:	da03      	bge.n	1218 <Meltdown::tryExecuteCommand() [clone .part.42]+0x508>
    1210:	4433      	add	r3, r6
    1212:	4283      	cmp	r3, r0
    1214:	f73f adb2 	bgt.w	d7c <Meltdown::tryExecuteCommand() [clone .part.42]+0x6c>

					if (MeltdownSerial.HasChanged(currVal, patternVal))
					{
						MeltdownLogger.Debug(Serial, F("Setting Analog Pattern"), patternVal);
					}
				}
    1218:	ae08      	add	r6, sp, #32
    121a:	4630      	mov	r0, r6
    121c:	493d      	ldr	r1, [pc, #244]	; (1314 <Meltdown::tryExecuteCommand() [clone .part.42]+0x604>)
    121e:	f004 fed5 	bl	5fcc <String::String(__FlashStringHelper const*)>
    1222:	4b34      	ldr	r3, [pc, #208]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e4>)
    1224:	781b      	ldrb	r3, [r3, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	f43f ada5 	beq.w	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
    122c:	e7d3      	b.n	11d6 <Meltdown::tryExecuteCommand() [clone .part.42]+0x4c6>
				else if (command.equals(MeltdownSerial.AUTO_NONE))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.None);
    122e:	f105 0170 	add.w	r1, r5, #112	; 0x70
    1232:	4620      	mov	r0, r4
    1234:	f004 ff62 	bl	60fc <String::equals(String const&) const>
    1238:	b1c0      	cbz	r0, 126c <Meltdown::tryExecuteCommand() [clone .part.42]+0x55c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    123a:	4a37      	ldr	r2, [pc, #220]	; (1318 <Meltdown::tryExecuteCommand() [clone .part.42]+0x608>)

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    123c:	4b2a      	ldr	r3, [pc, #168]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
    123e:	6812      	ldr	r2, [r2, #0]
    1240:	9204      	str	r2, [sp, #16]
	return ret;
    1242:	9a04      	ldr	r2, [sp, #16]
			{
				gAutoModeActive = isActive;
				// If we're waking up, reset the timer.
				if (!gAutoModeActive)
				{
					gAutoModeStartMillis = millis();
    1244:	645a      	str	r2, [r3, #68]	; 0x44
					MeltdownLogger.Debug(Serial, F("Disabling Auto Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_PATTERN))
    1246:	ae08      	add	r6, sp, #32

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    1248:	f883 703b 	strb.w	r7, [r3, #59]	; 0x3b
    124c:	4933      	ldr	r1, [pc, #204]	; (131c <Meltdown::tryExecuteCommand() [clone .part.42]+0x60c>)

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    124e:	f883 703c 	strb.w	r7, [r3, #60]	; 0x3c
    1252:	4630      	mov	r0, r6
    1254:	f004 feba 	bl	5fcc <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
    1258:	4b26      	ldr	r3, [pc, #152]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e4>)
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	2b00      	cmp	r3, #0
    125e:	f43f ad8a 	beq.w	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>

			serial.println(msg);
    1262:	4631      	mov	r1, r6
    1264:	482e      	ldr	r0, [pc, #184]	; (1320 <Meltdown::tryExecuteCommand() [clone .part.42]+0x610>)
    1266:	f7ff fc49 	bl	afc <Print::println(String const&)>
    126a:	e584      	b.n	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Pattern);
    126c:	f105 0190 	add.w	r1, r5, #144	; 0x90
    1270:	4620      	mov	r0, r4
    1272:	f004 ff43 	bl	60fc <String::equals(String const&) const>
    1276:	b188      	cbz	r0, 129c <Meltdown::tryExecuteCommand() [clone .part.42]+0x58c>
    1278:	4b1b      	ldr	r3, [pc, #108]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_MODE))
    127a:	492a      	ldr	r1, [pc, #168]	; (1324 <Meltdown::tryExecuteCommand() [clone .part.42]+0x614>)
    127c:	ae08      	add	r6, sp, #32
    127e:	2502      	movs	r5, #2

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    1280:	2201      	movs	r2, #1
    1282:	4630      	mov	r0, r6

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    1284:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    1288:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				else if (command.equals(MeltdownSerial.AUTO_SLEEP))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Sleep);
					MeltdownLogger.Debug(Serial, F("Setting Auto Sleep Mode."));
				}
				else
    128c:	f004 fe9e 	bl	5fcc <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
    1290:	4b18      	ldr	r3, [pc, #96]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5e4>)
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	2b00      	cmp	r3, #0
    1296:	f43f ad6e 	beq.w	d76 <Meltdown::tryExecuteCommand() [clone .part.42]+0x66>
    129a:	e7e2      	b.n	1262 <Meltdown::tryExecuteCommand() [clone .part.42]+0x552>
					MeltdownLED.SetAutoMode(MeltdownLED.Pattern);
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_MODE))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Mode);
    129c:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
    12a0:	4620      	mov	r0, r4
    12a2:	f004 ff2b 	bl	60fc <String::equals(String const&) const>
    12a6:	b140      	cbz	r0, 12ba <Meltdown::tryExecuteCommand() [clone .part.42]+0x5aa>

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    12a8:	4b0f      	ldr	r3, [pc, #60]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Mode Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_PATTERN_MODE))
    12aa:	491f      	ldr	r1, [pc, #124]	; (1328 <Meltdown::tryExecuteCommand() [clone .part.42]+0x618>)
    12ac:	ae08      	add	r6, sp, #32
    12ae:	2503      	movs	r5, #3

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    12b0:	2201      	movs	r2, #1
    12b2:	4630      	mov	r0, r6

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    12b4:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    12b8:	e7e6      	b.n	1288 <Meltdown::tryExecuteCommand() [clone .part.42]+0x578>
				{
					MeltdownLED.SetAutoMode(MeltdownLED.PatternMode);
    12ba:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    12be:	4620      	mov	r0, r4
    12c0:	f004 ff1c 	bl	60fc <String::equals(String const&) const>
    12c4:	b3a0      	cbz	r0, 1330 <Meltdown::tryExecuteCommand() [clone .part.42]+0x620>
    12c6:	4b08      	ldr	r3, [pc, #32]	; (12e8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x5d8>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_SLEEP))
    12c8:	4918      	ldr	r1, [pc, #96]	; (132c <Meltdown::tryExecuteCommand() [clone .part.42]+0x61c>)
    12ca:	ae08      	add	r6, sp, #32
    12cc:	2504      	movs	r5, #4

			bool IsAutoSleep() { return gAutoMode == Sleep; }

			bool SetAutoModeActive(bool isActive)
			{
				gAutoModeActive = isActive;
    12ce:	2201      	movs	r2, #1
    12d0:	4630      	mov	r0, r6

			// AUTO MODE //

			void SetAutoMode(AutoMode mode)
			{
				gAutoMode = mode;
    12d2:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    12d6:	e7d7      	b.n	1288 <Meltdown::tryExecuteCommand() [clone .part.42]+0x578>
    12d8:	1fffd1f0 	.word	0x1fffd1f0
    12dc:	1fff91de 	.word	0x1fff91de
    12e0:	1fffab18 	.word	0x1fffab18
    12e4:	1fff9f58 	.word	0x1fff9f58
    12e8:	1fffd13c 	.word	0x1fffd13c
    12ec:	1fffd1d8 	.word	0x1fffd1d8
    12f0:	00008250 	.word	0x00008250
    12f4:	1fffd350 	.word	0x1fffd350
    12f8:	1fffd1dc 	.word	0x1fffd1dc
    12fc:	1fffd290 	.word	0x1fffd290
    1300:	00008268 	.word	0x00008268
    1304:	00008280 	.word	0x00008280
    1308:	00008298 	.word	0x00008298
    130c:	000082b0 	.word	0x000082b0
    1310:	000083b0 	.word	0x000083b0
    1314:	000083c8 	.word	0x000083c8
    1318:	1fffd39c 	.word	0x1fffd39c
    131c:	000082c4 	.word	0x000082c4
    1320:	1fff8734 	.word	0x1fff8734
    1324:	000082dc 	.word	0x000082dc
    1328:	000082f8 	.word	0x000082f8
    132c:	00008310 	.word	0x00008310
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Sleep);
    1330:	4918      	ldr	r1, [pc, #96]	; (1394 <Meltdown::tryExecuteCommand() [clone .part.42]+0x684>)
    1332:	4620      	mov	r0, r4
    1334:	f004 fee2 	bl	60fc <String::equals(String const&) const>
    1338:	b138      	cbz	r0, 134a <Meltdown::tryExecuteCommand() [clone .part.42]+0x63a>
    133a:	4b17      	ldr	r3, [pc, #92]	; (1398 <Meltdown::tryExecuteCommand() [clone .part.42]+0x688>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Sleep Mode."));
				}
				else
    133c:	4917      	ldr	r1, [pc, #92]	; (139c <Meltdown::tryExecuteCommand() [clone .part.42]+0x68c>)
    133e:	ae08      	add	r6, sp, #32
    1340:	2201      	movs	r2, #1
    1342:	4630      	mov	r0, r6
    1344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    1348:	e79e      	b.n	1288 <Meltdown::tryExecuteCommand() [clone .part.42]+0x578>
				{
					MeltdownLogger.Debug(Serial, F("Something went wrong reading serial command"), command);
				}
			}
    134a:	ae08      	add	r6, sp, #32
    134c:	4914      	ldr	r1, [pc, #80]	; (13a0 <Meltdown::tryExecuteCommand() [clone .part.42]+0x690>)
    134e:	4630      	mov	r0, r6
    1350:	f10d 0810 	add.w	r8, sp, #16
    1354:	f004 fe3a 	bl	5fcc <String::String(__FlashStringHelper const*)>
    1358:	4640      	mov	r0, r8
    135a:	4621      	mov	r1, r4
    135c:	f004 fe48 	bl	5ff0 <String::String(String const&)>
			serial.println(msg);
		}

		void Debug(Stream &serial, String msg, String value)
		{
			if (!m_isDebug) return;
    1360:	4b10      	ldr	r3, [pc, #64]	; (13a4 <Meltdown::tryExecuteCommand() [clone .part.42]+0x694>)
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	b173      	cbz	r3, 1384 <Meltdown::tryExecuteCommand() [clone .part.42]+0x674>

			serial.print(msg);
    1366:	4631      	mov	r1, r6
    1368:	480f      	ldr	r0, [pc, #60]	; (13a8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x698>)
    136a:	f004 fd0b 	bl	5d84 <Print::print(String const&)>
    136e:	2102      	movs	r1, #2
    1370:	480e      	ldr	r0, [pc, #56]	; (13ac <Meltdown::tryExecuteCommand() [clone .part.42]+0x69c>)
    1372:	f004 fa07 	bl	5784 <usb_serial_write>
    1376:	4641      	mov	r1, r8
    1378:	480b      	ldr	r0, [pc, #44]	; (13a8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x698>)
    137a:	f004 fd03 	bl	5d84 <Print::print(String const&)>
    137e:	480a      	ldr	r0, [pc, #40]	; (13a8 <Meltdown::tryExecuteCommand() [clone .part.42]+0x698>)
    1380:	f004 fd26 	bl	5dd0 <Print::println()>
    1384:	4640      	mov	r0, r8
    1386:	f004 fdcd 	bl	5f24 <String::~String()>
    138a:	4630      	mov	r0, r6
    138c:	f004 fdca 	bl	5f24 <String::~String()>
    1390:	e4f4      	b.n	d7c <Meltdown::tryExecuteCommand() [clone .part.42]+0x6c>
    1392:	bf00      	nop
    1394:	1fffd310 	.word	0x1fffd310
    1398:	1fffd13c 	.word	0x1fffd13c
    139c:	00008330 	.word	0x00008330
    13a0:	0000834c 	.word	0x0000834c
    13a4:	1fffd350 	.word	0x1fffd350
    13a8:	1fff8734 	.word	0x1fff8734
    13ac:	00008234 	.word	0x00008234

000013b0 <Meltdown::setIndexesForSpokes(int)>:

	/// Set the indexes for the spokes of a single pent.
	void setIndexesForSpokes(int pentNumber)
	{
		clearLedIndexes();

    13b0:	4b12      	ldr	r3, [pc, #72]	; (13fc <Meltdown::setIndexesForSpokes(int)+0x4c>)
    13b2:	4913      	ldr	r1, [pc, #76]	; (1400 <Meltdown::setIndexesForSpokes(int)+0x50>)
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
    13b4:	2200      	movs	r2, #0
    13b6:	f823 2f02 	strh.w	r2, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
    13ba:	4299      	cmp	r1, r3
    13bc:	d1fb      	bne.n	13b6 <Meltdown::setIndexesForSpokes(int)+0x6>
    13be:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    13c2:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    13c6:	b29b      	uxth	r3, r3
    13c8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    13cc:	490d      	ldr	r1, [pc, #52]	; (1404 <Meltdown::setIndexesForSpokes(int)+0x54>)
    13ce:	f203 23c1 	addw	r3, r3, #705	; 0x2c1

	/// Set the indexes for the spokes of a single pent.
	void setIndexesForSpokes(int pentNumber)
	{
		clearLedIndexes();

    13d2:	b410      	push	{r4}
    13d4:	b280      	uxth	r0, r0
    13d6:	b29c      	uxth	r4, r3
    13d8:	f1a1 028a 	sub.w	r2, r1, #138	; 0x8a
    13dc:	4603      	mov	r3, r0
		{
			for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
			{
				ledIndexes[(j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
			}
		}
    13de:	f822 3f02 	strh.w	r3, [r2, #2]!
    13e2:	3301      	adds	r3, #1

		for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
		{
			for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
			{
				ledIndexes[(j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
    13e4:	4291      	cmp	r1, r2
    13e6:	b29b      	uxth	r3, r3
    13e8:	d1f9      	bne.n	13de <Meltdown::setIndexesForSpokes(int)+0x2e>
    13ea:	3081      	adds	r0, #129	; 0x81
    13ec:	b280      	uxth	r0, r0
	{
		clearLedIndexes();

		for (int j = 0; j < NUM_STRIPS_PER_PENT; j++)
		{
			for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
    13ee:	4284      	cmp	r4, r0
    13f0:	f101 018a 	add.w	r1, r1, #138	; 0x8a
    13f4:	d1f0      	bne.n	13d8 <Meltdown::setIndexesForSpokes(int)+0x28>
				ledIndexes[(j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
			}
		}
	}


    13f6:	bc10      	pop	{r4}
    13f8:	4770      	bx	lr
    13fa:	bf00      	nop
    13fc:	1fff91de 	.word	0x1fff91de
    1400:	1fffab10 	.word	0x1fffab10
    1404:	1fff9268 	.word	0x1fff9268

00001408 <Meltdown::executeSetup()>:
#pragma endregion COMMANDS

	void executeSetup()
	{
		// initialize serial communication at 9600 bits per second:
		Serial.begin(9600);
    1408:	b538      	push	{r3, r4, r5, lr}
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	constexpr HardwareSerial() {}
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    140a:	f644 6020 	movw	r0, #20000	; 0x4e20
    140e:	f003 f91f 	bl	4650 <serial_begin>
    1412:	2113      	movs	r1, #19
    1414:	481f      	ldr	r0, [pc, #124]	; (1494 <Meltdown::executeSetup()+0x8c>)
    1416:	f004 f9b5 	bl	5784 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    141a:	481f      	ldr	r0, [pc, #124]	; (1498 <Meltdown::executeSetup()+0x90>)
    141c:	f004 fcd8 	bl	5dd0 <Print::println()>

		bool m_isDebug = false;

		void InitSerial(bool isDebug)
		{
			m_isDebug = isDebug;
    1420:	4b1e      	ldr	r3, [pc, #120]	; (149c <Meltdown::executeSetup()+0x94>)
    1422:	2501      	movs	r5, #1
		Serial.println(F("Serial port opened."));
		MeltdownLogger.InitSerial(DEBUG);

		delay(3000);

		LEDS.addLeds<OCTOWS2811>(leds, NUM_LEDS_PER_PENT);
    1424:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1428:	701d      	strb	r5, [r3, #0]
    142a:	f003 f853 	bl	44d4 <delay>
#ifdef USE_OCTOWS2811
	template<OWS2811 CHIPSET, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		switch(CHIPSET) {
			case OCTOWS2811: { static COctoWS2811Controller<RGB_ORDER,WS2811_800kHz> controller; return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset); }
    142e:	481c      	ldr	r0, [pc, #112]	; (14a0 <Meltdown::executeSetup()+0x98>)
    1430:	6803      	ldr	r3, [r0, #0]
    1432:	ea13 0405 	ands.w	r4, r3, r5
    1436:	d00b      	beq.n	1450 <Meltdown::executeSetup()+0x48>
    1438:	2300      	movs	r3, #0
    143a:	f240 2285 	movw	r2, #645	; 0x285
    143e:	4919      	ldr	r1, [pc, #100]	; (14a4 <Meltdown::executeSetup()+0x9c>)
    1440:	4819      	ldr	r0, [pc, #100]	; (14a8 <Meltdown::executeSetup()+0xa0>)
    1442:	f000 fc65 	bl	1d10 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    1446:	4a19      	ldr	r2, [pc, #100]	; (14ac <Meltdown::executeSetup()+0xa4>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    1448:	4b19      	ldr	r3, [pc, #100]	; (14b0 <Meltdown::executeSetup()+0xa8>)
    144a:	6912      	ldr	r2, [r2, #16]
    144c:	701a      	strb	r2, [r3, #0]
    144e:	bd38      	pop	{r3, r4, r5, pc}
#ifdef USE_OCTOWS2811
	template<OWS2811 CHIPSET, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		switch(CHIPSET) {
			case OCTOWS2811: { static COctoWS2811Controller<RGB_ORDER,WS2811_800kHz> controller; return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset); }
    1450:	f002 ffc0 	bl	43d4 <__cxa_guard_acquire>
    1454:	2800      	cmp	r0, #0
    1456:	d0ef      	beq.n	1438 <Meltdown::executeSetup()+0x30>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    1458:	4916      	ldr	r1, [pc, #88]	; (14b4 <Meltdown::executeSetup()+0xac>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    145a:	4b13      	ldr	r3, [pc, #76]	; (14a8 <Meltdown::executeSetup()+0xa0>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    145c:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    145e:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1460:	22ff      	movs	r2, #255	; 0xff
    1462:	749d      	strb	r5, [r3, #18]
    1464:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    1466:	609c      	str	r4, [r3, #8]
    1468:	731a      	strb	r2, [r3, #12]
    146a:	735a      	strb	r2, [r3, #13]
    146c:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    146e:	73da      	strb	r2, [r3, #15]
    1470:	741a      	strb	r2, [r3, #16]
    1472:	745a      	strb	r2, [r3, #17]
        if(m_pHead==NULL) { m_pHead = this; }
    1474:	b160      	cbz	r0, 1490 <Meltdown::executeSetup()+0x88>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    1476:	4a10      	ldr	r2, [pc, #64]	; (14b8 <Meltdown::executeSetup()+0xb0>)
    1478:	6811      	ldr	r1, [r2, #0]
    147a:	b101      	cbz	r1, 147e <Meltdown::executeSetup()+0x76>
    147c:	608b      	str	r3, [r1, #8]
    }
  }
public:
  COctoWS2811Controller() { pocto = NULL; }
    147e:	490f      	ldr	r1, [pc, #60]	; (14bc <Meltdown::executeSetup()+0xb4>)
        m_pTail = this;
    1480:	6013      	str	r3, [r2, #0]
    1482:	4807      	ldr	r0, [pc, #28]	; (14a0 <Meltdown::executeSetup()+0x98>)
    1484:	6019      	str	r1, [r3, #0]
    1486:	2200      	movs	r2, #0
    1488:	619a      	str	r2, [r3, #24]
    148a:	f002 ffa9 	bl	43e0 <__cxa_guard_release>
    148e:	e7d3      	b.n	1438 <Meltdown::executeSetup()+0x30>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    1490:	600b      	str	r3, [r1, #0]
    1492:	e7f0      	b.n	1476 <Meltdown::executeSetup()+0x6e>
    1494:	000083e0 	.word	0x000083e0
    1498:	1fff8734 	.word	0x1fff8734
    149c:	1fffd350 	.word	0x1fffd350
    14a0:	1fff91b8 	.word	0x1fff91b8
    14a4:	1fffab18 	.word	0x1fffab18
    14a8:	1fff91bc 	.word	0x1fff91bc
    14ac:	1fffd13c 	.word	0x1fffd13c
    14b0:	1fffd118 	.word	0x1fffd118
    14b4:	1fffd128 	.word	0x1fffd128
    14b8:	1fffd138 	.word	0x1fffd138
    14bc:	00008218 	.word	0x00008218

000014c0 <Meltdown::executeWheels(int)>:
	}

	void executeWheels(int numLeds)
	{
		if (MeltdownLED.GetBottom())
		{
    14c0:	4b0c      	ldr	r3, [pc, #48]	; (14f4 <Meltdown::executeWheels(int)+0x34>)
			// Call the current pattern function once, updating the 'leds' array.
    14c2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    14c6:	b19a      	cbz	r2, 14f0 <Meltdown::executeWheels(int)+0x30>

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
    14c8:	2800      	cmp	r0, #0
    14ca:	dd10      	ble.n	14ee <Meltdown::executeWheels(int)+0x2e>
    14cc:	4a0a      	ldr	r2, [pc, #40]	; (14f8 <Meltdown::executeWheels(int)+0x38>)
	}

	void executeWheels(int numLeds)
	{
		if (MeltdownLED.GetBottom())
		{
    14ce:	b430      	push	{r4, r5}
    14d0:	4d0a      	ldr	r5, [pc, #40]	; (14fc <Meltdown::executeWheels(int)+0x3c>)
    14d2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    14d6:	2100      	movs	r1, #0
				{
					leds[indexes[i]] = color;
    14d8:	f832 3b02 	ldrh.w	r3, [r2], #2
    14dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    14e0:	18ec      	adds	r4, r5, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
    14e2:	4290      	cmp	r0, r2
    14e4:	54e9      	strb	r1, [r5, r3]
        g = (colorcode >>  8) & 0xFF;
    14e6:	7061      	strb	r1, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    14e8:	70a1      	strb	r1, [r4, #2]
    14ea:	d1f5      	bne.n	14d8 <Meltdown::executeWheels(int)+0x18>
		{
			MeltdownLED.MaximizeBrightness(leds, ledIndexes, numLeds);
		}*/
	}

	void executeSpokes(int numLeds)
    14ec:	bc30      	pop	{r4, r5}
    14ee:	4770      	bx	lr
    14f0:	f7fe bfc2 	b.w	478 <Meltdown::executeSpokes(int) [clone .part.40]>
    14f4:	1fffd13c 	.word	0x1fffd13c
    14f8:	1fff91e0 	.word	0x1fff91e0
    14fc:	1fffab18 	.word	0x1fffab18

00001500 <Meltdown::executeSpokes(int)>:
	{
		if (MeltdownLED.GetTop())
		{
    1500:	4b0c      	ldr	r3, [pc, #48]	; (1534 <Meltdown::executeSpokes(int)+0x34>)
			// Call the current pattern function once, updating the 'leds' array.
    1502:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    1506:	b19a      	cbz	r2, 1530 <Meltdown::executeSpokes(int)+0x30>
    1508:	2800      	cmp	r0, #0
    150a:	dd10      	ble.n	152e <Meltdown::executeSpokes(int)+0x2e>
    150c:	4a0a      	ldr	r2, [pc, #40]	; (1538 <Meltdown::executeSpokes(int)+0x38>)
	}

	void executeSpokes(int numLeds)
	{
		if (MeltdownLED.GetTop())
		{
    150e:	b430      	push	{r4, r5}
    1510:	4d0a      	ldr	r5, [pc, #40]	; (153c <Meltdown::executeSpokes(int)+0x3c>)
    1512:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1516:	2100      	movs	r1, #0
				{
					leds[indexes[i]] = color;
    1518:	f832 3b02 	ldrh.w	r3, [r2], #2
    151c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1520:	18ec      	adds	r4, r5, r3

#pragma region UTILITY

			void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numLeds; i++)
    1522:	4290      	cmp	r0, r2
    1524:	54e9      	strb	r1, [r5, r3]
        g = (colorcode >>  8) & 0xFF;
    1526:	7061      	strb	r1, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    1528:	70a1      	strb	r1, [r4, #2]
    152a:	d1f5      	bne.n	1518 <Meltdown::executeSpokes(int)+0x18>
		{
			MeltdownLED.MaximizeBrightness(leds, ledIndexes, numLeds);
		}*/
	}

	void executeLoop()
    152c:	bc30      	pop	{r4, r5}
    152e:	4770      	bx	lr
    1530:	f7fe bfa2 	b.w	478 <Meltdown::executeSpokes(int) [clone .part.40]>
    1534:	1fffd13c 	.word	0x1fffd13c
    1538:	1fff91e0 	.word	0x1fff91e0
    153c:	1fffab18 	.word	0x1fffab18

00001540 <Meltdown::executeLoop()>:
	{
		tryExecuteCommand();

    1540:	4b1b      	ldr	r3, [pc, #108]	; (15b0 <Meltdown::executeLoop()+0x70>)

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
		{
			MeltdownSerial.SetInputStringComplete(false);
    1542:	7d1b      	ldrb	r3, [r3, #20]
	}

	void executeLoop()
	{
		tryExecuteCommand();

    1544:	b510      	push	{r4, lr}

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
		{
			MeltdownSerial.SetInputStringComplete(false);
    1546:	b9eb      	cbnz	r3, 1584 <Meltdown::executeLoop()+0x44>
    1548:	4b1a      	ldr	r3, [pc, #104]	; (15b4 <Meltdown::executeLoop()+0x74>)
	{
		tryExecuteCommand();

		if (!MeltdownLED.GetPause())
		{
			if (MeltdownLED.GetFullBright())
    154a:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
    154e:	b99c      	cbnz	r4, 1578 <Meltdown::executeLoop()+0x38>
			{
				for (int i = 0; i < NUM_PENTS; i++)
    1550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
    1554:	b1cb      	cbz	r3, 158a <Meltdown::executeLoop()+0x4a>
				{
					// WHEELS
					setIndexesForWheel(i);
					executeWheels(NUM_WHEEL_LEDS_PER_PENT);

    1556:	4620      	mov	r0, r4
    1558:	f7ff fb86 	bl	c68 <Meltdown::setIndexesForWheel(int)>
					// SPOKES
    155c:	f44f 7096 	mov.w	r0, #300	; 0x12c
    1560:	f7ff ffae 	bl	14c0 <Meltdown::executeWheels(int)>
					setIndexesForSpokes(i);
					executeSpokes(NUM_SPOKE_LEDS_PER_PENT);
				}
    1564:	4620      	mov	r0, r4
    1566:	f7ff ff23 	bl	13b0 <Meltdown::setIndexesForSpokes(int)>
		{
			if (MeltdownLED.GetFullBright())
			{
				for (int i = 0; i < NUM_PENTS; i++)
				{
					// WHEELS
    156a:	3401      	adds	r4, #1

					// SPOKES
					setIndexesForSpokes(i);
					executeSpokes(NUM_SPOKE_LEDS_PER_PENT);
				}
			}
    156c:	f240 1059 	movw	r0, #345	; 0x159
    1570:	f7ff ffc6 	bl	1500 <Meltdown::executeSpokes(int)>
		{
			if (MeltdownLED.GetFullBright())
			{
				for (int i = 0; i < NUM_PENTS; i++)
				{
					// WHEELS
    1574:	2c05      	cmp	r4, #5
    1576:	d1ee      	bne.n	1556 <Meltdown::executeLoop()+0x16>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    1578:	480f      	ldr	r0, [pc, #60]	; (15b8 <Meltdown::executeLoop()+0x78>)
		//displayDebugColors();

		LEDS.show();
	}

	void executeSerialEvent()
    157a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    157e:	7801      	ldrb	r1, [r0, #0]
    1580:	f000 bc18 	b.w	1db4 <CFastLED::show(unsigned char)>
    1584:	f7ff fbc4 	bl	d10 <Meltdown::tryExecuteCommand() [clone .part.42]>
    1588:	e7de      	b.n	1548 <Meltdown::executeLoop()+0x8>
			else
			{
				// WHEELS
				setIndexesForWheels();
				executeWheels(NUM_WHEEL_LEDS);

    158a:	f7ff fb3d 	bl	c08 <Meltdown::setIndexesForWheels()>
				// SPOKES
    158e:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1592:	f7ff ff95 	bl	14c0 <Meltdown::executeWheels(int)>
				setIndexesForSpokes();
				executeSpokes(NUM_SPOKE_LEDS);
			}
    1596:	f7ff fb8b 	bl	cb0 <Meltdown::setIndexesForSpokes()>
		}
    159a:	f240 60bd 	movw	r0, #1725	; 0x6bd
    159e:	f7ff ffaf 	bl	1500 <Meltdown::executeSpokes(int)>
    15a2:	4805      	ldr	r0, [pc, #20]	; (15b8 <Meltdown::executeLoop()+0x78>)
		//displayDebugColors();

		LEDS.show();
	}

	void executeSerialEvent()
    15a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15a8:	7801      	ldrb	r1, [r0, #0]
    15aa:	f000 bc03 	b.w	1db4 <CFastLED::show(unsigned char)>
    15ae:	bf00      	nop
    15b0:	1fffd1d8 	.word	0x1fffd1d8
    15b4:	1fffd13c 	.word	0x1fffd13c
    15b8:	1fffd118 	.word	0x1fffd118

000015bc <Meltdown::executeSerialEvent()>:
	{
		while (Serial1.available() && !MeltdownSerial.GetInputStringComplete())
		{
    15bc:	b570      	push	{r4, r5, r6, lr}
    15be:	4d1c      	ldr	r5, [pc, #112]	; (1630 <Meltdown::executeSerialEvent()+0x74>)
    15c0:	b088      	sub	sp, #32
    15c2:	462e      	mov	r6, r5
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    15c4:	f003 f8ba 	bl	473c <serial_available>
			// get the new byte:
    15c8:	b908      	cbnz	r0, 15ce <Meltdown::executeSerialEvent()+0x12>
				MeltdownSerial.SetInputStringComplete(true);
			}
		}
	}
}

    15ca:	b008      	add	sp, #32
    15cc:	bd70      	pop	{r4, r5, r6, pc}

	void executeSerialEvent()
	{
		while (Serial1.available() && !MeltdownSerial.GetInputStringComplete())
		{
			// get the new byte:
    15ce:	7d2b      	ldrb	r3, [r5, #20]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d1fa      	bne.n	15ca <Meltdown::executeSerialEvent()+0xe>
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
    15d4:	f003 f8c2 	bl	475c <serial_getchar>
			char inChar = (char)Serial1.read();
			// add it to the inputString:
			MeltdownSerial.AddCharToInputString(inChar);
    15d8:	b2c4      	uxtb	r4, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    15da:	4621      	mov	r1, r4
    15dc:	4815      	ldr	r0, [pc, #84]	; (1634 <Meltdown::executeSerialEvent()+0x78>)
    15de:	f004 fd67 	bl	60b0 <String::append(char)>
			// if the incoming character is a newline, set a flag
			// so the main loop can do something about it:
			if (inChar == '\n')
			{
				MeltdownLogger.Debug(Serial, F("Received input string"), MeltdownSerial.GetInputString());
    15e2:	2c0a      	cmp	r4, #10
    15e4:	d1ee      	bne.n	15c4 <Meltdown::executeSerialEvent()+0x8>
				MeltdownSerial.SetInputStringComplete(true);
			}
    15e6:	4914      	ldr	r1, [pc, #80]	; (1638 <Meltdown::executeSerialEvent()+0x7c>)
    15e8:	a804      	add	r0, sp, #16
    15ea:	f004 fcef 	bl	5fcc <String::String(__FlashStringHelper const*)>
			}

			String GetInputString() { return m_inputString; }
    15ee:	4668      	mov	r0, sp
    15f0:	4910      	ldr	r1, [pc, #64]	; (1634 <Meltdown::executeSerialEvent()+0x78>)
    15f2:	f004 fcfd 	bl	5ff0 <String::String(String const&)>
			serial.println(msg);
		}

		void Debug(Stream &serial, String msg, String value)
		{
			if (!m_isDebug) return;
    15f6:	4b11      	ldr	r3, [pc, #68]	; (163c <Meltdown::executeSerialEvent()+0x80>)
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	b943      	cbnz	r3, 160e <Meltdown::executeSerialEvent()+0x52>
    15fc:	4668      	mov	r0, sp
    15fe:	f004 fc91 	bl	5f24 <String::~String()>
    1602:	a804      	add	r0, sp, #16
    1604:	f004 fc8e 	bl	5f24 <String::~String()>

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
    1608:	2301      	movs	r3, #1
    160a:	7533      	strb	r3, [r6, #20]
    160c:	e7da      	b.n	15c4 <Meltdown::executeSerialEvent()+0x8>

			serial.print(msg);
    160e:	a904      	add	r1, sp, #16
    1610:	480b      	ldr	r0, [pc, #44]	; (1640 <Meltdown::executeSerialEvent()+0x84>)
    1612:	f004 fbb7 	bl	5d84 <Print::print(String const&)>
    1616:	2102      	movs	r1, #2
    1618:	480a      	ldr	r0, [pc, #40]	; (1644 <Meltdown::executeSerialEvent()+0x88>)
    161a:	f004 f8b3 	bl	5784 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    161e:	4669      	mov	r1, sp
    1620:	4807      	ldr	r0, [pc, #28]	; (1640 <Meltdown::executeSerialEvent()+0x84>)
    1622:	f004 fbaf 	bl	5d84 <Print::print(String const&)>
    1626:	4806      	ldr	r0, [pc, #24]	; (1640 <Meltdown::executeSerialEvent()+0x84>)
    1628:	f004 fbd2 	bl	5dd0 <Print::println()>
    162c:	e7e6      	b.n	15fc <Meltdown::executeSerialEvent()+0x40>
    162e:	bf00      	nop
    1630:	1fffd1d8 	.word	0x1fffd1d8
    1634:	1fffd1dc 	.word	0x1fffd1dc
    1638:	000083f4 	.word	0x000083f4
    163c:	1fffd350 	.word	0x1fffd350
    1640:	1fff8734 	.word	0x1fff8734
    1644:	00008234 	.word	0x00008234

00001648 <setup>:
	}
}

void setup()
{
	Meltdown::executeSetup();
    1648:	b508      	push	{r3, lr}
    164a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    164e:	4810      	ldr	r0, [pc, #64]	; (1690 <setup+0x48>)
    1650:	f002 fd06 	bl	4060 <VisualMicroDebug::init(unsigned long)>
    1654:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    1658:	480d      	ldr	r0, [pc, #52]	; (1690 <setup+0x48>)
    165a:	f002 fcfd 	bl	4058 <VisualMicroDebug::begin(unsigned long)>
    165e:	2101      	movs	r1, #1
    1660:	480b      	ldr	r0, [pc, #44]	; (1690 <setup+0x48>)
    1662:	f002 fcd3 	bl	400c <VisualMicroDebug::outPacketStart(bool)>
    1666:	b150      	cbz	r0, 167e <setup+0x36>
    1668:	2111      	movs	r1, #17
    166a:	480a      	ldr	r0, [pc, #40]	; (1694 <setup+0x4c>)
    166c:	f004 f88a 	bl	5784 <usb_serial_write>
    1670:	4807      	ldr	r0, [pc, #28]	; (1690 <setup+0x48>)
    1672:	210a      	movs	r1, #10
    1674:	f002 fc40 	bl	3ef8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    1678:	4805      	ldr	r0, [pc, #20]	; (1690 <setup+0x48>)
    167a:	f002 fceb 	bl	4054 <VisualMicroDebug::outPacketEnd()>
    167e:	2201      	movs	r2, #1
    1680:	2100      	movs	r1, #0
    1682:	4803      	ldr	r0, [pc, #12]	; (1690 <setup+0x48>)
    1684:	f002 fd98 	bl	41b8 <VisualMicroDebug::start(bool, bool)>
}

void loop()
    1688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup()
{
	Meltdown::executeSetup();
}

    168c:	f7ff bebc 	b.w	1408 <Meltdown::executeSetup()>
    1690:	1fffd354 	.word	0x1fffd354
    1694:	0000840c 	.word	0x0000840c

00001698 <loop>:
void loop()
{
	Meltdown::executeLoop();
    1698:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    169a:	4c25      	ldr	r4, [pc, #148]	; (1730 <loop+0x98>)
    169c:	b085      	sub	sp, #20
    169e:	6823      	ldr	r3, [r4, #0]
    16a0:	9301      	str	r3, [sp, #4]
	return ret;
    16a2:	9b01      	ldr	r3, [sp, #4]
    16a4:	b923      	cbnz	r3, 16b0 <loop+0x18>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16a6:	6823      	ldr	r3, [r4, #0]
    16a8:	9302      	str	r3, [sp, #8]
	return ret;
    16aa:	9b02      	ldr	r3, [sp, #8]
    16ac:	2b01      	cmp	r3, #1
    16ae:	d91e      	bls.n	16ee <loop+0x56>
    16b0:	4820      	ldr	r0, [pc, #128]	; (1734 <loop+0x9c>)
    16b2:	4d21      	ldr	r5, [pc, #132]	; (1738 <loop+0xa0>)
    16b4:	f002 fc32 	bl	3f1c <VisualMicroDebug::DBG_Millis()>
    16b8:	682a      	ldr	r2, [r5, #0]
    16ba:	4920      	ldr	r1, [pc, #128]	; (173c <loop+0xa4>)
    16bc:	4290      	cmp	r0, r2
    16be:	4603      	mov	r3, r0
    16c0:	6008      	str	r0, [r1, #0]
    16c2:	d318      	bcc.n	16f6 <loop+0x5e>
    16c4:	1a9a      	subs	r2, r3, r2
    16c6:	2af9      	cmp	r2, #249	; 0xf9
    16c8:	d911      	bls.n	16ee <loop+0x56>
    16ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    16ce:	4819      	ldr	r0, [pc, #100]	; (1734 <loop+0x9c>)
    16d0:	602b      	str	r3, [r5, #0]
    16d2:	f002 fc2d 	bl	3f30 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
    16d6:	2101      	movs	r1, #1
    16d8:	4816      	ldr	r0, [pc, #88]	; (1734 <loop+0x9c>)
    16da:	f002 fc97 	bl	400c <VisualMicroDebug::outPacketStart(bool)>
    16de:	b978      	cbnz	r0, 1700 <loop+0x68>
    16e0:	4814      	ldr	r0, [pc, #80]	; (1734 <loop+0x9c>)
    16e2:	2102      	movs	r1, #2
    16e4:	f002 fc08 	bl	3ef8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    16e8:	4812      	ldr	r0, [pc, #72]	; (1734 <loop+0x9c>)
    16ea:	f002 fc85 	bl	3ff8 <VisualMicroDebug::OnBreakPointEnd()>
}

    16ee:	f7ff ff27 	bl	1540 <Meltdown::executeLoop()>
void serialEvent1()
    16f2:	b005      	add	sp, #20
    16f4:	bd30      	pop	{r4, r5, pc}
	Meltdown::executeSetup();
}

void loop()
{
	Meltdown::executeLoop();
    16f6:	602b      	str	r3, [r5, #0]
}

    16f8:	f7ff ff22 	bl	1540 <Meltdown::executeLoop()>
void serialEvent1()
    16fc:	b005      	add	sp, #20
    16fe:	bd30      	pop	{r4, r5, pc}
	Meltdown::executeSetup();
}

void loop()
{
	Meltdown::executeLoop();
    1700:	2101      	movs	r1, #1
    1702:	480c      	ldr	r0, [pc, #48]	; (1734 <loop+0x9c>)
    1704:	f002 fc26 	bl	3f54 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
    1708:	2101      	movs	r1, #1
    170a:	480d      	ldr	r0, [pc, #52]	; (1740 <loop+0xa8>)
    170c:	f004 f83a 	bl	5784 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1710:	6823      	ldr	r3, [r4, #0]
    1712:	9303      	str	r3, [sp, #12]
	return ret;
    1714:	9903      	ldr	r1, [sp, #12]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1716:	480b      	ldr	r0, [pc, #44]	; (1744 <loop+0xac>)
    1718:	2300      	movs	r3, #0
    171a:	220a      	movs	r2, #10
    171c:	f004 fb68 	bl	5df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1720:	4804      	ldr	r0, [pc, #16]	; (1734 <loop+0x9c>)
    1722:	f002 fc5b 	bl	3fdc <VisualMicroDebug::OnBreakPointPrintEnd()>
    1726:	4803      	ldr	r0, [pc, #12]	; (1734 <loop+0x9c>)
    1728:	f002 fc94 	bl	4054 <VisualMicroDebug::outPacketEnd()>
    172c:	e7d8      	b.n	16e0 <loop+0x48>
    172e:	bf00      	nop
    1730:	1fffd39c 	.word	0x1fffd39c
    1734:	1fffd354 	.word	0x1fffd354
    1738:	1fffab14 	.word	0x1fffab14
    173c:	1fffd0e4 	.word	0x1fffd0e4
    1740:	00008420 	.word	0x00008420
    1744:	1fff8734 	.word	0x1fff8734

00001748 <serialEvent1()>:

void serialEvent1()
{
	Meltdown::executeSerialEvent();
    1748:	f7ff bf38 	b.w	15bc <Meltdown::executeSerialEvent()>

0000174c <OctoWS2811::isr()>:
	dma3.attachInterrupt(isr);
	//pinMode(9, OUTPUT); // testing: oscilloscope trigger
}

void OctoWS2811::isr(void)
{
    174c:	b508      	push	{r3, lr}
    174e:	4a06      	ldr	r2, [pc, #24]	; (1768 <OctoWS2811::isr()+0x1c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1750:	4b06      	ldr	r3, [pc, #24]	; (176c <OctoWS2811::isr()+0x20>)
    1752:	7912      	ldrb	r2, [r2, #4]
    1754:	701a      	strb	r2, [r3, #0]
	dma3.clearInterrupt();
#if defined(__MKL26Z64__)
	GPIOD_PCOR = 0xFF;
#endif
	//Serial1.print("*");
	update_completed_at = micros();
    1756:	f002 fe9b 	bl	4490 <micros>
    175a:	4a05      	ldr	r2, [pc, #20]	; (1770 <OctoWS2811::isr()+0x24>)
	update_in_progress = 0;
    175c:	4b05      	ldr	r3, [pc, #20]	; (1774 <OctoWS2811::isr()+0x28>)
	dma3.clearInterrupt();
#if defined(__MKL26Z64__)
	GPIOD_PCOR = 0xFF;
#endif
	//Serial1.print("*");
	update_completed_at = micros();
    175e:	6010      	str	r0, [r2, #0]
	update_in_progress = 0;
    1760:	2200      	movs	r2, #0
    1762:	701a      	strb	r2, [r3, #0]
    1764:	bd08      	pop	{r3, pc}
    1766:	bf00      	nop
    1768:	1fffd108 	.word	0x1fffd108
    176c:	4000801f 	.word	0x4000801f
    1770:	1fffd0ec 	.word	0x1fffd0ec
    1774:	1fffd104 	.word	0x1fffd104

00001778 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    1778:	b510      	push	{r4, lr}
    177a:	4604      	mov	r4, r0
		release();
    177c:	f004 f96a 	bl	5a54 <DMAChannel::release()>
	}
    1780:	4620      	mov	r0, r4
    1782:	bd10      	pop	{r4, pc}

00001784 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)>:

static uint8_t ones = 0xFF;
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
    1784:	b4f0      	push	{r4, r5, r6, r7}
{
	stripLen = numPerStrip;
    1786:	4f06      	ldr	r7, [pc, #24]	; (17a0 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x1c>)
	frameBuffer = frameBuf;
    1788:	4e06      	ldr	r6, [pc, #24]	; (17a4 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x20>)
	drawBuffer = drawBuf;
    178a:	4d07      	ldr	r5, [pc, #28]	; (17a8 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x24>)
	params = config;
    178c:	4c07      	ldr	r4, [pc, #28]	; (17ac <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x28>)
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
{
	stripLen = numPerStrip;
    178e:	8039      	strh	r1, [r7, #0]

static uint8_t ones = 0xFF;
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
    1790:	f89d 1010 	ldrb.w	r1, [sp, #16]
{
	stripLen = numPerStrip;
	frameBuffer = frameBuf;
    1794:	6032      	str	r2, [r6, #0]
	drawBuffer = drawBuf;
    1796:	602b      	str	r3, [r5, #0]
	params = config;
    1798:	7021      	strb	r1, [r4, #0]
}
    179a:	bcf0      	pop	{r4, r5, r6, r7}
    179c:	4770      	bx	lr
    179e:	bf00      	nop
    17a0:	1fffd0f4 	.word	0x1fffd0f4
    17a4:	1fffd0f0 	.word	0x1fffd0f0
    17a8:	1fffd100 	.word	0x1fffd100
    17ac:	1fffd0e8 	.word	0x1fffd0e8

000017b0 <OctoWS2811::begin()>:
	params = config;
	begin();
}

void OctoWS2811::begin(void)
{
    17b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    17b2:	4ba2      	ldr	r3, [pc, #648]	; (1a3c <OctoWS2811::begin()+0x28c>)

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    17b4:	4ea2      	ldr	r6, [pc, #648]	; (1a40 <OctoWS2811::begin()+0x290>)
}

void OctoWS2811::begin(void)
{
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    17b6:	881c      	ldrh	r4, [r3, #0]

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    17b8:	6830      	ldr	r0, [r6, #0]
}

void OctoWS2811::begin(void)
{
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    17ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    17be:	00e4      	lsls	r4, r4, #3

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    17c0:	4622      	mov	r2, r4
    17c2:	2100      	movs	r1, #0
    17c4:	f005 fdea 	bl	739c <memset>
	if (drawBuffer) {
    17c8:	4b9e      	ldr	r3, [pc, #632]	; (1a44 <OctoWS2811::begin()+0x294>)
    17ca:	6818      	ldr	r0, [r3, #0]
    17cc:	2800      	cmp	r0, #0
    17ce:	f000 8103 	beq.w	19d8 <OctoWS2811::begin()+0x228>
		memset(drawBuffer, 0, bufsize);
    17d2:	4622      	mov	r2, r4
    17d4:	2100      	movs	r1, #0
    17d6:	f005 fde1 	bl	739c <memset>
	} else {
		drawBuffer = frameBuffer;
	}

	// configure the 8 output pins
	GPIOD_PCOR = 0xFF;
    17da:	4b9b      	ldr	r3, [pc, #620]	; (1a48 <OctoWS2811::begin()+0x298>)
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
    17dc:	4f9b      	ldr	r7, [pc, #620]	; (1a4c <OctoWS2811::begin()+0x29c>)
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
    17de:	4d9c      	ldr	r5, [pc, #624]	; (1a50 <OctoWS2811::begin()+0x2a0>)
	} else {
		drawBuffer = frameBuffer;
	}

	// configure the 8 output pins
	GPIOD_PCOR = 0xFF;
    17e0:	22ff      	movs	r2, #255	; 0xff
    17e2:	601a      	str	r2, [r3, #0]
	pinMode(2, OUTPUT);	// strip #1
    17e4:	2101      	movs	r1, #1
    17e6:	2002      	movs	r0, #2
    17e8:	f002 fe4c 	bl	4484 <pinMode>
	pinMode(14, OUTPUT);	// strip #2
    17ec:	2101      	movs	r1, #1
    17ee:	200e      	movs	r0, #14
    17f0:	f002 fe48 	bl	4484 <pinMode>
	pinMode(7, OUTPUT);	// strip #3
    17f4:	2101      	movs	r1, #1
    17f6:	2007      	movs	r0, #7
    17f8:	f002 fe44 	bl	4484 <pinMode>
	pinMode(8, OUTPUT);	// strip #4
    17fc:	2101      	movs	r1, #1
    17fe:	2008      	movs	r0, #8
    1800:	f002 fe40 	bl	4484 <pinMode>
	pinMode(6, OUTPUT);	// strip #5
    1804:	2101      	movs	r1, #1
    1806:	2006      	movs	r0, #6
    1808:	f002 fe3c 	bl	4484 <pinMode>
	pinMode(20, OUTPUT);	// strip #6
    180c:	2101      	movs	r1, #1
    180e:	2014      	movs	r0, #20
    1810:	f002 fe38 	bl	4484 <pinMode>
	pinMode(21, OUTPUT);	// strip #7
    1814:	2101      	movs	r1, #1
    1816:	2015      	movs	r0, #21
    1818:	f002 fe34 	bl	4484 <pinMode>
	pinMode(5, OUTPUT);	// strip #8
    181c:	2005      	movs	r0, #5
    181e:	2101      	movs	r1, #1
    1820:	f002 fe30 	bl	4484 <pinMode>

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1824:	4b8b      	ldr	r3, [pc, #556]	; (1a54 <OctoWS2811::begin()+0x2a4>)
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    1826:	4a8c      	ldr	r2, [pc, #560]	; (1a58 <OctoWS2811::begin()+0x2a8>)
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1828:	781b      	ldrb	r3, [r3, #0]

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
    182a:	498c      	ldr	r1, [pc, #560]	; (1a5c <OctoWS2811::begin()+0x2ac>)
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
    182c:	f8df c258 	ldr.w	ip, [pc, #600]	; 1a88 <OctoWS2811::begin()+0x2d8>
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1834:	2b10      	cmp	r3, #16
#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1836:	f04f 0e08 	mov.w	lr, #8
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    183a:	f04f 0300 	mov.w	r3, #0
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    183e:	bf0c      	ite	eq
    1840:	2077      	moveq	r0, #119	; 0x77
    1842:	203b      	movne	r0, #59	; 0x3b
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    1844:	6013      	str	r3, [r2, #0]
	FTM2_CNT = 0;
    1846:	603b      	str	r3, [r7, #0]
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
    1848:	6008      	str	r0, [r1, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    184a:	f8c2 e000 	str.w	lr, [r2]
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    184e:	f5a1 21db 	sub.w	r1, r1, #448512	; 0x6d800
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1852:	bf0c      	ite	eq
    1854:	f04f 0e1c 	moveq.w	lr, #28
    1858:	f04f 0e0e 	movne.w	lr, #14
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
    185c:	f04f 0269 	mov.w	r2, #105	; 0x69
    1860:	f8cc 2000 	str.w	r2, [ip]
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
    1864:	487e      	ldr	r0, [pc, #504]	; (1a60 <OctoWS2811::begin()+0x2b0>)
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
    1866:	602a      	str	r2, [r5, #0]
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    1868:	f5a1 61f8 	sub.w	r1, r1, #1984	; 0x7c0
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
    186c:	f8c7 e00c 	str.w	lr, [r7, #12]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1870:	f8df e208 	ldr.w	lr, [pc, #520]	; 1a7c <OctoWS2811::begin()+0x2cc>
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    1874:	4a7b      	ldr	r2, [pc, #492]	; (1a64 <OctoWS2811::begin()+0x2b4>)
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1876:	bf0c      	ite	eq
    1878:	2552      	moveq	r5, #82	; 0x52
    187a:	2529      	movne	r5, #41	; 0x29
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
    187c:	6005      	str	r5, [r0, #0]
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    187e:	600a      	str	r2, [r1, #0]
    1880:	f8de 2000 	ldr.w	r2, [lr]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1884:	4d78      	ldr	r5, [pc, #480]	; (1a68 <OctoWS2811::begin()+0x2b8>)
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
    1886:	71d3      	strb	r3, [r2, #7]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    1888:	2102      	movs	r1, #2
    188a:	7191      	strb	r1, [r2, #6]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    188c:	4877      	ldr	r0, [pc, #476]	; (1a6c <OctoWS2811::begin()+0x2bc>)
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    188e:	88d1      	ldrh	r1, [r2, #6]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1890:	6010      	str	r0, [r2, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1892:	6115      	str	r5, [r2, #16]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1894:	8bd5      	ldrh	r5, [r2, #30]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    1896:	8093      	strh	r3, [r2, #4]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1898:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
    189c:	f021 0107 	bic.w	r1, r1, #7
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->SLAST = 0;
    18a0:	60d3      	str	r3, [r2, #12]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    18a2:	8293      	strh	r3, [r2, #20]
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    18a4:	6193      	str	r3, [r2, #24]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    18a6:	042f      	lsls	r7, r5, #16
			TCD->NBYTES = 2;
			if (TCD->SOFF != 0) TCD->SOFF = 2;
			if (TCD->DOFF != 0) TCD->DOFF = 2;
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
    18a8:	f04f 0301 	mov.w	r3, #1
    18ac:	6093      	str	r3, [r2, #8]
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    18ae:	80d1      	strh	r1, [r2, #6]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    18b0:	f100 8095 	bmi.w	19de <OctoWS2811::begin()+0x22e>
			if (len > 32767) return;
    18b4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    18b8:	b2a1      	uxth	r1, r4
    18ba:	f2c0 808a 	blt.w	19d2 <OctoWS2811::begin()+0x222>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    18be:	8b95      	ldrh	r5, [r2, #28]
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    18c0:	4f6b      	ldr	r7, [pc, #428]	; (1a70 <OctoWS2811::begin()+0x2c0>)
	dma1.transferSize(1);
	dma1.transferCount(bufsize);
	dma1.disableOnCompletion();

	// DMA channel #2 writes the pixel data at 23% of the cycle
	dma2.sourceBuffer((uint8_t *)frameBuffer, bufsize);
    18c2:	f8d6 c000 	ldr.w	ip, [r6]
    18c6:	683b      	ldr	r3, [r7, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    18c8:	4e6a      	ldr	r6, [pc, #424]	; (1a74 <OctoWS2811::begin()+0x2c4>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    18ca:	b2ad      	uxth	r5, r5
    18cc:	f045 0508 	orr.w	r5, r5, #8
    18d0:	8395      	strh	r5, [r2, #28]
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    18d2:	2500      	movs	r5, #0
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    18d4:	2202      	movs	r2, #2
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    18d6:	71dd      	strb	r5, [r3, #7]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    18d8:	719a      	strb	r2, [r3, #6]
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    18da:	f8c3 c000 	str.w	ip, [r3]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    18de:	88da      	ldrh	r2, [r3, #6]
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
		TCD->BITER = len;
    18e0:	83d9      	strh	r1, [r3, #30]
		TCD->CITER = len;
    18e2:	82d9      	strh	r1, [r3, #22]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    18e4:	611e      	str	r6, [r3, #16]
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
    18e6:	4266      	negs	r6, r4
    18e8:	60de      	str	r6, [r3, #12]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    18ea:	8bde      	ldrh	r6, [r3, #30]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    18ec:	829d      	strh	r5, [r3, #20]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    18ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    18f2:	619d      	str	r5, [r3, #24]
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    18f4:	2501      	movs	r5, #1
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    18f6:	f022 0207 	bic.w	r2, r2, #7
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    18fa:	809d      	strh	r5, [r3, #4]
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
    18fc:	609d      	str	r5, [r3, #8]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    18fe:	0435      	lsls	r5, r6, #16
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1900:	80da      	strh	r2, [r3, #6]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1902:	f100 8089 	bmi.w	1a18 <OctoWS2811::begin()+0x268>
			if (len > 32767) return;
    1906:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    190a:	db5f      	blt.n	19cc <OctoWS2811::begin()+0x21c>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    190c:	8b9a      	ldrh	r2, [r3, #28]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    190e:	4d5a      	ldr	r5, [pc, #360]	; (1a78 <OctoWS2811::begin()+0x2c8>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1910:	b292      	uxth	r2, r2
    1912:	f042 0208 	orr.w	r2, r2, #8
    1916:	839a      	strh	r2, [r3, #28]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1918:	682b      	ldr	r3, [r5, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    191a:	4a4b      	ldr	r2, [pc, #300]	; (1a48 <OctoWS2811::begin()+0x298>)

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    191c:	6018      	str	r0, [r3, #0]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    191e:	2002      	movs	r0, #2
    1920:	7198      	strb	r0, [r3, #6]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    1922:	2000      	movs	r0, #0
		TCD->ATTR_SRC = 0;
    1924:	71d8      	strb	r0, [r3, #7]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1926:	611a      	str	r2, [r3, #16]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1928:	88da      	ldrh	r2, [r3, #6]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    192a:	8098      	strh	r0, [r3, #4]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    192c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1930:	f022 0207 	bic.w	r2, r2, #7
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->SLAST = 0;
    1934:	60d8      	str	r0, [r3, #12]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1936:	8298      	strh	r0, [r3, #20]
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    1938:	6198      	str	r0, [r3, #24]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    193a:	8bd8      	ldrh	r0, [r3, #30]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    193c:	80da      	strh	r2, [r3, #6]
			TCD->NBYTES = 2;
			if (TCD->SOFF != 0) TCD->SOFF = 2;
			if (TCD->DOFF != 0) TCD->DOFF = 2;
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
    193e:	2201      	movs	r2, #1
    1940:	609a      	str	r2, [r3, #8]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1942:	0402      	lsls	r2, r0, #16
    1944:	d45a      	bmi.n	19fc <OctoWS2811::begin()+0x24c>
			if (len > 32767) return;
    1946:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    194a:	db3c      	blt.n	19c6 <OctoWS2811::begin()+0x216>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    194c:	8b9e      	ldrh	r6, [r3, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    194e:	f89e 4004 	ldrb.w	r4, [lr, #4]
#elif defined(__MK20DX256__)
	// route the edge detect interrupts to trigger the 3 channels
	dma1.triggerAtHardwareEvent(DMAMUX_SOURCE_PORTB);
	dma2.triggerAtHardwareEvent(DMAMUX_SOURCE_FTM2_CH0);
	dma3.triggerAtHardwareEvent(DMAMUX_SOURCE_FTM2_CH1);
	DMAPriorityOrder(dma3, dma2, dma1);
    1952:	4a4a      	ldr	r2, [pc, #296]	; (1a7c <OctoWS2811::begin()+0x2cc>)
    1954:	4946      	ldr	r1, [pc, #280]	; (1a70 <OctoWS2811::begin()+0x2c0>)
    1956:	4848      	ldr	r0, [pc, #288]	; (1a78 <OctoWS2811::begin()+0x2c8>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1958:	b2b6      	uxth	r6, r6
    195a:	f046 0608 	orr.w	r6, r6, #8
    195e:	839e      	strh	r6, [r3, #28]
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    1960:	8b9e      	ldrh	r6, [r3, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1962:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    1966:	b2b6      	uxth	r6, r6
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1968:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    196c:	f046 0602 	orr.w	r6, r6, #2
    1970:	839e      	strh	r6, [r3, #28]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1972:	2600      	movs	r6, #0
		*mux = (source & 63) | DMAMUX_ENABLE;
    1974:	23b2      	movs	r3, #178	; 0xb2

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1976:	7026      	strb	r6, [r4, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1978:	7023      	strb	r3, [r4, #0]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    197a:	793b      	ldrb	r3, [r7, #4]
    197c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1980:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    1984:	24a2      	movs	r4, #162	; 0xa2

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1986:	701e      	strb	r6, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1988:	701c      	strb	r4, [r3, #0]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    198a:	792b      	ldrb	r3, [r5, #4]
    198c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1990:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    1994:	24a3      	movs	r4, #163	; 0xa3

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1996:	701e      	strb	r6, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1998:	701c      	strb	r4, [r3, #0]
    199a:	f004 f875 	bl	5a88 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)>
    199e:	792a      	ldrb	r2, [r5, #4]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19a0:	4837      	ldr	r0, [pc, #220]	; (1a80 <OctoWS2811::begin()+0x2d0>)
    19a2:	4d38      	ldr	r5, [pc, #224]	; (1a84 <OctoWS2811::begin()+0x2d4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19a4:	1153      	asrs	r3, r2, #5
    19a6:	009b      	lsls	r3, r3, #2
    19a8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19ac:	f102 0410 	add.w	r4, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19b0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    19b4:	f002 021f 	and.w	r2, r2, #31
    19b8:	2101      	movs	r1, #1
    19ba:	fa01 f202 	lsl.w	r2, r1, r2

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19be:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19c2:	601a      	str	r2, [r3, #0]
    19c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    19c6:	83d9      	strh	r1, [r3, #30]
			TCD->CITER = len;
    19c8:	82d9      	strh	r1, [r3, #22]
    19ca:	e7bf      	b.n	194c <OctoWS2811::begin()+0x19c>

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    19cc:	83d9      	strh	r1, [r3, #30]
			TCD->CITER = len;
    19ce:	82d9      	strh	r1, [r3, #22]
    19d0:	e79c      	b.n	190c <OctoWS2811::begin()+0x15c>

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    19d2:	83d1      	strh	r1, [r2, #30]
			TCD->CITER = len;
    19d4:	82d1      	strh	r1, [r2, #22]
    19d6:	e772      	b.n	18be <OctoWS2811::begin()+0x10e>
	// set up the buffers
	memset(frameBuffer, 0, bufsize);
	if (drawBuffer) {
		memset(drawBuffer, 0, bufsize);
	} else {
		drawBuffer = frameBuffer;
    19d8:	6832      	ldr	r2, [r6, #0]
    19da:	601a      	str	r2, [r3, #0]
    19dc:	e6fd      	b.n	17da <OctoWS2811::begin()+0x2a>
		} else {
			if (len > 511) return;
    19de:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    19e2:	da28      	bge.n	1a36 <OctoWS2811::begin()+0x286>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    19e4:	8bd3      	ldrh	r3, [r2, #30]
    19e6:	b2a1      	uxth	r1, r4
    19e8:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    19ec:	430b      	orrs	r3, r1
    19ee:	83d3      	strh	r3, [r2, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    19f0:	8ad3      	ldrh	r3, [r2, #22]
    19f2:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    19f6:	430b      	orrs	r3, r1
    19f8:	82d3      	strh	r3, [r2, #22]
    19fa:	e760      	b.n	18be <OctoWS2811::begin()+0x10e>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    19fc:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1a00:	daa4      	bge.n	194c <OctoWS2811::begin()+0x19c>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1a02:	8bda      	ldrh	r2, [r3, #30]
    1a04:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a08:	430a      	orrs	r2, r1
    1a0a:	83da      	strh	r2, [r3, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1a0c:	8ada      	ldrh	r2, [r3, #22]
    1a0e:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a12:	4311      	orrs	r1, r2
    1a14:	82d9      	strh	r1, [r3, #22]
    1a16:	e799      	b.n	194c <OctoWS2811::begin()+0x19c>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    1a18:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1a1c:	f6bf af76 	bge.w	190c <OctoWS2811::begin()+0x15c>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1a20:	8bda      	ldrh	r2, [r3, #30]
    1a22:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a26:	430a      	orrs	r2, r1
    1a28:	83da      	strh	r2, [r3, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1a2a:	8ada      	ldrh	r2, [r3, #22]
    1a2c:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1a30:	430a      	orrs	r2, r1
    1a32:	82da      	strh	r2, [r3, #22]
    1a34:	e76a      	b.n	190c <OctoWS2811::begin()+0x15c>
    1a36:	b2a1      	uxth	r1, r4
    1a38:	e741      	b.n	18be <OctoWS2811::begin()+0x10e>
    1a3a:	bf00      	nop
    1a3c:	1fffd0f4 	.word	0x1fffd0f4
    1a40:	1fffd0f0 	.word	0x1fffd0f0
    1a44:	1fffd100 	.word	0x1fffd100
    1a48:	400ff0c8 	.word	0x400ff0c8
    1a4c:	400b8004 	.word	0x400b8004
    1a50:	400b8014 	.word	0x400b8014
    1a54:	1fffd0e8 	.word	0x1fffd0e8
    1a58:	400b8000 	.word	0x400b8000
    1a5c:	400b8008 	.word	0x400b8008
    1a60:	400b8018 	.word	0x400b8018
    1a64:	00010300 	.word	0x00010300
    1a68:	400ff0c4 	.word	0x400ff0c4
    1a6c:	1fff8724 	.word	0x1fff8724
    1a70:	1fffd110 	.word	0x1fffd110
    1a74:	400ff0c0 	.word	0x400ff0c0
    1a78:	1fffd108 	.word	0x1fffd108
    1a7c:	1fffd0f8 	.word	0x1fffd0f8
    1a80:	1fff8200 	.word	0x1fff8200
    1a84:	0000174d 	.word	0x0000174d
    1a88:	400b800c 	.word	0x400b800c

00001a8c <OctoWS2811::show()>:
	if (micros() - update_completed_at < 300) return 1;
	return 0;
}

void OctoWS2811::show(void)
{
    1a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a8e:	4c2c      	ldr	r4, [pc, #176]	; (1b40 <OctoWS2811::show()+0xb4>)
	// wait for any prior DMA operation
	//Serial1.print("1");
	while (update_in_progress) ;
    1a90:	7823      	ldrb	r3, [r4, #0]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d1fc      	bne.n	1a90 <OctoWS2811::show()+0x4>
	//Serial1.print("2");
	// it's ok to copy the drawing buffer to the frame buffer
	// during the 50us WS2811 reset time
	if (drawBuffer != frameBuffer) {
    1a96:	4a2b      	ldr	r2, [pc, #172]	; (1b44 <OctoWS2811::show()+0xb8>)
    1a98:	4b2b      	ldr	r3, [pc, #172]	; (1b48 <OctoWS2811::show()+0xbc>)
    1a9a:	6811      	ldr	r1, [r2, #0]
    1a9c:	6818      	ldr	r0, [r3, #0]
    1a9e:	4281      	cmp	r1, r0
    1aa0:	d006      	beq.n	1ab0 <OctoWS2811::show()+0x24>
		// TODO: this could be faster with DMA, especially if the
		// buffers are 32 bit aligned... but does it matter?
		memcpy(frameBuffer, drawBuffer, stripLen * 24);
    1aa2:	4b2a      	ldr	r3, [pc, #168]	; (1b4c <OctoWS2811::show()+0xc0>)
    1aa4:	881a      	ldrh	r2, [r3, #0]
    1aa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1aaa:	00d2      	lsls	r2, r2, #3
    1aac:	f002 fbb2 	bl	4214 <memcpy>
    1ab0:	4d27      	ldr	r5, [pc, #156]	; (1b50 <OctoWS2811::show()+0xc4>)
	}
	// wait for WS2811 reset
	while (micros() - update_completed_at < 300) ;
    1ab2:	f002 fced 	bl	4490 <micros>
    1ab6:	682b      	ldr	r3, [r5, #0]
    1ab8:	1ac0      	subs	r0, r0, r3
    1aba:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
    1abe:	d3f8      	bcc.n	1ab2 <OctoWS2811::show()+0x26>
	dma3.enable();
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM1 timer
	//digitalWriteFast(9, LOW);

#elif defined(__MK20DX256__)
	FTM2_C0SC = 0x28;
    1ac0:	4824      	ldr	r0, [pc, #144]	; (1b54 <OctoWS2811::show()+0xc8>)
	FTM2_C1SC = 0x28;
    1ac2:	4925      	ldr	r1, [pc, #148]	; (1b58 <OctoWS2811::show()+0xcc>)
	uint32_t cv = FTM2_C0V;
    1ac4:	4a25      	ldr	r2, [pc, #148]	; (1b5c <OctoWS2811::show()+0xd0>)
	dma3.enable();
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM1 timer
	//digitalWriteFast(9, LOW);

#elif defined(__MK20DX256__)
	FTM2_C0SC = 0x28;
    1ac6:	2328      	movs	r3, #40	; 0x28
    1ac8:	6003      	str	r3, [r0, #0]
	FTM2_C1SC = 0x28;
    1aca:	600b      	str	r3, [r1, #0]
	uint32_t cv = FTM2_C0V;
    1acc:	6813      	ldr	r3, [r2, #0]
	noInterrupts();
    1ace:	b672      	cpsid	i
	// CAUTION: this code is timing critical.
	while (FTM2_CNT <= cv) ;
    1ad0:	3910      	subs	r1, #16
    1ad2:	680a      	ldr	r2, [r1, #0]
    1ad4:	4293      	cmp	r3, r2
    1ad6:	d2fc      	bcs.n	1ad2 <OctoWS2811::show()+0x46>
	while (FTM2_CNT > cv) ; // wait for beginning of an 800 kHz cycle
    1ad8:	4921      	ldr	r1, [pc, #132]	; (1b60 <OctoWS2811::show()+0xd4>)
    1ada:	680a      	ldr	r2, [r1, #0]
    1adc:	4293      	cmp	r3, r2
    1ade:	d3fc      	bcc.n	1ada <OctoWS2811::show()+0x4e>
	while (FTM2_CNT < cv) ;
    1ae0:	481f      	ldr	r0, [pc, #124]	; (1b60 <OctoWS2811::show()+0xd4>)
    1ae2:	6802      	ldr	r2, [r0, #0]
    1ae4:	491e      	ldr	r1, [pc, #120]	; (1b60 <OctoWS2811::show()+0xd4>)
    1ae6:	4293      	cmp	r3, r2
    1ae8:	d8fb      	bhi.n	1ae2 <OctoWS2811::show()+0x56>
    1aea:	4e1e      	ldr	r6, [pc, #120]	; (1b64 <OctoWS2811::show()+0xd8>)
    1aec:	4d1e      	ldr	r5, [pc, #120]	; (1b68 <OctoWS2811::show()+0xdc>)
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
    1aee:	481f      	ldr	r0, [pc, #124]	; (1b6c <OctoWS2811::show()+0xe0>)
    1af0:	7937      	ldrb	r7, [r6, #4]
    1af2:	792e      	ldrb	r6, [r5, #4]
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1af4:	4b17      	ldr	r3, [pc, #92]	; (1b54 <OctoWS2811::show()+0xc8>)
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
    1af6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1b74 <OctoWS2811::show()+0xe8>
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x28;
    1afa:	4a17      	ldr	r2, [pc, #92]	; (1b58 <OctoWS2811::show()+0xcc>)
	noInterrupts();
	// CAUTION: this code is timing critical.
	while (FTM2_CNT <= cv) ;
	while (FTM2_CNT > cv) ; // wait for beginning of an 800 kHz cycle
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
    1afc:	2500      	movs	r5, #0
    1afe:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    1b00:	600d      	str	r5, [r1, #0]
	update_in_progress = 1;
    1b02:	2101      	movs	r1, #1
    1b04:	7021      	strb	r1, [r4, #0]
    1b06:	4d1a      	ldr	r5, [pc, #104]	; (1b70 <OctoWS2811::show()+0xe4>)
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1b08:	2428      	movs	r4, #40	; 0x28
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
    1b0a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1b0e:	f8ce 1000 	str.w	r1, [lr]
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1b12:	601c      	str	r4, [r3, #0]
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
    1b14:	2169      	movs	r1, #105	; 0x69
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
    1b16:	f8d3 e000 	ldr.w	lr, [r3]
    1b1a:	792d      	ldrb	r5, [r5, #4]
	FTM2_C0SC = 0x69;
    1b1c:	6019      	str	r1, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1b1e:	f46f 6e7f 	mvn.w	lr, #4080	; 0xff0
    1b22:	f5a3 232f 	sub.w	r3, r3, #716800	; 0xaf000
    1b26:	4473      	add	r3, lr
	FTM2_C1SC = 0x28;
    1b28:	6014      	str	r4, [r2, #0]
	tmp = FTM2_C1SC;
	FTM2_C1SC = 0x69;
	dma1.enable();
	dma2.enable();           // enable all 3 DMA channels
	dma3.enable();
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM2 timer
    1b2a:	2408      	movs	r4, #8
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x28;
	tmp = FTM2_C1SC;
    1b2c:	f8d2 e000 	ldr.w	lr, [r2]
	FTM2_C1SC = 0x69;
    1b30:	6011      	str	r1, [r2, #0]
    1b32:	701f      	strb	r7, [r3, #0]
    1b34:	701e      	strb	r6, [r3, #0]
    1b36:	701d      	strb	r5, [r3, #0]
	dma1.enable();
	dma2.enable();           // enable all 3 DMA channels
	dma3.enable();
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM2 timer
    1b38:	6004      	str	r4, [r0, #0]
	FTM2_CNT = 0; // writing any value resets counter
	FTM2_SC = FTM_SC_DMA | FTM_SC_CLKS(1) | FTM_SC_PS(0);
	//digitalWriteFast(9, LOW);
#endif
	//Serial1.print("3");
	interrupts();
    1b3a:	b662      	cpsie	i
    1b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b3e:	bf00      	nop
    1b40:	1fffd104 	.word	0x1fffd104
    1b44:	1fffd100 	.word	0x1fffd100
    1b48:	1fffd0f0 	.word	0x1fffd0f0
    1b4c:	1fffd0f4 	.word	0x1fffd0f4
    1b50:	1fffd0ec 	.word	0x1fffd0ec
    1b54:	400b800c 	.word	0x400b800c
    1b58:	400b8014 	.word	0x400b8014
    1b5c:	400b8010 	.word	0x400b8010
    1b60:	400b8004 	.word	0x400b8004
    1b64:	1fffd0f8 	.word	0x1fffd0f8
    1b68:	1fffd110 	.word	0x1fffd110
    1b6c:	400b8000 	.word	0x400b8000
    1b70:	1fffd108 	.word	0x1fffd108
    1b74:	4004a0a0 	.word	0x4004a0a0

00001b78 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE>:
		break;
	  default:
		break;
	}
	return color;
}
    1b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1b7c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1bd4 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x5c>

uint16_t OctoWS2811::stripLen;
void * OctoWS2811::frameBuffer;
void * OctoWS2811::drawBuffer;
uint8_t OctoWS2811::params;
DMAChannel OctoWS2811::dma1;
    1b80:	4d10      	ldr	r5, [pc, #64]	; (1bc4 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x4c>)
    1b82:	4c11      	ldr	r4, [pc, #68]	; (1bc8 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x50>)
    1b84:	4f11      	ldr	r7, [pc, #68]	; (1bcc <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x54>)
    1b86:	4e12      	ldr	r6, [pc, #72]	; (1bd0 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x58>)
    1b88:	4640      	mov	r0, r8
    1b8a:	2100      	movs	r1, #0
    1b8c:	f003 fefe 	bl	598c <DMAChannel::begin(bool)>
    1b90:	462a      	mov	r2, r5
    1b92:	4621      	mov	r1, r4
    1b94:	4640      	mov	r0, r8
    1b96:	f005 f87d 	bl	6c94 <__aeabi_atexit>
    1b9a:	4638      	mov	r0, r7
    1b9c:	2100      	movs	r1, #0
    1b9e:	f003 fef5 	bl	598c <DMAChannel::begin(bool)>
DMAChannel OctoWS2811::dma2;
    1ba2:	462a      	mov	r2, r5
    1ba4:	4621      	mov	r1, r4
    1ba6:	4638      	mov	r0, r7
    1ba8:	f005 f874 	bl	6c94 <__aeabi_atexit>
    1bac:	4630      	mov	r0, r6
    1bae:	2100      	movs	r1, #0
    1bb0:	f003 feec 	bl	598c <DMAChannel::begin(bool)>
DMAChannel OctoWS2811::dma3;
    1bb4:	462a      	mov	r2, r5
    1bb6:	4621      	mov	r1, r4
    1bb8:	4630      	mov	r0, r6
		break;
	  default:
		break;
	}
	return color;
}
    1bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
void * OctoWS2811::frameBuffer;
void * OctoWS2811::drawBuffer;
uint8_t OctoWS2811::params;
DMAChannel OctoWS2811::dma1;
DMAChannel OctoWS2811::dma2;
DMAChannel OctoWS2811::dma3;
    1bbe:	f005 b869 	b.w	6c94 <__aeabi_atexit>
    1bc2:	bf00      	nop
    1bc4:	1fff8720 	.word	0x1fff8720
    1bc8:	00001779 	.word	0x00001779
    1bcc:	1fffd110 	.word	0x1fffd110
    1bd0:	1fffd108 	.word	0x1fffd108
    1bd4:	1fffd0f8 	.word	0x1fffd0f8

00001bd8 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    1bd8:	b322      	cbz	r2, 1c24 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    1bda:	2aff      	cmp	r2, #255	; 0xff
    1bdc:	d023      	beq.n	1c26 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    1bde:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1be0:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1be2:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1be4:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1be6:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    1be8:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1bea:	43d2      	mvns	r2, r2
    1bec:	fb06 7605 	mla	r6, r6, r5, r7
    1bf0:	b2d2      	uxtb	r2, r2
    1bf2:	fb04 6402 	mla	r4, r4, r2, r6
    1bf6:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1bfa:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1bfc:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1bfe:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    1c00:	191f      	adds	r7, r3, r4
    1c02:	fb04 7405 	mla	r4, r4, r5, r7
    1c06:	fb03 4302 	mla	r3, r3, r2, r4
    1c0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1c0e:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1c10:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    1c12:	18f1      	adds	r1, r6, r3
    1c14:	fb03 1505 	mla	r5, r3, r5, r1
    1c18:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    1c1c:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    1c1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1c22:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    1c24:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c26:	780b      	ldrb	r3, [r1, #0]
    1c28:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    1c2a:	784b      	ldrb	r3, [r1, #1]
    1c2c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    1c2e:	788b      	ldrb	r3, [r1, #2]
    1c30:	7083      	strb	r3, [r0, #2]
    1c32:	4770      	bx	lr

00001c34 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    1c34:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c36:	780d      	ldrb	r5, [r1, #0]
    1c38:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    1c3a:	784d      	ldrb	r5, [r1, #1]
    1c3c:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    1c3e:	7889      	ldrb	r1, [r1, #2]
    1c40:	7081      	strb	r1, [r0, #2]
    1c42:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    1c44:	4611      	mov	r1, r2
    1c46:	461a      	mov	r2, r3
    1c48:	f7ff ffc6 	bl	1bd8 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    1c4c:	4620      	mov	r0, r4
    1c4e:	bd38      	pop	{r3, r4, r5, pc}

00001c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    1c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    1c54:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    1c56:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    1c5a:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    1c5e:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    1c60:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    1c64:	d000      	beq.n	1c68 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    1c66:	b9e6      	cbnz	r6, 1ca2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    1c68:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    1c6a:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    1c6c:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    1c6e:	2bff      	cmp	r3, #255	; 0xff
    1c70:	d012      	beq.n	1c98 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    1c72:	2b00      	cmp	r3, #0
    1c74:	d043      	beq.n	1cfe <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    1c76:	3301      	adds	r3, #1
    1c78:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    1c7a:	b11c      	cbz	r4, 1c84 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1c7c:	fb03 4404 	mla	r4, r3, r4, r4
    1c80:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    1c84:	b119      	cbz	r1, 1c8e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    1c86:	fb03 1101 	mla	r1, r3, r1, r1
    1c8a:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    1c8e:	b11a      	cbz	r2, 1c98 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    1c90:	fb03 2202 	mla	r2, r3, r2, r2
    1c94:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1c98:	7004      	strb	r4, [r0, #0]
    1c9a:	7041      	strb	r1, [r0, #1]
    1c9c:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    1c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    1ca2:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    1ca4:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    1ca6:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    1caa:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    1cac:	d000      	beq.n	1cb0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    1cae:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    1cb0:	0112      	lsls	r2, r2, #4
    1cb2:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    1cb6:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1cb8:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1cbc:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1cc0:	f891 8002 	ldrb.w	r8, [r1, #2]
    1cc4:	fb04 f606 	mul.w	r6, r4, r6
    1cc8:	1c51      	adds	r1, r2, #1
    1cca:	fb04 f509 	mul.w	r5, r4, r9
    1cce:	fb04 f407 	mul.w	r4, r4, r7
    1cd2:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1cd6:	f3c6 2707 	ubfx	r7, r6, #8, #8
    1cda:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1cde:	fb01 f60c 	mul.w	r6, r1, ip
    1ce2:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1ce6:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1cea:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1cee:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1cf2:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1cf6:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1cf8:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1cfa:	b2d2      	uxtb	r2, r2
    1cfc:	e7b7      	b.n	1c6e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    1cfe:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    1d00:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    1d02:	461c      	mov	r4, r3
    1d04:	7004      	strb	r4, [r0, #0]
    1d06:	7041      	strb	r1, [r0, #1]
    1d08:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    1d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d0e:	bf00      	nop

00001d10 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1d12:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1d14:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1d16:	4604      	mov	r4, r0
    1d18:	bfcc      	ite	gt
    1d1a:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    1d1e:	2500      	movle	r5, #0
    1d20:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1d22:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1d24:	bfd8      	it	le
    1d26:	4616      	movle	r6, r2

	pLed->init();
    1d28:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    1d2a:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1d2c:	6823      	ldr	r3, [r4, #0]
    1d2e:	6062      	str	r2, [r4, #4]
    1d30:	695b      	ldr	r3, [r3, #20]
    1d32:	4a0a      	ldr	r2, [pc, #40]	; (1d5c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    1d34:	6166      	str	r6, [r4, #20]
    1d36:	4293      	cmp	r3, r2
    1d38:	d101      	bne.n	1d3e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    1d3a:	4620      	mov	r0, r4
    1d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1d3e:	4620      	mov	r0, r4
    1d40:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1d42:	2800      	cmp	r0, #0
    1d44:	d0f9      	beq.n	1d3a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1d46:	4a06      	ldr	r2, [pc, #24]	; (1d60 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    1d48:	4b06      	ldr	r3, [pc, #24]	; (1d64 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    1d4a:	6851      	ldr	r1, [r2, #4]
    1d4c:	fb93 f0f0 	sdiv	r0, r3, r0
    1d50:	4288      	cmp	r0, r1
    1d52:	bf38      	it	cc
    1d54:	4608      	movcc	r0, r1
    1d56:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1d58:	4620      	mov	r0, r4
    1d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d5c:	00000471 	.word	0x00000471
    1d60:	1fffd118 	.word	0x1fffd118
    1d64:	000f4240 	.word	0x000f4240

00001d68 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1d68:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1d6a:	4c0f      	ldr	r4, [pc, #60]	; (1da8 <CFastLED::countFPS(int)+0x40>)
    1d6c:	6822      	ldr	r2, [r4, #0]
    1d6e:	1c53      	adds	r3, r2, #1
    1d70:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1d72:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1d74:	6023      	str	r3, [r4, #0]
    1d76:	db13      	blt.n	1da0 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d78:	4d0c      	ldr	r5, [pc, #48]	; (1dac <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    1d7a:	4a0d      	ldr	r2, [pc, #52]	; (1db0 <CFastLED::countFPS(int)+0x48>)
    1d7c:	6829      	ldr	r1, [r5, #0]
    1d7e:	9101      	str	r1, [sp, #4]
	return ret;
    1d80:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d82:	682d      	ldr	r5, [r5, #0]
    1d84:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    1d86:	6816      	ldr	r6, [r2, #0]
	return ret;
    1d88:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    1d8a:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    1d90:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1d92:	1b89      	subs	r1, r1, r6
    1d94:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    1d98:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1d9a:	fbb3 f3f1 	udiv	r3, r3, r1
    1d9e:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    1da0:	b003      	add	sp, #12
    1da2:	bc70      	pop	{r4, r5, r6}
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop
    1da8:	1fffd12c 	.word	0x1fffd12c
    1dac:	1fffd39c 	.word	0x1fffd39c
    1db0:	1fffd134 	.word	0x1fffd134

00001db4 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    1db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1db8:	6843      	ldr	r3, [r0, #4]
    1dba:	4c2d      	ldr	r4, [pc, #180]	; (1e70 <CFastLED::show(unsigned char)+0xbc>)
    1dbc:	b083      	sub	sp, #12
    1dbe:	4606      	mov	r6, r0
    1dc0:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d14b      	bne.n	1e5e <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    1dc6:	f002 fb63 	bl	4490 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1dca:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1dcc:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1dce:	b11b      	cbz	r3, 1dd8 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1dd0:	4648      	mov	r0, r9
    1dd2:	68b1      	ldr	r1, [r6, #8]
    1dd4:	4798      	blx	r3
    1dd6:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1dd8:	4b26      	ldr	r3, [pc, #152]	; (1e74 <CFastLED::show(unsigned char)+0xc0>)
    1dda:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1ddc:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1dde:	2c00      	cmp	r4, #0
    1de0:	d036      	beq.n	1e50 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1de2:	8873      	ldrh	r3, [r6, #2]
    1de4:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1de6:	6861      	ldr	r1, [r4, #4]
    1de8:	6962      	ldr	r2, [r4, #20]
    1dea:	2b63      	cmp	r3, #99	; 0x63
    1dec:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1dee:	bf98      	it	ls
    1df0:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1df2:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1df6:	f88d 5004 	strb.w	r5, [sp, #4]
    1dfa:	f88d 5005 	strb.w	r5, [sp, #5]
    1dfe:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1e02:	f1b9 0f00 	cmp.w	r9, #0
    1e06:	d01c      	beq.n	1e42 <CFastLED::show(unsigned char)+0x8e>
    1e08:	f104 030b 	add.w	r3, r4, #11
    1e0c:	f10d 0e04 	add.w	lr, sp, #4
    1e10:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1e14:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1e18:	f1bb 0f00 	cmp.w	fp, #0
    1e1c:	d00d      	beq.n	1e3a <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    1e1e:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1e22:	f10a 0001 	add.w	r0, sl, #1
    1e26:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1e2a:	f1ba 0f00 	cmp.w	sl, #0
    1e2e:	d004      	beq.n	1e3a <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1e30:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1e34:	0c00      	lsrs	r0, r0, #16
    1e36:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1e3a:	4563      	cmp	r3, ip
    1e3c:	f10e 0e01 	add.w	lr, lr, #1
    1e40:	d1e8      	bne.n	1e14 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1e42:	4620      	mov	r0, r4
    1e44:	ab01      	add	r3, sp, #4
    1e46:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1e48:	74a7      	strb	r7, [r4, #18]
    1e4a:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1e4c:	2c00      	cmp	r4, #0
    1e4e:	d1c8      	bne.n	1de2 <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    1e50:	4630      	mov	r0, r6
    1e52:	2119      	movs	r1, #25
    1e54:	f7ff ff88 	bl	1d68 <CFastLED::countFPS(int)>
}
    1e58:	b003      	add	sp, #12
    1e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1e5e:	f002 fb17 	bl	4490 <micros>
    1e62:	6822      	ldr	r2, [r4, #0]
    1e64:	6873      	ldr	r3, [r6, #4]
    1e66:	1a80      	subs	r0, r0, r2
    1e68:	4298      	cmp	r0, r3
    1e6a:	d3aa      	bcc.n	1dc2 <CFastLED::show(unsigned char)+0xe>
    1e6c:	e7ab      	b.n	1dc6 <CFastLED::show(unsigned char)+0x12>
    1e6e:	bf00      	nop
    1e70:	1fffd130 	.word	0x1fffd130
    1e74:	1fffd128 	.word	0x1fffd128

00001e78 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    1e78:	2000      	movs	r0, #0
    1e7a:	4770      	bx	lr

00001e7c <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1e7c:	4b04      	ldr	r3, [pc, #16]	; (1e90 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    1e7e:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1e80:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1e82:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1e86:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1e88:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    1e8a:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    1e8c:	60da      	str	r2, [r3, #12]
    1e8e:	4770      	bx	lr
    1e90:	1fffd118 	.word	0x1fffd118

00001e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    1e94:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    1e96:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    1e98:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    1e9a:	7882      	ldrb	r2, [r0, #2]
    1e9c:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1e9e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    1ea2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1ea6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    1eaa:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    1eac:	0625      	lsls	r5, r4, #24
    1eae:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1eb2:	d45f      	bmi.n	1f74 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    1eb4:	f004 0540 	and.w	r5, r4, #64	; 0x40
    1eb8:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1ebc:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    1ec0:	2d00      	cmp	r5, #0
    1ec2:	d146      	bne.n	1f52 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    1ec4:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    1ec8:	2c00      	cmp	r4, #0
    1eca:	d06c      	beq.n	1fa6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    1ecc:	3355      	adds	r3, #85	; 0x55
    1ece:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    1ed0:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    1ed2:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    1ed4:	2eff      	cmp	r6, #255	; 0xff
    1ed6:	d01c      	beq.n	1f12 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    1ed8:	2e00      	cmp	r6, #0
    1eda:	d079      	beq.n	1fd0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    1edc:	b11c      	cbz	r4, 1ee6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1ede:	fb06 4404 	mla	r4, r6, r4, r4
    1ee2:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    1ee6:	b11d      	cbz	r5, 1ef0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    1ee8:	fb06 5505 	mla	r5, r6, r5, r5
    1eec:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    1ef0:	b11b      	cbz	r3, 1efa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    1ef2:	fb06 3303 	mla	r3, r6, r3, r3
    1ef6:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1efa:	43f0      	mvns	r0, r6
    1efc:	b2c0      	uxtb	r0, r0
    1efe:	fb00 0000 	mla	r0, r0, r0, r0
    1f02:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    1f06:	4404      	add	r4, r0
            g += brightness_floor;
    1f08:	4405      	add	r5, r0
            b += brightness_floor;
    1f0a:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    1f0c:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    1f0e:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    1f10:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    1f12:	2aff      	cmp	r2, #255	; 0xff
    1f14:	d018      	beq.n	1f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    1f16:	fb12 f002 	smulbb	r0, r2, r2
    1f1a:	3200      	adds	r2, #0
    1f1c:	bf18      	it	ne
    1f1e:	2201      	movne	r2, #1
    1f20:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    1f24:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    1f28:	d056      	beq.n	1fd8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    1f2a:	b11c      	cbz	r4, 1f34 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1f2c:	fb02 4404 	mla	r4, r2, r4, r4
    1f30:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    1f34:	b11d      	cbz	r5, 1f3e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    1f36:	fb02 5505 	mla	r5, r2, r5, r5
    1f3a:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    1f3e:	b11b      	cbz	r3, 1f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    1f40:	fb02 3303 	mla	r3, r2, r3, r3
    1f44:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    1f48:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    1f4a:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    1f4c:	708b      	strb	r3, [r1, #2]
}
    1f4e:	bcf0      	pop	{r4, r5, r6, r7}
    1f50:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    1f52:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    1f56:	bb5c      	cbnz	r4, 1fb0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1f58:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    1f5c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    1f60:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1f64:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    1f66:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1f68:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    1f6c:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    1f6e:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    1f70:	463b      	mov	r3, r7
    1f72:	e7af      	b.n	1ed4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    1f74:	f004 0740 	and.w	r7, r4, #64	; 0x40
    1f78:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    1f7c:	b9e7      	cbnz	r7, 1fb8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    1f7e:	f004 0720 	and.w	r7, r4, #32
    1f82:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    1f86:	2f00      	cmp	r7, #0
    1f88:	d136      	bne.n	1ff8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    1f8a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    1f8e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1f92:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1f96:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    1f9a:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    1f9e:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    1fa0:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    1fa2:	b2c3      	uxtb	r3, r0
    1fa4:	e796      	b.n	1ed4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    1fa6:	43dc      	mvns	r4, r3
    1fa8:	b2e4      	uxtb	r4, r4
                g = third;
    1faa:	461d      	mov	r5, r3
                b = 0;
    1fac:	4603      	mov	r3, r0
    1fae:	e791      	b.n	1ed4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    1fb0:	2400      	movs	r4, #0
                g = K255 - third;
    1fb2:	43dd      	mvns	r5, r3
    1fb4:	b2ed      	uxtb	r5, r5
    1fb6:	e78d      	b.n	1ed4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    1fb8:	f004 0420 	and.w	r4, r4, #32
    1fbc:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    1fc0:	b994      	cbnz	r4, 1fe8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    1fc2:	f103 0455 	add.w	r4, r3, #85	; 0x55
    1fc6:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    1fc8:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    1fcc:	b2db      	uxtb	r3, r3
    1fce:	e781      	b.n	1ed4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    1fd0:	23ff      	movs	r3, #255	; 0xff
    1fd2:	461d      	mov	r5, r3
    1fd4:	461c      	mov	r4, r3
    1fd6:	e79c      	b.n	1f12 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    1fd8:	4615      	mov	r5, r2
    1fda:	4614      	mov	r4, r2
    1fdc:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    1fde:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    1fe0:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    1fe2:	708b      	strb	r3, [r1, #2]
}
    1fe4:	bcf0      	pop	{r4, r5, r6, r7}
    1fe6:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    1fe8:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    1fec:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    1fee:	2500      	movs	r5, #0
                b = K85 - third;
    1ff0:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    1ff4:	b2db      	uxtb	r3, r3
    1ff6:	e76d      	b.n	1ed4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    1ff8:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    1ffa:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    1ffc:	b2c3      	uxtb	r3, r0
    1ffe:	e769      	b.n	1ed4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00002000 <Meltdown::CMeltdownLED::NullEffect(CRGB*, unsigned short*, int)>:
				return SetEffectNumber(gCurrentEffectNumber + 1); 
			}

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }

			void NullEffect(CRGB leds[], uint16_t indexes[], int numLeds) { }
    2000:	4770      	bx	lr
    2002:	bf00      	nop

00002004 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)>:

					FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
				}
			}

			void Rainbow(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2008:	4681      	mov	r9, r0
    200a:	b083      	sub	sp, #12
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    200c:	69c0      	ldr	r0, [r0, #28]

					FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
				}
			}

			void Rainbow(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    200e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    2012:	4698      	mov	r8, r3
    2014:	4615      	mov	r5, r2
    2016:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2018:	f004 fbdc 	bl	67d4 <__aeabi_i2f>
    201c:	492d      	ldr	r1, [pc, #180]	; (20d4 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd0>)
    201e:	f004 fc2d 	bl	687c <__aeabi_fmul>
    2022:	492d      	ldr	r1, [pc, #180]	; (20d8 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd4>)
    2024:	f004 fcde 	bl	69e4 <__aeabi_fdiv>
    2028:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    202c:	f004 fb1e 	bl	666c <__addsf3>
    2030:	f004 fdea 	bl	6c08 <__aeabi_f2iz>
			}

			void FillRainbow(CRGB leds[], uint16_t indexes[], int numLeds, int initialHue, int deltaHue)
			{
				CHSV hsv;
				hsv.hue = initialHue;
    2034:	f8d9 2014 	ldr.w	r2, [r9, #20]
    2038:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    203c:	4413      	add	r3, r2
    203e:	f88d 3004 	strb.w	r3, [sp, #4]
				hsv.val = 255;
    2042:	22ff      	movs	r2, #255	; 0xff
				hsv.sat = 240;
    2044:	23f0      	movs	r3, #240	; 0xf0
				for (int i = 0; i < numLeds; i++)
    2046:	f1b8 0f00 	cmp.w	r8, #0

			void FillRainbow(CRGB leds[], uint16_t indexes[], int numLeds, int initialHue, int deltaHue)
			{
				CHSV hsv;
				hsv.hue = initialHue;
				hsv.val = 255;
    204a:	f88d 2006 	strb.w	r2, [sp, #6]
				hsv.sat = 240;
    204e:	f88d 3005 	strb.w	r3, [sp, #5]
				for (int i = 0; i < numLeds; i++)
    2052:	dd12      	ble.n	207a <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x76>
    2054:	b2c6      	uxtb	r6, r0
    2056:	46ab      	mov	fp, r5
    2058:	eb05 0748 	add.w	r7, r5, r8, lsl #1
				{
					leds[indexes[i]] = hsv;
    205c:	f83b 1b02 	ldrh.w	r1, [fp], #2
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2060:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2064:	4421      	add	r1, r4
    2066:	a801      	add	r0, sp, #4
    2068:	f7ff ff14 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
					hsv.hue += deltaHue;
    206c:	f89d 3004 	ldrb.w	r3, [sp, #4]
			{
				CHSV hsv;
				hsv.hue = initialHue;
				hsv.val = 255;
				hsv.sat = 240;
				for (int i = 0; i < numLeds; i++)
    2070:	45bb      	cmp	fp, r7
				{
					leds[indexes[i]] = hsv;
					hsv.hue += deltaHue;
    2072:	4433      	add	r3, r6
    2074:	f88d 3004 	strb.w	r3, [sp, #4]
			{
				CHSV hsv;
				hsv.hue = initialHue;
				hsv.val = 255;
				hsv.sat = 240;
				for (int i = 0; i < numLeds; i++)
    2078:	d1f0      	bne.n	205c <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x58>

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    207a:	2301      	movs	r3, #1
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    207c:	f1ba 0f00 	cmp.w	sl, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2080:	f8c9 300c 	str.w	r3, [r9, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2084:	db1e      	blt.n	20c4 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc0>
				int deltaHue = GetAnalogPattern(1, 15);
				FillRainbow(leds, indexes, numLeds, gHue + gPos, deltaHue);

				// Modes
				SetNumModes(1);
				switch (GetModeNumber(modeOffset))
    2086:	f8d9 2008 	ldr.w	r2, [r9, #8]
    208a:	4b14      	ldr	r3, [pc, #80]	; (20dc <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd8>)
    208c:	4492      	add	sl, r2
    208e:	ea0a 0303 	and.w	r3, sl, r3
    2092:	2b00      	cmp	r3, #0
    2094:	db19      	blt.n	20ca <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc6>
    2096:	2b01      	cmp	r3, #1
    2098:	d114      	bne.n	20c4 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc0>

			int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

			void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
			{
				for (int i = 0; i < numLeds; i++)
    209a:	f1b8 0f00 	cmp.w	r8, #0
    209e:	dd11      	ble.n	20c4 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc0>
    20a0:	eb05 0848 	add.w	r8, r5, r8, lsl #1
				{
					leds[indexes[i]] = -leds[indexes[i]];
    20a4:	f835 3b02 	ldrh.w	r3, [r5], #2
    20a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    20ac:	18e2      	adds	r2, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    20ae:	5ce6      	ldrb	r6, [r4, r3]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    20b0:	7850      	ldrb	r0, [r2, #1]
        retval.b = 255 - b;
    20b2:	7891      	ldrb	r1, [r2, #2]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    20b4:	43c0      	mvns	r0, r0
        retval.b = 255 - b;
    20b6:	43c9      	mvns	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    20b8:	43f6      	mvns	r6, r6

			int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

			void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
			{
				for (int i = 0; i < numLeds; i++)
    20ba:	45a8      	cmp	r8, r5
    20bc:	54e6      	strb	r6, [r4, r3]
        g = rhs.g;
    20be:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    20c0:	7091      	strb	r1, [r2, #2]
    20c2:	d1ef      	bne.n	20a4 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xa0>
				case 1:
					// Invert rainbox colors.
					Invert(leds, indexes, numLeds);
					break;
				}
			}
    20c4:	b003      	add	sp, #12
    20c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int deltaHue = GetAnalogPattern(1, 15);
				FillRainbow(leds, indexes, numLeds, gHue + gPos, deltaHue);

				// Modes
				SetNumModes(1);
				switch (GetModeNumber(modeOffset))
    20ca:	3b01      	subs	r3, #1
    20cc:	f063 0301 	orn	r3, r3, #1
    20d0:	3301      	adds	r3, #1
    20d2:	e7e0      	b.n	2096 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x92>
    20d4:	41600000 	.word	0x41600000
    20d8:	447fc000 	.word	0x447fc000
    20dc:	80000001 	.word	0x80000001

000020e0 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)>:

			void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }

			void NullEffect(CRGB leds[], uint16_t indexes[], int numLeds) { }

			void GlitterEffect(CRGB leds[], uint16_t indexes[], int numLeds)
    20e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    20e2:	6a04      	ldr	r4, [r0, #32]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    20e4:	4d1b      	ldr	r5, [pc, #108]	; (2154 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x74>)
    20e6:	2065      	movs	r0, #101	; 0x65
    20e8:	fb00 f404 	mul.w	r4, r0, r4
    20ec:	8828      	ldrh	r0, [r5, #0]
    20ee:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    20f2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    20f6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    20fa:	2c00      	cmp	r4, #0
    20fc:	f100 0019 	add.w	r0, r0, #25
    2100:	bfb8      	it	lt
    2102:	f204 34ff 	addwlt	r4, r4, #1023	; 0x3ff
    2106:	b280      	uxth	r0, r0
    2108:	12a4      	asrs	r4, r4, #10
			{
				int chanceOfGlitter = GetAnalogEffect(15, 115);
				if (random8() < chanceOfGlitter)
    210a:	eb00 2610 	add.w	r6, r0, r0, lsr #8
    210e:	340f      	adds	r4, #15
    2110:	b2f6      	uxtb	r6, r6
    2112:	42a6      	cmp	r6, r4
    2114:	8028      	strh	r0, [r5, #0]
    2116:	da1b      	bge.n	2150 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x70>
    2118:	b29b      	uxth	r3, r3
    211a:	2703      	movs	r7, #3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    211c:	26ff      	movs	r6, #255	; 0xff
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    211e:	eb00 2440 	add.w	r4, r0, r0, lsl #9
    2122:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2126:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    212a:	3019      	adds	r0, #25
    212c:	b280      	uxth	r0, r0
			/// Add a specific color in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    212e:	fb03 f400 	mul.w	r4, r3, r0
    2132:	0c24      	lsrs	r4, r4, #16
    2134:	8028      	strh	r0, [r5, #0]
					leds[index] = color;
    2136:	f832 4014 	ldrh.w	r4, [r2, r4, lsl #1]
    213a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    213e:	eb01 0e04 	add.w	lr, r1, r4
			}

			/// Add a specific color in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, CRGB::HTMLColorCode color)
			{
				for (int i = 0; i < numPositions; i++)
    2142:	3f01      	subs	r7, #1
    2144:	550e      	strb	r6, [r1, r4]
        g = (colorcode >>  8) & 0xFF;
    2146:	f88e 6001 	strb.w	r6, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    214a:	f88e 6002 	strb.w	r6, [lr, #2]
    214e:	d1e6      	bne.n	211e <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x3e>
    2150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2152:	bf00      	nop
    2154:	1fff8726 	.word	0x1fff8726

00002158 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)>:
				}

				BlendFromHue(leds, indexes, numLeds);
			}

			void Juggle(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    215c:	4607      	mov	r7, r0
    215e:	b085      	sub	sp, #20
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2160:	69c0      	ldr	r0, [r0, #28]
				}

				BlendFromHue(leds, indexes, numLeds);
			}

			void Juggle(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2162:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2164:	4699      	mov	r9, r3
    2166:	4690      	mov	r8, r2
    2168:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    216a:	f004 fb33 	bl	67d4 <__aeabi_i2f>
    216e:	4957      	ldr	r1, [pc, #348]	; (22cc <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x174>)
    2170:	f004 fb84 	bl	687c <__aeabi_fmul>
    2174:	4956      	ldr	r1, [pc, #344]	; (22d0 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x178>)
    2176:	f004 fc35 	bl	69e4 <__aeabi_fdiv>
    217a:	4956      	ldr	r1, [pc, #344]	; (22d4 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x17c>)
    217c:	f004 fa76 	bl	666c <__addsf3>
    2180:	f004 fd42 	bl	6c08 <__aeabi_f2iz>
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    2184:	f1b9 0f00 	cmp.w	r9, #0
    2188:	dd21      	ble.n	21ce <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x76>
    218a:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    218e:	b2c9      	uxtb	r1, r1
    2190:	3101      	adds	r1, #1
    2192:	4640      	mov	r0, r8
    2194:	eb08 0649 	add.w	r6, r8, r9, lsl #1
				{
					int scale = 255 - fade;
					(leds[indexes[i]]).nscale8(scale);
    2198:	f830 3b02 	ldrh.w	r3, [r0], #2
    219c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    21a0:	eb04 0e03 	add.w	lr, r4, r3
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    21a4:	5ce2      	ldrb	r2, [r4, r3]
    21a6:	fb01 f202 	mul.w	r2, r1, r2
    21aa:	1212      	asrs	r2, r2, #8
    21ac:	54e2      	strb	r2, [r4, r3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    21ae:	f89e 2001 	ldrb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    21b2:	f89e 3002 	ldrb.w	r3, [lr, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    21b6:	fb01 f202 	mul.w	r2, r1, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    21ba:	fb01 f303 	mul.w	r3, r1, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    21be:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    21c0:	121b      	asrs	r3, r3, #8
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    21c2:	42b0      	cmp	r0, r6
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    21c4:	f88e 2001 	strb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    21c8:	f88e 3002 	strb.w	r3, [lr, #2]
    21cc:	d1e4      	bne.n	2198 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x40>

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    21ce:	2603      	movs	r6, #3
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    21d0:	2d00      	cmp	r5, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    21d2:	60fe      	str	r6, [r7, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    21d4:	db70      	blt.n	22b8 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x160>
    21d6:	68ba      	ldr	r2, [r7, #8]
    21d8:	4b3f      	ldr	r3, [pc, #252]	; (22d8 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x180>)
    21da:	4415      	add	r5, r2
    21dc:	402b      	ands	r3, r5
    21de:	2b00      	cmp	r3, #0
    21e0:	db6f      	blt.n	22c2 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x16a>
    21e2:	3b01      	subs	r3, #1
    21e4:	2b02      	cmp	r3, #2
    21e6:	d869      	bhi.n	22bc <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x164>
    21e8:	4a3c      	ldr	r2, [pc, #240]	; (22dc <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x184>)
    21ea:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
				case 3:
					numBalls = 9;
					break;
				}

				for (int i = 0; i < numBalls; i++)
    21ee:	2e00      	cmp	r6, #0
    21f0:	dd5f      	ble.n	22b2 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x15a>
    21f2:	23ff      	movs	r3, #255	; 0xff
    21f4:	fb93 f3f6 	sdiv	r3, r3, r6
    21f8:	f109 35ff 	add.w	r5, r9, #4294967295
    21fc:	b2ad      	uxth	r5, r5
    21fe:	b2db      	uxtb	r3, r3
    2200:	1c6a      	adds	r2, r5, #1
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2202:	f04f 0900 	mov.w	r9, #0
    2206:	9300      	str	r3, [sp, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2208:	4623      	mov	r3, r4
    220a:	463d      	mov	r5, r7
    220c:	9201      	str	r2, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    220e:	f44f 7b8c 	mov.w	fp, #280	; 0x118
    2212:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
    2216:	464c      	mov	r4, r9
    2218:	461f      	mov	r7, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    221a:	4b31      	ldr	r3, [pc, #196]	; (22e0 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x188>)
    221c:	1de1      	adds	r1, r4, #7
    221e:	6818      	ldr	r0, [r3, #0]
    2220:	9003      	str	r0, [sp, #12]
    2222:	b289      	uxth	r1, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2224:	29ff      	cmp	r1, #255	; 0xff
	return ret;
    2226:	9803      	ldr	r0, [sp, #12]
    2228:	bf9c      	itt	ls
    222a:	0209      	lslls	r1, r1, #8
    222c:	b289      	uxthls	r1, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    222e:	fb0b f000 	mul.w	r0, fp, r0
    2232:	fb01 f100 	mul.w	r1, r1, r0
    2236:	ea4f 4e11 	mov.w	lr, r1, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    223a:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    223e:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2242:	d003      	beq.n	224c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xf4>
    2244:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    2248:	3007      	adds	r0, #7
    224a:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    224c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2250:	4b24      	ldr	r3, [pc, #144]	; (22e4 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x18c>)
    2252:	f88d a009 	strb.w	sl, [sp, #9]
    2256:	f813 100c 	ldrb.w	r1, [r3, ip]
    225a:	4b23      	ldr	r3, [pc, #140]	; (22e8 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x190>)
    225c:	f833 c01c 	ldrh.w	ip, [r3, ip, lsl #1]
				}

				for (int i = 0; i < numBalls; i++)
				{
					int dotHue = i * (255 / numBalls);
					uint16_t index = indexes[beatsin16(i + 7, 0, numLeds - 1)];
    2260:	9b01      	ldr	r3, [sp, #4]
    2262:	f3c0 0046 	ubfx	r0, r0, #1, #7
    2266:	fb01 c100 	mla	r1, r1, r0, ip

    if( theta & 0x8000 ) y = -y;
    226a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    226e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2270:	bf18      	it	ne
    2272:	4249      	negne	r1, r1
    2274:	b209      	sxth	r1, r1
    2276:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    227a:	b289      	uxth	r1, r1
    227c:	fb03 f101 	mul.w	r1, r3, r1
    2280:	0c09      	lsrs	r1, r1, #16
    2282:	6968      	ldr	r0, [r5, #20]
					leds[index] = CHSV(dotHue + gHue, 200, 255);
    2284:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    2288:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    228c:	eb09 0e00 	add.w	lr, r9, r0
    2290:	f04f 33ff 	mov.w	r3, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2294:	4439      	add	r1, r7
    2296:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2298:	f88d 300a 	strb.w	r3, [sp, #10]
    229c:	f88d e008 	strb.w	lr, [sp, #8]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    22a0:	f7ff fdf8 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    22a4:	9b00      	ldr	r3, [sp, #0]
				case 3:
					numBalls = 9;
					break;
				}

				for (int i = 0; i < numBalls; i++)
    22a6:	3401      	adds	r4, #1
    22a8:	4499      	add	r9, r3
    22aa:	42b4      	cmp	r4, r6
    22ac:	fa5f f989 	uxtb.w	r9, r9
    22b0:	dbb3      	blt.n	221a <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xc2>
				{
					int dotHue = i * (255 / numBalls);
					uint16_t index = indexes[beatsin16(i + 7, 0, numLeds - 1)];
					leds[index] = CHSV(dotHue + gHue, 200, 255);
				}
			}
    22b2:	b005      	add	sp, #20
    22b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    22b8:	2355      	movs	r3, #85	; 0x55
    22ba:	e79d      	b.n	21f8 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xa0>

				int numBalls = 3;

				// Modes
				SetNumModes(3);
				switch (GetModeNumber(modeOffset))
    22bc:	2355      	movs	r3, #85	; 0x55
    22be:	2603      	movs	r6, #3
    22c0:	e79a      	b.n	21f8 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xa0>
    22c2:	3b01      	subs	r3, #1
    22c4:	f063 0303 	orn	r3, r3, #3
    22c8:	3301      	adds	r3, #1
    22ca:	e78a      	b.n	21e2 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x8a>
    22cc:	42c20000 	.word	0x42c20000
    22d0:	447fc000 	.word	0x447fc000
    22d4:	40400000 	.word	0x40400000
    22d8:	80000003 	.word	0x80000003
    22dc:	000085cc 	.word	0x000085cc
    22e0:	1fffd39c 	.word	0x1fffd39c
    22e4:	000085d8 	.word	0x000085d8
    22e8:	000085b4 	.word	0x000085b4

000022ec <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)>:
				EVERY_N_SECONDS(interval) {
					heatIndex++;
				}
			}

			void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    22ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22f0:	b095      	sub	sp, #84	; 0x54
    22f2:	4607      	mov	r7, r0
    22f4:	981e      	ldr	r0, [sp, #120]	; 0x78
    22f6:	9204      	str	r2, [sp, #16]

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    22f8:	2402      	movs	r4, #2
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    22fa:	2800      	cmp	r0, #0
				EVERY_N_SECONDS(interval) {
					heatIndex++;
				}
			}

			void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    22fc:	4688      	mov	r8, r1
    22fe:	469b      	mov	fp, r3

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2300:	60fc      	str	r4, [r7, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2302:	f2c0 80fa 	blt.w	24fa <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x20e>
				int speedDelay = 15;
				int frameMultiplier = 2;

				// Modes
				SetNumModes(2);
				switch (GetModeNumber(modeOffset))
    2306:	68ba      	ldr	r2, [r7, #8]
    2308:	4b8b      	ldr	r3, [pc, #556]	; (2538 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x24c>)
    230a:	4402      	add	r2, r0
    230c:	fb83 1302 	smull	r1, r3, r3, r2
    2310:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    2314:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2318:	1ad3      	subs	r3, r2, r3
    231a:	2b01      	cmp	r3, #1
    231c:	f000 80b0 	beq.w	2480 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x194>
    2320:	42a3      	cmp	r3, r4
    2322:	bf0c      	ite	eq
    2324:	2314      	moveq	r3, #20
    2326:	230f      	movne	r3, #15
    2328:	9305      	str	r3, [sp, #20]
    232a:	bf0c      	ite	eq
    232c:	f04f 0a32 	moveq.w	sl, #50	; 0x32
    2330:	f04f 0a19 	movne.w	sl, #25
						break;
					}
				}

				// Fade brightness all LEDs one step.
				for (int i = 0; i < numLeds; i++)
    2334:	f1bb 0f00 	cmp.w	fp, #0
    2338:	ea4f 044b 	mov.w	r4, fp, lsl #1
    233c:	dd34      	ble.n	23a8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xbc>
    233e:	9b04      	ldr	r3, [sp, #16]
    2340:	191d      	adds	r5, r3, r4
    2342:	4699      	mov	r9, r3
				{
					if (!meteorRandomDecay || random(10) > 5)
    2344:	200a      	movs	r0, #10
    2346:	f003 fde9 	bl	5f1c <random(unsigned long)>
    234a:	2805      	cmp	r0, #5
    234c:	d928      	bls.n	23a0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xb4>
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    234e:	69f8      	ldr	r0, [r7, #28]
					{
						int meteorTrailDecay = GetAnalogPattern(32, 96);

						(leds[indexes[i]]).fadeToBlackBy(meteorTrailDecay);
    2350:	f8b9 6000 	ldrh.w	r6, [r9]
    2354:	f004 fa3e 	bl	67d4 <__aeabi_i2f>
    2358:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
    235c:	f004 fa8e 	bl	687c <__aeabi_fmul>
    2360:	4976      	ldr	r1, [pc, #472]	; (253c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x250>)
    2362:	f004 fb3f 	bl	69e4 <__aeabi_fdiv>
    2366:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    236a:	f004 f97f 	bl	666c <__addsf3>
    236e:	f004 fc4b 	bl	6c08 <__aeabi_f2iz>
    2372:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    2376:	43c0      	mvns	r0, r0
    2378:	f818 3006 	ldrb.w	r3, [r8, r6]
    237c:	b2c0      	uxtb	r0, r0
    237e:	3001      	adds	r0, #1
    2380:	fb00 f303 	mul.w	r3, r0, r3
    2384:	121b      	asrs	r3, r3, #8
    2386:	f808 3006 	strb.w	r3, [r8, r6]
    238a:	4446      	add	r6, r8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    238c:	7873      	ldrb	r3, [r6, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    238e:	78b2      	ldrb	r2, [r6, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2390:	fb00 f303 	mul.w	r3, r0, r3
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2394:	fb00 f002 	mul.w	r0, r0, r2
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2398:	121b      	asrs	r3, r3, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    239a:	1200      	asrs	r0, r0, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    239c:	7073      	strb	r3, [r6, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    239e:	70b0      	strb	r0, [r6, #2]
    23a0:	f109 0902 	add.w	r9, r9, #2
						break;
					}
				}

				// Fade brightness all LEDs one step.
				for (int i = 0; i < numLeds; i++)
    23a4:	45a9      	cmp	r9, r5
    23a6:	d1cd      	bne.n	2344 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x58>
    23a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    23aa:	f8cd 800c 	str.w	r8, [sp, #12]
    23ae:	fb93 f5f4 	sdiv	r5, r3, r4
					}
				}

				// Draw meteor.
				long frame = GetFrame(numLeds * frameMultiplier);
				for (int i = 0; i < meteorSize; i++)
    23b2:	2600      	movs	r6, #0
    23b4:	fb04 3515 	mls	r5, r4, r5, r3
    23b8:	ac14      	add	r4, sp, #80	; 0x50
				{
					if ((frame - i < numLeds) && (frame - i >= 0))
    23ba:	45ab      	cmp	fp, r5
    23bc:	dd55      	ble.n	246a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x17e>
    23be:	2d00      	cmp	r5, #0
    23c0:	db53      	blt.n	246a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x17e>
					{
						// Set the colors of the meteor using a reversed HeatColors gradient, so the meteor's tail is white hot trailing off to red.
						uint16_t index = indexes[frame - i];
						leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
    23c2:	9b04      	ldr	r3, [sp, #16]
    23c4:	495e      	ldr	r1, [pc, #376]	; (2540 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x254>)
    23c6:	f833 8015 	ldrh.w	r8, [r3, r5, lsl #1]
    23ca:	9b03      	ldr	r3, [sp, #12]
    23cc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    23d0:	eb03 0908 	add.w	r9, r3, r8
    23d4:	ab08      	add	r3, sp, #32
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    23d6:	f851 2f04 	ldr.w	r2, [r1, #4]!
    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    23da:	709a      	strb	r2, [r3, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23dc:	0c10      	lsrs	r0, r2, #16
        g = (colorcode >>  8) & 0xFF;
    23de:	0a12      	lsrs	r2, r2, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23e0:	7018      	strb	r0, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
    23e2:	705a      	strb	r2, [r3, #1]
    23e4:	3303      	adds	r3, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    23e6:	429c      	cmp	r4, r3
    23e8:	d1f5      	bne.n	23d6 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xea>

				// Get the appropriate color from the palette, mapped to the number of LEDs.
				int mappedPos = numPaletteColors / numLeds * pos;
				if (isReverse)
				{
					return ColorFromPalette(palette, (numPaletteColors - mappedPos));
    23ea:	45b2      	cmp	sl, r6
    23ec:	4652      	mov	r2, sl
    23ee:	bfa8      	it	ge
    23f0:	4632      	movge	r2, r6
    23f2:	23ff      	movs	r3, #255	; 0xff
    23f4:	fb93 f1fa 	sdiv	r1, r3, sl
    23f8:	fb02 f201 	mul.w	r2, r2, r1
    23fc:	43d2      	mvns	r2, r2
    23fe:	2101      	movs	r1, #1
    2400:	b2d2      	uxtb	r2, r2
    2402:	9100      	str	r1, [sp, #0]
    2404:	a807      	add	r0, sp, #28
    2406:	a908      	add	r1, sp, #32
    2408:	f7ff fc22 	bl	1c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    240c:	9a03      	ldr	r2, [sp, #12]
    240e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2412:	f802 3008 	strb.w	r3, [r2, r8]
        g = rhs.g;
    2416:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    241a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    241e:	f889 3002 	strb.w	r3, [r9, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2422:	f889 2001 	strb.w	r2, [r9, #1]
    2426:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    242a:	f897 e031 	ldrb.w	lr, [r7, #49]	; 0x31
    242e:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
    2432:	f897 0033 	ldrb.w	r0, [r7, #51]	; 0x33
    2436:	f897 c034 	ldrb.w	ip, [r7, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    243a:	4613      	mov	r3, r2
				if (gHue1) val++;
				if (gHue2) val++;
    243c:	f1be 0f00 	cmp.w	lr, #0
    2440:	d000      	beq.n	2444 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x158>
    2442:	1c53      	adds	r3, r2, #1
				if (gHue3) val++;
    2444:	b101      	cbz	r1, 2448 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x15c>
    2446:	3301      	adds	r3, #1
				if (gHue4) val++;
    2448:	b150      	cbz	r0, 2460 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x174>

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
    244a:	2a00      	cmp	r2, #0
    244c:	d13e      	bne.n	24cc <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1e0>
				if (gHue2) val++;
    244e:	f1be 0f00 	cmp.w	lr, #0
    2452:	d01a      	beq.n	248a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x19e>
    2454:	2301      	movs	r3, #1
				if (gHue3) val++;
    2456:	b101      	cbz	r1, 245a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16e>
    2458:	3301      	adds	r3, #1
				if (gHue4) val++;
    245a:	b1d8      	cbz	r0, 2494 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a8>
    245c:	3301      	adds	r3, #1
    245e:	e019      	b.n	2494 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a8>
				if (gHue5) val++;
    2460:	f1bc 0f00 	cmp.w	ip, #0
    2464:	d1f1      	bne.n	244a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x15e>
					{
						// Set the colors of the meteor using a reversed HeatColors gradient, so the meteor's tail is white hot trailing off to red.
						uint16_t index = indexes[frame - i];
						leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
						// Apply a blend from the hue, if toggled. We'll be using a designated arbitrary RGB color.
						if (HasToggledHues())
    2466:	2b00      	cmp	r3, #0
    2468:	d1ef      	bne.n	244a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x15e>
					}
				}

				// Draw meteor.
				long frame = GetFrame(numLeds * frameMultiplier);
				for (int i = 0; i < meteorSize; i++)
    246a:	3601      	adds	r6, #1
    246c:	45b2      	cmp	sl, r6
    246e:	f105 35ff 	add.w	r5, r5, #4294967295
    2472:	d1a2      	bne.n	23ba <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xce>
							nblend(leds[index], GetRgbFromHue(), 127);
						}
					}
				}

				delay(speedDelay);
    2474:	9805      	ldr	r0, [sp, #20]
    2476:	f002 f82d 	bl	44d4 <delay>
			}
    247a:	b015      	add	sp, #84	; 0x54
    247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int speedDelay = 15;
				int frameMultiplier = 2;

				// Modes
				SetNumModes(2);
				switch (GetModeNumber(modeOffset))
    2480:	2307      	movs	r3, #7
    2482:	9305      	str	r3, [sp, #20]
				{
					// Small meteors.
					case 1:
					{
						meteorSize = 5;
    2484:	f04f 0a05 	mov.w	sl, #5
    2488:	e754      	b.n	2334 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x48>
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
    248a:	b109      	cbz	r1, 2490 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a4>
    248c:	2301      	movs	r3, #1
    248e:	e7e4      	b.n	245a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16e>
				if (gHue4) val++;
    2490:	b158      	cbz	r0, 24aa <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1be>
    2492:	2301      	movs	r3, #1
				if (gHue5) val++;
    2494:	f1bc 0f00 	cmp.w	ip, #0
    2498:	d000      	beq.n	249c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1b0>
    249a:	3301      	adds	r3, #1

			/// Return an arbitrary RGB color for a given number of toggled hue buttons. 
			/// This will be to add color to CRGBs, since they cannot have hue applied to them.
			CRGB GetRgbFromHue()
			{
				switch (GetToggledHueCount())
    249c:	3b01      	subs	r3, #1
    249e:	2b03      	cmp	r3, #3
    24a0:	d830      	bhi.n	2504 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x218>
    24a2:	e8df f003 	tbb	[pc, r3]
    24a6:	2105      	.short	0x2105
    24a8:	4037      	.short	0x4037
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
				if (gHue4) val++;
				if (gHue5) val++;
    24aa:	f1bc 0f00 	cmp.w	ip, #0
    24ae:	d029      	beq.n	2504 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x218>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    24b0:	2380      	movs	r3, #128	; 0x80
    24b2:	2200      	movs	r2, #0
    24b4:	f88d 3020 	strb.w	r3, [sp, #32]
    24b8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    24bc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
						uint16_t index = indexes[frame - i];
						leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
						// Apply a blend from the hue, if toggled. We'll be using a designated arbitrary RGB color.
						if (HasToggledHues())
						{
							nblend(leds[index], GetRgbFromHue(), 127);
    24c0:	4648      	mov	r0, r9
    24c2:	227f      	movs	r2, #127	; 0x7f
    24c4:	a908      	add	r1, sp, #32
    24c6:	f7ff fb87 	bl	1bd8 <nblend(CRGB&, CRGB const&, unsigned char)>
    24ca:	e7ce      	b.n	246a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x17e>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    24cc:	f1be 0f00 	cmp.w	lr, #0
    24d0:	d001      	beq.n	24d6 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1ea>
    24d2:	2302      	movs	r3, #2
    24d4:	e7bf      	b.n	2456 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16a>
				if (gHue3) val++;
    24d6:	b109      	cbz	r1, 24dc <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1f0>
    24d8:	2302      	movs	r3, #2
    24da:	e7be      	b.n	245a <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16e>
				if (gHue4) val++;
    24dc:	b108      	cbz	r0, 24e2 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1f6>
    24de:	2302      	movs	r3, #2
    24e0:	e7d8      	b.n	2494 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a8>
				if (gHue5) val++;
    24e2:	f1bc 0f00 	cmp.w	ip, #0
    24e6:	d0e3      	beq.n	24b0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1c4>
    24e8:	2300      	movs	r3, #0
    24ea:	2280      	movs	r2, #128	; 0x80
    24ec:	f88d 3020 	strb.w	r3, [sp, #32]
    24f0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    24f4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    24f8:	e7e2      	b.n	24c0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    24fa:	230f      	movs	r3, #15
    24fc:	9305      	str	r3, [sp, #20]
			void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
			{
				const boolean meteorRandomDecay = true;

				// Medium meteor.
				int meteorSize = 25;
    24fe:	f04f 0a19 	mov.w	sl, #25
    2502:	e717      	b.n	2334 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x48>
    2504:	2300      	movs	r3, #0
    2506:	f88d 3020 	strb.w	r3, [sp, #32]
    250a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    250e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2512:	e7d5      	b.n	24c0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
    2514:	2300      	movs	r3, #0
    2516:	22ff      	movs	r2, #255	; 0xff
    2518:	f88d 3020 	strb.w	r3, [sp, #32]
    251c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2520:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2524:	e7cc      	b.n	24c0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
    2526:	2300      	movs	r3, #0
    2528:	22ff      	movs	r2, #255	; 0xff
    252a:	f88d 2020 	strb.w	r2, [sp, #32]
    252e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2532:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2536:	e7c3      	b.n	24c0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d4>
    2538:	55555556 	.word	0x55555556
    253c:	447fc000 	.word	0x447fc000
    2540:	000084e0 	.word	0x000084e0

00002544 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)>:
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);

				IncrementFrame();
			}

			void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2548:	b08d      	sub	sp, #52	; 0x34
    254a:	4692      	mov	sl, r2
    254c:	9002      	str	r0, [sp, #8]
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);
    254e:	69c0      	ldr	r0, [r0, #28]
				(this->*(gPatterns[GetPatternNumber(patternOffset)]))(leds, indexes, numLeds, modeOffset);

				IncrementFrame();
			}

			void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2550:	9e16      	ldr	r6, [sp, #88]	; 0x58
    2552:	461c      	mov	r4, r3
    2554:	460d      	mov	r5, r1
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);
    2556:	f004 f93d 	bl	67d4 <__aeabi_i2f>
    255a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    255e:	f004 f98d 	bl	687c <__aeabi_fmul>
    2562:	499a      	ldr	r1, [pc, #616]	; (27cc <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x288>)
    2564:	f004 fa3e 	bl	69e4 <__aeabi_fdiv>
    2568:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    256c:	f004 f87e 	bl	666c <__addsf3>
    2570:	f004 fb4a 	bl	6c08 <__aeabi_f2iz>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2574:	4b96      	ldr	r3, [pc, #600]	; (27d0 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x28c>)
    2576:	681b      	ldr	r3, [r3, #0]
    2578:	930b      	str	r3, [sp, #44]	; 0x2c
    257a:	b280      	uxth	r0, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    257c:	28ff      	cmp	r0, #255	; 0xff
	return ret;
    257e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2580:	bf98      	it	ls
    2582:	0200      	lslls	r0, r0, #8
    2584:	f44f 738c 	mov.w	r3, #280	; 0x118
    2588:	bf98      	it	ls
    258a:	b280      	uxthls	r0, r0
    258c:	fb03 f101 	mul.w	r1, r3, r1
    2590:	fb00 f101 	mul.w	r1, r0, r1
    2594:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    2596:	b2ca      	uxtb	r2, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2598:	0650      	lsls	r0, r2, #25
    259a:	f140 820b 	bpl.w	29b4 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x470>
        offset = (uint8_t)255 - offset;
    259e:	43d3      	mvns	r3, r2
    25a0:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    25a2:	f003 020f 	and.w	r2, r3, #15
    if( theta & 0x40) secoffset++;
    25a6:	3201      	adds	r2, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    25a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    25ac:	4889      	ldr	r0, [pc, #548]	; (27d4 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x290>)
    25ae:	111b      	asrs	r3, r3, #4
    25b0:	005b      	lsls	r3, r3, #1
    25b2:	18c7      	adds	r7, r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    25b4:	5cc3      	ldrb	r3, [r0, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    25b6:	7878      	ldrb	r0, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    25b8:	fb10 f202 	smulbb	r2, r0, r2
    25bc:	eb03 1222 	add.w	r2, r3, r2, asr #4
    25c0:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    25c2:	060b      	lsls	r3, r1, #24
    25c4:	bf48      	it	mi
    25c6:	4252      	negmi	r2, r2
    25c8:	b252      	sxtb	r2, r2

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    25ca:	9802      	ldr	r0, [sp, #8]
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    25cc:	3a80      	subs	r2, #128	; 0x80
    25ce:	2304      	movs	r3, #4
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    25d0:	2e00      	cmp	r6, #0
    25d2:	b2d2      	uxtb	r2, r2

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    25d4:	60c3      	str	r3, [r0, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    25d6:	f2c0 81f2 	blt.w	29be <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x47a>
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

				// Modes
				SetNumModes(4);
				FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
    25da:	6883      	ldr	r3, [r0, #8]
    25dc:	497e      	ldr	r1, [pc, #504]	; (27d8 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x294>)
    25de:	441e      	add	r6, r3
    25e0:	fb81 3106 	smull	r3, r1, r1, r6
    25e4:	17f3      	asrs	r3, r6, #31
    25e6:	ebc3 0361 	rsb	r3, r3, r1, asr #1
    25ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    25ee:	1af6      	subs	r6, r6, r3
    25f0:	1c73      	adds	r3, r6, #1
			}

			void FillGradients(CRGB leds[], uint16_t indexes[], int numLeds, int numGradients, int speed)
			{
				if (numGradients < 1) numGradients = 1;
    25f2:	2b01      	cmp	r3, #1
    25f4:	bfb8      	it	lt
    25f6:	2301      	movlt	r3, #1
    25f8:	9301      	str	r3, [sp, #4]
    25fa:	b2d3      	uxtb	r3, r2
    25fc:	9303      	str	r3, [sp, #12]

				for (int i = 0; i < numGradients; i++)
    25fe:	f04f 0b00 	mov.w	fp, #0
    2602:	9b01      	ldr	r3, [sp, #4]
    2604:	fb94 f3f3 	sdiv	r3, r4, r3
    2608:	9304      	str	r3, [sp, #16]
    260a:	9a02      	ldr	r2, [sp, #8]
    260c:	f892 6031 	ldrb.w	r6, [r2, #49]	; 0x31
    2610:	f892 4032 	ldrb.w	r4, [r2, #50]	; 0x32
    2614:	f892 0033 	ldrb.w	r0, [r2, #51]	; 0x33
    2618:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    261c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
				if (gHue1) val++;
				if (gHue2) val++;
    2620:	2e00      	cmp	r6, #0
    2622:	f000 819e 	beq.w	2962 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x41e>
    2626:	1c5a      	adds	r2, r3, #1
				if (gHue3) val++;
    2628:	b104      	cbz	r4, 262c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xe8>
    262a:	3201      	adds	r2, #1
				if (gHue4) val++;
    262c:	b100      	cbz	r0, 2630 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xec>
    262e:	3201      	adds	r2, #1
				if (gHue5) val++;
    2630:	b101      	cbz	r1, 2634 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xf0>
    2632:	3201      	adds	r2, #1
				}
			}

			CRGB GetRainbowColor(int index = 0)
			{
				switch (index % 8)
    2634:	445a      	add	r2, fp
    2636:	f002 0207 	and.w	r2, r2, #7
    263a:	3a01      	subs	r2, #1
    263c:	2a06      	cmp	r2, #6
    263e:	d85e      	bhi.n	26fe <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ba>
    2640:	e8df f012 	tbh	[pc, r2, lsl #1]
    2644:	00480052 	.word	0x00480052
    2648:	0035003f 	.word	0x0035003f
    264c:	00070028 	.word	0x00070028
    2650:	0191      	.short	0x0191
    2652:	22ee      	movs	r2, #238	; 0xee
    2654:	2782      	movs	r7, #130	; 0x82
    2656:	f88d 2018 	strb.w	r2, [sp, #24]
    265a:	f88d 201a 	strb.w	r2, [sp, #26]
    265e:	f88d 7019 	strb.w	r7, [sp, #25]
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    2662:	b316      	cbz	r6, 26aa <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x166>
    2664:	1c5a      	adds	r2, r3, #1
				if (gHue3) val++;
    2666:	b104      	cbz	r4, 266a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x126>
    2668:	3201      	adds	r2, #1
				if (gHue4) val++;
    266a:	b100      	cbz	r0, 266e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12a>
    266c:	3201      	adds	r2, #1
				if (gHue5) val++;
    266e:	b101      	cbz	r1, 2672 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    2670:	3201      	adds	r2, #1
				}
			}

			CRGB GetRainbowColor(int index = 0)
			{
				switch (index % 8)
    2672:	445a      	add	r2, fp
    2674:	3201      	adds	r2, #1
    2676:	f002 0207 	and.w	r2, r2, #7
    267a:	3a01      	subs	r2, #1
    267c:	2a06      	cmp	r2, #6
    267e:	f200 809b 	bhi.w	27b8 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x274>
    2682:	e8df f012 	tbh	[pc, r2, lsl #1]
    2686:	008e      	.short	0x008e
    2688:	007b0084 	.word	0x007b0084
    268c:	00670071 	.word	0x00670071
    2690:	018a0046 	.word	0x018a0046
    2694:	224b      	movs	r2, #75	; 0x4b
    2696:	2700      	movs	r7, #0
    2698:	f88d 2018 	strb.w	r2, [sp, #24]
    269c:	2282      	movs	r2, #130	; 0x82
    269e:	f88d 7019 	strb.w	r7, [sp, #25]
    26a2:	f88d 201a 	strb.w	r2, [sp, #26]
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    26a6:	2e00      	cmp	r6, #0
    26a8:	d1dc      	bne.n	2664 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x120>
    26aa:	461a      	mov	r2, r3
    26ac:	e7db      	b.n	2666 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x122>
    26ae:	2200      	movs	r2, #0
    26b0:	f04f 37ff 	mov.w	r7, #4294967295
    26b4:	f88d 701a 	strb.w	r7, [sp, #26]
    26b8:	f88d 2018 	strb.w	r2, [sp, #24]
    26bc:	f88d 2019 	strb.w	r2, [sp, #25]
    26c0:	e7cf      	b.n	2662 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    26c2:	2200      	movs	r2, #0
    26c4:	2780      	movs	r7, #128	; 0x80
    26c6:	f88d 2018 	strb.w	r2, [sp, #24]
    26ca:	f88d 201a 	strb.w	r2, [sp, #26]
    26ce:	f88d 7019 	strb.w	r7, [sp, #25]
    26d2:	e7c6      	b.n	2662 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    26d4:	f04f 37ff 	mov.w	r7, #4294967295
    26d8:	2200      	movs	r2, #0
    26da:	f88d 7018 	strb.w	r7, [sp, #24]
    26de:	f88d 7019 	strb.w	r7, [sp, #25]
    26e2:	f88d 201a 	strb.w	r2, [sp, #26]
    26e6:	e7bc      	b.n	2662 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    26e8:	27a5      	movs	r7, #165	; 0xa5
    26ea:	2200      	movs	r2, #0
    26ec:	f04f 3eff 	mov.w	lr, #4294967295
    26f0:	f88d e018 	strb.w	lr, [sp, #24]
    26f4:	f88d 7019 	strb.w	r7, [sp, #25]
    26f8:	f88d 201a 	strb.w	r2, [sp, #26]
    26fc:	e7b1      	b.n	2662 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    26fe:	2200      	movs	r2, #0
    2700:	f04f 37ff 	mov.w	r7, #4294967295
    2704:	f88d 7018 	strb.w	r7, [sp, #24]
    2708:	f88d 2019 	strb.w	r2, [sp, #25]
    270c:	f88d 201a 	strb.w	r2, [sp, #26]
    2710:	e7a7      	b.n	2662 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    2712:	22ee      	movs	r2, #238	; 0xee
    2714:	2782      	movs	r7, #130	; 0x82
    2716:	f88d 201c 	strb.w	r2, [sp, #28]
    271a:	f88d 201e 	strb.w	r2, [sp, #30]
    271e:	f88d 701d 	strb.w	r7, [sp, #29]
    2722:	b106      	cbz	r6, 2726 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1e2>
    2724:	3301      	adds	r3, #1
				if (gHue3) val++;
    2726:	b104      	cbz	r4, 272a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1e6>
    2728:	3301      	adds	r3, #1
				if (gHue4) val++;
    272a:	b100      	cbz	r0, 272e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ea>
    272c:	3301      	adds	r3, #1
				if (gHue5) val++;
    272e:	b101      	cbz	r1, 2732 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    2730:	3301      	adds	r3, #1
				}
			}

			CRGB GetRainbowColor(int index = 0)
			{
				switch (index % 8)
    2732:	445b      	add	r3, fp
    2734:	3302      	adds	r3, #2
    2736:	f003 0307 	and.w	r3, r3, #7
    273a:	3b01      	subs	r3, #1
    273c:	2b06      	cmp	r3, #6
    273e:	f200 8104 	bhi.w	294a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x406>
    2742:	e8df f013 	tbh	[pc, r3, lsl #1]
    2746:	00f7      	.short	0x00f7
    2748:	00da00e3 	.word	0x00da00e3
    274c:	00d000ed 	.word	0x00d000ed
    2750:	011d004b 	.word	0x011d004b
    2754:	224b      	movs	r2, #75	; 0x4b
    2756:	2700      	movs	r7, #0
    2758:	f88d 201c 	strb.w	r2, [sp, #28]
    275c:	2282      	movs	r2, #130	; 0x82
    275e:	f88d 701d 	strb.w	r7, [sp, #29]
    2762:	f88d 201e 	strb.w	r2, [sp, #30]
    2766:	e7dc      	b.n	2722 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    2768:	2200      	movs	r2, #0
    276a:	f04f 37ff 	mov.w	r7, #4294967295
    276e:	f88d 701e 	strb.w	r7, [sp, #30]
    2772:	f88d 201c 	strb.w	r2, [sp, #28]
    2776:	f88d 201d 	strb.w	r2, [sp, #29]
    277a:	e7d2      	b.n	2722 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    277c:	2200      	movs	r2, #0
    277e:	2780      	movs	r7, #128	; 0x80
    2780:	f88d 201c 	strb.w	r2, [sp, #28]
    2784:	f88d 201e 	strb.w	r2, [sp, #30]
    2788:	f88d 701d 	strb.w	r7, [sp, #29]
    278c:	e7c9      	b.n	2722 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    278e:	f04f 37ff 	mov.w	r7, #4294967295
    2792:	2200      	movs	r2, #0
    2794:	f88d 701c 	strb.w	r7, [sp, #28]
    2798:	f88d 701d 	strb.w	r7, [sp, #29]
    279c:	f88d 201e 	strb.w	r2, [sp, #30]
    27a0:	e7bf      	b.n	2722 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    27a2:	27a5      	movs	r7, #165	; 0xa5
    27a4:	2200      	movs	r2, #0
    27a6:	f04f 3eff 	mov.w	lr, #4294967295
    27aa:	f88d e01c 	strb.w	lr, [sp, #28]
    27ae:	f88d 701d 	strb.w	r7, [sp, #29]
    27b2:	f88d 201e 	strb.w	r2, [sp, #30]
    27b6:	e7b4      	b.n	2722 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    27b8:	2200      	movs	r2, #0
    27ba:	f04f 37ff 	mov.w	r7, #4294967295
    27be:	f88d 701c 	strb.w	r7, [sp, #28]
    27c2:	f88d 201d 	strb.w	r2, [sp, #29]
    27c6:	f88d 201e 	strb.w	r2, [sp, #30]
    27ca:	e7aa      	b.n	2722 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
    27cc:	447fc000 	.word	0x447fc000
    27d0:	1fffd39c 	.word	0x1fffd39c
    27d4:	000085c4 	.word	0x000085c4
    27d8:	66666667 	.word	0x66666667
    27dc:	23ee      	movs	r3, #238	; 0xee
    27de:	2282      	movs	r2, #130	; 0x82
    27e0:	f88d 3020 	strb.w	r3, [sp, #32]
    27e4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    27e8:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
					CRGB color1 = GetRainbowColor(GetToggledHueCount() + i);
					CRGB color2 = GetRainbowColor(GetToggledHueCount() + i + 1);
					CRGB color3 = GetRainbowColor(GetToggledHueCount() + i + 2);

					// Blend between two different colors over time.
					CRGB blend1 = blend(color1, color2, speed);
    27ec:	9c03      	ldr	r4, [sp, #12]
    27ee:	aa07      	add	r2, sp, #28
    27f0:	4623      	mov	r3, r4
    27f2:	a906      	add	r1, sp, #24
    27f4:	a809      	add	r0, sp, #36	; 0x24
    27f6:	f7ff fa1d 	bl	1c34 <blend(CRGB const&, CRGB const&, unsigned char)>
					CRGB blend2 = blend(color2, color3, speed);
    27fa:	4623      	mov	r3, r4
    27fc:	aa08      	add	r2, sp, #32
    27fe:	a907      	add	r1, sp, #28
    2800:	a80a      	add	r0, sp, #40	; 0x28
    2802:	f7ff fa17 	bl	1c34 <blend(CRGB const&, CRGB const&, unsigned char)>

					int startPos = numLeds / numGradients * i;
    2806:	9a04      	ldr	r2, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2808:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
        g = rhs.g;
    280c:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2810:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    2814:	f89d 6029 	ldrb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    2818:	f89d 402a 	ldrb.w	r4, [sp, #42]	; 0x2a
    281c:	fb02 f30b 	mul.w	r3, r2, fp
					int endPos = (numLeds / numGradients * (i + 1)) - 1;

					FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
    2820:	eb02 0903 	add.w	r9, r2, r3
    2824:	f109 39ff 	add.w	r9, r9, #4294967295
    2828:	fa1f f989 	uxth.w	r9, r9
    282c:	b29b      	uxth	r3, r3
			void FillGradientRgb(CRGB leds[], uint16_t indexes[], int numLeds,
				uint16_t startpos, CRGB startcolor,
				uint16_t endpos, CRGB endcolor)
			{
				// if the points are in the wrong order, straighten them
				if (endpos < startpos) 
    282e:	454b      	cmp	r3, r9
					// Blend between two different colors over time.
					CRGB blend1 = blend(color1, color2, speed);
					CRGB blend2 = blend(color2, color3, speed);

					int startPos = numLeds / numGradients * i;
					int endPos = (numLeds / numGradients * (i + 1)) - 1;
    2830:	f10b 0b01 	add.w	fp, fp, #1
    2834:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
			void FillGradientRgb(CRGB leds[], uint16_t indexes[], int numLeds,
				uint16_t startpos, CRGB startcolor,
				uint16_t endpos, CRGB endcolor)
			{
				// if the points are in the wrong order, straighten them
				if (endpos < startpos) 
    2838:	d90b      	bls.n	2852 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x30e>
    283a:	9405      	str	r4, [sp, #20]
    283c:	46b0      	mov	r8, r6
    283e:	46bc      	mov	ip, r7
    2840:	469e      	mov	lr, r3
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    2842:	4614      	mov	r4, r2
    2844:	9a05      	ldr	r2, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2846:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2848:	4607      	mov	r7, r0
    284a:	464b      	mov	r3, r9
        g = rhs.g;
    284c:	4641      	mov	r1, r8
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    284e:	4660      	mov	r0, ip
    2850:	46f1      	mov	r9, lr

				rdistance87 = (endcolor.r - startcolor.r) << 7;
				gdistance87 = (endcolor.g - startcolor.g) << 7;
				bdistance87 = (endcolor.b - startcolor.b) << 7;

				uint16_t pixeldistance = endpos - startpos;
    2852:	ebc3 0e09 	rsb	lr, r3, r9
				saccum87 gdistance87;
				saccum87 bdistance87;

				rdistance87 = (endcolor.r - startcolor.r) << 7;
				gdistance87 = (endcolor.g - startcolor.g) << 7;
				bdistance87 = (endcolor.b - startcolor.b) << 7;
    2856:	ebc2 0c04 	rsb	ip, r2, r4

				saccum87 rdistance87;
				saccum87 gdistance87;
				saccum87 bdistance87;

				rdistance87 = (endcolor.r - startcolor.r) << 7;
    285a:	1a3f      	subs	r7, r7, r0
				gdistance87 = (endcolor.g - startcolor.g) << 7;
    285c:	1a76      	subs	r6, r6, r1
				bdistance87 = (endcolor.b - startcolor.b) << 7;

				uint16_t pixeldistance = endpos - startpos;
    285e:	fa1f f48e 	uxth.w	r4, lr

				saccum87 rdistance87;
				saccum87 gdistance87;
				saccum87 bdistance87;

				rdistance87 = (endcolor.r - startcolor.r) << 7;
    2862:	01ff      	lsls	r7, r7, #7
				gdistance87 = (endcolor.g - startcolor.g) << 7;
    2864:	01f6      	lsls	r6, r6, #7
				bdistance87 = (endcolor.b - startcolor.b) << 7;
    2866:	ea4f 1ccc 	mov.w	ip, ip, lsl #7

				uint16_t pixeldistance = endpos - startpos;
				int16_t divisor = pixeldistance ? pixeldistance : 1;
    286a:	2c00      	cmp	r4, #0
    286c:	d077      	beq.n	295e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x41a>
    286e:	b224      	sxth	r4, r4

				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
    2870:	fb97 f7f4 	sdiv	r7, r7, r4
				gdelta87 *= 2;
    2874:	fb96 f6f4 	sdiv	r6, r6, r4

				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
    2878:	ea4f 0e47 	mov.w	lr, r7, lsl #1
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    287c:	4599      	cmp	r9, r3
				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
				gdelta87 *= 2;
    287e:	ea4f 0746 	mov.w	r7, r6, lsl #1
				bdelta87 *= 2;
    2882:	fb9c f6f4 	sdiv	r6, ip, r4
    2886:	ea4f 0646 	mov.w	r6, r6, lsl #1

				saccum87 rdelta87 = rdistance87 / divisor;
				saccum87 gdelta87 = gdistance87 / divisor;
				saccum87 bdelta87 = bdistance87 / divisor;

				rdelta87 *= 2;
    288a:	fa1f fe8e 	uxth.w	lr, lr
				gdelta87 *= 2;
    288e:	b2bf      	uxth	r7, r7
				bdelta87 *= 2;
    2890:	b2b6      	uxth	r6, r6

				accum88 r88 = startcolor.r << 8;
    2892:	ea4f 2000 	mov.w	r0, r0, lsl #8
				accum88 g88 = startcolor.g << 8;
    2896:	ea4f 2101 	mov.w	r1, r1, lsl #8
				accum88 b88 = startcolor.b << 8;
    289a:	ea4f 2202 	mov.w	r2, r2, lsl #8
				for (uint16_t i = startpos; i <= endpos; i++) 
    289e:	d31b      	bcc.n	28d8 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x394>
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
    28a0:	f83a c013 	ldrh.w	ip, [sl, r3, lsl #1]
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    28a4:	3301      	adds	r3, #1
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
    28a6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    28aa:	eb05 040c 	add.w	r4, r5, ip
    28ae:	ea4f 2820 	mov.w	r8, r0, asr #8
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    28b2:	b29b      	uxth	r3, r3
    28b4:	f805 800c 	strb.w	r8, [r5, ip]
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
					r88 += rdelta87;
    28b8:	4470      	add	r0, lr
        g = rhs.g;
    28ba:	ea4f 2821 	mov.w	r8, r1, asr #8
        b = rhs.b;
    28be:	ea4f 2c22 	mov.w	ip, r2, asr #8
					g88 += gdelta87;
    28c2:	4439      	add	r1, r7
					b88 += bdelta87;
    28c4:	4432      	add	r2, r6
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    28c6:	4599      	cmp	r9, r3
				{
					leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
					r88 += rdelta87;
    28c8:	b280      	uxth	r0, r0

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    28ca:	f884 8001 	strb.w	r8, [r4, #1]
					g88 += gdelta87;
    28ce:	b289      	uxth	r1, r1
        b = rhs.b;
    28d0:	f884 c002 	strb.w	ip, [r4, #2]
					b88 += bdelta87;
    28d4:	b292      	uxth	r2, r2
				bdelta87 *= 2;

				accum88 r88 = startcolor.r << 8;
				accum88 g88 = startcolor.g << 8;
				accum88 b88 = startcolor.b << 8;
				for (uint16_t i = startpos; i <= endpos; i++) 
    28d6:	d2e3      	bcs.n	28a0 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x35c>

			void FillGradients(CRGB leds[], uint16_t indexes[], int numLeds, int numGradients, int speed)
			{
				if (numGradients < 1) numGradients = 1;

				for (int i = 0; i < numGradients; i++)
    28d8:	9b01      	ldr	r3, [sp, #4]
    28da:	455b      	cmp	r3, fp
    28dc:	f47f ae95 	bne.w	260a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xc6>
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

				// Modes
				SetNumModes(4);
				FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
			}
    28e0:	b00d      	add	sp, #52	; 0x34
    28e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    28e6:	234b      	movs	r3, #75	; 0x4b
    28e8:	2200      	movs	r2, #0
    28ea:	f88d 3020 	strb.w	r3, [sp, #32]
    28ee:	2382      	movs	r3, #130	; 0x82
    28f0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    28f4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    28f8:	e778      	b.n	27ec <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    28fa:	2300      	movs	r3, #0
    28fc:	2280      	movs	r2, #128	; 0x80
    28fe:	f88d 3020 	strb.w	r3, [sp, #32]
    2902:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2906:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    290a:	e76f      	b.n	27ec <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    290c:	f04f 32ff 	mov.w	r2, #4294967295
    2910:	2300      	movs	r3, #0
    2912:	f88d 2020 	strb.w	r2, [sp, #32]
    2916:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    291a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    291e:	e765      	b.n	27ec <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    2920:	2300      	movs	r3, #0
    2922:	f04f 32ff 	mov.w	r2, #4294967295
    2926:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    292a:	f88d 3020 	strb.w	r3, [sp, #32]
    292e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2932:	e75b      	b.n	27ec <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    2934:	22a5      	movs	r2, #165	; 0xa5
    2936:	2300      	movs	r3, #0
    2938:	f04f 31ff 	mov.w	r1, #4294967295
    293c:	f88d 1020 	strb.w	r1, [sp, #32]
    2940:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    2944:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2948:	e750      	b.n	27ec <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    294a:	2300      	movs	r3, #0
    294c:	f04f 32ff 	mov.w	r2, #4294967295
    2950:	f88d 2020 	strb.w	r2, [sp, #32]
    2954:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2958:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    295c:	e746      	b.n	27ec <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
				rdistance87 = (endcolor.r - startcolor.r) << 7;
				gdistance87 = (endcolor.g - startcolor.g) << 7;
				bdistance87 = (endcolor.b - startcolor.b) << 7;

				uint16_t pixeldistance = endpos - startpos;
				int16_t divisor = pixeldistance ? pixeldistance : 1;
    295e:	2401      	movs	r4, #1
    2960:	e786      	b.n	2870 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x32c>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    2962:	461a      	mov	r2, r3
    2964:	e660      	b.n	2628 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xe4>
    2966:	f04f 32ff 	mov.w	r2, #4294967295
    296a:	f88d 2018 	strb.w	r2, [sp, #24]
    296e:	f06f 023f 	mvn.w	r2, #63	; 0x3f
    2972:	f88d 2019 	strb.w	r2, [sp, #25]
    2976:	f06f 0234 	mvn.w	r2, #52	; 0x34
    297a:	f88d 201a 	strb.w	r2, [sp, #26]
    297e:	e670      	b.n	2662 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x11e>
    2980:	f04f 33ff 	mov.w	r3, #4294967295
    2984:	f88d 3020 	strb.w	r3, [sp, #32]
    2988:	f06f 033f 	mvn.w	r3, #63	; 0x3f
    298c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    2990:	f06f 0334 	mvn.w	r3, #52	; 0x34
    2994:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    2998:	e728      	b.n	27ec <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a8>
    299a:	f04f 32ff 	mov.w	r2, #4294967295
    299e:	f88d 201c 	strb.w	r2, [sp, #28]
    29a2:	f06f 023f 	mvn.w	r2, #63	; 0x3f
    29a6:	f88d 201d 	strb.w	r2, [sp, #29]
    29aa:	f06f 0234 	mvn.w	r2, #52	; 0x34
    29ae:	f88d 201e 	strb.w	r2, [sp, #30]
    29b2:	e6b6      	b.n	2722 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1de>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    29b4:	f002 033f 	and.w	r3, r2, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    29b8:	f002 020f 	and.w	r2, r2, #15
    29bc:	e5f6      	b.n	25ac <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x68>
			{
				int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

				// Modes
				SetNumModes(4);
				FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
    29be:	2301      	movs	r3, #1
    29c0:	9301      	str	r3, [sp, #4]
    29c2:	e61a      	b.n	25fa <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xb6>

000029c4 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)>:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}

			void Sinelon(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    29c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29c8:	4607      	mov	r7, r0
    29ca:	b087      	sub	sp, #28
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    29cc:	69c0      	ldr	r0, [r0, #28]
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}

			void Sinelon(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    29ce:	461e      	mov	r6, r3
    29d0:	4690      	mov	r8, r2
    29d2:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    29d4:	f003 fefe 	bl	67d4 <__aeabi_i2f>
    29d8:	49a1      	ldr	r1, [pc, #644]	; (2c60 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x29c>)
    29da:	f003 ff4f 	bl	687c <__aeabi_fmul>
    29de:	49a1      	ldr	r1, [pc, #644]	; (2c64 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2a0>)
    29e0:	f004 f800 	bl	69e4 <__aeabi_fdiv>
    29e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    29e8:	f003 fe40 	bl	666c <__addsf3>
    29ec:	f004 f90c 	bl	6c08 <__aeabi_f2iz>
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    29f0:	2e00      	cmp	r6, #0
    29f2:	dd21      	ble.n	2a38 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x74>
    29f4:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    29f8:	b2c9      	uxtb	r1, r1
    29fa:	3101      	adds	r1, #1
    29fc:	4640      	mov	r0, r8
    29fe:	eb08 0546 	add.w	r5, r8, r6, lsl #1
				{
					int scale = 255 - fade;
					(leds[indexes[i]]).nscale8(scale);
    2a02:	f830 3b02 	ldrh.w	r3, [r0], #2
    2a06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2a0a:	eb04 0e03 	add.w	lr, r4, r3
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2a0e:	5ce2      	ldrb	r2, [r4, r3]
    2a10:	fb01 f202 	mul.w	r2, r1, r2
    2a14:	1212      	asrs	r2, r2, #8
    2a16:	54e2      	strb	r2, [r4, r3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a18:	f89e 2001 	ldrb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a1c:	f89e 3002 	ldrb.w	r3, [lr, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a20:	fb01 f202 	mul.w	r2, r1, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a24:	fb01 f303 	mul.w	r3, r1, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a28:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a2a:	121b      	asrs	r3, r3, #8
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    2a2c:	42a8      	cmp	r0, r5
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2a2e:	f88e 2001 	strb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2a32:	f88e 3002 	strb.w	r3, [lr, #2]
    2a36:	d1e4      	bne.n	2a02 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a38:	4a8b      	ldr	r2, [pc, #556]	; (2c68 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2a4>)
    2a3a:	6813      	ldr	r3, [r2, #0]
    2a3c:	9304      	str	r3, [sp, #16]
	return ret;
    2a3e:	9804      	ldr	r0, [sp, #16]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2a40:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    2a44:	fb03 f000 	mul.w	r0, r3, r0
    2a48:	0c00      	lsrs	r0, r0, #16
			{
				// Display a dot moving back and forth in a sin wave pattern.
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				uint16_t index = indexes[beatsin16(8, 0, numLeds - 1)];
    2a4a:	f106 3aff 	add.w	sl, r6, #4294967295
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2a4e:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2a50:	f3c0 01ca 	ubfx	r1, r0, #3, #11
    2a54:	fa1f f98a 	uxth.w	r9, sl
    if( theta & 0x4000 ) offset = 2047 - offset;
    2a58:	d503      	bpl.n	2a62 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x9e>
    2a5a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2a5e:	3107      	adds	r1, #7
    2a60:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    uint8_t  m   = slope[section];
    2a62:	4b82      	ldr	r3, [pc, #520]	; (2c6c <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2a8>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2a64:	f8df b210 	ldr.w	fp, [pc, #528]	; 2c78 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2b4>
    2a68:	9300      	str	r3, [sp, #0]
    2a6a:	0a0d      	lsrs	r5, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2a6c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2a70:	f813 e005 	ldrb.w	lr, [r3, r5]
    2a74:	f83b 5015 	ldrh.w	r5, [fp, r5, lsl #1]
    2a78:	9201      	str	r2, [sp, #4]
    2a7a:	fb0e 5101 	mla	r1, lr, r1, r5

    if( theta & 0x8000 ) y = -y;
    2a7e:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2a80:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2a82:	bf48      	it	mi
    2a84:	4249      	negmi	r1, r1
    2a86:	b209      	sxth	r1, r1
    2a88:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    2a8c:	b289      	uxth	r1, r1
LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )
{
  #if SCALE16_C == 1
    uint16_t result;
#if FASTLED_SCALE8_FIXED == 1
    result = ((uint32_t)(i) * (1+(uint32_t)(scale))) / 65536;
    2a8e:	f109 0901 	add.w	r9, r9, #1
    2a92:	fb09 f101 	mul.w	r1, r9, r1
    2a96:	0c09      	lsrs	r1, r1, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2a98:	6978      	ldr	r0, [r7, #20]
    2a9a:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    2a9e:	f100 0e40 	add.w	lr, r0, #64	; 0x40
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2aa2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    2aa6:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2aa8:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2aac:	f88d e014 	strb.w	lr, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2ab0:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2ab2:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
    2ab6:	f88d c015 	strb.w	ip, [sp, #21]
    2aba:	f88d e016 	strb.w	lr, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2abe:	f7ff f9e9 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2ac4:	2104      	movs	r1, #4
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2ac6:	2b00      	cmp	r3, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2ac8:	60f9      	str	r1, [r7, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2aca:	db4a      	blt.n	2b62 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x19e>
				uint16_t index = indexes[beatsin16(8, 0, numLeds - 1)];
				leds[index] = CHSV(gHue + 64, 255, 192);

				// Modes
				SetNumModes(4);
				switch (GetModeNumber(modeOffset))
    2acc:	68b9      	ldr	r1, [r7, #8]
    2ace:	4868      	ldr	r0, [pc, #416]	; (2c70 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2ac>)
    2ad0:	9a01      	ldr	r2, [sp, #4]
    2ad2:	4419      	add	r1, r3
    2ad4:	fb80 3e01 	smull	r3, lr, r0, r1
    2ad8:	17c8      	asrs	r0, r1, #31
    2ada:	ebc0 006e 	rsb	r0, r0, lr, asr #1
    2ade:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2ae2:	1a09      	subs	r1, r1, r0
    2ae4:	3901      	subs	r1, #1
    2ae6:	9b00      	ldr	r3, [sp, #0]
    2ae8:	2903      	cmp	r1, #3
    2aea:	d83a      	bhi.n	2b62 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x19e>
    2aec:	e8df f001 	tbb	[pc, r1]
    2af0:	3c679002 	.word	0x3c679002
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2af4:	6812      	ldr	r2, [r2, #0]
    2af6:	9205      	str	r2, [sp, #20]
	return ret;
    2af8:	9805      	ldr	r0, [sp, #20]
    2afa:	f44f 220c 	mov.w	r2, #573440	; 0x8c000
    2afe:	fb02 f000 	mul.w	r0, r2, r0
    2b02:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b04:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2b06:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b0a:	d503      	bpl.n	2b14 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x150>
    2b0c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    2b10:	3207      	adds	r2, #7
    2b12:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2b14:	0a15      	lsrs	r5, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b16:	f3c2 0146 	ubfx	r1, r2, #1, #7
    2b1a:	5d5a      	ldrb	r2, [r3, r5]
    2b1c:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
    2b20:	fb02 3201 	mla	r2, r2, r1, r3
    2b24:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    2b26:	0403      	lsls	r3, r0, #16
    2b28:	bf4a      	itet	mi
    2b2a:	4253      	negmi	r3, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b2c:	b213      	sxthpl	r3, r2

    if( theta & 0x8000 ) y = -y;
    2b2e:	b21b      	sxthmi	r3, r3
				{
				case 1:
				{
					// Add a second, opposite dot moving in the opposite direction.
					uint16_t oppositeIndex = indexes[(numLeds - 1) - (beatsin16(8, 0, numLeds - 1))];
    2b30:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2b34:	b29b      	uxth	r3, r3
    2b36:	fb09 f903 	mul.w	r9, r9, r3
    2b3a:	ebaa 4a19 	sub.w	sl, sl, r9, lsr #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2b3e:	697b      	ldr	r3, [r7, #20]
					leds[oppositeIndex] = CHSV(gHue + 128, 255, 192);
    2b40:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
    2b44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b48:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2b4a:	3b80      	subs	r3, #128	; 0x80
    2b4c:	24ff      	movs	r4, #255	; 0xff
    2b4e:	22c0      	movs	r2, #192	; 0xc0
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b50:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2b52:	f88d 300c 	strb.w	r3, [sp, #12]
    2b56:	f88d 400d 	strb.w	r4, [sp, #13]
    2b5a:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b5e:	f7ff f999 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2b62:	b007      	add	sp, #28
    2b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b68:	4b41      	ldr	r3, [pc, #260]	; (2c70 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2ac>)
    2b6a:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    2b6e:	fb83 2306 	smull	r2, r3, r3, r6
    2b72:	ebca 0a63 	rsb	sl, sl, r3, asr #1
    2b76:	4455      	add	r5, sl
					break;
				case 3:
					GenerateSinelons(leds, indexes, numLeds, 3, index);
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
    2b78:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2b7c:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
			{
				for (int i = 0; i < numSinelons; i++)
				{
					int hue = gHue + (int)((255 / numSinelons) * i);

					uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    2b80:	fb95 f2f6 	sdiv	r2, r5, r6
    2b84:	fb06 5212 	mls	r2, r6, r2, r5
    2b88:	697b      	ldr	r3, [r7, #20]
					leds[index] = CHSV(hue, 255, 192);
    2b8a:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    2b8e:	f88d b016 	strb.w	fp, [sp, #22]
    2b92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2b96:	444b      	add	r3, r9
    2b98:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2b9c:	4421      	add	r1, r4
    2b9e:	f109 0933 	add.w	r9, r9, #51	; 0x33
    2ba2:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2ba4:	f88d 2015 	strb.w	r2, [sp, #21]
    2ba8:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2bac:	f7ff f972 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				}
			}

			void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
			{
				for (int i = 0; i < numSinelons; i++)
    2bb0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2bb4:	4455      	add	r5, sl
    2bb6:	d1e3      	bne.n	2b80 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x1bc>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2bb8:	b007      	add	sp, #28
    2bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bbe:	4b2d      	ldr	r3, [pc, #180]	; (2c74 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2b0>)
    2bc0:	fb83 3a06 	smull	r3, sl, r3, r6
    2bc4:	ebaa 7ae6 	sub.w	sl, sl, r6, asr #31
    2bc8:	4455      	add	r5, sl
				}
				case 2:
					GenerateSinelons(leds, indexes, numLeds, 2, index);
					break;
				case 3:
					GenerateSinelons(leds, indexes, numLeds, 3, index);
    2bca:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2bce:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
			{
				for (int i = 0; i < numSinelons; i++)
				{
					int hue = gHue + (int)((255 / numSinelons) * i);

					uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    2bd2:	fb95 f2f6 	sdiv	r2, r5, r6
    2bd6:	fb06 5212 	mls	r2, r6, r2, r5
    2bda:	697b      	ldr	r3, [r7, #20]
					leds[index] = CHSV(hue, 255, 192);
    2bdc:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    2be0:	f88d b016 	strb.w	fp, [sp, #22]
    2be4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2be8:	444b      	add	r3, r9
    2bea:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2bee:	4421      	add	r1, r4
    2bf0:	f109 0955 	add.w	r9, r9, #85	; 0x55
    2bf4:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2bf6:	f88d 2015 	strb.w	r2, [sp, #21]
    2bfa:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2bfe:	f7ff f949 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				}
			}

			void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
			{
				for (int i = 0; i < numSinelons; i++)
    2c02:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2c06:	4455      	add	r5, sl
    2c08:	d1e3      	bne.n	2bd2 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x20e>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2c0a:	b007      	add	sp, #28
    2c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c10:	eb06 7ad6 	add.w	sl, r6, r6, lsr #31
    2c14:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    2c18:	4455      	add	r5, sl
					uint16_t oppositeIndex = indexes[(numLeds - 1) - (beatsin16(8, 0, numLeds - 1))];
					leds[oppositeIndex] = CHSV(gHue + 128, 255, 192);
					break;
				}
				case 2:
					GenerateSinelons(leds, indexes, numLeds, 2, index);
    2c1a:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2c1e:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
			{
				for (int i = 0; i < numSinelons; i++)
				{
					int hue = gHue + (int)((255 / numSinelons) * i);

					uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    2c22:	fb95 f2f6 	sdiv	r2, r5, r6
    2c26:	fb06 5212 	mls	r2, r6, r2, r5
    2c2a:	697b      	ldr	r3, [r7, #20]
					leds[index] = CHSV(hue, 255, 192);
    2c2c:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    2c30:	f88d b016 	strb.w	fp, [sp, #22]
    2c34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2c38:	444b      	add	r3, r9
    2c3a:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2c3e:	4421      	add	r1, r4
    2c40:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    2c44:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2c46:	f88d 2015 	strb.w	r2, [sp, #21]
    2c4a:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2c4e:	f7ff f921 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				}
			}

			void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
			{
				for (int i = 0; i < numSinelons; i++)
    2c52:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
    2c56:	4455      	add	r5, sl
    2c58:	d1e3      	bne.n	2c22 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x25e>
					break;
				case 4:
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}
    2c5a:	b007      	add	sp, #28
    2c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c60:	41e00000 	.word	0x41e00000
    2c64:	447fc000 	.word	0x447fc000
    2c68:	1fffd39c 	.word	0x1fffd39c
    2c6c:	000085d8 	.word	0x000085d8
    2c70:	66666667 	.word	0x66666667
    2c74:	55555556 	.word	0x55555556
    2c78:	000085b4 	.word	0x000085b4

00002c7c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)>:

			void Bpm(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c80:	4db3      	ldr	r5, [pc, #716]	; (2f50 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2d4>)
    2c82:	4cb4      	ldr	r4, [pc, #720]	; (2f54 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2d8>)
    2c84:	682d      	ldr	r5, [r5, #0]
    2c86:	b0d3      	sub	sp, #332	; 0x14c
    2c88:	4683      	mov	fp, r0
    2c8a:	9509      	str	r5, [sp, #36]	; 0x24
	return ret;
    2c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2c8e:	9207      	str	r2, [sp, #28]
    2c90:	fb04 f000 	mul.w	r0, r4, r0
    2c94:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    2c96:	b2c4      	uxtb	r4, r0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2c98:	2504      	movs	r5, #4
					GenerateSinelons(leds, indexes, numLeds, 5, index);
					break;
				}
			}

			void Bpm(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2c9a:	468a      	mov	sl, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2c9c:	0661      	lsls	r1, r4, #25
    2c9e:	9306      	str	r3, [sp, #24]

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2ca0:	f8cb 500c 	str.w	r5, [fp, #12]
    2ca4:	f140 80f7 	bpl.w	2e96 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x21a>
        offset = (uint8_t)255 - offset;
    2ca8:	43e3      	mvns	r3, r4
    2caa:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2cac:	f003 040f 	and.w	r4, r3, #15
    if( theta & 0x40) secoffset++;
    2cb0:	3401      	adds	r4, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2cb6:	49a8      	ldr	r1, [pc, #672]	; (2f58 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2dc>)
    2cb8:	111b      	asrs	r3, r3, #4
    2cba:	005b      	lsls	r3, r3, #1
    2cbc:	18ca      	adds	r2, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2cbe:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    2cc0:	7852      	ldrb	r2, [r2, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2cc2:	fb12 f204 	smulbb	r2, r2, r4
    2cc6:	eb03 1322 	add.w	r3, r3, r2, asr #4
    2cca:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    2ccc:	0602      	lsls	r2, r0, #24
    2cce:	bf48      	it	mi
    2cd0:	425b      	negmi	r3, r3
    2cd2:	b25b      	sxtb	r3, r3

    y += 128;
    2cd4:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    2cd6:	b2db      	uxtb	r3, r3
    2cd8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2cdc:	f8db 001c 	ldr.w	r0, [fp, #28]
    2ce0:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    2ce4:	f003 fd76 	bl	67d4 <__aeabi_i2f>
    2ce8:	499c      	ldr	r1, [pc, #624]	; (2f5c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2e0>)
    2cea:	f003 fdc7 	bl	687c <__aeabi_fmul>
    2cee:	499c      	ldr	r1, [pc, #624]	; (2f60 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2e4>)
    2cf0:	f003 fe78 	bl	69e4 <__aeabi_fdiv>
    2cf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2cf8:	f003 fcb8 	bl	666c <__addsf3>
    2cfc:	f003 ff84 	bl	6c08 <__aeabi_f2iz>
				SetNumModes(4);

				int bpm = 60;
				int beat = beatsin8(bpm, 63, 255);
				int multiplier = GetAnalogPattern(2, 12);
				for (int i = 0; i < numLeds; i++)
    2d00:	9b06      	ldr	r3, [sp, #24]
    2d02:	122d      	asrs	r5, r5, #8
    2d04:	353f      	adds	r5, #63	; 0x3f
    2d06:	2b00      	cmp	r3, #0
    2d08:	b2ed      	uxtb	r5, r5
    2d0a:	f340 80ac 	ble.w	2e66 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1ea>
    2d0e:	b2c3      	uxtb	r3, r0
    2d10:	9305      	str	r3, [sp, #20]
    2d12:	9a06      	ldr	r2, [sp, #24]
    2d14:	9b07      	ldr	r3, [sp, #28]
    2d16:	4698      	mov	r8, r3
    2d18:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    2d1c:	9304      	str	r3, [sp, #16]
    2d1e:	2700      	movs	r7, #0
    2d20:	ac22      	add	r4, sp, #136	; 0x88
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
    2d22:	f838 6b02 	ldrh.w	r6, [r8], #2
    2d26:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    2d2a:	9303      	str	r3, [sp, #12]
    2d2c:	eb0a 0903 	add.w	r9, sl, r3
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2d30:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    2d32:	2b00      	cmp	r3, #0
    2d34:	f2c0 80ab 	blt.w	2e8e <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x212>
    2d38:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    2d3a:	f8db 1008 	ldr.w	r1, [fp, #8]
    2d3e:	f8db 300c 	ldr.w	r3, [fp, #12]
    2d42:	4411      	add	r1, r2
    2d44:	3301      	adds	r3, #1
    2d46:	fb91 f2f3 	sdiv	r2, r1, r3
    2d4a:	fb03 1312 	mls	r3, r3, r2, r1
    2d4e:	4a85      	ldr	r2, [pc, #532]	; (2f64 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2e8>)
    2d50:	fba2 2103 	umull	r2, r1, r2, r3
    2d54:	0889      	lsrs	r1, r1, #2
    2d56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2d5a:	1a59      	subs	r1, r3, r1
    2d5c:	ab16      	add	r3, sp, #88	; 0x58
    2d5e:	f8df e20c 	ldr.w	lr, [pc, #524]	; 2f6c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2f0>
    2d62:	9e03      	ldr	r6, [sp, #12]
    2d64:	461a      	mov	r2, r3
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2d66:	f85e 0f04 	ldr.w	r0, [lr, #4]!
    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    2d6a:	7090      	strb	r0, [r2, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2d6c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2d70:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2d72:	f882 c000 	strb.w	ip, [r2]
        g = (colorcode >>  8) & 0xFF;
    2d76:	7050      	strb	r0, [r2, #1]
    2d78:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2d7a:	42a2      	cmp	r2, r4
    2d7c:	d1f3      	bne.n	2d66 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xea>
    2d7e:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 2f70 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2f4>
    2d82:	aa16      	add	r2, sp, #88	; 0x58
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2d84:	f85e 0f04 	ldr.w	r0, [lr, #4]!
        b = (colorcode >>  0) & 0xFF;
    2d88:	f882 0032 	strb.w	r0, [r2, #50]	; 0x32
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2d8c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2d90:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2d92:	f882 c030 	strb.w	ip, [r2, #48]	; 0x30
        g = (colorcode >>  8) & 0xFF;
    2d96:	f882 0031 	strb.w	r0, [r2, #49]	; 0x31
    2d9a:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2d9c:	42a2      	cmp	r2, r4
    2d9e:	d1f1      	bne.n	2d84 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x108>
    2da0:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 2f74 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2f8>
    2da4:	aa16      	add	r2, sp, #88	; 0x58
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2da6:	f85e 0f04 	ldr.w	r0, [lr, #4]!
        b = (colorcode >>  0) & 0xFF;
    2daa:	f882 0062 	strb.w	r0, [r2, #98]	; 0x62
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2dae:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2db2:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2db4:	f882 c060 	strb.w	ip, [r2, #96]	; 0x60
        g = (colorcode >>  8) & 0xFF;
    2db8:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    2dbc:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2dbe:	42a2      	cmp	r2, r4
    2dc0:	d1f1      	bne.n	2da6 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x12a>
    2dc2:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 2f78 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2fc>
    2dc6:	aa16      	add	r2, sp, #88	; 0x58
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2dc8:	f85e 0f04 	ldr.w	r0, [lr, #4]!
        b = (colorcode >>  0) & 0xFF;
    2dcc:	f882 0092 	strb.w	r0, [r2, #146]	; 0x92
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2dd0:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2dd4:	0a00      	lsrs	r0, r0, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2dd6:	f882 c090 	strb.w	ip, [r2, #144]	; 0x90
        g = (colorcode >>  8) & 0xFF;
    2dda:	f882 0091 	strb.w	r0, [r2, #145]	; 0x91
    2dde:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2de0:	42a2      	cmp	r2, r4
    2de2:	d1f1      	bne.n	2dc8 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x14c>
    2de4:	4860      	ldr	r0, [pc, #384]	; (2f68 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2ec>)
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2de6:	f850 2f04 	ldr.w	r2, [r0, #4]!
        b = (colorcode >>  0) & 0xFF;
    2dea:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2dee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2df2:	0a12      	lsrs	r2, r2, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2df4:	f883 e0c0 	strb.w	lr, [r3, #192]	; 0xc0
        g = (colorcode >>  8) & 0xFF;
    2df8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    2dfc:	3303      	adds	r3, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2dfe:	429c      	cmp	r4, r3
    2e00:	d1f1      	bne.n	2de6 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x16a>
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    2e02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2e06:	ab16      	add	r3, sp, #88	; 0x58
    2e08:	eb03 1e01 	add.w	lr, r3, r1, lsl #4
    2e0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2e10:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
    2e14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2e1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2e20:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    2e24:	9603      	str	r6, [sp, #12]
				int bpm = 60;
				int beat = beatsin8(bpm, 63, 255);
				int multiplier = GetAnalogPattern(2, 12);
				for (int i = 0; i < numLeds; i++)
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
    2e26:	2601      	movs	r6, #1
    2e28:	9600      	str	r6, [sp, #0]
    2e2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    2e2e:	462b      	mov	r3, r5
    2e30:	463a      	mov	r2, r7
    2e32:	a90a      	add	r1, sp, #40	; 0x28
    2e34:	a816      	add	r0, sp, #88	; 0x58
    2e36:	f7fe ff0b 	bl	1c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2e3a:	9b05      	ldr	r3, [sp, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e3c:	9803      	ldr	r0, [sp, #12]
    2e3e:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
    2e42:	f80a 1000 	strb.w	r1, [sl, r0]
    2e46:	441f      	add	r7, r3
        g = rhs.g;
        b = rhs.b;
    2e48:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    2e4c:	f889 3002 	strb.w	r3, [r9, #2]
				SetNumModes(4);

				int bpm = 60;
				int beat = beatsin8(bpm, 63, 255);
				int multiplier = GetAnalogPattern(2, 12);
				for (int i = 0; i < numLeds; i++)
    2e50:	9b04      	ldr	r3, [sp, #16]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2e52:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    2e56:	f889 2001 	strb.w	r2, [r9, #1]
    2e5a:	3d0a      	subs	r5, #10
    2e5c:	4598      	cmp	r8, r3
    2e5e:	b2ff      	uxtb	r7, r7
    2e60:	b2ed      	uxtb	r5, r5
    2e62:	f47f af5e 	bne.w	2d22 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xa6>
    2e66:	f89b 0031 	ldrb.w	r0, [fp, #49]	; 0x31
    2e6a:	f89b 1032 	ldrb.w	r1, [fp, #50]	; 0x32
    2e6e:	f89b 2033 	ldrb.w	r2, [fp, #51]	; 0x33
    2e72:	f89b 5034 	ldrb.w	r5, [fp, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    2e76:	f89b 3030 	ldrb.w	r3, [fp, #48]	; 0x30
				if (gHue1) val++;
				if (gHue2) val++;
    2e7a:	b950      	cbnz	r0, 2e92 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x216>
    2e7c:	461c      	mov	r4, r3
				if (gHue3) val++;
    2e7e:	b101      	cbz	r1, 2e82 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x206>
    2e80:	3401      	adds	r4, #1
				if (gHue4) val++;
    2e82:	b96a      	cbnz	r2, 2ea0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x224>
				if (gHue5) val++;
    2e84:	b965      	cbnz	r5, 2ea0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x224>
				}
			}

			void BlendFromHue(CRGB leds[], uint16_t indexes[], int numLeds, byte amount = 127)
			{
				if (GetToggledHueCount() == 0) return;
    2e86:	b95c      	cbnz	r4, 2ea0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x224>
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
				}

				BlendFromHue(leds, indexes, numLeds);
			}
    2e88:	b053      	add	sp, #332	; 0x14c
    2e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2e8e:	2100      	movs	r1, #0
    2e90:	e764      	b.n	2d5c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xe0>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    2e92:	1c5c      	adds	r4, r3, #1
    2e94:	e7f3      	b.n	2e7e <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x202>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2e96:	f004 033f 	and.w	r3, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2e9a:	f004 040f 	and.w	r4, r4, #15
    2e9e:	e70a      	b.n	2cb6 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x3a>
    2ea0:	b100      	cbz	r0, 2ea4 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x228>
    2ea2:	3301      	adds	r3, #1
				if (gHue3) val++;
    2ea4:	b101      	cbz	r1, 2ea8 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x22c>
    2ea6:	3301      	adds	r3, #1
				if (gHue4) val++;
    2ea8:	b102      	cbz	r2, 2eac <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x230>
    2eaa:	3301      	adds	r3, #1
				if (gHue5) val++;
    2eac:	b105      	cbz	r5, 2eb0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x234>
    2eae:	3301      	adds	r3, #1

			/// Return an arbitrary RGB color for a given number of toggled hue buttons. 
			/// This will be to add color to CRGBs, since they cannot have hue applied to them.
			CRGB GetRgbFromHue()
			{
				switch (GetToggledHueCount())
    2eb0:	3b01      	subs	r3, #1
    2eb2:	2b03      	cmp	r3, #3
    2eb4:	d843      	bhi.n	2f3e <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x2c2>
    2eb6:	e8df f003 	tbb	[pc, r3]
    2eba:	3039      	.short	0x3039
    2ebc:	0227      	.short	0x0227
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2ebe:	2300      	movs	r3, #0
    2ec0:	22ff      	movs	r2, #255	; 0xff
    2ec2:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    2ec6:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    2eca:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
				}
			}

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
    2ece:	9b06      	ldr	r3, [sp, #24]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	ddd9      	ble.n	2e88 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x20c>
    2ed4:	9c07      	ldr	r4, [sp, #28]
    2ed6:	9b06      	ldr	r3, [sp, #24]
    2ed8:	eb04 0643 	add.w	r6, r4, r3, lsl #1
				{
					CRGB led = leds[indexes[i]];
    2edc:	f834 3b02 	ldrh.w	r3, [r4], #2
    2ee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					if (led)
					{
						nblend(leds[indexes[i]], color, amount);
    2ee4:	227f      	movs	r2, #127	; 0x7f
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    2ee6:	f81a 5003 	ldrb.w	r5, [sl, r3]

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
				{
					CRGB led = leds[indexes[i]];
    2eea:	4453      	add	r3, sl
					if (led)
					{
						nblend(leds[indexes[i]], color, amount);
    2eec:	a916      	add	r1, sp, #88	; 0x58
    2eee:	4618      	mov	r0, r3
    2ef0:	b91d      	cbnz	r5, 2efa <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x27e>
    2ef2:	785d      	ldrb	r5, [r3, #1]
    2ef4:	b90d      	cbnz	r5, 2efa <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x27e>
    2ef6:	789b      	ldrb	r3, [r3, #2]
    2ef8:	b10b      	cbz	r3, 2efe <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x282>
    2efa:	f7fe fe6d 	bl	1bd8 <nblend(CRGB&, CRGB const&, unsigned char)>
				}
			}

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
    2efe:	42a6      	cmp	r6, r4
    2f00:	d1ec      	bne.n	2edc <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x260>
				{
					leds[indexes[i]] = ColorFromPalette(GetPalette(GetModeNumber(modeOffset)), i * multiplier, beat - (i * 10));
				}

				BlendFromHue(leds, indexes, numLeds);
			}
    2f02:	b053      	add	sp, #332	; 0x14c
    2f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2f08:	2300      	movs	r3, #0
    2f0a:	22ff      	movs	r2, #255	; 0xff
    2f0c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2f10:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    2f14:	f88d 205a 	strb.w	r2, [sp, #90]	; 0x5a
    2f18:	e7d9      	b.n	2ece <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2f1a:	2300      	movs	r3, #0
    2f1c:	2280      	movs	r2, #128	; 0x80
    2f1e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2f22:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    2f26:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
    2f2a:	e7d0      	b.n	2ece <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2f2c:	2380      	movs	r3, #128	; 0x80
    2f2e:	2200      	movs	r2, #0
    2f30:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2f34:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    2f38:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
    2f3c:	e7c7      	b.n	2ece <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2f3e:	2300      	movs	r3, #0
    2f40:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    2f44:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
    2f48:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    2f4c:	e7bf      	b.n	2ece <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x252>
    2f4e:	bf00      	nop
    2f50:	1fffd39c 	.word	0x1fffd39c
    2f54:	0041a000 	.word	0x0041a000
    2f58:	000085c4 	.word	0x000085c4
    2f5c:	41200000 	.word	0x41200000
    2f60:	447fc000 	.word	0x447fc000
    2f64:	cccccccd 	.word	0xcccccccd
    2f68:	00008420 	.word	0x00008420
    2f6c:	00008460 	.word	0x00008460
    2f70:	00008520 	.word	0x00008520
    2f74:	000084a0 	.word	0x000084a0
    2f78:	000084e0 	.word	0x000084e0

00002f7c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)>:
				}

				delay(speedDelay);
			}

			void RunningLights(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f80:	4605      	mov	r5, r0
    2f82:	b08b      	sub	sp, #44	; 0x2c

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    2f84:	2005      	movs	r0, #5
    2f86:	60e8      	str	r0, [r5, #12]
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2f88:	69e8      	ldr	r0, [r5, #28]
				}

				delay(speedDelay);
			}

			void RunningLights(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2f8a:	9205      	str	r2, [sp, #20]
    2f8c:	461e      	mov	r6, r3
    2f8e:	4617      	mov	r7, r2
    2f90:	460c      	mov	r4, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2f92:	f003 fc1f 	bl	67d4 <__aeabi_i2f>
    2f96:	499e      	ldr	r1, [pc, #632]	; (3210 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x294>)
    2f98:	f003 fc70 	bl	687c <__aeabi_fmul>
    2f9c:	499d      	ldr	r1, [pc, #628]	; (3214 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x298>)
    2f9e:	f003 fd21 	bl	69e4 <__aeabi_fdiv>
    2fa2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
    2fa6:	f003 fb61 	bl	666c <__addsf3>
    2faa:	f003 fe2d 	bl	6c08 <__aeabi_f2iz>
				byte blue = 100;

				int frequency = 2;
				int length = GetAnalogPattern(4, 40);

				for (int i = 0; i < numLeds; i++)
    2fae:	2e00      	cmp	r6, #0
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2fb0:	9004      	str	r0, [sp, #16]
				byte blue = 100;

				int frequency = 2;
				int length = GetAnalogPattern(4, 40);

				for (int i = 0; i < numLeds; i++)
    2fb2:	f340 812a 	ble.w	320a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x28e>
    2fb6:	23b4      	movs	r3, #180	; 0xb4
    2fb8:	463a      	mov	r2, r7
    2fba:	9302      	str	r3, [sp, #8]
    2fbc:	e88d 000c 	stmia.w	sp, {r2, r3}
    2fc0:	2364      	movs	r3, #100	; 0x64
    2fc2:	eb07 0646 	add.w	r6, r7, r6, lsl #1
    2fc6:	9303      	str	r3, [sp, #12]
    2fc8:	2700      	movs	r7, #0
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    2fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2fcc:	2b00      	cmp	r3, #0
    2fce:	f2c0 8227 	blt.w	3420 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4a4>
					float redSin;
					float greenSin;
					float blueSin;

					// Modes
					switch (GetModeNumber(modeOffset))
    2fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2fd4:	68a9      	ldr	r1, [r5, #8]
    2fd6:	68eb      	ldr	r3, [r5, #12]
    2fd8:	4411      	add	r1, r2
    2fda:	3301      	adds	r3, #1
    2fdc:	fb91 f2f3 	sdiv	r2, r1, r3
    2fe0:	fb03 1312 	mls	r3, r3, r2, r1
    2fe4:	3b01      	subs	r3, #1
    2fe6:	2b04      	cmp	r3, #4
    2fe8:	f200 821a 	bhi.w	3420 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4a4>
    2fec:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ff0:	0159017f 	.word	0x0159017f
    2ff4:	0118019a 	.word	0x0118019a
    2ff8:	0005      	.short	0x0005
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
						break;
					}
					case 5:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    2ffa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    2ffc:	f003 fbea 	bl	67d4 <__aeabi_i2f>
    3000:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3004:	f003 fc3a 	bl	687c <__aeabi_fmul>
    3008:	4682      	mov	sl, r0
    300a:	4638      	mov	r0, r7
    300c:	f003 fbe2 	bl	67d4 <__aeabi_i2f>
    3010:	4651      	mov	r1, sl
    3012:	f003 fb2b 	bl	666c <__addsf3>
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    3016:	2f00      	cmp	r7, #0
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
						break;
					}
					case 5:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    3018:	4681      	mov	r9, r0
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    301a:	4638      	mov	r0, r7
    301c:	bfb8      	it	lt
    301e:	1cf8      	addlt	r0, r7, #3
    3020:	1080      	asrs	r0, r0, #2
    3022:	f003 fbd7 	bl	67d4 <__aeabi_i2f>
    3026:	4651      	mov	r1, sl
    3028:	f003 fb1e 	bl	6668 <__aeabi_fsub>
    302c:	4680      	mov	r8, r0
						blueSin = (i * length / 2) + (gFrame / (float)frequency / 2);
    302e:	eb07 70d7 	add.w	r0, r7, r7, lsr #31
    3032:	1040      	asrs	r0, r0, #1
    3034:	f003 fbce 	bl	67d4 <__aeabi_i2f>
    3038:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    303c:	4683      	mov	fp, r0
    303e:	4650      	mov	r0, sl
    3040:	f003 fc1c 	bl	687c <__aeabi_fmul>
    3044:	4601      	mov	r1, r0
    3046:	4658      	mov	r0, fp
    3048:	f003 fb10 	bl	666c <__addsf3>
    304c:	4682      	mov	sl, r0
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    304e:	2100      	movs	r1, #0
    3050:	4648      	mov	r0, r9
    3052:	f003 fdcf 	bl	6bf4 <__aeabi_fcmpgt>
    3056:	2800      	cmp	r0, #0
    3058:	f000 810e 	beq.w	3278 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2fc>
    305c:	4648      	mov	r0, r9
    305e:	f003 fdf9 	bl	6c54 <__aeabi_f2uiz>
    3062:	b2c0      	uxtb	r0, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3064:	0641      	lsls	r1, r0, #25
    3066:	f140 817c 	bpl.w	3362 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3e6>
        offset = (uint8_t)255 - offset;
    306a:	43c2      	mvns	r2, r0
    306c:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    306e:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    3072:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3074:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    3078:	4967      	ldr	r1, [pc, #412]	; (3218 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x29c>)
    307a:	1112      	asrs	r2, r2, #4
    307c:	0052      	lsls	r2, r2, #1
    307e:	eb01 0e02 	add.w	lr, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3082:	5c8a      	ldrb	r2, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    3084:	f89e 1001 	ldrb.w	r1, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3088:	fb11 f303 	smulbb	r3, r1, r3
    308c:	eb02 1323 	add.w	r3, r2, r3, asr #4
    3090:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    3092:	0602      	lsls	r2, r0, #24
    3094:	bf4a      	itet	mi
    3096:	4258      	negmi	r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3098:	b258      	sxtbpl	r0, r3
    if( theta & 0x80 ) y = -y;
    309a:	b240      	sxtbmi	r0, r0
    309c:	3880      	subs	r0, #128	; 0x80
    309e:	b2c0      	uxtb	r0, r0
    30a0:	f003 fb98 	bl	67d4 <__aeabi_i2f>
    30a4:	495d      	ldr	r1, [pc, #372]	; (321c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2a0>)
    30a6:	f003 fc9d 	bl	69e4 <__aeabi_fdiv>
    30aa:	4681      	mov	r9, r0
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    30ac:	2100      	movs	r1, #0
    30ae:	4640      	mov	r0, r8
    30b0:	f003 fda0 	bl	6bf4 <__aeabi_fcmpgt>
    30b4:	2800      	cmp	r0, #0
    30b6:	f000 80e8 	beq.w	328a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x30e>
    30ba:	4640      	mov	r0, r8
    30bc:	f003 fdca 	bl	6c54 <__aeabi_f2uiz>
    30c0:	b2c0      	uxtb	r0, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    30c2:	0643      	lsls	r3, r0, #25
    30c4:	f140 8157 	bpl.w	3376 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3fa>
        offset = (uint8_t)255 - offset;
    30c8:	43c2      	mvns	r2, r0
    30ca:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    30cc:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    30d0:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    30d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    30d6:	4950      	ldr	r1, [pc, #320]	; (3218 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x29c>)
    30d8:	1112      	asrs	r2, r2, #4
    30da:	0052      	lsls	r2, r2, #1
    30dc:	eb01 0e02 	add.w	lr, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    30e0:	5c8a      	ldrb	r2, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    30e2:	f89e 1001 	ldrb.w	r1, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    30e6:	fb11 f303 	smulbb	r3, r1, r3
    30ea:	eb02 1323 	add.w	r3, r2, r3, asr #4
    if( theta & 0x80 ) y = -y;
    30ee:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    30f0:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    30f2:	bf4a      	itet	mi
    30f4:	4258      	negmi	r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    30f6:	b258      	sxtbpl	r0, r3
    if( theta & 0x80 ) y = -y;
    30f8:	b240      	sxtbmi	r0, r0
    30fa:	3880      	subs	r0, #128	; 0x80
    30fc:	b2c0      	uxtb	r0, r0
    30fe:	f003 fb69 	bl	67d4 <__aeabi_i2f>
    3102:	4946      	ldr	r1, [pc, #280]	; (321c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2a0>)
    3104:	f003 fc6e 	bl	69e4 <__aeabi_fdiv>
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    3108:	2100      	movs	r1, #0
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    310a:	4680      	mov	r8, r0
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    310c:	4650      	mov	r0, sl
    310e:	f003 fd71 	bl	6bf4 <__aeabi_fcmpgt>
    3112:	2800      	cmp	r0, #0
    3114:	f000 80c2 	beq.w	329c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x320>
    3118:	4650      	mov	r0, sl
    311a:	f003 fd9b 	bl	6c54 <__aeabi_f2uiz>
    311e:	b2c0      	uxtb	r0, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3120:	0641      	lsls	r1, r0, #25
    3122:	f140 8123 	bpl.w	336c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3f0>
        offset = (uint8_t)255 - offset;
    3126:	43c2      	mvns	r2, r0
    3128:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    312a:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    312e:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3130:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    3134:	4938      	ldr	r1, [pc, #224]	; (3218 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x29c>)
    3136:	1112      	asrs	r2, r2, #4
    3138:	0052      	lsls	r2, r2, #1
    313a:	eb01 0e02 	add.w	lr, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    313e:	5c8a      	ldrb	r2, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    3140:	f89e 1001 	ldrb.w	r1, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3144:	fb11 f303 	smulbb	r3, r1, r3
    3148:	eb02 1323 	add.w	r3, r2, r3, asr #4
    314c:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    314e:	0602      	lsls	r2, r0, #24
    3150:	bf4a      	itet	mi
    3152:	4258      	negmi	r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3154:	b258      	sxtbpl	r0, r3
    if( theta & 0x80 ) y = -y;
    3156:	b240      	sxtbmi	r0, r0
    3158:	3880      	subs	r0, #128	; 0x80
    315a:	b2c0      	uxtb	r0, r0
    315c:	f003 fb3a 	bl	67d4 <__aeabi_i2f>
    3160:	492e      	ldr	r1, [pc, #184]	; (321c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2a0>)
    3162:	f003 fc3f 	bl	69e4 <__aeabi_fdiv>
    3166:	4683      	mov	fp, r0

					leds[indexes[i]] = CRGB(red * redMult, green * greenMult, blue * blueMult);
    3168:	9b00      	ldr	r3, [sp, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    316a:	9801      	ldr	r0, [sp, #4]
    316c:	f833 ab02 	ldrh.w	sl, [r3], #2
    3170:	9300      	str	r3, [sp, #0]
    3172:	f003 fb2f 	bl	67d4 <__aeabi_i2f>
    3176:	4649      	mov	r1, r9
    3178:	f003 fb80 	bl	687c <__aeabi_fmul>
    317c:	f003 fd6a 	bl	6c54 <__aeabi_f2uiz>
    3180:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    3184:	f804 000a 	strb.w	r0, [r4, sl]
        g = rhs.g;
    3188:	9802      	ldr	r0, [sp, #8]
    318a:	f003 fb23 	bl	67d4 <__aeabi_i2f>
    318e:	4641      	mov	r1, r8
    3190:	f003 fb74 	bl	687c <__aeabi_fmul>
    3194:	f003 fd5e 	bl	6c54 <__aeabi_f2uiz>
    3198:	44a2      	add	sl, r4
    319a:	f88a 0001 	strb.w	r0, [sl, #1]
        b = rhs.b;
    319e:	9803      	ldr	r0, [sp, #12]
    31a0:	f003 fb18 	bl	67d4 <__aeabi_i2f>
    31a4:	4659      	mov	r1, fp
    31a6:	f003 fb69 	bl	687c <__aeabi_fmul>
    31aa:	f003 fd53 	bl	6c54 <__aeabi_f2uiz>
    31ae:	f88a 0002 	strb.w	r0, [sl, #2]
    31b2:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    31b6:	f895 e031 	ldrb.w	lr, [r5, #49]	; 0x31
    31ba:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
    31be:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    31c2:	f895 c034 	ldrb.w	ip, [r5, #52]	; 0x34
			}

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
    31c6:	4613      	mov	r3, r2
				if (gHue1) val++;
				if (gHue2) val++;
    31c8:	f1be 0f00 	cmp.w	lr, #0
    31cc:	d000      	beq.n	31d0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x254>
    31ce:	1c53      	adds	r3, r2, #1
				if (gHue3) val++;
    31d0:	b101      	cbz	r1, 31d4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x258>
    31d2:	3301      	adds	r3, #1
				if (gHue4) val++;
    31d4:	b170      	cbz	r0, 31f4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x278>

			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
    31d6:	2a00      	cmp	r2, #0
    31d8:	f040 80d5 	bne.w	3386 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x40a>
				if (gHue2) val++;
    31dc:	f1be 0f00 	cmp.w	lr, #0
    31e0:	f000 80ce 	beq.w	3380 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x404>
    31e4:	2301      	movs	r3, #1
				if (gHue3) val++;
    31e6:	b101      	cbz	r1, 31ea <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26e>
    31e8:	3301      	adds	r3, #1
				if (gHue4) val++;
    31ea:	2800      	cmp	r0, #0
    31ec:	f000 80d2 	beq.w	3394 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x418>
    31f0:	3301      	adds	r3, #1
    31f2:	e0cf      	b.n	3394 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x418>
				if (gHue5) val++;
    31f4:	f1bc 0f00 	cmp.w	ip, #0
    31f8:	d1ed      	bne.n	31d6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x25a>
				}
			}

			void BlendFromHue(CRGB leds[], uint16_t indexes[], int numLeds, byte amount = 127)
			{
				if (GetToggledHueCount() == 0) return;
    31fa:	2b00      	cmp	r3, #0
    31fc:	d1eb      	bne.n	31d6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x25a>
    31fe:	9b04      	ldr	r3, [sp, #16]
    3200:	441f      	add	r7, r3
				byte blue = 100;

				int frequency = 2;
				int length = GetAnalogPattern(4, 40);

				for (int i = 0; i < numLeds; i++)
    3202:	9b00      	ldr	r3, [sp, #0]
    3204:	42b3      	cmp	r3, r6
    3206:	f47f aee0 	bne.w	2fca <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4e>

					leds[indexes[i]] = CRGB(red * redMult, green * greenMult, blue * blueMult);

					BlendFromHue(leds, indexes, numLeds, 32);
				}
			}
    320a:	b00b      	add	sp, #44	; 0x2c
    320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3210:	42100000 	.word	0x42100000
    3214:	447fc000 	.word	0x447fc000
    3218:	000085c4 	.word	0x000085c4
    321c:	437f0000 	.word	0x437f0000
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
						break;
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    3220:	4638      	mov	r0, r7
    3222:	f003 fad7 	bl	67d4 <__aeabi_i2f>
    3226:	4683      	mov	fp, r0
    3228:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    322a:	f003 fad3 	bl	67d4 <__aeabi_i2f>
    322e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3232:	f003 fb23 	bl	687c <__aeabi_fmul>
    3236:	4682      	mov	sl, r0
    3238:	4601      	mov	r1, r0
    323a:	4658      	mov	r0, fp
    323c:	f003 fa16 	bl	666c <__addsf3>
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    3240:	2f00      	cmp	r7, #0
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
						break;
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
    3242:	4681      	mov	r9, r0
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    3244:	4638      	mov	r0, r7
    3246:	bfb8      	it	lt
    3248:	1cf8      	addlt	r0, r7, #3
    324a:	1080      	asrs	r0, r0, #2
    324c:	f003 fac2 	bl	67d4 <__aeabi_i2f>
    3250:	4651      	mov	r1, sl
    3252:	f003 fa09 	bl	6668 <__aeabi_fsub>
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
    3256:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
						break;
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
    325a:	4680      	mov	r8, r0
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
    325c:	4650      	mov	r0, sl
    325e:	f003 fb0d 	bl	687c <__aeabi_fmul>
    3262:	4659      	mov	r1, fp
    3264:	f003 fa02 	bl	666c <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    3268:	2100      	movs	r1, #0
					}
					case 4:
					{
						redSin = (i * length) + (gFrame / (float)frequency);
						greenSin = (i * length / 4) - (gFrame / (float)frequency);
						blueSin = (i * length) + (gFrame / (float)frequency / 2);
    326a:	4682      	mov	sl, r0
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    326c:	4648      	mov	r0, r9
    326e:	f003 fcc1 	bl	6bf4 <__aeabi_fcmpgt>
    3272:	2800      	cmp	r0, #0
    3274:	f47f aef2 	bne.w	305c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xe0>
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    3278:	2100      	movs	r1, #0
    327a:	4640      	mov	r0, r8
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    327c:	f04f 0900 	mov.w	r9, #0
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    3280:	f003 fcb8 	bl	6bf4 <__aeabi_fcmpgt>
    3284:	2800      	cmp	r0, #0
    3286:	f47f af18 	bne.w	30ba <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x13e>
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    328a:	2100      	movs	r1, #0
    328c:	4650      	mov	r0, sl
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
					float greenMult = greenSin > 0 ? (sin8(greenSin) / (float)255) : 0;
    328e:	f04f 0800 	mov.w	r8, #0
					float blueMult = blueSin > 0 ? (sin8(blueSin) / (float)255) : 0;
    3292:	f003 fcaf 	bl	6bf4 <__aeabi_fcmpgt>
    3296:	2800      	cmp	r0, #0
    3298:	f47f af3e 	bne.w	3118 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x19c>
    329c:	f04f 0b00 	mov.w	fp, #0
    32a0:	e762      	b.n	3168 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x1ec>
						blueSin = (i * length) + (gFrame / (float)frequency / 3);
						break;
					}
					case 2:
					{
						redSin = (i * length) + (gFrame / (float)frequency * 1.5);
    32a2:	4638      	mov	r0, r7
    32a4:	f003 fa96 	bl	67d4 <__aeabi_i2f>
    32a8:	4682      	mov	sl, r0
    32aa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    32ac:	f003 fa92 	bl	67d4 <__aeabi_i2f>
    32b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    32b4:	f003 fae2 	bl	687c <__aeabi_fmul>
    32b8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    32bc:	4683      	mov	fp, r0
    32be:	f003 fadd 	bl	687c <__aeabi_fmul>
    32c2:	4651      	mov	r1, sl
    32c4:	f003 f9d2 	bl	666c <__addsf3>
						greenSin = (i * length) + (gFrame / (float)frequency * 3);
    32c8:	49b0      	ldr	r1, [pc, #704]	; (358c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x610>)
						blueSin = (i * length) + (gFrame / (float)frequency / 3);
						break;
					}
					case 2:
					{
						redSin = (i * length) + (gFrame / (float)frequency * 1.5);
    32ca:	4681      	mov	r9, r0
						greenSin = (i * length) + (gFrame / (float)frequency * 3);
    32cc:	4658      	mov	r0, fp
    32ce:	f003 fad5 	bl	687c <__aeabi_fmul>
    32d2:	4651      	mov	r1, sl
    32d4:	f003 f9ca 	bl	666c <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency / 1.5);
    32d8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
						break;
					}
					case 2:
					{
						redSin = (i * length) + (gFrame / (float)frequency * 1.5);
						greenSin = (i * length) + (gFrame / (float)frequency * 3);
    32dc:	4680      	mov	r8, r0
						blueSin = (i * length) + (gFrame / (float)frequency / 1.5);
    32de:	4658      	mov	r0, fp
    32e0:	f003 fb80 	bl	69e4 <__aeabi_fdiv>
    32e4:	4651      	mov	r1, sl
    32e6:	f003 f9c1 	bl	666c <__addsf3>
    32ea:	4682      	mov	sl, r0
						break;
    32ec:	e6af      	b.n	304e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xd2>
					// Modes
					switch (GetModeNumber(modeOffset))
					{
					case 1:
					{
						redSin = (i * length) + (gFrame / (float)frequency / 1.5);
    32ee:	4638      	mov	r0, r7
    32f0:	f003 fa70 	bl	67d4 <__aeabi_i2f>
    32f4:	4682      	mov	sl, r0
    32f6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    32f8:	f003 fa6c 	bl	67d4 <__aeabi_i2f>
    32fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    3300:	f003 fabc 	bl	687c <__aeabi_fmul>
    3304:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3308:	4683      	mov	fp, r0
    330a:	f003 fb6b 	bl	69e4 <__aeabi_fdiv>
    330e:	4651      	mov	r1, sl
    3310:	f003 f9ac 	bl	666c <__addsf3>
						greenSin = (i * length) + (gFrame / (float)frequency);
    3314:	4659      	mov	r1, fp
					// Modes
					switch (GetModeNumber(modeOffset))
					{
					case 1:
					{
						redSin = (i * length) + (gFrame / (float)frequency / 1.5);
    3316:	4681      	mov	r9, r0
						greenSin = (i * length) + (gFrame / (float)frequency);
    3318:	4650      	mov	r0, sl
    331a:	f003 f9a7 	bl	666c <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency / 3);
    331e:	499b      	ldr	r1, [pc, #620]	; (358c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x610>)
					switch (GetModeNumber(modeOffset))
					{
					case 1:
					{
						redSin = (i * length) + (gFrame / (float)frequency / 1.5);
						greenSin = (i * length) + (gFrame / (float)frequency);
    3320:	4680      	mov	r8, r0
    3322:	e7dc      	b.n	32de <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x362>
						blueSin = (i * length) + (gFrame / (float)frequency / 1.5);
						break;
					}
					case 3:
					{
						redSin = (i * length) - (gFrame / (float)frequency);
    3324:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    3326:	f003 fa55 	bl	67d4 <__aeabi_i2f>
    332a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    332e:	f003 faa5 	bl	687c <__aeabi_fmul>
    3332:	4682      	mov	sl, r0
    3334:	4638      	mov	r0, r7
    3336:	f003 fa4d 	bl	67d4 <__aeabi_i2f>
    333a:	4651      	mov	r1, sl
    333c:	f003 f994 	bl	6668 <__aeabi_fsub>
    3340:	4681      	mov	r9, r0
						greenSin = (i * length / 2) - (gFrame / (float)frequency);
    3342:	eb07 70d7 	add.w	r0, r7, r7, lsr #31
    3346:	1040      	asrs	r0, r0, #1
    3348:	f003 fa44 	bl	67d4 <__aeabi_i2f>
    334c:	4651      	mov	r1, sl
    334e:	4683      	mov	fp, r0
    3350:	f003 f98a 	bl	6668 <__aeabi_fsub>
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
    3354:	4659      	mov	r1, fp
						break;
					}
					case 3:
					{
						redSin = (i * length) - (gFrame / (float)frequency);
						greenSin = (i * length / 2) - (gFrame / (float)frequency);
    3356:	4680      	mov	r8, r0
						blueSin = (i * length / 2) + (gFrame / (float)frequency);
    3358:	4650      	mov	r0, sl
    335a:	f003 f987 	bl	666c <__addsf3>
    335e:	4682      	mov	sl, r0
						break;
    3360:	e675      	b.n	304e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xd2>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3362:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3366:	f000 030f 	and.w	r3, r0, #15
    336a:	e685      	b.n	3078 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xfc>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    336c:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3370:	f000 030f 	and.w	r3, r0, #15
    3374:	e6de      	b.n	3134 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x1b8>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3376:	f000 023f 	and.w	r2, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    337a:	f000 030f 	and.w	r3, r0, #15
    337e:	e6aa      	b.n	30d6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x15a>
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
    3380:	b131      	cbz	r1, 3390 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x414>
    3382:	2301      	movs	r3, #1
    3384:	e731      	b.n	31ea <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26e>
			/// Count and return the number of currently toggled hue values;
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
    3386:	f1be 0f00 	cmp.w	lr, #0
    338a:	d011      	beq.n	33b0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x434>
    338c:	2302      	movs	r3, #2
    338e:	e72a      	b.n	31e6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26a>
				if (gHue3) val++;
				if (gHue4) val++;
    3390:	b188      	cbz	r0, 33b6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x43a>
    3392:	2301      	movs	r3, #1
				if (gHue5) val++;
    3394:	f1bc 0f00 	cmp.w	ip, #0
    3398:	d000      	beq.n	339c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x420>
    339a:	3301      	adds	r3, #1

			/// Return an arbitrary RGB color for a given number of toggled hue buttons. 
			/// This will be to add color to CRGBs, since they cannot have hue applied to them.
			CRGB GetRgbFromHue()
			{
				switch (GetToggledHueCount())
    339c:	3b01      	subs	r3, #1
    339e:	2b03      	cmp	r3, #3
    33a0:	f200 80da 	bhi.w	3558 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5dc>
    33a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    33a8:	0033000b 	.word	0x0033000b
    33ac:	00e900e0 	.word	0x00e900e0
			int GetToggledHueCount()
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
    33b0:	b339      	cbz	r1, 3402 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x486>
    33b2:	2302      	movs	r3, #2
    33b4:	e719      	b.n	31ea <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x26e>
				if (gHue4) val++;
				if (gHue5) val++;
    33b6:	f1bc 0f00 	cmp.w	ip, #0
    33ba:	f000 80cd 	beq.w	3558 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5dc>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    33be:	2380      	movs	r3, #128	; 0x80
    33c0:	2200      	movs	r2, #0
    33c2:	f88d 3018 	strb.w	r3, [sp, #24]
    33c6:	f88d 301a 	strb.w	r3, [sp, #26]
    33ca:	f88d 2019 	strb.w	r2, [sp, #25]
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
				if (gHue4) val++;
    33ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
    33d2:	46a9      	mov	r9, r5

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
				{
					CRGB led = leds[indexes[i]];
    33d4:	f838 0b02 	ldrh.w	r0, [r8], #2
    33d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    33dc:	1823      	adds	r3, r4, r0
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    33de:	5c25      	ldrb	r5, [r4, r0]
					if (led)
					{
						nblend(leds[indexes[i]], color, amount);
    33e0:	2220      	movs	r2, #32
    33e2:	a906      	add	r1, sp, #24
    33e4:	4618      	mov	r0, r3
    33e6:	b935      	cbnz	r5, 33f6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x47a>
    33e8:	f893 e001 	ldrb.w	lr, [r3, #1]
    33ec:	f1be 0f00 	cmp.w	lr, #0
    33f0:	d101      	bne.n	33f6 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x47a>
    33f2:	789b      	ldrb	r3, [r3, #2]
    33f4:	b10b      	cbz	r3, 33fa <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x47e>
    33f6:	f7fe fbef 	bl	1bd8 <nblend(CRGB&, CRGB const&, unsigned char)>
				}
			}

			void BlendAll(CRGB leds[], uint16_t indexes[], int numLeds, CRGB color, byte amount = 127)
			{
				for (int i = 0; i < numLeds; i++)
    33fa:	45b0      	cmp	r8, r6
    33fc:	d1ea      	bne.n	33d4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x458>
    33fe:	464d      	mov	r5, r9
    3400:	e6fd      	b.n	31fe <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x282>
			{
				int val = 0;
				if (gHue1) val++;
				if (gHue2) val++;
				if (gHue3) val++;
				if (gHue4) val++;
    3402:	b108      	cbz	r0, 3408 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x48c>
    3404:	2302      	movs	r3, #2
    3406:	e7c5      	b.n	3394 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x418>
				if (gHue5) val++;
    3408:	f1bc 0f00 	cmp.w	ip, #0
    340c:	d0d7      	beq.n	33be <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x442>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    340e:	2300      	movs	r3, #0
    3410:	2280      	movs	r2, #128	; 0x80
    3412:	f88d 3018 	strb.w	r3, [sp, #24]
    3416:	f88d 301a 	strb.w	r3, [sp, #26]
    341a:	f88d 2019 	strb.w	r2, [sp, #25]
    341e:	e7d6      	b.n	33ce <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3420:	4b5b      	ldr	r3, [pc, #364]	; (3590 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x614>)
    3422:	681b      	ldr	r3, [r3, #0]
    3424:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3426:	9a09      	ldr	r2, [sp, #36]	; 0x24
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
                            uint32_t timebase = 0, uint8_t phase_offset = 0)
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    3428:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
    342c:	fb03 f302 	mul.w	r3, r3, r2
    3430:	0e1b      	lsrs	r3, r3, #24
    3432:	f083 0380 	eor.w	r3, r3, #128	; 0x80
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3436:	0658      	lsls	r0, r3, #25
    3438:	f140 8089 	bpl.w	354e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5d2>
        offset = (uint8_t)255 - offset;
    343c:	43da      	mvns	r2, r3
    343e:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3440:	f002 010f 	and.w	r1, r2, #15
    if( theta & 0x40) secoffset++;
    3444:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3446:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    344a:	4852      	ldr	r0, [pc, #328]	; (3594 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x618>)
    344c:	1112      	asrs	r2, r2, #4
    344e:	0052      	lsls	r2, r2, #1
    3450:	eb00 0c02 	add.w	ip, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3454:	f810 e002 	ldrb.w	lr, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    3458:	f89c 2001 	ldrb.w	r2, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    345c:	fb12 f201 	smulbb	r2, r2, r1
    3460:	eb0e 1222 	add.w	r2, lr, r2, asr #4
    if( theta & 0x80 ) y = -y;
    3464:	0619      	lsls	r1, r3, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3466:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    3468:	bf48      	it	mi
    346a:	4252      	negmi	r2, r2
    346c:	b253      	sxtb	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    346e:	4a48      	ldr	r2, [pc, #288]	; (3590 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x614>)
    3470:	6812      	ldr	r2, [r2, #0]
    3472:	9208      	str	r2, [sp, #32]
	return ret;
    3474:	9908      	ldr	r1, [sp, #32]
    3476:	f44f 128c 	mov.w	r2, #1146880	; 0x118000
    347a:	fb02 f201 	mul.w	r2, r2, r1
    347e:	0e12      	lsrs	r2, r2, #24
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3480:	3b80      	subs	r3, #128	; 0x80
    3482:	b2db      	uxtb	r3, r3
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    3484:	b2d1      	uxtb	r1, r2
    3486:	9301      	str	r3, [sp, #4]
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    3488:	064b      	lsls	r3, r1, #25
    348a:	d55b      	bpl.n	3544 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5c8>
        offset = (uint8_t)255 - offset;
    348c:	43cb      	mvns	r3, r1
    348e:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3490:	f003 010f 	and.w	r1, r3, #15
    if( theta & 0x40) secoffset++;
    3494:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    349a:	111b      	asrs	r3, r3, #4
    349c:	005b      	lsls	r3, r3, #1
    349e:	eb00 0e03 	add.w	lr, r0, r3
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    if( theta & 0x80 ) y = -y;
    34a2:	0612      	lsls	r2, r2, #24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34a4:	4a3a      	ldr	r2, [pc, #232]	; (3590 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x614>)
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    34a6:	f89e e001 	ldrb.w	lr, [lr, #1]
    34aa:	6812      	ldr	r2, [r2, #0]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34ac:	5cc3      	ldrb	r3, [r0, r3]
    34ae:	9207      	str	r2, [sp, #28]
    34b0:	fb1e f101 	smulbb	r1, lr, r1
    34b4:	eb03 1321 	add.w	r3, r3, r1, asr #4
	return ret;
    34b8:	9907      	ldr	r1, [sp, #28]
    34ba:	b2db      	uxtb	r3, r3
    34bc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
    if( theta & 0x80 ) y = -y;
    34c0:	bf48      	it	mi
    34c2:	425b      	negmi	r3, r3
    34c4:	fb02 f101 	mul.w	r1, r2, r1
    34c8:	b25b      	sxtb	r3, r3
    34ca:	0e09      	lsrs	r1, r1, #24
    34cc:	3b80      	subs	r3, #128	; 0x80
    34ce:	fa5f fe81 	uxtb.w	lr, r1
    34d2:	b2db      	uxtb	r3, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    34d4:	f01e 0f40 	tst.w	lr, #64	; 0x40
    34d8:	9302      	str	r3, [sp, #8]
    34da:	d02e      	beq.n	353a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x5be>
        offset = (uint8_t)255 - offset;
    34dc:	ea6f 020e 	mvn.w	r2, lr
    34e0:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    34e2:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    34e6:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    34e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    34ec:	1112      	asrs	r2, r2, #4
    34ee:	0052      	lsls	r2, r2, #1
    34f0:	eb00 0e02 	add.w	lr, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34f4:	5c82      	ldrb	r2, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    34f6:	f89e 0001 	ldrb.w	r0, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    34fa:	fb10 f303 	smulbb	r3, r0, r3
    34fe:	eb02 1323 	add.w	r3, r2, r3, asr #4
    if( theta & 0x80 ) y = -y;
    3502:	0608      	lsls	r0, r1, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3504:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    3506:	bf48      	it	mi
    3508:	425b      	negmi	r3, r3
    350a:	b25b      	sxtb	r3, r3
    350c:	3b80      	subs	r3, #128	; 0x80
    350e:	b2db      	uxtb	r3, r3
						red = beatsin8(32, 0, 255, 0, 128);
						green = beatsin8(16, 0, 255);
						blue = beatsin8(32, 0, 255);

						redSin = 0; //(i * length) + (gFrame / (float)frequency);
						greenSin = (i * length) + (gFrame / (float)frequency);
    3510:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    3512:	9303      	str	r3, [sp, #12]
    3514:	f003 f95e 	bl	67d4 <__aeabi_i2f>
    3518:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    351c:	f003 f9ae 	bl	687c <__aeabi_fmul>
    3520:	4680      	mov	r8, r0
    3522:	4638      	mov	r0, r7
    3524:	f003 f956 	bl	67d4 <__aeabi_i2f>
    3528:	4601      	mov	r1, r0
    352a:	4640      	mov	r0, r8
    352c:	f003 f89e 	bl	666c <__addsf3>
						blueSin = (i * length) + (gFrame / (float)frequency);
						break;
					}
					}

					float redMult = redSin > 0 ? (sin8(redSin) / (float)255) : 0;
    3530:	f04f 0900 	mov.w	r9, #0
						red = beatsin8(32, 0, 255, 0, 128);
						green = beatsin8(16, 0, 255);
						blue = beatsin8(32, 0, 255);

						redSin = 0; //(i * length) + (gFrame / (float)frequency);
						greenSin = (i * length) + (gFrame / (float)frequency);
    3534:	4682      	mov	sl, r0
    3536:	4680      	mov	r8, r0
    3538:	e5b8      	b.n	30ac <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x130>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    353a:	f00e 023f 	and.w	r2, lr, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    353e:	f00e 030f 	and.w	r3, lr, #15
    3542:	e7d3      	b.n	34ec <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x570>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3544:	f001 033f 	and.w	r3, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3548:	f001 010f 	and.w	r1, r1, #15
    354c:	e7a5      	b.n	349a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x51e>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    354e:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3552:	f003 010f 	and.w	r1, r3, #15
    3556:	e778      	b.n	344a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4ce>
    3558:	2300      	movs	r3, #0
    355a:	f88d 3018 	strb.w	r3, [sp, #24]
    355e:	f88d 3019 	strb.w	r3, [sp, #25]
    3562:	f88d 301a 	strb.w	r3, [sp, #26]
    3566:	e732      	b.n	33ce <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
    3568:	2300      	movs	r3, #0
    356a:	22ff      	movs	r2, #255	; 0xff
    356c:	f88d 3018 	strb.w	r3, [sp, #24]
    3570:	f88d 3019 	strb.w	r3, [sp, #25]
    3574:	f88d 201a 	strb.w	r2, [sp, #26]
    3578:	e729      	b.n	33ce <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
    357a:	2300      	movs	r3, #0
    357c:	22ff      	movs	r2, #255	; 0xff
    357e:	f88d 2018 	strb.w	r2, [sp, #24]
    3582:	f88d 3019 	strb.w	r3, [sp, #25]
    3586:	f88d 301a 	strb.w	r3, [sp, #26]
    358a:	e720      	b.n	33ce <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x452>
    358c:	40400000 	.word	0x40400000
    3590:	1fffd39c 	.word	0x1fffd39c
    3594:	000085c4 	.word	0x000085c4

00003598 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)>:
					Invert(leds, indexes, numLeds);
					break;
				}
			}

			void Confetti(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    3598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    359c:	4606      	mov	r6, r0
    359e:	b085      	sub	sp, #20
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    35a0:	69c0      	ldr	r0, [r0, #28]
					Invert(leds, indexes, numLeds);
					break;
				}
			}

			void Confetti(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    35a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    35a4:	4698      	mov	r8, r3
    35a6:	4617      	mov	r7, r2
    35a8:	460d      	mov	r5, r1
				gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
				return gAnalogPattern;
			}
			int GetAnalogPattern() { return gAnalogPattern; }

			int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    35aa:	f003 f913 	bl	67d4 <__aeabi_i2f>
    35ae:	499b      	ldr	r1, [pc, #620]	; (381c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x284>)
    35b0:	f003 f964 	bl	687c <__aeabi_fmul>
    35b4:	499a      	ldr	r1, [pc, #616]	; (3820 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x288>)
    35b6:	f003 fa15 	bl	69e4 <__aeabi_fdiv>
    35ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    35be:	f003 f855 	bl	666c <__addsf3>
    35c2:	f003 fb21 	bl	6c08 <__aeabi_f2iz>
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    35c6:	f1b8 0f00 	cmp.w	r8, #0
    35ca:	dd21      	ble.n	3610 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x78>
    35cc:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    35d0:	b2c9      	uxtb	r1, r1
    35d2:	3101      	adds	r1, #1
    35d4:	4638      	mov	r0, r7
    35d6:	eb07 0e48 	add.w	lr, r7, r8, lsl #1
				{
					int scale = 255 - fade;
					(leds[indexes[i]]).nscale8(scale);
    35da:	f830 2b02 	ldrh.w	r2, [r0], #2
    35de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    35e2:	eb05 0c02 	add.w	ip, r5, r2
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    35e6:	5cab      	ldrb	r3, [r5, r2]
    35e8:	fb01 f303 	mul.w	r3, r1, r3
    35ec:	121b      	asrs	r3, r3, #8
    35ee:	54ab      	strb	r3, [r5, r2]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    35f0:	f89c 3001 	ldrb.w	r3, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    35f4:	f89c 2002 	ldrb.w	r2, [ip, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    35f8:	fb01 f303 	mul.w	r3, r1, r3
    b = (((uint16_t)b) * scale_fixed) >> 8;
    35fc:	fb01 f202 	mul.w	r2, r1, r2
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3600:	121b      	asrs	r3, r3, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3602:	1212      	asrs	r2, r2, #8
				}
			}

			void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
			{
				for (int i = 0; i < numLeds; i++)
    3604:	4586      	cmp	lr, r0
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3606:	f88c 3001 	strb.w	r3, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    360a:	f88c 2002 	strb.w	r2, [ip, #2]
    360e:	d1e4      	bne.n	35da <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x42>

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    3610:	2305      	movs	r3, #5
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    3612:	2c00      	cmp	r4, #0

			int GetNumModes() { return gNumModes; }

			int SetNumModes(int number)
			{
				gNumModes = number;
    3614:	60f3      	str	r3, [r6, #12]
			int GetModeNumber() { return gCurrentModeNumber; }

			int GetModeNumber(int offset) 
			{
				// A value less than zero indicates we want the base mode.
				if (offset < 0) return 0;
    3616:	db14      	blt.n	3642 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xaa>
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    3618:	68b3      	ldr	r3, [r6, #8]
    361a:	4a82      	ldr	r2, [pc, #520]	; (3824 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x28c>)
    361c:	441c      	add	r4, r3
    361e:	fb82 2304 	smull	r2, r3, r2, r4
    3622:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    3626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    362a:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
    362e:	3c01      	subs	r4, #1
    3630:	2c04      	cmp	r4, #4
    3632:	d806      	bhi.n	3642 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xaa>
    3634:	e8df f014 	tbh	[pc, r4, lsl #1]
    3638:	00fa0087 	.word	0x00fa0087
    363c:	02720198 	.word	0x02720198
    3640:	0043      	.short	0x0043
    3642:	fa1f f388 	uxth.w	r3, r8
    3646:	4c78      	ldr	r4, [pc, #480]	; (3828 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x290>)
    3648:	9301      	str	r3, [sp, #4]
    364a:	f04f 0806 	mov.w	r8, #6
    364e:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3652:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
    3656:	f04f 0aff 	mov.w	sl, #255	; 0xff
    365a:	8823      	ldrh	r3, [r4, #0]
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    365c:	9a01      	ldr	r2, [sp, #4]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    365e:	7d30      	ldrb	r0, [r6, #20]
    3660:	f88d b00d 	strb.w	fp, [sp, #13]
    3664:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3668:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    366c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3670:	3319      	adds	r3, #25
    3672:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3674:	eb03 2143 	add.w	r1, r3, r3, lsl #9
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3678:	fb02 fe03 	mul.w	lr, r2, r3
    367c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3680:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3684:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3688:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    368a:	3119      	adds	r1, #25
    368c:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    368e:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3692:	f88d a00e 	strb.w	sl, [sp, #14]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3696:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    369a:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    369e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    36a2:	4486      	add	lr, r0
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    36a4:	4429      	add	r1, r5
    36a6:	4648      	mov	r0, r9
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36a8:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    36aa:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    36ae:	f7fe fbf1 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    36b2:	f1b8 0801 	subs.w	r8, r8, #1
    36b6:	d1d0      	bne.n	365a <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xc2>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    36b8:	b005      	add	sp, #20
    36ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36be:	fa1f f388 	uxth.w	r3, r8
    36c2:	4c59      	ldr	r4, [pc, #356]	; (3828 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x290>)
    36c4:	9301      	str	r3, [sp, #4]
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    36c6:	f04f 0806 	mov.w	r8, #6
    36ca:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    36ce:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
    36d2:	f04f 0aff 	mov.w	sl, #255	; 0xff
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36d6:	8823      	ldrh	r3, [r4, #0]
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    36d8:	9a01      	ldr	r2, [sp, #4]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    36da:	7d30      	ldrb	r0, [r6, #20]
    36dc:	f88d b00d 	strb.w	fp, [sp, #13]
    36e0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    36e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    36e8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    36ec:	3319      	adds	r3, #25
    36ee:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36f0:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    36f4:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    36f8:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    36fc:	fb02 f103 	mul.w	r1, r2, r3
    3700:	f10e 0e19 	add.w	lr, lr, #25
    3704:	fa1f fe8e 	uxth.w	lr, lr
    3708:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    370a:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    370c:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3710:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3714:	f88d a00e 	strb.w	sl, [sp, #14]
    3718:	b2db      	uxtb	r3, r3
    371a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    371e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3722:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3726:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    372a:	4429      	add	r1, r5
    372c:	4648      	mov	r0, r9
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    372e:	f8a4 e000 	strh.w	lr, [r4]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3732:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3736:	f7fe fbad 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    373a:	f1b8 0801 	subs.w	r8, r8, #1
    373e:	d1ca      	bne.n	36d6 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x13e>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3740:	b005      	add	sp, #20
    3742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3746:	4c38      	ldr	r4, [pc, #224]	; (3828 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x290>)
    3748:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    374c:	f04f 0a04 	mov.w	sl, #4
    3750:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3754:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3758:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    375a:	7d30      	ldrb	r0, [r6, #20]
    375c:	f88d b00d 	strb.w	fp, [sp, #13]
    3760:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3764:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3768:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    376c:	3319      	adds	r3, #25
    376e:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3770:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3774:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3778:	fb08 fe03 	mul.w	lr, r8, r3
    377c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3780:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3784:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3786:	3119      	adds	r1, #25
    3788:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    378a:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    378e:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3790:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    3794:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    3798:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    379c:	4486      	add	lr, r0
    379e:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    37a2:	4429      	add	r1, r5
    37a4:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    37a6:	f88d 200e 	strb.w	r2, [sp, #14]
    37aa:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    37ae:	f7fe fb71 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    37b2:	f1ba 0a01 	subs.w	sl, sl, #1
    37b6:	d1cf      	bne.n	3758 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x1c0>
    37b8:	f04f 0a04 	mov.w	sl, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    37bc:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37c0:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    37c2:	f896 e014 	ldrb.w	lr, [r6, #20]
    37c6:	f88d b00d 	strb.w	fp, [sp, #13]
    37ca:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    37ce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    37d2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    37d6:	3319      	adds	r3, #25
    37d8:	b29b      	uxth	r3, r3
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    37da:	fb08 f103 	mul.w	r1, r8, r3
    37de:	0c09      	lsrs	r1, r1, #16
    37e0:	8023      	strh	r3, [r4, #0]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    37e2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    37e6:	f88d e00c 	strb.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37ea:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    37ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    37f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    37f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    37fa:	f04f 32ff 	mov.w	r2, #4294967295
    37fe:	3319      	adds	r3, #25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3800:	4429      	add	r1, r5
    3802:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3804:	f88d 200e 	strb.w	r2, [sp, #14]
    3808:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    380a:	f7fe fb43 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    380e:	f1ba 0a01 	subs.w	sl, sl, #1
    3812:	d1d5      	bne.n	37c0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x228>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3814:	b005      	add	sp, #20
    3816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    381a:	bf00      	nop
    381c:	41e00000 	.word	0x41e00000
    3820:	447fc000 	.word	0x447fc000
    3824:	2aaaaaab 	.word	0x2aaaaaab
    3828:	1fff8726 	.word	0x1fff8726
    382c:	4cba      	ldr	r4, [pc, #744]	; (3b18 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x580>)
    382e:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    3832:	f04f 0a03 	mov.w	sl, #3
    3836:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    383a:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    383e:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3840:	7d30      	ldrb	r0, [r6, #20]
    3842:	f88d b00d 	strb.w	fp, [sp, #13]
    3846:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    384a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    384e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3852:	3319      	adds	r3, #25
    3854:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3856:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    385a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    385e:	fb08 fe03 	mul.w	lr, r8, r3
    3862:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3866:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    386a:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    386c:	3119      	adds	r1, #25
    386e:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3870:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3874:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3876:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    387a:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    387e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3882:	4486      	add	lr, r0
    3884:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3888:	4429      	add	r1, r5
    388a:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    388c:	f88d 200e 	strb.w	r2, [sp, #14]
    3890:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3894:	f7fe fafe 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3898:	f1ba 0a01 	subs.w	sl, sl, #1
    389c:	d1cf      	bne.n	383e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x2a6>
    389e:	f04f 0a03 	mov.w	sl, #3
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    38a2:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38a6:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    38a8:	f896 e014 	ldrb.w	lr, [r6, #20]
    38ac:	f88d b00d 	strb.w	fp, [sp, #13]
    38b0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    38b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    38b8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    38bc:	3319      	adds	r3, #25
    38be:	b29b      	uxth	r3, r3
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    38c0:	fb08 f103 	mul.w	r1, r8, r3
    38c4:	0c09      	lsrs	r1, r1, #16
    38c6:	8023      	strh	r3, [r4, #0]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    38c8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    38cc:	f88d e00c 	strb.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38d0:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    38d4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    38d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    38dc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    38e0:	f04f 32ff 	mov.w	r2, #4294967295
    38e4:	3319      	adds	r3, #25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    38e6:	4429      	add	r1, r5
    38e8:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    38ea:	f88d 200e 	strb.w	r2, [sp, #14]
    38ee:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    38f0:	f7fe fad0 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    38f4:	f1ba 0a01 	subs.w	sl, sl, #1
    38f8:	d1d5      	bne.n	38a6 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x30e>
    38fa:	f04f 0a06 	mov.w	sl, #6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    38fe:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3902:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3904:	7d30      	ldrb	r0, [r6, #20]
    3906:	f88d b00d 	strb.w	fp, [sp, #13]
    390a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    390e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3912:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3916:	3319      	adds	r3, #25
    3918:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    391a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    391e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3922:	fb08 fe03 	mul.w	lr, r8, r3
    3926:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    392a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    392e:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3930:	3119      	adds	r1, #25
    3932:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3934:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3938:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    393a:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    393e:	f3ce 0e46 	ubfx	lr, lr, #1, #7
    3942:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3946:	4486      	add	lr, r0
    3948:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    394c:	4429      	add	r1, r5
    394e:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3950:	f88d 200e 	strb.w	r2, [sp, #14]
    3954:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3958:	f7fe fa9c 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    395c:	f1ba 0a01 	subs.w	sl, sl, #1
    3960:	d1cf      	bne.n	3902 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x36a>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3962:	b005      	add	sp, #20
    3964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3968:	4c6b      	ldr	r4, [pc, #428]	; (3b18 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x580>)
    396a:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    396e:	f04f 0a02 	mov.w	sl, #2
    3972:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3976:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    397a:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    397c:	7d30      	ldrb	r0, [r6, #20]
    397e:	f88d b00d 	strb.w	fp, [sp, #13]
    3982:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3986:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    398a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    398e:	3319      	adds	r3, #25
    3990:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3992:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3996:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    399a:	fb08 fe03 	mul.w	lr, r8, r3
    399e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    39a2:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39a6:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39a8:	3119      	adds	r1, #25
    39aa:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    39ac:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    39b0:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    39b2:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    39b6:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    39ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    39be:	4486      	add	lr, r0
    39c0:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    39c4:	4429      	add	r1, r5
    39c6:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    39c8:	f88d 200e 	strb.w	r2, [sp, #14]
    39cc:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    39d0:	f7fe fa60 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    39d4:	f1ba 0a01 	subs.w	sl, sl, #1
    39d8:	d1cf      	bne.n	397a <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x3e2>
    39da:	f04f 0a02 	mov.w	sl, #2
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    39de:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39e2:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    39e4:	f896 e014 	ldrb.w	lr, [r6, #20]
    39e8:	f88d b00d 	strb.w	fp, [sp, #13]
    39ec:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    39f4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39f8:	3319      	adds	r3, #25
    39fa:	b29b      	uxth	r3, r3
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    39fc:	fb08 f103 	mul.w	r1, r8, r3
    3a00:	0c09      	lsrs	r1, r1, #16
    3a02:	8023      	strh	r3, [r4, #0]
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3a04:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3a08:	f88d e00c 	strb.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a0c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3a10:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3a14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3a18:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a1c:	f04f 32ff 	mov.w	r2, #4294967295
    3a20:	3319      	adds	r3, #25
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a22:	4429      	add	r1, r5
    3a24:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a26:	f88d 200e 	strb.w	r2, [sp, #14]
    3a2a:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a2c:	f7fe fa32 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3a30:	f1ba 0a01 	subs.w	sl, sl, #1
    3a34:	d1d5      	bne.n	39e2 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x44a>
    3a36:	f04f 0a05 	mov.w	sl, #5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a3a:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a3e:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3a40:	7d30      	ldrb	r0, [r6, #20]
    3a42:	f88d b00d 	strb.w	fp, [sp, #13]
    3a46:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3a4a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3a4e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a52:	3319      	adds	r3, #25
    3a54:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a56:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3a5a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3a5e:	fb08 fe03 	mul.w	lr, r8, r3
    3a62:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3a66:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a6a:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a6c:	3119      	adds	r1, #25
    3a6e:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3a70:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3a74:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a76:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    3a7a:	f3ce 0e46 	ubfx	lr, lr, #1, #7
    3a7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3a82:	4486      	add	lr, r0
    3a84:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a88:	4429      	add	r1, r5
    3a8a:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a8c:	f88d 200e 	strb.w	r2, [sp, #14]
    3a90:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a94:	f7fe f9fe 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3a98:	f1ba 0a01 	subs.w	sl, sl, #1
    3a9c:	d1cf      	bne.n	3a3e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x4a6>
    3a9e:	f04f 0a05 	mov.w	sl, #5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3aa2:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3aa6:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3aa8:	7d30      	ldrb	r0, [r6, #20]
    3aaa:	f88d b00d 	strb.w	fp, [sp, #13]
    3aae:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3ab2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3ab6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3aba:	3319      	adds	r3, #25
    3abc:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3abe:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3ac2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    3ac6:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3aca:	fb08 f103 	mul.w	r1, r8, r3
    3ace:	f10e 0e19 	add.w	lr, lr, #25
    3ad2:	fa1f fe8e 	uxth.w	lr, lr
    3ad6:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ad8:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ada:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3ade:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ae2:	f8a4 e000 	strh.w	lr, [r4]
    3ae6:	b2db      	uxtb	r3, r3
    3ae8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3aec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3af0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3af4:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    3af8:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3afc:	4429      	add	r1, r5
    3afe:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b00:	f88d 200e 	strb.w	r2, [sp, #14]
    3b04:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b08:	f7fe f9c4 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3b0c:	f1ba 0a01 	subs.w	sl, sl, #1
    3b10:	d1c9      	bne.n	3aa6 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x50e>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3b12:	b005      	add	sp, #20
    3b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b18:	1fff8726 	.word	0x1fff8726
    3b1c:	4c3a      	ldr	r4, [pc, #232]	; (3c08 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x670>)
    3b1e:	fa1f f888 	uxth.w	r8, r8
				int fade = GetAnalogPattern(2, 30);
				FadeSetsToBlackBy(leds, indexes, numLeds, fade);

				// Modes
				SetNumModes(5);
				switch (GetModeNumber(modeOffset))
    3b22:	f04f 0a04 	mov.w	sl, #4
    3b26:	f10d 090c 	add.w	r9, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b2a:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b2e:	8823      	ldrh	r3, [r4, #0]
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3b30:	7d30      	ldrb	r0, [r6, #20]
    3b32:	f88d b00d 	strb.w	fp, [sp, #13]
    3b36:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3b3a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3b3e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b42:	3319      	adds	r3, #25
    3b44:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b46:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3b4a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3b4e:	fb08 fe03 	mul.w	lr, r8, r3
    3b52:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3b56:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b5a:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b5c:	3119      	adds	r1, #25
    3b5e:	b28b      	uxth	r3, r1
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3b60:	f837 101e 	ldrh.w	r1, [r7, lr, lsl #1]
    3b64:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b66:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    3b6a:	f3ce 0e46 	ubfx	lr, lr, #1, #7
    3b6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3b72:	4486      	add	lr, r0
    3b74:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b78:	4429      	add	r1, r5
    3b7a:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b7c:	f88d 200e 	strb.w	r2, [sp, #14]
    3b80:	f88d e00c 	strb.w	lr, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b84:	f7fe f986 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3b88:	f1ba 0a01 	subs.w	sl, sl, #1
    3b8c:	d1cf      	bne.n	3b2e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x596>
    3b8e:	f04f 0a04 	mov.w	sl, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b92:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b96:	8823      	ldrh	r3, [r4, #0]
				{
					uint16_t index = indexes[random16(numLeds)];
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3b98:	7d30      	ldrb	r0, [r6, #20]
    3b9a:	f88d b00d 	strb.w	fp, [sp, #13]
    3b9e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3ba2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3ba6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3baa:	3319      	adds	r3, #25
    3bac:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bae:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3bb2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    3bb6:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
				{
					uint16_t index = indexes[random16(numLeds)];
    3bba:	fb08 f103 	mul.w	r1, r8, r3
    3bbe:	f10e 0e19 	add.w	lr, lr, #25
    3bc2:	fa1f fe8e 	uxth.w	lr, lr
    3bc6:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bc8:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3bca:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
					leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3bce:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bd2:	f8a4 e000 	strh.w	lr, [r4]
    3bd6:	b2db      	uxtb	r3, r3
    3bd8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3bdc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3be0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3be4:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    3be8:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3bec:	4429      	add	r1, r5
    3bee:	4648      	mov	r0, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3bf0:	f88d 200e 	strb.w	r2, [sp, #14]
    3bf4:	f88d 300c 	strb.w	r3, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3bf8:	f7fe f94c 	bl	1e94 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			}

			/// Generate random colors (withing a confinement of hue) in random locations.
			void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
			{
				for (int i = 0; i < numPositions; i++)
    3bfc:	f1ba 0a01 	subs.w	sl, sl, #1
    3c00:	d1c9      	bne.n	3b96 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x5fe>
					break;
				default:
					SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
					break;
				}
			}
    3c02:	b005      	add	sp, #20
    3c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c08:	1fff8726 	.word	0x1fff8726

00003c0c <Meltdown::CMeltdownLED::CMeltdownLED()>:

namespace Meltdown
{
	CMeltdownLED MeltdownLED;

	CMeltdownLED::CMeltdownLED()
    3c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c0e:	f8df e090 	ldr.w	lr, [pc, #144]	; 3ca0 <Meltdown::CMeltdownLED::CMeltdownLED()+0x94>
    3c12:	f8df c090 	ldr.w	ip, [pc, #144]	; 3ca4 <Meltdown::CMeltdownLED::CMeltdownLED()+0x98>
    3c16:	4676      	mov	r6, lr
    3c18:	4604      	mov	r4, r0
    3c1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c1c:	2730      	movs	r7, #48	; 0x30
    3c1e:	6127      	str	r7, [r4, #16]
    3c20:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
    3c24:	2714      	movs	r7, #20
    3c26:	61a5      	str	r5, [r4, #24]
    3c28:	62a7      	str	r7, [r4, #40]	; 0x28
    3c2a:	f104 054c 	add.w	r5, r4, #76	; 0x4c
    3c2e:	2700      	movs	r7, #0
    3c30:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
    3c34:	6027      	str	r7, [r4, #0]
    3c36:	6067      	str	r7, [r4, #4]
    3c38:	60a7      	str	r7, [r4, #8]
    3c3a:	60e7      	str	r7, [r4, #12]
    3c3c:	6167      	str	r7, [r4, #20]
    3c3e:	61e7      	str	r7, [r4, #28]
    3c40:	6227      	str	r7, [r4, #32]
    3c42:	6267      	str	r7, [r4, #36]	; 0x24
    3c44:	62e7      	str	r7, [r4, #44]	; 0x2c
    3c46:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    3c4a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
    3c4e:	f884 7032 	strb.w	r7, [r4, #50]	; 0x32
    3c52:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    3c56:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
    3c5a:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
    3c5e:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
    3c62:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
    3c66:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    3c6a:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
    3c6e:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
    3c72:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    3c76:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    3c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3c84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    3c88:	f10e 0640 	add.w	r6, lr, #64	; 0x40
    3c8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    3c90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    3c94:	f104 058c 	add.w	r5, r4, #140	; 0x8c
    3c98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	{
	}
    3c9c:	4620      	mov	r0, r4
    3c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ca0:	00008564 	.word	0x00008564
    3ca4:	001b7740 	.word	0x001b7740

00003ca8 <_GLOBAL__sub_I__ZN8Meltdown11MeltdownLEDE>:
#include "MeltdownLED.h"

namespace Meltdown
{
	CMeltdownLED MeltdownLED;
    3ca8:	4801      	ldr	r0, [pc, #4]	; (3cb0 <_GLOBAL__sub_I__ZN8Meltdown11MeltdownLEDE+0x8>)
    3caa:	f7ff bfaf 	b.w	3c0c <Meltdown::CMeltdownLED::CMeltdownLED()>
    3cae:	bf00      	nop
    3cb0:	1fffd13c 	.word	0x1fffd13c

00003cb4 <Meltdown::CMeltdownSerial::~CMeltdownSerial()>:
{

#ifndef MELTDOWN_SERIAL
#define MELTDOWN_SERIAL

	class CMeltdownSerial
    3cb4:	b510      	push	{r4, lr}
    3cb6:	4604      	mov	r4, r0
    3cb8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    3cbc:	f002 f932 	bl	5f24 <String::~String()>
    3cc0:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    3cc4:	f002 f92e 	bl	5f24 <String::~String()>
    3cc8:	f504 70a4 	add.w	r0, r4, #328	; 0x148
    3ccc:	f002 f92a 	bl	5f24 <String::~String()>
    3cd0:	f504 709c 	add.w	r0, r4, #312	; 0x138
    3cd4:	f002 f926 	bl	5f24 <String::~String()>
    3cd8:	f504 7094 	add.w	r0, r4, #296	; 0x128
    3cdc:	f002 f922 	bl	5f24 <String::~String()>
    3ce0:	f504 708c 	add.w	r0, r4, #280	; 0x118
    3ce4:	f002 f91e 	bl	5f24 <String::~String()>
    3ce8:	f504 7084 	add.w	r0, r4, #264	; 0x108
    3cec:	f002 f91a 	bl	5f24 <String::~String()>
    3cf0:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    3cf4:	f002 f916 	bl	5f24 <String::~String()>
    3cf8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    3cfc:	f002 f912 	bl	5f24 <String::~String()>
    3d00:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    3d04:	f002 f90e 	bl	5f24 <String::~String()>
    3d08:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    3d0c:	f002 f90a 	bl	5f24 <String::~String()>
    3d10:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    3d14:	f002 f906 	bl	5f24 <String::~String()>
    3d18:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    3d1c:	f002 f902 	bl	5f24 <String::~String()>
    3d20:	f104 0098 	add.w	r0, r4, #152	; 0x98
    3d24:	f002 f8fe 	bl	5f24 <String::~String()>
    3d28:	f104 0088 	add.w	r0, r4, #136	; 0x88
    3d2c:	f002 f8fa 	bl	5f24 <String::~String()>
    3d30:	f104 0078 	add.w	r0, r4, #120	; 0x78
    3d34:	f002 f8f6 	bl	5f24 <String::~String()>
    3d38:	f104 0068 	add.w	r0, r4, #104	; 0x68
    3d3c:	f002 f8f2 	bl	5f24 <String::~String()>
    3d40:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3d44:	f002 f8ee 	bl	5f24 <String::~String()>
    3d48:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3d4c:	f002 f8ea 	bl	5f24 <String::~String()>
    3d50:	f104 0038 	add.w	r0, r4, #56	; 0x38
    3d54:	f002 f8e6 	bl	5f24 <String::~String()>
    3d58:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3d5c:	f002 f8e2 	bl	5f24 <String::~String()>
    3d60:	f104 0018 	add.w	r0, r4, #24
    3d64:	f002 f8de 	bl	5f24 <String::~String()>
    3d68:	1d20      	adds	r0, r4, #4
    3d6a:	f002 f8db 	bl	5f24 <String::~String()>
    3d6e:	4620      	mov	r0, r4
    3d70:	bd10      	pop	{r4, pc}
    3d72:	bf00      	nop

00003d74 <Meltdown::CMeltdownSerial::CMeltdownSerial()>:

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;

	CMeltdownSerial::CMeltdownSerial()
    3d74:	b538      	push	{r3, r4, r5, lr}
    3d76:	1d05      	adds	r5, r0, #4
    3d78:	4604      	mov	r4, r0
    3d7a:	2100      	movs	r1, #0
    3d7c:	4628      	mov	r0, r5
    3d7e:	f002 f911 	bl	5fa4 <String::String(char const*)>
    3d82:	f104 0018 	add.w	r0, r4, #24
    3d86:	493a      	ldr	r1, [pc, #232]	; (3e70 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0xfc>)
    3d88:	f002 f90c 	bl	5fa4 <String::String(char const*)>
    3d8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3d90:	4938      	ldr	r1, [pc, #224]	; (3e74 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x100>)
    3d92:	f002 f907 	bl	5fa4 <String::String(char const*)>
    3d96:	f104 0038 	add.w	r0, r4, #56	; 0x38
    3d9a:	4937      	ldr	r1, [pc, #220]	; (3e78 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x104>)
    3d9c:	f002 f902 	bl	5fa4 <String::String(char const*)>
    3da0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3da4:	4935      	ldr	r1, [pc, #212]	; (3e7c <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x108>)
    3da6:	f002 f8fd 	bl	5fa4 <String::String(char const*)>
    3daa:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3dae:	4934      	ldr	r1, [pc, #208]	; (3e80 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x10c>)
    3db0:	f002 f8f8 	bl	5fa4 <String::String(char const*)>
    3db4:	f104 0068 	add.w	r0, r4, #104	; 0x68
    3db8:	4932      	ldr	r1, [pc, #200]	; (3e84 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x110>)
    3dba:	f002 f8f3 	bl	5fa4 <String::String(char const*)>
    3dbe:	f104 0078 	add.w	r0, r4, #120	; 0x78
    3dc2:	4931      	ldr	r1, [pc, #196]	; (3e88 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x114>)
    3dc4:	f002 f8ee 	bl	5fa4 <String::String(char const*)>
    3dc8:	f104 0088 	add.w	r0, r4, #136	; 0x88
    3dcc:	492f      	ldr	r1, [pc, #188]	; (3e8c <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x118>)
    3dce:	f002 f8e9 	bl	5fa4 <String::String(char const*)>
    3dd2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    3dd6:	492e      	ldr	r1, [pc, #184]	; (3e90 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x11c>)
    3dd8:	f002 f8e4 	bl	5fa4 <String::String(char const*)>
    3ddc:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    3de0:	492c      	ldr	r1, [pc, #176]	; (3e94 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x120>)
    3de2:	f002 f8df 	bl	5fa4 <String::String(char const*)>
    3de6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    3dea:	492b      	ldr	r1, [pc, #172]	; (3e98 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x124>)
    3dec:	f002 f8da 	bl	5fa4 <String::String(char const*)>
    3df0:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    3df4:	4929      	ldr	r1, [pc, #164]	; (3e9c <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x128>)
    3df6:	f002 f8d5 	bl	5fa4 <String::String(char const*)>
    3dfa:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    3dfe:	4928      	ldr	r1, [pc, #160]	; (3ea0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x12c>)
    3e00:	f002 f8d0 	bl	5fa4 <String::String(char const*)>
    3e04:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    3e08:	4926      	ldr	r1, [pc, #152]	; (3ea4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x130>)
    3e0a:	f002 f8cb 	bl	5fa4 <String::String(char const*)>
    3e0e:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    3e12:	4925      	ldr	r1, [pc, #148]	; (3ea8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x134>)
    3e14:	f002 f8c6 	bl	5fa4 <String::String(char const*)>
    3e18:	f504 7084 	add.w	r0, r4, #264	; 0x108
    3e1c:	4923      	ldr	r1, [pc, #140]	; (3eac <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x138>)
    3e1e:	f002 f8c1 	bl	5fa4 <String::String(char const*)>
    3e22:	f504 708c 	add.w	r0, r4, #280	; 0x118
    3e26:	4922      	ldr	r1, [pc, #136]	; (3eb0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x13c>)
    3e28:	f002 f8bc 	bl	5fa4 <String::String(char const*)>
    3e2c:	f504 7094 	add.w	r0, r4, #296	; 0x128
    3e30:	4920      	ldr	r1, [pc, #128]	; (3eb4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x140>)
    3e32:	f002 f8b7 	bl	5fa4 <String::String(char const*)>
    3e36:	f504 709c 	add.w	r0, r4, #312	; 0x138
    3e3a:	491f      	ldr	r1, [pc, #124]	; (3eb8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x144>)
    3e3c:	f002 f8b2 	bl	5fa4 <String::String(char const*)>
    3e40:	f504 70a4 	add.w	r0, r4, #328	; 0x148
    3e44:	491d      	ldr	r1, [pc, #116]	; (3ebc <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x148>)
    3e46:	f002 f8ad 	bl	5fa4 <String::String(char const*)>
    3e4a:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    3e4e:	491c      	ldr	r1, [pc, #112]	; (3ec0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x14c>)
    3e50:	f002 f8a8 	bl	5fa4 <String::String(char const*)>
    3e54:	f504 70b4 	add.w	r0, r4, #360	; 0x168
    3e58:	491a      	ldr	r1, [pc, #104]	; (3ec4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x150>)
    3e5a:	f002 f8a3 	bl	5fa4 <String::String(char const*)>
	{
		m_analogTolerance = 15;
    3e5e:	230f      	movs	r3, #15
		m_inputString.reserve(100);
    3e60:	4628      	mov	r0, r5
{
	CMeltdownSerial MeltdownSerial;

	CMeltdownSerial::CMeltdownSerial()
	{
		m_analogTolerance = 15;
    3e62:	6023      	str	r3, [r4, #0]
		m_inputString.reserve(100);
    3e64:	2164      	movs	r1, #100	; 0x64
    3e66:	f002 f865 	bl	5f34 <String::reserve(unsigned int)>
	}
    3e6a:	4620      	mov	r0, r4
    3e6c:	bd38      	pop	{r3, r4, r5, pc}
    3e6e:	bf00      	nop
    3e70:	000085e0 	.word	0x000085e0
    3e74:	000085e8 	.word	0x000085e8
    3e78:	000085f0 	.word	0x000085f0
    3e7c:	000085f8 	.word	0x000085f8
    3e80:	00008600 	.word	0x00008600
    3e84:	00008608 	.word	0x00008608
    3e88:	00008610 	.word	0x00008610
    3e8c:	00008618 	.word	0x00008618
    3e90:	00008620 	.word	0x00008620
    3e94:	00008628 	.word	0x00008628
    3e98:	00008630 	.word	0x00008630
    3e9c:	00008638 	.word	0x00008638
    3ea0:	00008640 	.word	0x00008640
    3ea4:	00008648 	.word	0x00008648
    3ea8:	00008650 	.word	0x00008650
    3eac:	00008658 	.word	0x00008658
    3eb0:	00008660 	.word	0x00008660
    3eb4:	00008668 	.word	0x00008668
    3eb8:	00008670 	.word	0x00008670
    3ebc:	00008678 	.word	0x00008678
    3ec0:	00008680 	.word	0x00008680
    3ec4:	00008688 	.word	0x00008688

00003ec8 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE>:
    3ec8:	b510      	push	{r4, lr}
#include "MeltdownSerial.h"

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;
    3eca:	4c05      	ldr	r4, [pc, #20]	; (3ee0 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x18>)
    3ecc:	4620      	mov	r0, r4
    3ece:	f7ff ff51 	bl	3d74 <Meltdown::CMeltdownSerial::CMeltdownSerial()>
    3ed2:	4620      	mov	r0, r4
    3ed4:	4a03      	ldr	r2, [pc, #12]	; (3ee4 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x1c>)
    3ed6:	4904      	ldr	r1, [pc, #16]	; (3ee8 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x20>)
	CMeltdownSerial::CMeltdownSerial()
	{
		m_analogTolerance = 15;
		m_inputString.reserve(100);
	}
    3ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "MeltdownSerial.h"

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;
    3edc:	f002 beda 	b.w	6c94 <__aeabi_atexit>
    3ee0:	1fffd1d8 	.word	0x1fffd1d8
    3ee4:	1fff8720 	.word	0x1fff8720
    3ee8:	00003cb5 	.word	0x00003cb5

00003eec <_GLOBAL__sub_I__ZN8Meltdown14MeltdownLoggerE>:

namespace Meltdown
{
	CMeltdownLogger MeltdownLogger;

	CMeltdownLogger::CMeltdownLogger() {}
    3eec:	4b01      	ldr	r3, [pc, #4]	; (3ef4 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownLoggerE+0x8>)
    3eee:	2200      	movs	r2, #0
    3ef0:	701a      	strb	r2, [r3, #0]
    3ef2:	4770      	bx	lr
    3ef4:	1fffd350 	.word	0x1fffd350

00003ef8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ef8:	4807      	ldr	r0, [pc, #28]	; (3f18 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    3efa:	b082      	sub	sp, #8
    3efc:	6803      	ldr	r3, [r0, #0]
    3efe:	9301      	str	r3, [sp, #4]
	return ret;
    3f00:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3f02:	4411      	add	r1, r2
    3f04:	e001      	b.n	3f0a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    3f06:	4299      	cmp	r1, r3
    3f08:	d304      	bcc.n	3f14 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f0a:	6803      	ldr	r3, [r0, #0]
    3f0c:	9300      	str	r3, [sp, #0]
	return ret;
    3f0e:	9b00      	ldr	r3, [sp, #0]
    3f10:	429a      	cmp	r2, r3
    3f12:	d9f8      	bls.n	3f06 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    3f14:	b002      	add	sp, #8
    3f16:	4770      	bx	lr
    3f18:	1fffd39c 	.word	0x1fffd39c

00003f1c <VisualMicroDebug::DBG_Millis()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f1c:	4b03      	ldr	r3, [pc, #12]	; (3f2c <VisualMicroDebug::DBG_Millis()+0x10>)
{
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
    3f1e:	b082      	sub	sp, #8
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	9301      	str	r3, [sp, #4]
	return ret;
    3f24:	9801      	ldr	r0, [sp, #4]
	return millis();
}
    3f26:	b002      	add	sp, #8
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop
    3f2c:	1fffd39c 	.word	0x1fffd39c

00003f30 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    3f30:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f32:	4b07      	ldr	r3, [pc, #28]	; (3f50 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x20>)
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    3f34:	6882      	ldr	r2, [r0, #8]
    3f36:	681b      	ldr	r3, [r3, #0]

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    3f38:	6101      	str	r1, [r0, #16]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    3f3a:	b083      	sub	sp, #12
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    3f3c:	2400      	movs	r4, #0
    3f3e:	9301      	str	r3, [sp, #4]
	return ret;
    3f40:	9b01      	ldr	r3, [sp, #4]
    3f42:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
    3f44:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
    3f46:	6083      	str	r3, [r0, #8]
}
    3f48:	b003      	add	sp, #12
    3f4a:	bc10      	pop	{r4}
    3f4c:	4770      	bx	lr
    3f4e:	bf00      	nop
    3f50:	1fffd39c 	.word	0x1fffd39c

00003f54 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    3f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f58:	4b1b      	ldr	r3, [pc, #108]	; (3fc8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3f5a:	4c1c      	ldr	r4, [pc, #112]	; (3fcc <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    3f5c:	681b      	ldr	r3, [r3, #0]
    3f5e:	4e1c      	ldr	r6, [pc, #112]	; (3fd0 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    3f60:	b082      	sub	sp, #8
    3f62:	4605      	mov	r5, r0
    3f64:	9301      	str	r3, [sp, #4]
    3f66:	4688      	mov	r8, r1
    3f68:	481a      	ldr	r0, [pc, #104]	; (3fd4 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x80>)
	return ret;
    3f6a:	9f01      	ldr	r7, [sp, #4]
    3f6c:	2106      	movs	r1, #6
    3f6e:	f001 fc09 	bl	5784 <usb_serial_write>
    3f72:	4641      	mov	r1, r8
    3f74:	2300      	movs	r3, #0
    3f76:	220a      	movs	r2, #10
    3f78:	4620      	mov	r0, r4
    3f7a:	f001 ff39 	bl	5df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3f7e:	2103      	movs	r1, #3
    3f80:	4815      	ldr	r0, [pc, #84]	; (3fd8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x84>)
    3f82:	f001 fbff 	bl	5784 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3f86:	4639      	mov	r1, r7
    3f88:	2300      	movs	r3, #0
    3f8a:	220a      	movs	r2, #10
    3f8c:	4620      	mov	r0, r4
    3f8e:	f001 ff2f 	bl	5df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3f92:	4630      	mov	r0, r6
    3f94:	2101      	movs	r1, #1
    3f96:	f001 fbf5 	bl	5784 <usb_serial_write>
    3f9a:	68a9      	ldr	r1, [r5, #8]
    3f9c:	2300      	movs	r3, #0
    3f9e:	1a79      	subs	r1, r7, r1
    3fa0:	220a      	movs	r2, #10
    3fa2:	4620      	mov	r0, r4
    3fa4:	f001 ff24 	bl	5df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3fa8:	4630      	mov	r0, r6
    3faa:	2101      	movs	r1, #1
    3fac:	f001 fbea 	bl	5784 <usb_serial_write>
    3fb0:	68eb      	ldr	r3, [r5, #12]
    3fb2:	68a9      	ldr	r1, [r5, #8]
    3fb4:	4620      	mov	r0, r4
    3fb6:	1ac9      	subs	r1, r1, r3
    3fb8:	220a      	movs	r2, #10
    3fba:	2300      	movs	r3, #0
    3fbc:	f001 ff18 	bl	5df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    3fc0:	b002      	add	sp, #8
    3fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fc6:	bf00      	nop
    3fc8:	1fffd39c 	.word	0x1fffd39c
    3fcc:	1fff8734 	.word	0x1fff8734
    3fd0:	0000869c 	.word	0x0000869c
    3fd4:	00008690 	.word	0x00008690
    3fd8:	00008698 	.word	0x00008698

00003fdc <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    3fdc:	b508      	push	{r3, lr}
    3fde:	2106      	movs	r1, #6
    3fe0:	4803      	ldr	r0, [pc, #12]	; (3ff0 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    3fe2:	f001 fbcf 	bl	5784 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3fe6:	4803      	ldr	r0, [pc, #12]	; (3ff4 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_SOFTWARESERIAL)
	transport->println("_VMDPE");
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif
}
    3fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3fec:	f001 bef0 	b.w	5dd0 <Print::println()>
    3ff0:	000086a0 	.word	0x000086a0
    3ff4:	1fff8734 	.word	0x1fff8734

00003ff8 <VisualMicroDebug::OnBreakPointEnd()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ff8:	4b03      	ldr	r3, [pc, #12]	; (4008 <VisualMicroDebug::OnBreakPointEnd()+0x10>)

void VisualMicroDebug::OnBreakPointEnd()
{
    3ffa:	b082      	sub	sp, #8
    3ffc:	681b      	ldr	r3, [r3, #0]
    3ffe:	9301      	str	r3, [sp, #4]
	return ret;
    4000:	9b01      	ldr	r3, [sp, #4]
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    4002:	6083      	str	r3, [r0, #8]
}
    4004:	b002      	add	sp, #8
    4006:	4770      	bx	lr
    4008:	1fffd39c 	.word	0x1fffd39c

0000400c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    400c:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    400e:	4a10      	ldr	r2, [pc, #64]	; (4050 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    4010:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    4012:	b9a1      	cbnz	r1, 403e <VisualMicroDebug::outPacketStart(bool)+0x32>
    4014:	6813      	ldr	r3, [r2, #0]
    4016:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    4018:	6841      	ldr	r1, [r0, #4]
	return ret;
    401a:	9b00      	ldr	r3, [sp, #0]
    401c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    401e:	2920      	cmp	r1, #32
    4020:	d80d      	bhi.n	403e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4022:	6813      	ldr	r3, [r2, #0]
    4024:	9302      	str	r3, [sp, #8]
	return ret;
    4026:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4028:	f104 0321 	add.w	r3, r4, #33	; 0x21
    402c:	1a59      	subs	r1, r3, r1
    402e:	e001      	b.n	4034 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4030:	4299      	cmp	r1, r3
    4032:	d304      	bcc.n	403e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4034:	6813      	ldr	r3, [r2, #0]
    4036:	9301      	str	r3, [sp, #4]
	return ret;
    4038:	9b01      	ldr	r3, [sp, #4]
    403a:	429c      	cmp	r4, r3
    403c:	d9f8      	bls.n	4030 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    403e:	6813      	ldr	r3, [r2, #0]
    4040:	9303      	str	r3, [sp, #12]
	return ret;
    4042:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    4044:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    4046:	2001      	movs	r0, #1
    4048:	b005      	add	sp, #20
    404a:	bc10      	pop	{r4}
    404c:	4770      	bx	lr
    404e:	bf00      	nop
    4050:	1fffd39c 	.word	0x1fffd39c

00004054 <VisualMicroDebug::outPacketEnd()>:
    4054:	4770      	bx	lr
    4056:	bf00      	nop

00004058 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(2000);
    4058:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    405c:	f000 ba3a 	b.w	44d4 <delay>

00004060 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    4060:	2300      	movs	r3, #0
    4062:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    4064:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    4066:	b171      	cbz	r1, 4086 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4068:	4807      	ldr	r0, [pc, #28]	; (4088 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    406a:	b082      	sub	sp, #8
    406c:	6803      	ldr	r3, [r0, #0]
    406e:	9301      	str	r3, [sp, #4]
	return ret;
    4070:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4072:	4411      	add	r1, r2
    4074:	e001      	b.n	407a <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4076:	4299      	cmp	r1, r3
    4078:	d304      	bcc.n	4084 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    407a:	6803      	ldr	r3, [r0, #0]
    407c:	9300      	str	r3, [sp, #0]
	return ret;
    407e:	9b00      	ldr	r3, [sp, #0]
    4080:	429a      	cmp	r2, r3
    4082:	d9f8      	bls.n	4076 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    4084:	b002      	add	sp, #8
    4086:	4770      	bx	lr
    4088:	1fffd39c 	.word	0x1fffd39c

0000408c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    408c:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    408e:	4c13      	ldr	r4, [pc, #76]	; (40dc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    4090:	b085      	sub	sp, #20
    4092:	6823      	ldr	r3, [r4, #0]
    4094:	9303      	str	r3, [sp, #12]
	return ret;
    4096:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    4098:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    409a:	460d      	mov	r5, r1
    409c:	4810      	ldr	r0, [pc, #64]	; (40e0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    409e:	2106      	movs	r1, #6
    40a0:	f001 fb70 	bl	5784 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    40a4:	2300      	movs	r3, #0
    40a6:	220a      	movs	r2, #10
    40a8:	4629      	mov	r1, r5
    40aa:	480e      	ldr	r0, [pc, #56]	; (40e4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    40ac:	f001 fea0 	bl	5df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    40b0:	2106      	movs	r1, #6
    40b2:	480d      	ldr	r0, [pc, #52]	; (40e8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    40b4:	f001 fb66 	bl	5784 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    40b8:	480a      	ldr	r0, [pc, #40]	; (40e4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    40ba:	f001 fe89 	bl	5dd0 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40be:	6823      	ldr	r3, [r4, #0]
    40c0:	9302      	str	r3, [sp, #8]
	return ret;
    40c2:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    40c4:	f102 0132 	add.w	r1, r2, #50	; 0x32
    40c8:	e001      	b.n	40ce <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    40ca:	4299      	cmp	r1, r3
    40cc:	d304      	bcc.n	40d8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40ce:	6823      	ldr	r3, [r4, #0]
    40d0:	9301      	str	r3, [sp, #4]
	return ret;
    40d2:	9b01      	ldr	r3, [sp, #4]
    40d4:	429a      	cmp	r2, r3
    40d6:	d9f8      	bls.n	40ca <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    40d8:	b005      	add	sp, #20
    40da:	bd30      	pop	{r4, r5, pc}
    40dc:	1fffd39c 	.word	0x1fffd39c
    40e0:	000086a8 	.word	0x000086a8
    40e4:	1fff8734 	.word	0x1fff8734
    40e8:	000086b0 	.word	0x000086b0

000040ec <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    40ec:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    40ee:	7e03      	ldrb	r3, [r0, #24]
    40f0:	b90b      	cbnz	r3, 40f6 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    40f2:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    40f4:	bd38      	pop	{r3, r4, r5, pc}
    40f6:	460d      	mov	r5, r1
    40f8:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    40fa:	f001 fb19 	bl	5730 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    40fe:	f010 0fff 	tst.w	r0, #255	; 0xff
    4102:	d101      	bne.n	4108 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    4104:	2065      	movs	r0, #101	; 0x65
    4106:	bd38      	pop	{r3, r4, r5, pc}
    4108:	f001 fb12 	bl	5730 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    410c:	f010 0fff 	tst.w	r0, #255	; 0xff
    4110:	d0f8      	beq.n	4104 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    4112:	f001 fad1 	bl	56b8 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    4116:	b2c0      	uxtb	r0, r0
    4118:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    411c:	2b1e      	cmp	r3, #30
    411e:	d8f3      	bhi.n	4108 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    4120:	a201      	add	r2, pc, #4	; (adr r2, 4128 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    4122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4126:	bf00      	nop
    4128:	000041b1 	.word	0x000041b1
    412c:	00004109 	.word	0x00004109
    4130:	00004109 	.word	0x00004109
    4134:	00004109 	.word	0x00004109
    4138:	00004109 	.word	0x00004109
    413c:	00004109 	.word	0x00004109
    4140:	00004109 	.word	0x00004109
    4144:	00004109 	.word	0x00004109
    4148:	00004109 	.word	0x00004109
    414c:	00004109 	.word	0x00004109
    4150:	00004109 	.word	0x00004109
    4154:	000041a5 	.word	0x000041a5
    4158:	00004109 	.word	0x00004109
    415c:	00004109 	.word	0x00004109
    4160:	00004109 	.word	0x00004109
    4164:	00004109 	.word	0x00004109
    4168:	000040f3 	.word	0x000040f3
    416c:	00004109 	.word	0x00004109
    4170:	00004109 	.word	0x00004109
    4174:	00004109 	.word	0x00004109
    4178:	00004109 	.word	0x00004109
    417c:	00004109 	.word	0x00004109
    4180:	00004109 	.word	0x00004109
    4184:	00004109 	.word	0x00004109
    4188:	00004109 	.word	0x00004109
    418c:	000040f3 	.word	0x000040f3
    4190:	00004109 	.word	0x00004109
    4194:	00004109 	.word	0x00004109
    4198:	00004109 	.word	0x00004109
    419c:	00004109 	.word	0x00004109
    41a0:	000040f5 	.word	0x000040f5
		{

		case 'c':
			sendContinuedACK(breakPointId);
    41a4:	4620      	mov	r0, r4
    41a6:	4629      	mov	r1, r5
    41a8:	f7ff ff70 	bl	408c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    41ac:	2063      	movs	r0, #99	; 0x63
    41ae:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    41b0:	2300      	movs	r3, #0
    41b2:	7623      	strb	r3, [r4, #24]
			return 'c';
    41b4:	2063      	movs	r0, #99	; 0x63
    41b6:	bd38      	pop	{r3, r4, r5, pc}

000041b8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    41b8:	b570      	push	{r4, r5, r6, lr}
    41ba:	4605      	mov	r5, r0
    41bc:	b082      	sub	sp, #8
    41be:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    41c0:	b1c9      	cbz	r1, 41f6 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    41c2:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41c4:	4c0d      	ldr	r4, [pc, #52]	; (41fc <VisualMicroDebug::start(bool, bool)+0x44>)
    41c6:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    41c8:	2100      	movs	r1, #0
    41ca:	4628      	mov	r0, r5
    41cc:	f7ff ff8e 	bl	40ec <VisualMicroDebug::breakWait(unsigned char)>
    41d0:	2863      	cmp	r0, #99	; 0x63
    41d2:	d010      	beq.n	41f6 <VisualMicroDebug::start(bool, bool)+0x3e>
    41d4:	6823      	ldr	r3, [r4, #0]
    41d6:	9301      	str	r3, [sp, #4]
	return ret;
    41d8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    41da:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41dc:	6823      	ldr	r3, [r4, #0]
    41de:	9300      	str	r3, [sp, #0]
	return ret;
    41e0:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    41e2:	429a      	cmp	r2, r3
    41e4:	d8f0      	bhi.n	41c8 <VisualMicroDebug::start(bool, bool)+0x10>
    41e6:	4299      	cmp	r1, r3
    41e8:	d2f8      	bcs.n	41dc <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    41ea:	2100      	movs	r1, #0
    41ec:	4628      	mov	r0, r5
    41ee:	f7ff ff7d 	bl	40ec <VisualMicroDebug::breakWait(unsigned char)>
    41f2:	2863      	cmp	r0, #99	; 0x63
    41f4:	d1ee      	bne.n	41d4 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    41f6:	762e      	strb	r6, [r5, #24]
#endif

}
    41f8:	b002      	add	sp, #8
    41fa:	bd70      	pop	{r4, r5, r6, pc}
    41fc:	1fffd39c 	.word	0x1fffd39c

00004200 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    4200:	4b03      	ldr	r3, [pc, #12]	; (4210 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    4202:	2200      	movs	r2, #0
    4204:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    4206:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    4208:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    420a:	615a      	str	r2, [r3, #20]
    420c:	4770      	bx	lr
    420e:	bf00      	nop
    4210:	1fffd354 	.word	0x1fffd354

00004214 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4214:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4216:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    421a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    421e:	d16d      	bne.n	42fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4220:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    4222:	d341      	bcc.n	42a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4224:	f851 3b04 	ldr.w	r3, [r1], #4
    4228:	f840 3b04 	str.w	r3, [r0], #4
    422c:	f851 3b04 	ldr.w	r3, [r1], #4
    4230:	f840 3b04 	str.w	r3, [r0], #4
    4234:	f851 3b04 	ldr.w	r3, [r1], #4
    4238:	f840 3b04 	str.w	r3, [r0], #4
    423c:	f851 3b04 	ldr.w	r3, [r1], #4
    4240:	f840 3b04 	str.w	r3, [r0], #4
    4244:	f851 3b04 	ldr.w	r3, [r1], #4
    4248:	f840 3b04 	str.w	r3, [r0], #4
    424c:	f851 3b04 	ldr.w	r3, [r1], #4
    4250:	f840 3b04 	str.w	r3, [r0], #4
    4254:	f851 3b04 	ldr.w	r3, [r1], #4
    4258:	f840 3b04 	str.w	r3, [r0], #4
    425c:	f851 3b04 	ldr.w	r3, [r1], #4
    4260:	f840 3b04 	str.w	r3, [r0], #4
    4264:	f851 3b04 	ldr.w	r3, [r1], #4
    4268:	f840 3b04 	str.w	r3, [r0], #4
    426c:	f851 3b04 	ldr.w	r3, [r1], #4
    4270:	f840 3b04 	str.w	r3, [r0], #4
    4274:	f851 3b04 	ldr.w	r3, [r1], #4
    4278:	f840 3b04 	str.w	r3, [r0], #4
    427c:	f851 3b04 	ldr.w	r3, [r1], #4
    4280:	f840 3b04 	str.w	r3, [r0], #4
    4284:	f851 3b04 	ldr.w	r3, [r1], #4
    4288:	f840 3b04 	str.w	r3, [r0], #4
    428c:	f851 3b04 	ldr.w	r3, [r1], #4
    4290:	f840 3b04 	str.w	r3, [r0], #4
    4294:	f851 3b04 	ldr.w	r3, [r1], #4
    4298:	f840 3b04 	str.w	r3, [r0], #4
    429c:	f851 3b04 	ldr.w	r3, [r1], #4
    42a0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    42a4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    42a6:	d2bd      	bcs.n	4224 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    42a8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    42aa:	d311      	bcc.n	42d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    42ac:	f851 3b04 	ldr.w	r3, [r1], #4
    42b0:	f840 3b04 	str.w	r3, [r0], #4
    42b4:	f851 3b04 	ldr.w	r3, [r1], #4
    42b8:	f840 3b04 	str.w	r3, [r0], #4
    42bc:	f851 3b04 	ldr.w	r3, [r1], #4
    42c0:	f840 3b04 	str.w	r3, [r0], #4
    42c4:	f851 3b04 	ldr.w	r3, [r1], #4
    42c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    42cc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    42ce:	d2ed      	bcs.n	42ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    42d0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    42d2:	d305      	bcc.n	42e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    42d4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    42d8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    42dc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    42de:	d2f9      	bcs.n	42d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    42e0:	3204      	adds	r2, #4
	beq	.Ldone
    42e2:	d008      	beq.n	42f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    42e4:	07d2      	lsls	r2, r2, #31
	itt ne
    42e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    42e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    42ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    42f0:	d301      	bcc.n	42f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    42f2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    42f4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    42f6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    42f8:	4770      	bx	lr
    42fa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    42fc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    42fe:	d313      	bcc.n	4328 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    4300:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    4302:	d08d      	beq.n	4220 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4304:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4308:	d08a      	beq.n	4220 <memcpy+0xc>

	rsb	r3, #4
    430a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    430e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4310:	07db      	lsls	r3, r3, #31
	itt ne
    4312:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4314:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4318:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    431c:	d380      	bcc.n	4220 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    431e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    4322:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4326:	e77b      	b.n	4220 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4328:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    432a:	d3d9      	bcc.n	42e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    432c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    432e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4332:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4336:	d2f9      	bcs.n	432c <memcpy+0x118>

	ldrb	r3, [r1]
    4338:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    433a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    433c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    433e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    4340:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4342:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4344:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4346:	4770      	bx	lr

00004348 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4348:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    434a:	4c10      	ldr	r4, [pc, #64]	; (438c <fault_isr+0x44>)
    434c:	e008      	b.n	4360 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    434e:	6823      	ldr	r3, [r4, #0]
    4350:	0559      	lsls	r1, r3, #21
    4352:	d40d      	bmi.n	4370 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4354:	6823      	ldr	r3, [r4, #0]
    4356:	051a      	lsls	r2, r3, #20
    4358:	d40f      	bmi.n	437a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    435a:	6823      	ldr	r3, [r4, #0]
    435c:	04db      	lsls	r3, r3, #19
    435e:	d411      	bmi.n	4384 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4360:	6823      	ldr	r3, [r4, #0]
    4362:	0358      	lsls	r0, r3, #13
    4364:	d5f3      	bpl.n	434e <fault_isr+0x6>
    4366:	f000 fb8d 	bl	4a84 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    436a:	6823      	ldr	r3, [r4, #0]
    436c:	0559      	lsls	r1, r3, #21
    436e:	d5f1      	bpl.n	4354 <fault_isr+0xc>
    4370:	f000 fa28 	bl	47c4 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4374:	6823      	ldr	r3, [r4, #0]
    4376:	051a      	lsls	r2, r3, #20
    4378:	d5ef      	bpl.n	435a <fault_isr+0x12>
    437a:	f002 f829 	bl	63d0 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    437e:	6823      	ldr	r3, [r4, #0]
    4380:	04db      	lsls	r3, r3, #19
    4382:	d5ed      	bpl.n	4360 <fault_isr+0x18>
    4384:	f002 f8ba 	bl	64fc <uart2_status_isr>
    4388:	e7ea      	b.n	4360 <fault_isr+0x18>
    438a:	bf00      	nop
    438c:	40048034 	.word	0x40048034

00004390 <unused_isr>:
	}
}

void unused_isr(void)
{
    4390:	b508      	push	{r3, lr}
	fault_isr();
    4392:	f7ff ffd9 	bl	4348 <fault_isr>
    4396:	bf00      	nop

00004398 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4398:	4b01      	ldr	r3, [pc, #4]	; (43a0 <startup_early_hook+0x8>)
    439a:	2210      	movs	r2, #16
    439c:	801a      	strh	r2, [r3, #0]
    439e:	4770      	bx	lr
    43a0:	40052000 	.word	0x40052000

000043a4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    43a4:	4770      	bx	lr
    43a6:	bf00      	nop

000043a8 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    43a8:	4909      	ldr	r1, [pc, #36]	; (43d0 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    43aa:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    43ac:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    43ae:	b130      	cbz	r0, 43be <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    43b0:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    43b2:	4418      	add	r0, r3
    43b4:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
    43b8:	4290      	cmp	r0, r2
    43ba:	d202      	bcs.n	43c2 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    43bc:	6008      	str	r0, [r1, #0]
	}
	return prev;
    43be:	4618      	mov	r0, r3
}
    43c0:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    43c2:	f002 fc77 	bl	6cb4 <__errno>
    43c6:	230c      	movs	r3, #12
    43c8:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    43ca:	f04f 30ff 	mov.w	r0, #4294967295
    43ce:	bd08      	pop	{r3, pc}
    43d0:	1fff8728 	.word	0x1fff8728

000043d4 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    43d4:	7800      	ldrb	r0, [r0, #0]
}
    43d6:	fab0 f080 	clz	r0, r0
    43da:	0940      	lsrs	r0, r0, #5
    43dc:	4770      	bx	lr
    43de:	bf00      	nop

000043e0 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    43e0:	2301      	movs	r3, #1
    43e2:	7003      	strb	r3, [r0, #0]
    43e4:	4770      	bx	lr
    43e6:	bf00      	nop

000043e8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    43e8:	4a1c      	ldr	r2, [pc, #112]	; (445c <pinMode.part.2+0x74>)
    43ea:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    43ee:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    43f0:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    43f2:	d011      	beq.n	4418 <pinMode.part.2+0x30>
    43f4:	2904      	cmp	r1, #4
    43f6:	d01b      	beq.n	4430 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    43f8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    43fc:	2200      	movs	r2, #0
    43fe:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    4402:	b129      	cbz	r1, 4410 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    4404:	2902      	cmp	r1, #2
    4406:	d020      	beq.n	444a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    4408:	2903      	cmp	r1, #3
    440a:	d022      	beq.n	4452 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    440c:	601a      	str	r2, [r3, #0]
    440e:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    4410:	f44f 7280 	mov.w	r2, #256	; 0x100
    4414:	601a      	str	r2, [r3, #0]
    4416:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4418:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    441c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4420:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4424:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4426:	681a      	ldr	r2, [r3, #0]
    4428:	f022 0220 	bic.w	r2, r2, #32
    442c:	601a      	str	r2, [r3, #0]
    442e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4430:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4434:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4438:	2001      	movs	r0, #1
    443a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    443e:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    4440:	681a      	ldr	r2, [r3, #0]
    4442:	f042 0220 	orr.w	r2, r2, #32
    4446:	601a      	str	r2, [r3, #0]
    4448:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    444a:	f240 1203 	movw	r2, #259	; 0x103
    444e:	601a      	str	r2, [r3, #0]
    4450:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    4452:	f44f 7281 	mov.w	r2, #258	; 0x102
    4456:	601a      	str	r2, [r3, #0]
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	00008700 	.word	0x00008700

00004460 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    4460:	b430      	push	{r4, r5}
	RTC_SR = 0;
    4462:	4b05      	ldr	r3, [pc, #20]	; (4478 <rtc_set+0x18>)
	RTC_TPR = 0;
    4464:	4d05      	ldr	r5, [pc, #20]	; (447c <rtc_set+0x1c>)
	RTC_TSR = t;
    4466:	4c06      	ldr	r4, [pc, #24]	; (4480 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4468:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    446a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    446c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    446e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    4470:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    4472:	6019      	str	r1, [r3, #0]
}
    4474:	bc30      	pop	{r4, r5}
    4476:	4770      	bx	lr
    4478:	4003d014 	.word	0x4003d014
    447c:	4003d004 	.word	0x4003d004
    4480:	4003d000 	.word	0x4003d000

00004484 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    4484:	2821      	cmp	r0, #33	; 0x21
    4486:	d801      	bhi.n	448c <pinMode+0x8>
    4488:	f7ff bfae 	b.w	43e8 <pinMode.part.2>
    448c:	4770      	bx	lr
    448e:	bf00      	nop

00004490 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4490:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4492:	490c      	ldr	r1, [pc, #48]	; (44c4 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4494:	4b0c      	ldr	r3, [pc, #48]	; (44c8 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4496:	4a0d      	ldr	r2, [pc, #52]	; (44cc <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4498:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    449a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    449c:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    449e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    44a0:	0152      	lsls	r2, r2, #5
    44a2:	d502      	bpl.n	44aa <micros+0x1a>
    44a4:	2b32      	cmp	r3, #50	; 0x32
    44a6:	bf88      	it	hi
    44a8:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    44aa:	4909      	ldr	r1, [pc, #36]	; (44d0 <micros+0x40>)
    44ac:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    44b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    44b4:	33ff      	adds	r3, #255	; 0xff
    44b6:	fba1 1303 	umull	r1, r3, r1, r3
    44ba:	fb02 f000 	mul.w	r0, r2, r0
}
    44be:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    44c2:	4770      	bx	lr
    44c4:	1fffd39c 	.word	0x1fffd39c
    44c8:	e000e018 	.word	0xe000e018
    44cc:	e000ed04 	.word	0xe000ed04
    44d0:	aaaaaaab 	.word	0xaaaaaaab

000044d4 <delay>:

void delay(uint32_t ms)
{
    44d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44d8:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    44da:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    44dc:	4f20      	ldr	r7, [pc, #128]	; (4560 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    44de:	4b21      	ldr	r3, [pc, #132]	; (4564 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    44e0:	4a21      	ldr	r2, [pc, #132]	; (4568 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    44e2:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    44e4:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    44e6:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    44e8:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    44ea:	0152      	lsls	r2, r2, #5
    44ec:	d502      	bpl.n	44f4 <delay+0x20>
    44ee:	2b32      	cmp	r3, #50	; 0x32
    44f0:	bf88      	it	hi
    44f2:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    44f4:	b395      	cbz	r5, 455c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    44f6:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    44fa:	4e1c      	ldr	r6, [pc, #112]	; (456c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    44fc:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4564 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4500:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4568 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4504:	33ff      	adds	r3, #255	; 0xff
    4506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    450a:	fba6 1303 	umull	r1, r3, r6, r3
    450e:	fb02 f404 	mul.w	r4, r2, r4
    4512:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4516:	b672      	cpsid	i
	current = SYST_CVR;
    4518:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    451c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    451e:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    4522:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4524:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    4528:	33ff      	adds	r3, #255	; 0xff
    452a:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    452e:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4532:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    4536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    453a:	d002      	beq.n	4542 <delay+0x6e>
    453c:	2932      	cmp	r1, #50	; 0x32
    453e:	bf88      	it	hi
    4540:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4542:	fb00 3302 	mla	r3, r0, r2, r3
    4546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    454a:	d304      	bcc.n	4556 <delay+0x82>
				ms--;
				if (ms == 0) return;
    454c:	3d01      	subs	r5, #1
    454e:	d005      	beq.n	455c <delay+0x88>
				start += 1000;
    4550:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    4554:	e7df      	b.n	4516 <delay+0x42>
			}
			yield();
    4556:	f001 fe47 	bl	61e8 <yield>
		}
    455a:	e7dc      	b.n	4516 <delay+0x42>
    455c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4560:	1fffd39c 	.word	0x1fffd39c
    4564:	e000e018 	.word	0xe000e018
    4568:	e000ed04 	.word	0xe000ed04
    456c:	aaaaaaab 	.word	0xaaaaaaab

00004570 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    4570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4572:	4b2d      	ldr	r3, [pc, #180]	; (4628 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4574:	492d      	ldr	r1, [pc, #180]	; (462c <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4576:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 4648 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    457a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 464c <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    457e:	4e2c      	ldr	r6, [pc, #176]	; (4630 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    4580:	4d2c      	ldr	r5, [pc, #176]	; (4634 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    4582:	4c2d      	ldr	r4, [pc, #180]	; (4638 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    4584:	4a2d      	ldr	r2, [pc, #180]	; (463c <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    4586:	4f2e      	ldr	r7, [pc, #184]	; (4640 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4588:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    458c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    458e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4592:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    4594:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    4598:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    459a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    459e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    45a0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    45a4:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    45a6:	2000      	movs	r0, #0
    45a8:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    45aa:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    45ac:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    45b0:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    45b4:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    45b8:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    45ba:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    45bc:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    45be:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    45c0:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    45c2:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    45c4:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    45c6:	2209      	movs	r2, #9
    45c8:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    45cc:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    45d0:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    45d4:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    45d8:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    45dc:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    45e0:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    45e4:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    45e6:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    45ea:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    45ee:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    45f2:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    45f6:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    45f8:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    45fc:	4811      	ldr	r0, [pc, #68]	; (4644 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    45fe:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    4600:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    4604:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4608:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    460a:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    460c:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    460e:	f001 fe39 	bl	6284 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    4612:	2019      	movs	r0, #25
    4614:	f7ff ff5e 	bl	44d4 <delay>
	usb_init();
    4618:	f000 ff9c 	bl	5554 <usb_init>
	delay(275);
    461c:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    4620:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    4624:	f7ff bf56 	b.w	44d4 <delay>
    4628:	e000e108 	.word	0xe000e108
    462c:	40038004 	.word	0x40038004
    4630:	40038014 	.word	0x40038014
    4634:	40038024 	.word	0x40038024
    4638:	4003802c 	.word	0x4003802c
    463c:	4003801c 	.word	0x4003801c
    4640:	40038034 	.word	0x40038034
    4644:	400b8000 	.word	0x400b8000
    4648:	4003800c 	.word	0x4003800c
    464c:	40038008 	.word	0x40038008

00004650 <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    4650:	4a2b      	ldr	r2, [pc, #172]	; (4700 <serial_begin+0xb0>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    4652:	492c      	ldr	r1, [pc, #176]	; (4704 <serial_begin+0xb4>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    4654:	6813      	ldr	r3, [r2, #0]
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
    4656:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    4658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    465c:	6013      	str	r3, [r2, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    465e:	780a      	ldrb	r2, [r1, #0]
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    4660:	4f29      	ldr	r7, [pc, #164]	; (4708 <serial_begin+0xb8>)
	rx_buffer_tail = 0;
    4662:	4e2a      	ldr	r6, [pc, #168]	; (470c <serial_begin+0xbc>)
	tx_buffer_head = 0;
    4664:	4d2a      	ldr	r5, [pc, #168]	; (4710 <serial_begin+0xc0>)
	tx_buffer_tail = 0;
    4666:	4c2b      	ldr	r4, [pc, #172]	; (4714 <serial_begin+0xc4>)
	transmitting = 0;
    4668:	492b      	ldr	r1, [pc, #172]	; (4718 <serial_begin+0xc8>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    466a:	2300      	movs	r3, #0
    466c:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    466e:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    4670:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    4672:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    4674:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    4676:	2a00      	cmp	r2, #0
    4678:	d03d      	beq.n	46f6 <serial_begin+0xa6>
    467a:	2a15      	cmp	r2, #21
    467c:	d021      	beq.n	46c2 <serial_begin+0x72>
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    467e:	4b27      	ldr	r3, [pc, #156]	; (471c <serial_begin+0xcc>)
    4680:	781b      	ldrb	r3, [r3, #0]
    4682:	2b01      	cmp	r3, #1
    4684:	d025      	beq.n	46d2 <serial_begin+0x82>
    4686:	2b05      	cmp	r3, #5
    4688:	d030      	beq.n	46ec <serial_begin+0x9c>
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    468a:	281f      	cmp	r0, #31
    468c:	d827      	bhi.n	46de <serial_begin+0x8e>
    468e:	2000      	movs	r0, #0
    4690:	4602      	mov	r2, r0
    4692:	2501      	movs	r5, #1
	UART0_BDH = (divisor >> 13) & 0x1F;
    4694:	4b22      	ldr	r3, [pc, #136]	; (4720 <serial_begin+0xd0>)
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    4696:	4c23      	ldr	r4, [pc, #140]	; (4724 <serial_begin+0xd4>)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
    4698:	701a      	strb	r2, [r3, #0]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    469a:	4923      	ldr	r1, [pc, #140]	; (4728 <serial_begin+0xd8>)
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
    469c:	705d      	strb	r5, [r3, #1]
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    469e:	2204      	movs	r2, #4
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    46a0:	f04f 0e02 	mov.w	lr, #2
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    46a4:	2788      	movs	r7, #136	; 0x88
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    46a6:	263c      	movs	r6, #60	; 0x3c
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    46a8:	2540      	movs	r5, #64	; 0x40
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    46aa:	7298      	strb	r0, [r3, #10]
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    46ac:	709a      	strb	r2, [r3, #2]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    46ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    46b2:	f883 e013 	strb.w	lr, [r3, #19]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    46b6:	755a      	strb	r2, [r3, #21]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    46b8:	741f      	strb	r7, [r3, #16]
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    46ba:	70de      	strb	r6, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    46bc:	7025      	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    46be:	6008      	str	r0, [r1, #0]
    46c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    46c2:	4b1a      	ldr	r3, [pc, #104]	; (472c <serial_begin+0xdc>)
    46c4:	f240 3213 	movw	r2, #787	; 0x313
    46c8:	601a      	str	r2, [r3, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    46ca:	4b14      	ldr	r3, [pc, #80]	; (471c <serial_begin+0xcc>)
    46cc:	781b      	ldrb	r3, [r3, #0]
    46ce:	2b01      	cmp	r3, #1
    46d0:	d1d9      	bne.n	4686 <serial_begin+0x36>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    46d2:	4b17      	ldr	r3, [pc, #92]	; (4730 <serial_begin+0xe0>)
    46d4:	f44f 7251 	mov.w	r2, #836	; 0x344
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    46d8:	281f      	cmp	r0, #31
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    46da:	601a      	str	r2, [r3, #0]
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    46dc:	d9d7      	bls.n	468e <serial_begin+0x3e>
    46de:	f3c0 3244 	ubfx	r2, r0, #13, #5
    46e2:	f3c0 1547 	ubfx	r5, r0, #5, #8
    46e6:	f000 001f 	and.w	r0, r0, #31
    46ea:	e7d3      	b.n	4694 <serial_begin+0x44>
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    46ec:	4b11      	ldr	r3, [pc, #68]	; (4734 <serial_begin+0xe4>)
    46ee:	f44f 7251 	mov.w	r2, #836	; 0x344
    46f2:	601a      	str	r2, [r3, #0]
    46f4:	e7c9      	b.n	468a <serial_begin+0x3a>
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    46f6:	4b10      	ldr	r3, [pc, #64]	; (4738 <serial_begin+0xe8>)
    46f8:	f240 3213 	movw	r2, #787	; 0x313
    46fc:	601a      	str	r2, [r3, #0]
    46fe:	e7be      	b.n	467e <serial_begin+0x2e>
    4700:	40048034 	.word	0x40048034
    4704:	1fffd3e8 	.word	0x1fffd3e8
    4708:	1fffd3a4 	.word	0x1fffd3a4
    470c:	1fffd3a5 	.word	0x1fffd3a5
    4710:	1fffd434 	.word	0x1fffd434
    4714:	1fffd42d 	.word	0x1fffd42d
    4718:	1fffd42c 	.word	0x1fffd42c
    471c:	1fff872c 	.word	0x1fff872c
    4720:	4006a000 	.word	0x4006a000
    4724:	e000e42d 	.word	0xe000e42d
    4728:	e000e104 	.word	0xe000e104
    472c:	4004c018 	.word	0x4004c018
    4730:	4004a044 	.word	0x4004a044
    4734:	4004c01c 	.word	0x4004c01c
    4738:	4004a040 	.word	0x4004a040

0000473c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    473c:	4a05      	ldr	r2, [pc, #20]	; (4754 <serial_available+0x18>)
	tail = rx_buffer_tail;
    473e:	4b06      	ldr	r3, [pc, #24]	; (4758 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4740:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4742:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4744:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4746:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4748:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    474a:	bf38      	it	cc
    474c:	3040      	addcc	r0, #64	; 0x40
    474e:	1ac0      	subs	r0, r0, r3
}
    4750:	4770      	bx	lr
    4752:	bf00      	nop
    4754:	1fffd3a4 	.word	0x1fffd3a4
    4758:	1fffd3a5 	.word	0x1fffd3a5

0000475c <serial_getchar>:

int serial_getchar(void)
{
    475c:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    475e:	4b15      	ldr	r3, [pc, #84]	; (47b4 <serial_getchar+0x58>)
	tail = rx_buffer_tail;
    4760:	4c15      	ldr	r4, [pc, #84]	; (47b8 <serial_getchar+0x5c>)
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4762:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    4764:	7823      	ldrb	r3, [r4, #0]
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4766:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    4768:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    476a:	429a      	cmp	r2, r3
    476c:	d01e      	beq.n	47ac <serial_getchar+0x50>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    476e:	3301      	adds	r3, #1
    4770:	2b3f      	cmp	r3, #63	; 0x3f
    4772:	d90e      	bls.n	4792 <serial_getchar+0x36>
	c = rx_buffer[tail];
    4774:	4911      	ldr	r1, [pc, #68]	; (47bc <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    4776:	4b12      	ldr	r3, [pc, #72]	; (47c0 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4778:	7808      	ldrb	r0, [r1, #0]
	rx_buffer_tail = tail;
	if (rts_pin) {
    477a:	6819      	ldr	r1, [r3, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    477c:	2300      	movs	r3, #0

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    477e:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    4780:	7023      	strb	r3, [r4, #0]
	if (rts_pin) {
    4782:	b121      	cbz	r1, 478e <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4784:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    4786:	2b1a      	cmp	r3, #26
    4788:	dc01      	bgt.n	478e <serial_getchar+0x32>
    478a:	2300      	movs	r3, #0
    478c:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    478e:	bc30      	pop	{r4, r5}
    4790:	4770      	bx	lr

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4792:	480a      	ldr	r0, [pc, #40]	; (47bc <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    4794:	490a      	ldr	r1, [pc, #40]	; (47c0 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4796:	5cc0      	ldrb	r0, [r0, r3]
	rx_buffer_tail = tail;
	if (rts_pin) {
    4798:	6809      	ldr	r1, [r1, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    479a:	b2dd      	uxtb	r5, r3

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    479c:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    479e:	7025      	strb	r5, [r4, #0]
	if (rts_pin) {
    47a0:	2900      	cmp	r1, #0
    47a2:	d0f4      	beq.n	478e <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
    47a4:	429a      	cmp	r2, r3
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    47a6:	bf38      	it	cc
    47a8:	3240      	addcc	r2, #64	; 0x40
    47aa:	e7eb      	b.n	4784 <serial_getchar+0x28>
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    47ac:	f04f 30ff 	mov.w	r0, #4294967295
    47b0:	e7ed      	b.n	478e <serial_getchar+0x32>
    47b2:	bf00      	nop
    47b4:	1fffd3a4 	.word	0x1fffd3a4
    47b8:	1fffd3a5 	.word	0x1fffd3a5
    47bc:	1fffd3ec 	.word	0x1fffd3ec
    47c0:	1fffd3a0 	.word	0x1fffd3a0

000047c4 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    47c4:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    47c6:	4b38      	ldr	r3, [pc, #224]	; (48a8 <uart0_status_isr+0xe4>)
    47c8:	791a      	ldrb	r2, [r3, #4]
    47ca:	f012 0f30 	tst.w	r2, #48	; 0x30
    47ce:	d02c      	beq.n	482a <uart0_status_isr+0x66>
		__disable_irq();
    47d0:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    47d2:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    47d4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    47d8:	2900      	cmp	r1, #0
    47da:	d03d      	beq.n	4858 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    47dc:	b662      	cpsie	i
			head = rx_buffer_head;
    47de:	4f33      	ldr	r7, [pc, #204]	; (48ac <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    47e0:	4933      	ldr	r1, [pc, #204]	; (48b0 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    47e2:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    47e4:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    47e6:	4e33      	ldr	r6, [pc, #204]	; (48b4 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    47e8:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    47ea:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    47ec:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    47ee:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    47f0:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    47f2:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    47f4:	bf28      	it	cs
    47f6:	2300      	movcs	r3, #0
				if (newhead != tail) {
    47f8:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    47fa:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    47fe:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4800:	bf1c      	itt	ne
    4802:	54f1      	strbne	r1, [r6, r3]
    4804:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    4806:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    480a:	d1f0      	bne.n	47ee <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    480c:	4b2a      	ldr	r3, [pc, #168]	; (48b8 <uart0_status_isr+0xf4>)
    480e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4810:	b2c2      	uxtb	r2, r0
    4812:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    4814:	b14b      	cbz	r3, 482a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4816:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4818:	bf36      	itet	cc
    481a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    481e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4820:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4822:	2827      	cmp	r0, #39	; 0x27
    4824:	bfc4      	itt	gt
    4826:	2201      	movgt	r2, #1
    4828:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    482a:	491f      	ldr	r1, [pc, #124]	; (48a8 <uart0_status_isr+0xe4>)
    482c:	78ca      	ldrb	r2, [r1, #3]
    482e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4830:	0615      	lsls	r5, r2, #24
    4832:	d416      	bmi.n	4862 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4834:	0652      	lsls	r2, r2, #25
    4836:	d50d      	bpl.n	4854 <uart0_status_isr+0x90>
    4838:	4b1b      	ldr	r3, [pc, #108]	; (48a8 <uart0_status_isr+0xe4>)
    483a:	791b      	ldrb	r3, [r3, #4]
    483c:	065b      	lsls	r3, r3, #25
    483e:	d509      	bpl.n	4854 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4840:	4b1e      	ldr	r3, [pc, #120]	; (48bc <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4842:	491f      	ldr	r1, [pc, #124]	; (48c0 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4844:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4846:	2200      	movs	r2, #0
    4848:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    484a:	b103      	cbz	r3, 484e <uart0_status_isr+0x8a>
    484c:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    484e:	4b16      	ldr	r3, [pc, #88]	; (48a8 <uart0_status_isr+0xe4>)
    4850:	223c      	movs	r2, #60	; 0x3c
    4852:	70da      	strb	r2, [r3, #3]
	}
}
    4854:	bcf0      	pop	{r4, r5, r6, r7}
    4856:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4858:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    485a:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    485c:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    485e:	b662      	cpsie	i
    4860:	e7e3      	b.n	482a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4862:	790b      	ldrb	r3, [r1, #4]
    4864:	061c      	lsls	r4, r3, #24
    4866:	d5e5      	bpl.n	4834 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4868:	4b16      	ldr	r3, [pc, #88]	; (48c4 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    486a:	4e17      	ldr	r6, [pc, #92]	; (48c8 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    486c:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    486e:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4870:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    4872:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    4874:	429c      	cmp	r4, r3
    4876:	d00e      	beq.n	4896 <uart0_status_isr+0xd2>
    4878:	4d14      	ldr	r5, [pc, #80]	; (48cc <uart0_status_isr+0x108>)
    487a:	e001      	b.n	4880 <uart0_status_isr+0xbc>
    487c:	42a3      	cmp	r3, r4
    487e:	d00a      	beq.n	4896 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4880:	3301      	adds	r3, #1
    4882:	2b40      	cmp	r3, #64	; 0x40
    4884:	bf28      	it	cs
    4886:	2300      	movcs	r3, #0
			avail = UART0_S1;
    4888:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    488a:	5ce8      	ldrb	r0, [r5, r3]
    488c:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    488e:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4890:	7d08      	ldrb	r0, [r1, #20]
    4892:	2807      	cmp	r0, #7
    4894:	d9f2      	bls.n	487c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4896:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4898:	4903      	ldr	r1, [pc, #12]	; (48a8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    489a:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    489c:	790b      	ldrb	r3, [r1, #4]
    489e:	0618      	lsls	r0, r3, #24
    48a0:	bf44      	itt	mi
    48a2:	237c      	movmi	r3, #124	; 0x7c
    48a4:	70cb      	strbmi	r3, [r1, #3]
    48a6:	e7c5      	b.n	4834 <uart0_status_isr+0x70>
    48a8:	4006a000 	.word	0x4006a000
    48ac:	1fffd3a4 	.word	0x1fffd3a4
    48b0:	1fffd3a5 	.word	0x1fffd3a5
    48b4:	1fffd3ec 	.word	0x1fffd3ec
    48b8:	1fffd3a0 	.word	0x1fffd3a0
    48bc:	1fffd430 	.word	0x1fffd430
    48c0:	1fffd42c 	.word	0x1fffd42c
    48c4:	1fffd434 	.word	0x1fffd434
    48c8:	1fffd42d 	.word	0x1fffd42d
    48cc:	1fffd3a8 	.word	0x1fffd3a8

000048d0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    48d0:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    48d2:	2b03      	cmp	r3, #3
    48d4:	d814      	bhi.n	4900 <usb_rx+0x30>
	__disable_irq();
    48d6:	b672      	cpsid	i
	ret = rx_first[endpoint];
    48d8:	490a      	ldr	r1, [pc, #40]	; (4904 <usb_rx+0x34>)
    48da:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    48de:	b168      	cbz	r0, 48fc <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    48e0:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    48e2:	4c09      	ldr	r4, [pc, #36]	; (4908 <usb_rx+0x38>)
    48e4:	8805      	ldrh	r5, [r0, #0]
    48e6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    48ea:	6846      	ldr	r6, [r0, #4]
    48ec:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    48f0:	1b52      	subs	r2, r2, r5
    48f2:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    48f6:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    48f8:	bc70      	pop	{r4, r5, r6}
    48fa:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    48fc:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    48fe:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4900:	2000      	movs	r0, #0
    4902:	4770      	bx	lr
    4904:	1fffd490 	.word	0x1fffd490
    4908:	1fffd684 	.word	0x1fffd684

0000490c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    490c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    490e:	2803      	cmp	r0, #3
    4910:	d80b      	bhi.n	492a <usb_tx_packet_count+0x1e>
	__disable_irq();
    4912:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    4914:	4b07      	ldr	r3, [pc, #28]	; (4934 <usb_tx_packet_count+0x28>)
    4916:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    491a:	b143      	cbz	r3, 492e <usb_tx_packet_count+0x22>
    491c:	2000      	movs	r0, #0
    491e:	685b      	ldr	r3, [r3, #4]
    4920:	3001      	adds	r0, #1
    4922:	2b00      	cmp	r3, #0
    4924:	d1fb      	bne.n	491e <usb_tx_packet_count+0x12>
	__enable_irq();
    4926:	b662      	cpsie	i
	return count;
    4928:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    492a:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    492c:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    492e:	4618      	mov	r0, r3
    4930:	e7f9      	b.n	4926 <usb_tx_packet_count+0x1a>
    4932:	bf00      	nop
    4934:	1fffd4e4 	.word	0x1fffd4e4

00004938 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    4938:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    493a:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    493c:	4a2b      	ldr	r2, [pc, #172]	; (49ec <usb_rx_memory+0xb4>)
    493e:	7813      	ldrb	r3, [r2, #0]
    4940:	071d      	lsls	r5, r3, #28
    4942:	d506      	bpl.n	4952 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4944:	4b2a      	ldr	r3, [pc, #168]	; (49f0 <usb_rx_memory+0xb8>)
    4946:	6a19      	ldr	r1, [r3, #32]
    4948:	2900      	cmp	r1, #0
    494a:	d036      	beq.n	49ba <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    494c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    494e:	2900      	cmp	r1, #0
    4950:	d041      	beq.n	49d6 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4952:	7853      	ldrb	r3, [r2, #1]
    4954:	071c      	lsls	r4, r3, #28
    4956:	d506      	bpl.n	4966 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4958:	4b25      	ldr	r3, [pc, #148]	; (49f0 <usb_rx_memory+0xb8>)
    495a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    495c:	2900      	cmp	r1, #0
    495e:	d03e      	beq.n	49de <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4960:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4962:	2900      	cmp	r1, #0
    4964:	d039      	beq.n	49da <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4966:	7893      	ldrb	r3, [r2, #2]
    4968:	0719      	lsls	r1, r3, #28
    496a:	d505      	bpl.n	4978 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    496c:	4b20      	ldr	r3, [pc, #128]	; (49f0 <usb_rx_memory+0xb8>)
    496e:	6e19      	ldr	r1, [r3, #96]	; 0x60
    4970:	2900      	cmp	r1, #0
    4972:	d036      	beq.n	49e2 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4974:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4976:	b189      	cbz	r1, 499c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4978:	78d3      	ldrb	r3, [r2, #3]
    497a:	071b      	lsls	r3, r3, #28
    497c:	d507      	bpl.n	498e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    497e:	4b1c      	ldr	r3, [pc, #112]	; (49f0 <usb_rx_memory+0xb8>)
    4980:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4984:	b37a      	cbz	r2, 49e6 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4986:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    498a:	2111      	movs	r1, #17
    498c:	b13a      	cbz	r2, 499e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    498e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4990:	4b18      	ldr	r3, [pc, #96]	; (49f4 <usb_rx_memory+0xbc>)
    4992:	2200      	movs	r2, #0
    4994:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    4996:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    4998:	f000 be68 	b.w	566c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    499c:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    499e:	4c15      	ldr	r4, [pc, #84]	; (49f4 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    49a0:	4d15      	ldr	r5, [pc, #84]	; (49f8 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    49a2:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    49a4:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    49a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    49ac:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    49ae:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    49b0:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    49b2:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    49b4:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    49b6:	bc30      	pop	{r4, r5}
    49b8:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    49ba:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    49bc:	4c0d      	ldr	r4, [pc, #52]	; (49f4 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    49be:	4d0f      	ldr	r5, [pc, #60]	; (49fc <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    49c0:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    49c2:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    49c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    49ca:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    49cc:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    49ce:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    49d0:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    49d2:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    49d4:	e7ef      	b.n	49b6 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    49d6:	2105      	movs	r1, #5
    49d8:	e7e1      	b.n	499e <usb_rx_memory+0x66>
    49da:	2109      	movs	r1, #9
    49dc:	e7df      	b.n	499e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    49de:	2208      	movs	r2, #8
    49e0:	e7ec      	b.n	49bc <usb_rx_memory+0x84>
    49e2:	220c      	movs	r2, #12
    49e4:	e7ea      	b.n	49bc <usb_rx_memory+0x84>
    49e6:	2210      	movs	r2, #16
    49e8:	e7e8      	b.n	49bc <usb_rx_memory+0x84>
    49ea:	bf00      	nop
    49ec:	0000883c 	.word	0x0000883c
    49f0:	1fff8000 	.word	0x1fff8000
    49f4:	1fffd50d 	.word	0x1fffd50d
    49f8:	004000c8 	.word	0x004000c8
    49fc:	00400088 	.word	0x00400088

00004a00 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    4a00:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    4a02:	2b03      	cmp	r3, #3
    4a04:	d81d      	bhi.n	4a42 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4a06:	4a1b      	ldr	r2, [pc, #108]	; (4a74 <usb_tx+0x74>)
    4a08:	0140      	lsls	r0, r0, #5
    4a0a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    4a0e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4a10:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    4a12:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    4a14:	4c18      	ldr	r4, [pc, #96]	; (4a78 <usb_tx+0x78>)
    4a16:	5ce2      	ldrb	r2, [r4, r3]
    4a18:	2a03      	cmp	r2, #3
    4a1a:	d81b      	bhi.n	4a54 <usb_tx+0x54>
    4a1c:	e8df f002 	tbb	[pc, r2]
    4a20:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    4a24:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4a26:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    4a28:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4a2a:	f010 0f08 	tst.w	r0, #8
    4a2e:	bf14      	ite	ne
    4a30:	23c8      	movne	r3, #200	; 0xc8
    4a32:	2388      	moveq	r3, #136	; 0x88
    4a34:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    4a38:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4a3a:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    4a3c:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    4a3e:	b662      	cpsie	i
}
    4a40:	bc30      	pop	{r4, r5}
    4a42:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    4a44:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    4a46:	2202      	movs	r2, #2
		break;
    4a48:	e7ed      	b.n	4a26 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    4a4a:	2205      	movs	r2, #5
    4a4c:	e7eb      	b.n	4a26 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    4a4e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4a50:	2204      	movs	r2, #4
		break;
    4a52:	e7e8      	b.n	4a26 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    4a54:	4a09      	ldr	r2, [pc, #36]	; (4a7c <usb_tx+0x7c>)
    4a56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4a5a:	b138      	cbz	r0, 4a6c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    4a5c:	4a08      	ldr	r2, [pc, #32]	; (4a80 <usb_tx+0x80>)
    4a5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4a62:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    4a64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    4a68:	b662      	cpsie	i
		return;
    4a6a:	e7e9      	b.n	4a40 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    4a6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    4a70:	4a03      	ldr	r2, [pc, #12]	; (4a80 <usb_tx+0x80>)
    4a72:	e7f7      	b.n	4a64 <usb_tx+0x64>
    4a74:	1fff8000 	.word	0x1fff8000
    4a78:	1fffd51c 	.word	0x1fffd51c
    4a7c:	1fffd4e4 	.word	0x1fffd4e4
    4a80:	1fffd4f4 	.word	0x1fffd4f4

00004a84 <usb_isr>:
}



void usb_isr(void)
{
    4a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4a88:	f8df b30c 	ldr.w	fp, [pc, #780]	; 4d98 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    4a8c:	f8df a30c 	ldr.w	sl, [pc, #780]	; 4d9c <usb_isr+0x318>
}



void usb_isr(void)
{
    4a90:	b087      	sub	sp, #28
    4a92:	e044      	b.n	4b1e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    4a94:	4fab      	ldr	r7, [pc, #684]	; (4d44 <usb_isr+0x2c0>)
    4a96:	ea4f 0893 	mov.w	r8, r3, lsr #2
    4a9a:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4a9e:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4aa0:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    4aa4:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4aa8:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4aaa:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    4aae:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	f040 8102 	bne.w	4cbc <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    4ab8:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    4abc:	0c1b      	lsrs	r3, r3, #16
    4abe:	b299      	uxth	r1, r3
    4ac0:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	f000 80f0 	beq.w	4caa <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    4aca:	4b9f      	ldr	r3, [pc, #636]	; (4d48 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    4acc:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    4ad0:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    4ad4:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    4ad8:	2a00      	cmp	r2, #0
    4ada:	f000 82c5 	beq.w	5068 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    4ade:	4d9b      	ldr	r5, [pc, #620]	; (4d4c <usb_isr+0x2c8>)
    4ae0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    4ae4:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    4ae6:	4c9a      	ldr	r4, [pc, #616]	; (4d50 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    4ae8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    4aec:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    4af0:	4419      	add	r1, r3
    4af2:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    4af6:	f000 fd99 	bl	562c <usb_malloc>
					if (packet) {
    4afa:	2800      	cmp	r0, #0
    4afc:	f000 82ad 	beq.w	505a <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    4b00:	4a94      	ldr	r2, [pc, #592]	; (4d54 <usb_isr+0x2d0>)
    4b02:	4b95      	ldr	r3, [pc, #596]	; (4d58 <usb_isr+0x2d4>)
    4b04:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4b08:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    4b0c:	bf18      	it	ne
    4b0e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4b10:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    4b14:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    4b18:	2308      	movs	r3, #8
    4b1a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4b1e:	f89b 4000 	ldrb.w	r4, [fp]
    4b22:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    4b24:	0761      	lsls	r1, r4, #29
    4b26:	d51a      	bpl.n	4b5e <usb_isr+0xda>
		if (usb_configuration) {
    4b28:	4b8c      	ldr	r3, [pc, #560]	; (4d5c <usb_isr+0x2d8>)
    4b2a:	781b      	ldrb	r3, [r3, #0]
    4b2c:	b1a3      	cbz	r3, 4b58 <usb_isr+0xd4>
			t = usb_reboot_timer;
    4b2e:	498c      	ldr	r1, [pc, #560]	; (4d60 <usb_isr+0x2dc>)
    4b30:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4b32:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4b36:	b122      	cbz	r2, 4b42 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    4b38:	3b01      	subs	r3, #1
    4b3a:	b2db      	uxtb	r3, r3
    4b3c:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    4b3e:	b903      	cbnz	r3, 4b42 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    4b40:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    4b42:	4988      	ldr	r1, [pc, #544]	; (4d64 <usb_isr+0x2e0>)
    4b44:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4b46:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4b4a:	b12a      	cbz	r2, 4b58 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    4b4c:	3b01      	subs	r3, #1
    4b4e:	b2db      	uxtb	r3, r3
    4b50:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    4b52:	2b00      	cmp	r3, #0
    4b54:	f000 8257 	beq.w	5006 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    4b58:	2304      	movs	r3, #4
    4b5a:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    4b5e:	f004 0308 	and.w	r3, r4, #8
    4b62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4b66:	2b00      	cmp	r3, #0
    4b68:	f000 80cc 	beq.w	4d04 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    4b6c:	f89a 3000 	ldrb.w	r3, [sl]
    4b70:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    4b72:	091e      	lsrs	r6, r3, #4
    4b74:	d18e      	bne.n	4a94 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4b76:	089c      	lsrs	r4, r3, #2
    4b78:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 4d44 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4b7c:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4b80:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4b84:	f3c2 0283 	ubfx	r2, r2, #2, #4
    4b88:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    4b8a:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4b8c:	2a0c      	cmp	r2, #12
    4b8e:	f200 8088 	bhi.w	4ca2 <usb_isr+0x21e>
    4b92:	e8df f002 	tbb	[pc, r2]
    4b96:	7c7c      	.short	0x7c7c
    4b98:	86868686 	.word	0x86868686
    4b9c:	86478686 	.word	0x86478686
    4ba0:	8686      	.short	0x8686
    4ba2:	07          	.byte	0x07
    4ba3:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4ba4:	6808      	ldr	r0, [r1, #0]
    4ba6:	4d70      	ldr	r5, [pc, #448]	; (4d68 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    4ba8:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4baa:	4f70      	ldr	r7, [pc, #448]	; (4d6c <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4bac:	4e70      	ldr	r6, [pc, #448]	; (4d70 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4bae:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4bb0:	b281      	uxth	r1, r0
    4bb2:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4bb6:	4b67      	ldr	r3, [pc, #412]	; (4d54 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    4bb8:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4bba:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4bbe:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4bc0:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4bc2:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4bc6:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4bc8:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    4bcc:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4bd0:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4bd4:	4c5b      	ldr	r4, [pc, #364]	; (4d44 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4bd6:	f200 80e3 	bhi.w	4da0 <usb_isr+0x31c>
    4bda:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    4bde:	f080 8346 	bcs.w	526e <usb_isr+0x7ea>
    4be2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    4be6:	f000 82fc 	beq.w	51e2 <usb_isr+0x75e>
    4bea:	f200 828d 	bhi.w	5108 <usb_isr+0x684>
    4bee:	2980      	cmp	r1, #128	; 0x80
    4bf0:	f000 8377 	beq.w	52e2 <usb_isr+0x85e>
    4bf4:	2982      	cmp	r1, #130	; 0x82
    4bf6:	f040 82fa 	bne.w	51ee <usb_isr+0x76a>
    4bfa:	88a9      	ldrh	r1, [r5, #4]
    4bfc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    4c00:	2904      	cmp	r1, #4
    4c02:	f200 82f4 	bhi.w	51ee <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4c06:	485b      	ldr	r0, [pc, #364]	; (4d74 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4c08:	4c5b      	ldr	r4, [pc, #364]	; (4d78 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4c0a:	0089      	lsls	r1, r1, #2
    4c0c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4c0e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    4c10:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4c12:	7802      	ldrb	r2, [r0, #0]
    4c14:	0793      	lsls	r3, r2, #30
    4c16:	f140 8458 	bpl.w	54ca <usb_isr+0xa46>
    4c1a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    4c1e:	f04f 0e02 	mov.w	lr, #2
    4c22:	e342      	b.n	52aa <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    4c24:	4f51      	ldr	r7, [pc, #324]	; (4d6c <usb_isr+0x2e8>)
    4c26:	683a      	ldr	r2, [r7, #0]
		if (data) {
    4c28:	b332      	cbz	r2, 4c78 <usb_isr+0x1f4>
			size = ep0_tx_len;
    4c2a:	4b54      	ldr	r3, [pc, #336]	; (4d7c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c2c:	4e50      	ldr	r6, [pc, #320]	; (4d70 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c2e:	4954      	ldr	r1, [pc, #336]	; (4d80 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    4c30:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c32:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c34:	780d      	ldrb	r5, [r1, #0]
    4c36:	2840      	cmp	r0, #64	; 0x40
    4c38:	4686      	mov	lr, r0
    4c3a:	f045 0802 	orr.w	r8, r5, #2
    4c3e:	bf28      	it	cs
    4c40:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c44:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    4c46:	f084 0401 	eor.w	r4, r4, #1
    4c4a:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4c4c:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c50:	bf0c      	ite	eq
    4c52:	2488      	moveq	r4, #136	; 0x88
    4c54:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c56:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4c5a:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4c5c:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4c64:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4c66:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4c68:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    4c6c:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4c6e:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4c70:	2800      	cmp	r0, #0
    4c72:	f000 8145 	beq.w	4f00 <usb_isr+0x47c>
    4c76:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    4c78:	4b3b      	ldr	r3, [pc, #236]	; (4d68 <usb_isr+0x2e4>)
    4c7a:	881a      	ldrh	r2, [r3, #0]
    4c7c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    4c80:	d10f      	bne.n	4ca2 <usb_isr+0x21e>
			setup.bRequest = 0;
    4c82:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4c84:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    4c86:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4c88:	4b3e      	ldr	r3, [pc, #248]	; (4d84 <usb_isr+0x300>)
    4c8a:	701a      	strb	r2, [r3, #0]
    4c8c:	e009      	b.n	4ca2 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    4c8e:	4a36      	ldr	r2, [pc, #216]	; (4d68 <usb_isr+0x2e4>)
    4c90:	8810      	ldrh	r0, [r2, #0]
    4c92:	f242 0221 	movw	r2, #8225	; 0x2021
    4c96:	4290      	cmp	r0, r2
    4c98:	f000 8137 	beq.w	4f0a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4c9c:	4a2d      	ldr	r2, [pc, #180]	; (4d54 <usb_isr+0x2d0>)
    4c9e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4ca2:	4a39      	ldr	r2, [pc, #228]	; (4d88 <usb_isr+0x304>)
    4ca4:	2301      	movs	r3, #1
    4ca6:	7013      	strb	r3, [r2, #0]
    4ca8:	e736      	b.n	4b18 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4caa:	4a2a      	ldr	r2, [pc, #168]	; (4d54 <usb_isr+0x2d0>)
    4cac:	4b2a      	ldr	r3, [pc, #168]	; (4d58 <usb_isr+0x2d4>)
    4cae:	f019 0f08 	tst.w	r9, #8
    4cb2:	bf18      	it	ne
    4cb4:	4613      	movne	r3, r2
    4cb6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4cba:	e72d      	b.n	4b18 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    4cbc:	f000 fcd6 	bl	566c <usb_free>
				packet = tx_first[endpoint];
    4cc0:	4a32      	ldr	r2, [pc, #200]	; (4d8c <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4cc2:	4933      	ldr	r1, [pc, #204]	; (4d90 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    4cc4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    4cc8:	2b00      	cmp	r3, #0
    4cca:	f000 81d1 	beq.w	5070 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4cce:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4cd0:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4cd2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    4cd6:	f103 0208 	add.w	r2, r3, #8
    4cda:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    4cde:	2c03      	cmp	r4, #3
    4ce0:	d805      	bhi.n	4cee <usb_isr+0x26a>
    4ce2:	e8df f004 	tbb	[pc, r4]
    4ce6:	022c      	.short	0x022c
    4ce8:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    4cea:	2202      	movs	r2, #2
    4cec:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    4cee:	881a      	ldrh	r2, [r3, #0]
    4cf0:	f019 0f08 	tst.w	r9, #8
    4cf4:	bf0c      	ite	eq
    4cf6:	2388      	moveq	r3, #136	; 0x88
    4cf8:	23c8      	movne	r3, #200	; 0xc8
    4cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4cfe:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4d02:	e709      	b.n	4b18 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    4d04:	07e0      	lsls	r0, r4, #31
    4d06:	f100 8181 	bmi.w	500c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    4d0a:	0621      	lsls	r1, r4, #24
    4d0c:	f100 81f2 	bmi.w	50f4 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4d10:	07a2      	lsls	r2, r4, #30
    4d12:	d506      	bpl.n	4d22 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    4d14:	4a1f      	ldr	r2, [pc, #124]	; (4d94 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4d16:	4920      	ldr	r1, [pc, #128]	; (4d98 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4d18:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4d1a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4d1c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    4d1e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4d20:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    4d22:	06e3      	lsls	r3, r4, #27
    4d24:	d502      	bpl.n	4d2c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    4d26:	4b1c      	ldr	r3, [pc, #112]	; (4d98 <usb_isr+0x314>)
    4d28:	2210      	movs	r2, #16
    4d2a:	701a      	strb	r2, [r3, #0]
	}

}
    4d2c:	b007      	add	sp, #28
    4d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    4d32:	2204      	movs	r2, #4
    4d34:	558a      	strb	r2, [r1, r6]
						break;
    4d36:	e7da      	b.n	4cee <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    4d38:	2205      	movs	r2, #5
    4d3a:	558a      	strb	r2, [r1, r6]
						break;
    4d3c:	e7d7      	b.n	4cee <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    4d3e:	2203      	movs	r2, #3
    4d40:	558a      	strb	r2, [r1, r6]
						break;
    4d42:	e7d4      	b.n	4cee <usb_isr+0x26a>
    4d44:	1fff8000 	.word	0x1fff8000
    4d48:	1fffd490 	.word	0x1fffd490
    4d4c:	1fffd43c 	.word	0x1fffd43c
    4d50:	1fffd684 	.word	0x1fffd684
    4d54:	004000c8 	.word	0x004000c8
    4d58:	00400088 	.word	0x00400088
    4d5c:	1fffd518 	.word	0x1fffd518
    4d60:	1fffd4a1 	.word	0x1fffd4a1
    4d64:	1fffd520 	.word	0x1fffd520
    4d68:	1fffd504 	.word	0x1fffd504
    4d6c:	1fffd438 	.word	0x1fffd438
    4d70:	1fffd4a0 	.word	0x1fffd4a0
    4d74:	400720c0 	.word	0x400720c0
    4d78:	1fffd510 	.word	0x1fffd510
    4d7c:	1fffd44c 	.word	0x1fffd44c
    4d80:	1fffd50c 	.word	0x1fffd50c
    4d84:	40072098 	.word	0x40072098
    4d88:	40072094 	.word	0x40072094
    4d8c:	1fffd4e4 	.word	0x1fffd4e4
    4d90:	1fffd51c 	.word	0x1fffd51c
    4d94:	40072088 	.word	0x40072088
    4d98:	40072080 	.word	0x40072080
    4d9c:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4da0:	f242 0021 	movw	r0, #8225	; 0x2021
    4da4:	4281      	cmp	r1, r0
    4da6:	f000 812a 	beq.w	4ffe <usb_isr+0x57a>
    4daa:	f200 80d8 	bhi.w	4f5e <usb_isr+0x4da>
    4dae:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    4db2:	f000 8276 	beq.w	52a2 <usb_isr+0x81e>
    4db6:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    4dba:	f040 8218 	bne.w	51ee <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4dbe:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    4dc0:	49b3      	ldr	r1, [pc, #716]	; (5090 <usb_isr+0x60c>)
    4dc2:	78a8      	ldrb	r0, [r5, #2]
    4dc4:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4dc6:	0612      	lsls	r2, r2, #24
    4dc8:	f100 833a 	bmi.w	5440 <usb_isr+0x9bc>
    4dcc:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    4dd0:	49b0      	ldr	r1, [pc, #704]	; (5094 <usb_isr+0x610>)
    4dd2:	0613      	lsls	r3, r2, #24
    4dd4:	f100 830c 	bmi.w	53f0 <usb_isr+0x96c>
    4dd8:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    4ddc:	49ad      	ldr	r1, [pc, #692]	; (5094 <usb_isr+0x610>)
    4dde:	0615      	lsls	r5, r2, #24
    4de0:	f100 8301 	bmi.w	53e6 <usb_isr+0x962>
    4de4:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    4de8:	49aa      	ldr	r1, [pc, #680]	; (5094 <usb_isr+0x610>)
    4dea:	0614      	lsls	r4, r2, #24
    4dec:	f100 82f6 	bmi.w	53dc <usb_isr+0x958>
    4df0:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    4df4:	49a7      	ldr	r1, [pc, #668]	; (5094 <usb_isr+0x610>)
    4df6:	0610      	lsls	r0, r2, #24
    4df8:	f100 834a 	bmi.w	5490 <usb_isr+0xa0c>
    4dfc:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    4e00:	49a4      	ldr	r1, [pc, #656]	; (5094 <usb_isr+0x610>)
    4e02:	0612      	lsls	r2, r2, #24
    4e04:	f100 833f 	bmi.w	5486 <usb_isr+0xa02>
    4e08:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    4e0c:	49a1      	ldr	r1, [pc, #644]	; (5094 <usb_isr+0x610>)
    4e0e:	0613      	lsls	r3, r2, #24
    4e10:	f100 8334 	bmi.w	547c <usb_isr+0x9f8>
    4e14:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    4e18:	499e      	ldr	r1, [pc, #632]	; (5094 <usb_isr+0x610>)
    4e1a:	0615      	lsls	r5, r2, #24
    4e1c:	f100 8329 	bmi.w	5472 <usb_isr+0x9ee>
    4e20:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    4e24:	499b      	ldr	r1, [pc, #620]	; (5094 <usb_isr+0x610>)
    4e26:	0614      	lsls	r4, r2, #24
    4e28:	f100 831e 	bmi.w	5468 <usb_isr+0x9e4>
    4e2c:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    4e30:	4998      	ldr	r1, [pc, #608]	; (5094 <usb_isr+0x610>)
    4e32:	0610      	lsls	r0, r2, #24
    4e34:	f100 8313 	bmi.w	545e <usb_isr+0x9da>
    4e38:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    4e3c:	4995      	ldr	r1, [pc, #596]	; (5094 <usb_isr+0x610>)
    4e3e:	0612      	lsls	r2, r2, #24
    4e40:	f100 8308 	bmi.w	5454 <usb_isr+0x9d0>
    4e44:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    4e48:	4992      	ldr	r1, [pc, #584]	; (5094 <usb_isr+0x610>)
    4e4a:	0613      	lsls	r3, r2, #24
    4e4c:	f100 82fd 	bmi.w	544a <usb_isr+0x9c6>
    4e50:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    4e54:	498f      	ldr	r1, [pc, #572]	; (5094 <usb_isr+0x610>)
    4e56:	0615      	lsls	r5, r2, #24
    4e58:	f100 8331 	bmi.w	54be <usb_isr+0xa3a>
    4e5c:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    4e60:	498c      	ldr	r1, [pc, #560]	; (5094 <usb_isr+0x610>)
    4e62:	0614      	lsls	r4, r2, #24
    4e64:	f100 8325 	bmi.w	54b2 <usb_isr+0xa2e>
    4e68:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    4e6c:	4989      	ldr	r1, [pc, #548]	; (5094 <usb_isr+0x610>)
    4e6e:	0610      	lsls	r0, r2, #24
    4e70:	f100 8319 	bmi.w	54a6 <usb_isr+0xa22>
    4e74:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    4e78:	4986      	ldr	r1, [pc, #536]	; (5094 <usb_isr+0x610>)
    4e7a:	0612      	lsls	r2, r2, #24
    4e7c:	f100 830d 	bmi.w	549a <usb_isr+0xa16>
    4e80:	4885      	ldr	r0, [pc, #532]	; (5098 <usb_isr+0x614>)
    4e82:	4a86      	ldr	r2, [pc, #536]	; (509c <usb_isr+0x618>)
    4e84:	4986      	ldr	r1, [pc, #536]	; (50a0 <usb_isr+0x61c>)
    4e86:	9001      	str	r0, [sp, #4]
    4e88:	4886      	ldr	r0, [pc, #536]	; (50a4 <usb_isr+0x620>)
    4e8a:	4d87      	ldr	r5, [pc, #540]	; (50a8 <usb_isr+0x624>)
    4e8c:	4c87      	ldr	r4, [pc, #540]	; (50ac <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4e8e:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    4e90:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4e92:	9605      	str	r6, [sp, #20]
    4e94:	9502      	str	r5, [sp, #8]
    4e96:	4680      	mov	r8, r0
    4e98:	460f      	mov	r7, r1
    4e9a:	4616      	mov	r6, r2
    4e9c:	461d      	mov	r5, r3
    4e9e:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    4ea0:	6830      	ldr	r0, [r6, #0]
			while (p) {
    4ea2:	b128      	cbz	r0, 4eb0 <usb_isr+0x42c>
				n = p->next;
    4ea4:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4ea6:	f000 fbe1 	bl	566c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    4eaa:	4620      	mov	r0, r4
    4eac:	2c00      	cmp	r4, #0
    4eae:	d1f9      	bne.n	4ea4 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    4eb0:	2300      	movs	r3, #0
    4eb2:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    4eb4:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    4eb6:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    4eb8:	461a      	mov	r2, r3
    4eba:	2300      	movs	r3, #0
    4ebc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    4ec0:	b128      	cbz	r0, 4ece <usb_isr+0x44a>
				n = p->next;
    4ec2:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4ec4:	f000 fbd2 	bl	566c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    4ec8:	4620      	mov	r0, r4
    4eca:	2c00      	cmp	r4, #0
    4ecc:	d1f9      	bne.n	4ec2 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    4ece:	2200      	movs	r2, #0
    4ed0:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    4ed2:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4ed4:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4ed8:	4611      	mov	r1, r2
    4eda:	2200      	movs	r2, #0
    4edc:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    4ee0:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4ee2:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4ee4:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    4ee6:	f04f 0100 	mov.w	r1, #0
    4eea:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    4eee:	2b03      	cmp	r3, #3
    4ef0:	f200 812b 	bhi.w	514a <usb_isr+0x6c6>
    4ef4:	e8df f013 	tbh	[pc, r3, lsl #1]
    4ef8:	01250170 	.word	0x01250170
    4efc:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4f00:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    4f04:	bf18      	it	ne
    4f06:	2200      	movne	r2, #0
    4f08:	e6b5      	b.n	4c76 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4f0a:	4a69      	ldr	r2, [pc, #420]	; (50b0 <usb_isr+0x62c>)
    4f0c:	780d      	ldrb	r5, [r1, #0]
    4f0e:	7848      	ldrb	r0, [r1, #1]
    4f10:	7015      	strb	r5, [r2, #0]
    4f12:	7050      	strb	r0, [r2, #1]
    4f14:	788d      	ldrb	r5, [r1, #2]
    4f16:	78c8      	ldrb	r0, [r1, #3]
    4f18:	7095      	strb	r5, [r2, #2]
    4f1a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4f1c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4f1e:	790d      	ldrb	r5, [r1, #4]
    4f20:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4f22:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4f24:	794d      	ldrb	r5, [r1, #5]
    4f26:	7989      	ldrb	r1, [r1, #6]
    4f28:	7155      	strb	r5, [r2, #5]
    4f2a:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4f2c:	f000 819b 	beq.w	5266 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f30:	4960      	ldr	r1, [pc, #384]	; (50b4 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f32:	4e61      	ldr	r6, [pc, #388]	; (50b8 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f34:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f36:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4f38:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f3c:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f3e:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4f42:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f44:	bf0c      	ite	eq
    4f46:	2188      	moveq	r1, #136	; 0x88
    4f48:	21c8      	movne	r1, #200	; 0xc8
    4f4a:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f4e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4f52:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f56:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4f58:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f5a:	6051      	str	r1, [r2, #4]
    4f5c:	e69e      	b.n	4c9c <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4f5e:	f242 2021 	movw	r0, #8737	; 0x2221
    4f62:	4281      	cmp	r1, r0
    4f64:	f040 81cb 	bne.w	52fe <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4f68:	4b54      	ldr	r3, [pc, #336]	; (50bc <usb_isr+0x638>)
    4f6a:	4c55      	ldr	r4, [pc, #340]	; (50c0 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    4f6c:	4955      	ldr	r1, [pc, #340]	; (50c4 <usb_isr+0x640>)
    4f6e:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4f70:	681d      	ldr	r5, [r3, #0]
    4f72:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    4f74:	f8cd e004 	str.w	lr, [sp, #4]
    4f78:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4f7a:	2000      	movs	r0, #0
    4f7c:	9002      	str	r0, [sp, #8]
    4f7e:	4680      	mov	r8, r0
    4f80:	4684      	mov	ip, r0
    4f82:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f84:	494b      	ldr	r1, [pc, #300]	; (50b4 <usb_isr+0x630>)
    4f86:	780d      	ldrb	r5, [r1, #0]
    4f88:	f045 0e02 	orr.w	lr, r5, #2
    4f8c:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    4f90:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f92:	9b01      	ldr	r3, [sp, #4]
    4f94:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f96:	9b03      	ldr	r3, [sp, #12]
    4f98:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f9a:	bf0c      	ite	eq
    4f9c:	2488      	moveq	r4, #136	; 0x88
    4f9e:	24c8      	movne	r4, #200	; 0xc8
    4fa0:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4fa4:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4fa8:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    4fac:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4fae:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4fb0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 5094 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    4fb4:	4b40      	ldr	r3, [pc, #256]	; (50b8 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    4fb6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 50b4 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4fba:	2800      	cmp	r0, #0
    4fbc:	f040 811e 	bne.w	51fc <usb_isr+0x778>
    4fc0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    4fc4:	d11b      	bne.n	4ffe <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4fc6:	f044 0c02 	orr.w	ip, r4, #2
    4fca:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    4fce:	9c02      	ldr	r4, [sp, #8]
    4fd0:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 5094 <usb_isr+0x610>
    4fd4:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4fd6:	2a00      	cmp	r2, #0
    4fd8:	f040 8126 	bne.w	5228 <usb_isr+0x7a4>
    4fdc:	0402      	lsls	r2, r0, #16
    4fde:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    4fe2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4fe6:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4fea:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4fec:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4fee:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4ff0:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4ff2:	2840      	cmp	r0, #64	; 0x40
    4ff4:	d103      	bne.n	4ffe <usb_isr+0x57a>
    4ff6:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    4ff8:	4a33      	ldr	r2, [pc, #204]	; (50c8 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    4ffa:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    4ffc:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4ffe:	4a33      	ldr	r2, [pc, #204]	; (50cc <usb_isr+0x648>)
    5000:	2301      	movs	r3, #1
    5002:	7013      	strb	r3, [r2, #0]
    5004:	e64d      	b.n	4ca2 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    5006:	f000 fc9d 	bl	5944 <usb_serial_flush_callback>
    500a:	e5a5      	b.n	4b58 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    500c:	4b21      	ldr	r3, [pc, #132]	; (5094 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    500e:	482f      	ldr	r0, [pc, #188]	; (50cc <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    5010:	4928      	ldr	r1, [pc, #160]	; (50b4 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    5012:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5014:	f04f 0e02 	mov.w	lr, #2
    5018:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    501c:	4f2c      	ldr	r7, [pc, #176]	; (50d0 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    501e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5020:	492c      	ldr	r1, [pc, #176]	; (50d4 <usb_isr+0x650>)
    5022:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    5024:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5026:	4e2c      	ldr	r6, [pc, #176]	; (50d8 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    5028:	4d2c      	ldr	r5, [pc, #176]	; (50dc <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    502a:	4c2d      	ldr	r4, [pc, #180]	; (50e0 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    502c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    502e:	210d      	movs	r1, #13
    5030:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5032:	21ff      	movs	r1, #255	; 0xff
    5034:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5036:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 50f0 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    503a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    503c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    503e:	4d29      	ldr	r5, [pc, #164]	; (50e4 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5040:	4a29      	ldr	r2, [pc, #164]	; (50e8 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5042:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5046:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5048:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    504a:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    504e:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5050:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5052:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    5054:	b007      	add	sp, #28
    5056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    505a:	4a24      	ldr	r2, [pc, #144]	; (50ec <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    505c:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    5060:	7813      	ldrb	r3, [r2, #0]
    5062:	3301      	adds	r3, #1
    5064:	7013      	strb	r3, [r2, #0]
    5066:	e557      	b.n	4b18 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    5068:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    506c:	4d0e      	ldr	r5, [pc, #56]	; (50a8 <usb_isr+0x624>)
    506e:	e53a      	b.n	4ae6 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    5070:	5d8b      	ldrb	r3, [r1, r6]
    5072:	2b03      	cmp	r3, #3
    5074:	f200 80f0 	bhi.w	5258 <usb_isr+0x7d4>
    5078:	a201      	add	r2, pc, #4	; (adr r2, 5080 <usb_isr+0x5fc>)
    507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    507e:	bf00      	nop
    5080:	00004b19 	.word	0x00004b19
    5084:	00004b19 	.word	0x00004b19
    5088:	0000513d 	.word	0x0000513d
    508c:	00005137 	.word	0x00005137
    5090:	1fffd518 	.word	0x1fffd518
    5094:	1fff8000 	.word	0x1fff8000
    5098:	1fffd4f4 	.word	0x1fffd4f4
    509c:	1fffd490 	.word	0x1fffd490
    50a0:	1fffd4e4 	.word	0x1fffd4e4
    50a4:	1fffd51c 	.word	0x1fffd51c
    50a8:	1fffd43c 	.word	0x1fffd43c
    50ac:	1fffd684 	.word	0x1fffd684
    50b0:	1fffd68c 	.word	0x1fffd68c
    50b4:	1fffd50c 	.word	0x1fffd50c
    50b8:	1fffd4a0 	.word	0x1fffd4a0
    50bc:	1fffd39c 	.word	0x1fffd39c
    50c0:	1fffd694 	.word	0x1fffd694
    50c4:	1fffd530 	.word	0x1fffd530
    50c8:	1fffd44c 	.word	0x1fffd44c
    50cc:	40072094 	.word	0x40072094
    50d0:	400720c0 	.word	0x400720c0
    50d4:	00400088 	.word	0x00400088
    50d8:	40072088 	.word	0x40072088
    50dc:	40072080 	.word	0x40072080
    50e0:	40072098 	.word	0x40072098
    50e4:	1fffd450 	.word	0x1fffd450
    50e8:	1fffd4a4 	.word	0x1fffd4a4
    50ec:	1fffd50d 	.word	0x1fffd50d
    50f0:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    50f4:	49c1      	ldr	r1, [pc, #772]	; (53fc <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    50f6:	4bc2      	ldr	r3, [pc, #776]	; (5400 <usb_isr+0x97c>)
    50f8:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    50fa:	200d      	movs	r0, #13
    50fc:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    50fe:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5100:	07a2      	lsls	r2, r4, #30
    5102:	f57f ae0e 	bpl.w	4d22 <usb_isr+0x29e>
    5106:	e605      	b.n	4d14 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5108:	f240 3202 	movw	r2, #770	; 0x302
    510c:	4291      	cmp	r1, r2
    510e:	f040 80ee 	bne.w	52ee <usb_isr+0x86a>
    5112:	88a9      	ldrh	r1, [r5, #4]
    5114:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5118:	2904      	cmp	r1, #4
    511a:	d868      	bhi.n	51ee <usb_isr+0x76a>
    511c:	886a      	ldrh	r2, [r5, #2]
    511e:	2a00      	cmp	r2, #0
    5120:	d165      	bne.n	51ee <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    5122:	48b6      	ldr	r0, [pc, #728]	; (53fc <usb_isr+0x978>)
    5124:	f8cd e004 	str.w	lr, [sp, #4]
    5128:	0089      	lsls	r1, r1, #2
    512a:	4408      	add	r0, r1
    512c:	7801      	ldrb	r1, [r0, #0]
    512e:	f041 0102 	orr.w	r1, r1, #2
    5132:	7001      	strb	r1, [r0, #0]
    5134:	e721      	b.n	4f7a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5136:	2301      	movs	r3, #1
    5138:	558b      	strb	r3, [r1, r6]
						break;
    513a:	e4ed      	b.n	4b18 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    513c:	2300      	movs	r3, #0
    513e:	558b      	strb	r3, [r1, r6]
						break;
    5140:	e4ea      	b.n	4b18 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5142:	f04f 0301 	mov.w	r3, #1
    5146:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    514a:	3501      	adds	r5, #1
    514c:	2d04      	cmp	r5, #4
    514e:	f106 0604 	add.w	r6, r6, #4
    5152:	f107 0704 	add.w	r7, r7, #4
    5156:	f108 0801 	add.w	r8, r8, #1
    515a:	f47f aea1 	bne.w	4ea0 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    515e:	4ca9      	ldr	r4, [pc, #676]	; (5404 <usb_isr+0x980>)
			*reg = epconf;
    5160:	4ba9      	ldr	r3, [pc, #676]	; (5408 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5162:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    5164:	4da9      	ldr	r5, [pc, #676]	; (540c <usb_isr+0x988>)
    5166:	9f04      	ldr	r7, [sp, #16]
    5168:	9e05      	ldr	r6, [sp, #20]
    516a:	2100      	movs	r1, #0
    516c:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    516e:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    5170:	0713      	lsls	r3, r2, #28
    5172:	f100 8105 	bmi.w	5380 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5176:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    5178:	49a5      	ldr	r1, [pc, #660]	; (5410 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    517a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 541c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    517e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    5180:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5182:	f04f 0100 	mov.w	r1, #0
    5186:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    518a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    518e:	f100 80e0 	bmi.w	5352 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    5192:	49a0      	ldr	r1, [pc, #640]	; (5414 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5194:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    5196:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5198:	2100      	movs	r1, #0
    519a:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    519e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    51a2:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51a4:	f8df 8274 	ldr.w	r8, [pc, #628]	; 541c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    51a8:	f100 8101 	bmi.w	53ae <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    51ac:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    51ae:	499a      	ldr	r1, [pc, #616]	; (5418 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51b0:	4c9a      	ldr	r4, [pc, #616]	; (541c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    51b2:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51b4:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    51b6:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51b8:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    51bc:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    51c0:	f100 80b0 	bmi.w	5324 <usb_isr+0x8a0>
    51c4:	7833      	ldrb	r3, [r6, #0]
    51c6:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    51c8:	2100      	movs	r1, #0
    51ca:	f083 0201 	eor.w	r2, r3, #1
    51ce:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    51d2:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    51d6:	e6d0      	b.n	4f7a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    51d8:	f04f 0300 	mov.w	r3, #0
    51dc:	f888 3000 	strb.w	r3, [r8]
    51e0:	e7b3      	b.n	514a <usb_isr+0x6c6>
    51e2:	88a9      	ldrh	r1, [r5, #4]
    51e4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    51e8:	2904      	cmp	r1, #4
    51ea:	f240 808d 	bls.w	5308 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    51ee:	4a83      	ldr	r2, [pc, #524]	; (53fc <usb_isr+0x978>)
    51f0:	230f      	movs	r3, #15
    51f2:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    51f4:	4a8a      	ldr	r2, [pc, #552]	; (5420 <usb_isr+0x99c>)
    51f6:	2301      	movs	r3, #1
    51f8:	7013      	strb	r3, [r2, #0]
    51fa:	e552      	b.n	4ca2 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    51fc:	2840      	cmp	r0, #64	; 0x40
    51fe:	f67f aee2 	bls.w	4fc6 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5202:	f044 0402 	orr.w	r4, r4, #2
    5206:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    520a:	9e02      	ldr	r6, [sp, #8]
    520c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    520e:	b1ba      	cbz	r2, 5240 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    5210:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5214:	4a83      	ldr	r2, [pc, #524]	; (5424 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    5216:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5218:	4633      	mov	r3, r6
    521a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    521c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5220:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5222:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5226:	e6e7      	b.n	4ff8 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    5228:	f89d 3004 	ldrb.w	r3, [sp, #4]
    522c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    522e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5230:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5232:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5234:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5238:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    523a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    523e:	e6d8      	b.n	4ff2 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    5240:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5244:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5246:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5248:	4a77      	ldr	r2, [pc, #476]	; (5428 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    524a:	f888 5000 	strb.w	r5, [r8]
    524e:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5250:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5252:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5256:	e6cf      	b.n	4ff8 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    5258:	f019 0f08 	tst.w	r9, #8
    525c:	bf0c      	ite	eq
    525e:	2302      	moveq	r3, #2
    5260:	2303      	movne	r3, #3
    5262:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    5264:	e458      	b.n	4b18 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5266:	4a71      	ldr	r2, [pc, #452]	; (542c <usb_isr+0x9a8>)
    5268:	210f      	movs	r1, #15
    526a:	7011      	strb	r1, [r2, #0]
    526c:	e660      	b.n	4f30 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    526e:	4a70      	ldr	r2, [pc, #448]	; (5430 <usb_isr+0x9ac>)
    5270:	6854      	ldr	r4, [r2, #4]
    5272:	2c00      	cmp	r4, #0
    5274:	d0bb      	beq.n	51ee <usb_isr+0x76a>
    5276:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5278:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    527c:	e003      	b.n	5286 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    527e:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    5280:	6854      	ldr	r4, [r2, #4]
    5282:	2c00      	cmp	r4, #0
    5284:	d0b3      	beq.n	51ee <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5286:	8813      	ldrh	r3, [r2, #0]
    5288:	4283      	cmp	r3, r0
    528a:	d1f8      	bne.n	527e <usb_isr+0x7fa>
    528c:	8853      	ldrh	r3, [r2, #2]
    528e:	4573      	cmp	r3, lr
    5290:	d1f5      	bne.n	527e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    5292:	0a00      	lsrs	r0, r0, #8
    5294:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    5296:	bf0c      	ite	eq
    5298:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    529c:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    52a0:	e003      	b.n	52aa <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    52a2:	4a64      	ldr	r2, [pc, #400]	; (5434 <usb_isr+0x9b0>)
    52a4:	4c64      	ldr	r4, [pc, #400]	; (5438 <usb_isr+0x9b4>)
    52a6:	7812      	ldrb	r2, [r2, #0]
    52a8:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    52aa:	88e8      	ldrh	r0, [r5, #6]
    52ac:	4570      	cmp	r0, lr
    52ae:	f080 813f 	bcs.w	5530 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    52b2:	4962      	ldr	r1, [pc, #392]	; (543c <usb_isr+0x9b8>)
    52b4:	780d      	ldrb	r5, [r1, #0]
    52b6:	2840      	cmp	r0, #64	; 0x40
    52b8:	4684      	mov	ip, r0
    52ba:	f045 0e02 	orr.w	lr, r5, #2
    52be:	bf28      	it	cs
    52c0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    52c4:	eb04 030c 	add.w	r3, r4, ip
    52c8:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    52cc:	9302      	str	r3, [sp, #8]
    52ce:	2301      	movs	r3, #1
    52d0:	6054      	str	r4, [r2, #4]
    52d2:	ebcc 0000 	rsb	r0, ip, r0
    52d6:	ea4f 480c 	mov.w	r8, ip, lsl #16
    52da:	2200      	movs	r2, #0
    52dc:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52de:	24c8      	movs	r4, #200	; 0xc8
    52e0:	e65e      	b.n	4fa0 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    52e2:	4c55      	ldr	r4, [pc, #340]	; (5438 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    52e4:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    52e8:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    52ea:	7062      	strb	r2, [r4, #1]
    52ec:	e7dd      	b.n	52aa <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    52ee:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    52f2:	f47f af7c 	bne.w	51ee <usb_isr+0x76a>
    52f6:	2301      	movs	r3, #1
    52f8:	2200      	movs	r2, #0
    52fa:	9301      	str	r3, [sp, #4]
    52fc:	e63d      	b.n	4f7a <usb_isr+0x4f6>
    52fe:	f242 3221 	movw	r2, #8993	; 0x2321
    5302:	4291      	cmp	r1, r2
    5304:	d0f7      	beq.n	52f6 <usb_isr+0x872>
    5306:	e772      	b.n	51ee <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5308:	886a      	ldrh	r2, [r5, #2]
    530a:	2a00      	cmp	r2, #0
    530c:	f47f af6f 	bne.w	51ee <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5310:	483a      	ldr	r0, [pc, #232]	; (53fc <usb_isr+0x978>)
    5312:	f8cd e004 	str.w	lr, [sp, #4]
    5316:	0089      	lsls	r1, r1, #2
    5318:	4408      	add	r0, r1
    531a:	7801      	ldrb	r1, [r0, #0]
    531c:	f021 0102 	bic.w	r1, r1, #2
    5320:	7001      	strb	r1, [r0, #0]
    5322:	e62a      	b.n	4f7a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5324:	f000 f982 	bl	562c <usb_malloc>
				if (p) {
    5328:	2800      	cmp	r0, #0
    532a:	f000 80ef 	beq.w	550c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    532e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5330:	4a3d      	ldr	r2, [pc, #244]	; (5428 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5332:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5336:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    533a:	f000 f977 	bl	562c <usb_malloc>
				if (p) {
    533e:	2800      	cmp	r0, #0
    5340:	f000 80de 	beq.w	5500 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    5344:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5346:	4a37      	ldr	r2, [pc, #220]	; (5424 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5348:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    534c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    5350:	e738      	b.n	51c4 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5352:	f000 f96b 	bl	562c <usb_malloc>
				if (p) {
    5356:	2800      	cmp	r0, #0
    5358:	f000 80c0 	beq.w	54dc <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    535c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    535e:	4a32      	ldr	r2, [pc, #200]	; (5428 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5360:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5364:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5368:	f000 f960 	bl	562c <usb_malloc>
				if (p) {
    536c:	2800      	cmp	r0, #0
    536e:	f000 80af 	beq.w	54d0 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    5372:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5374:	4a2b      	ldr	r2, [pc, #172]	; (5424 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5376:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    537a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    537e:	e708      	b.n	5192 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5380:	f000 f954 	bl	562c <usb_malloc>
				if (p) {
    5384:	2800      	cmp	r0, #0
    5386:	f000 80cd 	beq.w	5524 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    538a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    538c:	4a26      	ldr	r2, [pc, #152]	; (5428 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    538e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5392:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5396:	f000 f949 	bl	562c <usb_malloc>
				if (p) {
    539a:	2800      	cmp	r0, #0
    539c:	f000 80bc 	beq.w	5518 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    53a0:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53a2:	4a20      	ldr	r2, [pc, #128]	; (5424 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    53a4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53a8:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    53ac:	e6e3      	b.n	5176 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    53ae:	f000 f93d 	bl	562c <usb_malloc>
				if (p) {
    53b2:	2800      	cmp	r0, #0
    53b4:	f000 809e 	beq.w	54f4 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    53b8:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    53ba:	4a1b      	ldr	r2, [pc, #108]	; (5428 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    53bc:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    53c0:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    53c4:	f000 f932 	bl	562c <usb_malloc>
				if (p) {
    53c8:	2800      	cmp	r0, #0
    53ca:	f000 808d 	beq.w	54e8 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    53ce:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53d0:	4a14      	ldr	r2, [pc, #80]	; (5424 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    53d2:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    53d6:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    53da:	e6e7      	b.n	51ac <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    53dc:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    53de:	3808      	subs	r0, #8
    53e0:	f000 f944 	bl	566c <usb_free>
    53e4:	e504      	b.n	4df0 <usb_isr+0x36c>
    53e6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    53e8:	3808      	subs	r0, #8
    53ea:	f000 f93f 	bl	566c <usb_free>
    53ee:	e4f9      	b.n	4de4 <usb_isr+0x360>
    53f0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    53f2:	3808      	subs	r0, #8
    53f4:	f000 f93a 	bl	566c <usb_free>
    53f8:	e4ee      	b.n	4dd8 <usb_isr+0x354>
    53fa:	bf00      	nop
    53fc:	400720c0 	.word	0x400720c0
    5400:	40072080 	.word	0x40072080
    5404:	0000883c 	.word	0x0000883c
    5408:	400720c4 	.word	0x400720c4
    540c:	1fffd50d 	.word	0x1fffd50d
    5410:	400720c8 	.word	0x400720c8
    5414:	400720cc 	.word	0x400720cc
    5418:	400720d0 	.word	0x400720d0
    541c:	1fff8000 	.word	0x1fff8000
    5420:	40072094 	.word	0x40072094
    5424:	004000c8 	.word	0x004000c8
    5428:	00400088 	.word	0x00400088
    542c:	1fffd4a1 	.word	0x1fffd4a1
    5430:	00008840 	.word	0x00008840
    5434:	1fffd518 	.word	0x1fffd518
    5438:	1fffd510 	.word	0x1fffd510
    543c:	1fffd50c 	.word	0x1fffd50c
    5440:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5442:	3808      	subs	r0, #8
    5444:	f000 f912 	bl	566c <usb_free>
    5448:	e4c0      	b.n	4dcc <usb_isr+0x348>
    544a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    544c:	3808      	subs	r0, #8
    544e:	f000 f90d 	bl	566c <usb_free>
    5452:	e4fd      	b.n	4e50 <usb_isr+0x3cc>
    5454:	6f48      	ldr	r0, [r1, #116]	; 0x74
    5456:	3808      	subs	r0, #8
    5458:	f000 f908 	bl	566c <usb_free>
    545c:	e4f2      	b.n	4e44 <usb_isr+0x3c0>
    545e:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    5460:	3808      	subs	r0, #8
    5462:	f000 f903 	bl	566c <usb_free>
    5466:	e4e7      	b.n	4e38 <usb_isr+0x3b4>
    5468:	6e48      	ldr	r0, [r1, #100]	; 0x64
    546a:	3808      	subs	r0, #8
    546c:	f000 f8fe 	bl	566c <usb_free>
    5470:	e4dc      	b.n	4e2c <usb_isr+0x3a8>
    5472:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    5474:	3808      	subs	r0, #8
    5476:	f000 f8f9 	bl	566c <usb_free>
    547a:	e4d1      	b.n	4e20 <usb_isr+0x39c>
    547c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    547e:	3808      	subs	r0, #8
    5480:	f000 f8f4 	bl	566c <usb_free>
    5484:	e4c6      	b.n	4e14 <usb_isr+0x390>
    5486:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    5488:	3808      	subs	r0, #8
    548a:	f000 f8ef 	bl	566c <usb_free>
    548e:	e4bb      	b.n	4e08 <usb_isr+0x384>
    5490:	6c48      	ldr	r0, [r1, #68]	; 0x44
    5492:	3808      	subs	r0, #8
    5494:	f000 f8ea 	bl	566c <usb_free>
    5498:	e4b0      	b.n	4dfc <usb_isr+0x378>
    549a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    549e:	3808      	subs	r0, #8
    54a0:	f000 f8e4 	bl	566c <usb_free>
    54a4:	e4ec      	b.n	4e80 <usb_isr+0x3fc>
    54a6:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    54aa:	3808      	subs	r0, #8
    54ac:	f000 f8de 	bl	566c <usb_free>
    54b0:	e4e0      	b.n	4e74 <usb_isr+0x3f0>
    54b2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    54b6:	3808      	subs	r0, #8
    54b8:	f000 f8d8 	bl	566c <usb_free>
    54bc:	e4d4      	b.n	4e68 <usb_isr+0x3e4>
    54be:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    54c2:	3808      	subs	r0, #8
    54c4:	f000 f8d2 	bl	566c <usb_free>
    54c8:	e4c8      	b.n	4e5c <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    54ca:	f04f 0e02 	mov.w	lr, #2
    54ce:	e6ec      	b.n	52aa <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    54d0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    54d2:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    54d6:	3201      	adds	r2, #1
    54d8:	702a      	strb	r2, [r5, #0]
    54da:	e65a      	b.n	5192 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    54dc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    54de:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    54e2:	3201      	adds	r2, #1
    54e4:	702a      	strb	r2, [r5, #0]
    54e6:	e73f      	b.n	5368 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    54e8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    54ea:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    54ee:	3201      	adds	r2, #1
    54f0:	702a      	strb	r2, [r5, #0]
    54f2:	e65b      	b.n	51ac <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    54f4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    54f6:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    54fa:	3201      	adds	r2, #1
    54fc:	702a      	strb	r2, [r5, #0]
    54fe:	e761      	b.n	53c4 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5500:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5502:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    5506:	3201      	adds	r2, #1
    5508:	702a      	strb	r2, [r5, #0]
    550a:	e65b      	b.n	51c4 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    550c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    550e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    5512:	3201      	adds	r2, #1
    5514:	702a      	strb	r2, [r5, #0]
    5516:	e710      	b.n	533a <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5518:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    551a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    551e:	3201      	adds	r2, #1
    5520:	702a      	strb	r2, [r5, #0]
    5522:	e628      	b.n	5176 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5524:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5526:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    552a:	3201      	adds	r2, #1
    552c:	702a      	strb	r2, [r5, #0]
    552e:	e732      	b.n	5396 <usb_isr+0x912>
    5530:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5534:	46f4      	mov	ip, lr
    5536:	bf28      	it	cs
    5538:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    553c:	eb04 030c 	add.w	r3, r4, ip
    5540:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5542:	2301      	movs	r3, #1
    5544:	ebcc 000e 	rsb	r0, ip, lr
    5548:	ea4f 480c 	mov.w	r8, ip, lsl #16
    554c:	2200      	movs	r2, #0
    554e:	9301      	str	r3, [sp, #4]
    5550:	e518      	b.n	4f84 <usb_isr+0x500>
    5552:	bf00      	nop

00005554 <usb_init>:
}



void usb_init(void)
{
    5554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5556:	f001 f83d 	bl	65d4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    555a:	4b29      	ldr	r3, [pc, #164]	; (5600 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    555c:	4829      	ldr	r0, [pc, #164]	; (5604 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    555e:	4c2a      	ldr	r4, [pc, #168]	; (5608 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5560:	4f2a      	ldr	r7, [pc, #168]	; (560c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5562:	4d2b      	ldr	r5, [pc, #172]	; (5610 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5564:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 5624 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    5568:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 5628 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    556c:	4e29      	ldr	r6, [pc, #164]	; (5614 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    556e:	2200      	movs	r2, #0
    5570:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    5572:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5574:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    5576:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5578:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    557a:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    557c:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    557e:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5580:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    5582:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5584:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    5586:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5588:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    558a:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    558c:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    558e:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5590:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    5592:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5594:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    5596:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5598:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    559a:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    559c:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    559e:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55a0:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    55a2:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55a4:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    55a6:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55a8:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    55aa:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55ac:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    55ae:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    55b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    55b4:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    55b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    55ba:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    55be:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    55c0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    55c4:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    55c6:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    55ca:	4913      	ldr	r1, [pc, #76]	; (5618 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    55cc:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    55ce:	0e1b      	lsrs	r3, r3, #24
    55d0:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    55d2:	23ff      	movs	r3, #255	; 0xff
    55d4:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    55d8:	4d10      	ldr	r5, [pc, #64]	; (561c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    55da:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    55de:	4810      	ldr	r0, [pc, #64]	; (5620 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    55e0:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    55e2:	2301      	movs	r3, #1
    55e4:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    55e6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    55ea:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    55ec:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    55f0:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    55f2:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    55f6:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    55f8:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    55fa:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    55fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5600:	1fff8000 	.word	0x1fff8000
    5604:	40048034 	.word	0x40048034
    5608:	4007209c 	.word	0x4007209c
    560c:	400720b0 	.word	0x400720b0
    5610:	400720b4 	.word	0x400720b4
    5614:	40072094 	.word	0x40072094
    5618:	40072010 	.word	0x40072010
    561c:	e000e449 	.word	0xe000e449
    5620:	e000e108 	.word	0xe000e108
    5624:	40072080 	.word	0x40072080
    5628:	40072088 	.word	0x40072088

0000562c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    562c:	b672      	cpsid	i
	avail = usb_buffer_available;
    562e:	480d      	ldr	r0, [pc, #52]	; (5664 <usb_malloc+0x38>)
    5630:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5632:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    5636:	2b0b      	cmp	r3, #11
    5638:	dc10      	bgt.n	565c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    563a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    563e:	40d9      	lsrs	r1, r3
    5640:	ea22 0201 	bic.w	r2, r2, r1
    5644:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5646:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    5648:	4807      	ldr	r0, [pc, #28]	; (5668 <usb_malloc+0x3c>)
    564a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    564e:	00db      	lsls	r3, r3, #3
    5650:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5652:	2100      	movs	r1, #0
    5654:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    5656:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    5658:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    565a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    565c:	b662      	cpsie	i
		return NULL;
    565e:	2000      	movs	r0, #0
    5660:	4770      	bx	lr
    5662:	bf00      	nop
    5664:	1fff8730 	.word	0x1fff8730
    5668:	1fff83bc 	.word	0x1fff83bc

0000566c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    566c:	4b0d      	ldr	r3, [pc, #52]	; (56a4 <usb_free+0x38>)
    566e:	4a0e      	ldr	r2, [pc, #56]	; (56a8 <usb_free+0x3c>)
    5670:	1ac3      	subs	r3, r0, r3
    5672:	fba2 2303 	umull	r2, r3, r2, r3
    5676:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    5678:	2b0b      	cmp	r3, #11
    567a:	d80c      	bhi.n	5696 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    567c:	4a0b      	ldr	r2, [pc, #44]	; (56ac <usb_free+0x40>)
    567e:	7812      	ldrb	r2, [r2, #0]
    5680:	b952      	cbnz	r2, 5698 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    5682:	b672      	cpsid	i
	usb_buffer_available |= mask;
    5684:	480a      	ldr	r0, [pc, #40]	; (56b0 <usb_free+0x44>)
    5686:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    568a:	6802      	ldr	r2, [r0, #0]
    568c:	fa21 f303 	lsr.w	r3, r1, r3
    5690:	431a      	orrs	r2, r3
    5692:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5694:	b662      	cpsie	i
    5696:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5698:	4a06      	ldr	r2, [pc, #24]	; (56b4 <usb_free+0x48>)
    569a:	7812      	ldrb	r2, [r2, #0]
    569c:	2a00      	cmp	r2, #0
    569e:	d0f0      	beq.n	5682 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    56a0:	f7ff b94a 	b.w	4938 <usb_rx_memory>
    56a4:	1fff83bc 	.word	0x1fff83bc
    56a8:	38e38e39 	.word	0x38e38e39
    56ac:	1fffd50d 	.word	0x1fffd50d
    56b0:	1fff8730 	.word	0x1fff8730
    56b4:	1fffd518 	.word	0x1fffd518

000056b8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    56b8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    56ba:	4d0f      	ldr	r5, [pc, #60]	; (56f8 <usb_serial_getchar+0x40>)
    56bc:	6828      	ldr	r0, [r5, #0]
    56be:	b178      	cbz	r0, 56e0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    56c0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    56c2:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    56c4:	18c1      	adds	r1, r0, r3
    56c6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    56c8:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    56ca:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    56cc:	d202      	bcs.n	56d4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    56ce:	8043      	strh	r3, [r0, #2]
	}
	return c;
    56d0:	4620      	mov	r0, r4
}
    56d2:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    56d4:	f7ff ffca 	bl	566c <usb_free>
		rx_packet = NULL;
    56d8:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    56da:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    56dc:	602b      	str	r3, [r5, #0]
    56de:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    56e0:	4b06      	ldr	r3, [pc, #24]	; (56fc <usb_serial_getchar+0x44>)
    56e2:	781b      	ldrb	r3, [r3, #0]
    56e4:	b12b      	cbz	r3, 56f2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    56e6:	2003      	movs	r0, #3
    56e8:	f7ff f8f2 	bl	48d0 <usb_rx>
    56ec:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    56ee:	2800      	cmp	r0, #0
    56f0:	d1e6      	bne.n	56c0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    56f2:	f04f 30ff 	mov.w	r0, #4294967295
    56f6:	bd38      	pop	{r3, r4, r5, pc}
    56f8:	1fffd52c 	.word	0x1fffd52c
    56fc:	1fffd518 	.word	0x1fffd518

00005700 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5700:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5702:	4c09      	ldr	r4, [pc, #36]	; (5728 <usb_serial_peekchar+0x28>)
    5704:	6820      	ldr	r0, [r4, #0]
    5706:	b118      	cbz	r0, 5710 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5708:	8843      	ldrh	r3, [r0, #2]
    570a:	4418      	add	r0, r3
    570c:	7a00      	ldrb	r0, [r0, #8]
}
    570e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5710:	4b06      	ldr	r3, [pc, #24]	; (572c <usb_serial_peekchar+0x2c>)
    5712:	781b      	ldrb	r3, [r3, #0]
    5714:	b12b      	cbz	r3, 5722 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5716:	2003      	movs	r0, #3
    5718:	f7ff f8da 	bl	48d0 <usb_rx>
    571c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    571e:	2800      	cmp	r0, #0
    5720:	d1f2      	bne.n	5708 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5722:	f04f 30ff 	mov.w	r0, #4294967295
    5726:	bd10      	pop	{r4, pc}
    5728:	1fffd52c 	.word	0x1fffd52c
    572c:	1fffd518 	.word	0x1fffd518

00005730 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5730:	4b04      	ldr	r3, [pc, #16]	; (5744 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5732:	4a05      	ldr	r2, [pc, #20]	; (5748 <usb_serial_available+0x18>)
    5734:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    5736:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5738:	b11b      	cbz	r3, 5742 <usb_serial_available+0x12>
    573a:	881a      	ldrh	r2, [r3, #0]
    573c:	885b      	ldrh	r3, [r3, #2]
    573e:	1ad3      	subs	r3, r2, r3
    5740:	4418      	add	r0, r3
	return count;
}
    5742:	4770      	bx	lr
    5744:	1fffd52c 	.word	0x1fffd52c
    5748:	1fffd684 	.word	0x1fffd684

0000574c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    574c:	4b0b      	ldr	r3, [pc, #44]	; (577c <usb_serial_flush_input+0x30>)
    574e:	781b      	ldrb	r3, [r3, #0]
    5750:	b19b      	cbz	r3, 577a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    5752:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    5754:	4c0a      	ldr	r4, [pc, #40]	; (5780 <usb_serial_flush_input+0x34>)
    5756:	6820      	ldr	r0, [r4, #0]
    5758:	b148      	cbz	r0, 576e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    575a:	f7ff ff87 	bl	566c <usb_free>
		rx_packet = NULL;
    575e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5760:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5762:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5764:	f7ff f8b4 	bl	48d0 <usb_rx>
		if (!rx) break;
    5768:	b130      	cbz	r0, 5778 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    576a:	f7ff ff7f 	bl	566c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    576e:	2003      	movs	r0, #3
    5770:	f7ff f8ae 	bl	48d0 <usb_rx>
		if (!rx) break;
    5774:	2800      	cmp	r0, #0
    5776:	d1f8      	bne.n	576a <usb_serial_flush_input+0x1e>
    5778:	bd10      	pop	{r4, pc}
    577a:	4770      	bx	lr
    577c:	1fffd518 	.word	0x1fffd518
    5780:	1fffd52c 	.word	0x1fffd52c

00005784 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5788:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 5884 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    578c:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    578e:	2201      	movs	r2, #1
    5790:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    5794:	9101      	str	r1, [sp, #4]
    5796:	b369      	cbz	r1, 57f4 <usb_serial_write+0x70>
    5798:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 5888 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    579c:	4f36      	ldr	r7, [pc, #216]	; (5878 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    579e:	9e01      	ldr	r6, [sp, #4]
    57a0:	4683      	mov	fp, r0
		if (!tx_packet) {
    57a2:	f8d8 0000 	ldr.w	r0, [r8]
    57a6:	b3b0      	cbz	r0, 5816 <usb_serial_write+0x92>
    57a8:	4d34      	ldr	r5, [pc, #208]	; (587c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    57aa:	8844      	ldrh	r4, [r0, #2]
    57ac:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    57b0:	42b1      	cmp	r1, r6
    57b2:	bf28      	it	cs
    57b4:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    57b6:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    57ba:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    57bc:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    57c0:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    57c2:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    57c4:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    57c8:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    57cc:	b151      	cbz	r1, 57e4 <usb_serial_write+0x60>
    57ce:	3c01      	subs	r4, #1
    57d0:	4422      	add	r2, r4
    57d2:	4459      	add	r1, fp
    57d4:	f81b 4b01 	ldrb.w	r4, [fp], #1
    57d8:	f802 4f01 	strb.w	r4, [r2, #1]!
    57dc:	458b      	cmp	fp, r1
    57de:	d1f9      	bne.n	57d4 <usb_serial_write+0x50>
    57e0:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    57e4:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    57e8:	d80b      	bhi.n	5802 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    57ea:	4a25      	ldr	r2, [pc, #148]	; (5880 <usb_serial_write+0xfc>)
    57ec:	2105      	movs	r1, #5
    57ee:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    57f0:	2e00      	cmp	r6, #0
    57f2:	d1d6      	bne.n	57a2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    57f4:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    57f6:	2300      	movs	r3, #0
    57f8:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    57fc:	b003      	add	sp, #12
    57fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    5802:	2240      	movs	r2, #64	; 0x40
    5804:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5806:	4601      	mov	r1, r0
    5808:	2004      	movs	r0, #4
    580a:	f7ff f8f9 	bl	4a00 <usb_tx>
			tx_packet = NULL;
    580e:	2200      	movs	r2, #0
    5810:	f8c8 2000 	str.w	r2, [r8]
    5814:	e7e9      	b.n	57ea <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5816:	783a      	ldrb	r2, [r7, #0]
    5818:	b32a      	cbz	r2, 5866 <usb_serial_write+0xe2>
    581a:	4d18      	ldr	r5, [pc, #96]	; (587c <usb_serial_write+0xf8>)
    581c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    5820:	f04f 0a01 	mov.w	sl, #1
    5824:	e007      	b.n	5836 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5826:	3c01      	subs	r4, #1
    5828:	d016      	beq.n	5858 <usb_serial_write+0xd4>
    582a:	782a      	ldrb	r2, [r5, #0]
    582c:	b9a2      	cbnz	r2, 5858 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    582e:	f000 fcdb 	bl	61e8 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5832:	783a      	ldrb	r2, [r7, #0]
    5834:	b1ba      	cbz	r2, 5866 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    5836:	2004      	movs	r0, #4
    5838:	f7ff f868 	bl	490c <usb_tx_packet_count>
    583c:	2807      	cmp	r0, #7
    583e:	d8f2      	bhi.n	5826 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    5840:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    5844:	f7ff fef2 	bl	562c <usb_malloc>
    5848:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    584c:	2800      	cmp	r0, #0
    584e:	d1ac      	bne.n	57aa <usb_serial_write+0x26>
					tx_noautoflush = 0;
    5850:	4b0c      	ldr	r3, [pc, #48]	; (5884 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5852:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    5854:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5856:	d1e8      	bne.n	582a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    5858:	2301      	movs	r3, #1
					return -1;
    585a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    585e:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5860:	b003      	add	sp, #12
    5862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5866:	2300      	movs	r3, #0
					return -1;
    5868:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    586c:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5870:	b003      	add	sp, #12
    5872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5876:	bf00      	nop
    5878:	1fffd518 	.word	0x1fffd518
    587c:	1fffd528 	.word	0x1fffd528
    5880:	1fffd520 	.word	0x1fffd520
    5884:	1fffd521 	.word	0x1fffd521
    5888:	1fffd524 	.word	0x1fffd524

0000588c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    588c:	b500      	push	{lr}
    588e:	b083      	sub	sp, #12
    5890:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    5892:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5894:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    5898:	4618      	mov	r0, r3
    589a:	f7ff ff73 	bl	5784 <usb_serial_write>
}
    589e:	b003      	add	sp, #12
    58a0:	f85d fb04 	ldr.w	pc, [sp], #4

000058a4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    58a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    58a6:	4d0e      	ldr	r5, [pc, #56]	; (58e0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    58a8:	4c0e      	ldr	r4, [pc, #56]	; (58e4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    58aa:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    58ac:	2301      	movs	r3, #1
    58ae:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    58b0:	b128      	cbz	r0, 58be <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    58b2:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    58b4:	2300      	movs	r3, #0
    58b6:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    58b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    58bc:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    58be:	4b0a      	ldr	r3, [pc, #40]	; (58e8 <usb_serial_write_buffer_free+0x44>)
    58c0:	781b      	ldrb	r3, [r3, #0]
    58c2:	b913      	cbnz	r3, 58ca <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    58c4:	2000      	movs	r0, #0
    58c6:	7020      	strb	r0, [r4, #0]
			return 0;
    58c8:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    58ca:	2004      	movs	r0, #4
    58cc:	f7ff f81e 	bl	490c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    58d0:	2807      	cmp	r0, #7
    58d2:	d8f7      	bhi.n	58c4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    58d4:	f7ff feaa 	bl	562c <usb_malloc>
    58d8:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    58da:	2800      	cmp	r0, #0
    58dc:	d1e9      	bne.n	58b2 <usb_serial_write_buffer_free+0xe>
    58de:	e7f1      	b.n	58c4 <usb_serial_write_buffer_free+0x20>
    58e0:	1fffd524 	.word	0x1fffd524
    58e4:	1fffd521 	.word	0x1fffd521
    58e8:	1fffd518 	.word	0x1fffd518

000058ec <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    58ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    58ee:	4b11      	ldr	r3, [pc, #68]	; (5934 <usb_serial_flush_output+0x48>)
    58f0:	781b      	ldrb	r3, [r3, #0]
    58f2:	b18b      	cbz	r3, 5918 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    58f4:	4e10      	ldr	r6, [pc, #64]	; (5938 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    58f6:	4d11      	ldr	r5, [pc, #68]	; (593c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    58f8:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    58fa:	2701      	movs	r7, #1
    58fc:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    58fe:	b164      	cbz	r4, 591a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    5900:	4a0f      	ldr	r2, [pc, #60]	; (5940 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    5902:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    5904:	2700      	movs	r7, #0
    5906:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5908:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    590a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    590c:	2004      	movs	r0, #4
    590e:	f7ff f877 	bl	4a00 <usb_tx>
		tx_packet = NULL;
    5912:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    5914:	2300      	movs	r3, #0
    5916:	702b      	strb	r3, [r5, #0]
    5918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    591a:	f7ff fe87 	bl	562c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    591e:	4b08      	ldr	r3, [pc, #32]	; (5940 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    5920:	b128      	cbz	r0, 592e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    5922:	4601      	mov	r1, r0
    5924:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5926:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    5928:	f7ff f86a 	bl	4a00 <usb_tx>
    592c:	e7f2      	b.n	5914 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    592e:	701f      	strb	r7, [r3, #0]
    5930:	e7f0      	b.n	5914 <usb_serial_flush_output+0x28>
    5932:	bf00      	nop
    5934:	1fffd518 	.word	0x1fffd518
    5938:	1fffd524 	.word	0x1fffd524
    593c:	1fffd521 	.word	0x1fffd521
    5940:	1fffd520 	.word	0x1fffd520

00005944 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    5944:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    5946:	4b0e      	ldr	r3, [pc, #56]	; (5980 <usb_serial_flush_callback+0x3c>)
    5948:	781b      	ldrb	r3, [r3, #0]
    594a:	b973      	cbnz	r3, 596a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    594c:	4c0d      	ldr	r4, [pc, #52]	; (5984 <usb_serial_flush_callback+0x40>)
    594e:	6821      	ldr	r1, [r4, #0]
    5950:	b161      	cbz	r1, 596c <usb_serial_flush_callback+0x28>
    5952:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    5956:	884b      	ldrh	r3, [r1, #2]
    5958:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    595a:	2004      	movs	r0, #4
    595c:	f7ff f850 	bl	4a00 <usb_tx>
		tx_packet = NULL;
    5960:	6025      	str	r5, [r4, #0]
    5962:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5964:	4b08      	ldr	r3, [pc, #32]	; (5988 <usb_serial_flush_callback+0x44>)
    5966:	2201      	movs	r2, #1
    5968:	701a      	strb	r2, [r3, #0]
    596a:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    596c:	f7ff fe5e 	bl	562c <usb_malloc>
		if (tx) {
    5970:	2800      	cmp	r0, #0
    5972:	d0f7      	beq.n	5964 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    5974:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    597a:	2004      	movs	r0, #4
    597c:	f7ff b840 	b.w	4a00 <usb_tx>
    5980:	1fffd521 	.word	0x1fffd521
    5984:	1fffd524 	.word	0x1fffd524
    5988:	1fffd520 	.word	0x1fffd520

0000598c <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    598c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    598e:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    5990:	b999      	cbnz	r1, 59ba <DMAChannel::begin(bool)+0x2e>
    5992:	6802      	ldr	r2, [r0, #0]
    5994:	b18a      	cbz	r2, 59ba <DMAChannel::begin(bool)+0x2e>
    5996:	7903      	ldrb	r3, [r0, #4]
    5998:	2b0f      	cmp	r3, #15
    599a:	d80e      	bhi.n	59ba <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    599c:	4c27      	ldr	r4, [pc, #156]	; (5a3c <DMAChannel::begin(bool)+0xb0>)
    599e:	8821      	ldrh	r1, [r4, #0]
    59a0:	fa41 f503 	asr.w	r5, r1, r3
    59a4:	07ed      	lsls	r5, r5, #31
    59a6:	d50a      	bpl.n	59be <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    59a8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    59ac:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    59b0:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
    59b4:	d103      	bne.n	59be <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    59b6:	b662      	cpsie	i
		return;
    59b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59ba:	4c20      	ldr	r4, [pc, #128]	; (5a3c <DMAChannel::begin(bool)+0xb0>)
    59bc:	8821      	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    59be:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    59c0:	fa41 f203 	asr.w	r2, r1, r3
    59c4:	f012 0201 	ands.w	r2, r2, #1
    59c8:	d007      	beq.n	59da <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    59ca:	3301      	adds	r3, #1
    59cc:	2b10      	cmp	r3, #16
    59ce:	d1f7      	bne.n	59c0 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    59d0:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    59d2:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    59d4:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    59d6:	6002      	str	r2, [r0, #0]
    59d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    59da:	2501      	movs	r5, #1
    59dc:	409d      	lsls	r5, r3
    59de:	4329      	orrs	r1, r5
    59e0:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    59e2:	b662      	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    59e4:	4e16      	ldr	r6, [pc, #88]	; (5a40 <DMAChannel::begin(bool)+0xb4>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    59e6:	4d17      	ldr	r5, [pc, #92]	; (5a44 <DMAChannel::begin(bool)+0xb8>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    59e8:	4f17      	ldr	r7, [pc, #92]	; (5a48 <DMAChannel::begin(bool)+0xbc>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    59ea:	f8df e064 	ldr.w	lr, [pc, #100]	; 5a50 <DMAChannel::begin(bool)+0xc4>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    59ee:	b2d9      	uxtb	r1, r3
    59f0:	7101      	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    59f2:	6834      	ldr	r4, [r6, #0]
    59f4:	f044 0402 	orr.w	r4, r4, #2
    59f8:	6034      	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    59fa:	682c      	ldr	r4, [r5, #0]
    59fc:	f044 0402 	orr.w	r4, r4, #2
    5a00:	602c      	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    5a02:	f5a6 2680 	sub.w	r6, r6, #262144	; 0x40000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    5a06:	2482      	movs	r4, #130	; 0x82
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    5a08:	f5a5 2580 	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a0c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    5a10:	603c      	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a12:	f503 6390 	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    5a16:	3e22      	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    5a18:	3d24      	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    5a1a:	4c0c      	ldr	r4, [pc, #48]	; (5a4c <DMAChannel::begin(bool)+0xc0>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    5a1c:	f88e 1000 	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a20:	015b      	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    5a22:	7031      	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    5a24:	7029      	strb	r1, [r5, #0]
	DMA_CINT = ch;
    5a26:	7021      	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    5a28:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    5a2a:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    5a2c:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    5a2e:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    5a30:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    5a32:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    5a34:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    5a36:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    5a38:	61da      	str	r2, [r3, #28]
    5a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a3c:	1fffd532 	.word	0x1fffd532
    5a40:	40048040 	.word	0x40048040
    5a44:	4004803c 	.word	0x4004803c
    5a48:	40008000 	.word	0x40008000
    5a4c:	4000801f 	.word	0x4000801f
    5a50:	4000801a 	.word	0x4000801a

00005a54 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    5a54:	7903      	ldrb	r3, [r0, #4]
    5a56:	2b0f      	cmp	r3, #15
    5a58:	d811      	bhi.n	5a7e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    5a5a:	4a09      	ldr	r2, [pc, #36]	; (5a80 <DMAChannel::release()+0x2c>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    5a5c:	b410      	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    5a5e:	7013      	strb	r3, [r2, #0]
	__disable_irq();
    5a60:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    5a62:	4908      	ldr	r1, [pc, #32]	; (5a84 <DMAChannel::release()+0x30>)
    5a64:	7904      	ldrb	r4, [r0, #4]
    5a66:	880a      	ldrh	r2, [r1, #0]
    5a68:	2301      	movs	r3, #1
    5a6a:	40a3      	lsls	r3, r4
    5a6c:	ea22 0303 	bic.w	r3, r2, r3
    5a70:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    5a72:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    5a74:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    5a76:	2300      	movs	r3, #0
}
    5a78:	bc10      	pop	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    5a7a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    5a7c:	6003      	str	r3, [r0, #0]
}
    5a7e:	4770      	bx	lr
    5a80:	4000801a 	.word	0x4000801a
    5a84:	1fffd532 	.word	0x1fffd532

00005a88 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)>:
{
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
    5a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a8a:	790e      	ldrb	r6, [r1, #4]
    5a8c:	f892 e004 	ldrb.w	lr, [r2, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5a90:	f006 03fc 	and.w	r3, r6, #252	; 0xfc
    5a94:	f00e 04fc 	and.w	r4, lr, #252	; 0xfc
    5a98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5a9c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    5aa0:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
    5aa4:	f504 4401 	add.w	r4, r4, #33024	; 0x8100
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	6824      	ldr	r4, [r4, #0]
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5aac:	00f5      	lsls	r5, r6, #3
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5aae:	ea4f 0cce 	mov.w	ip, lr, lsl #3

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5ab2:	ba1f      	rev	r7, r3
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5ab4:	f005 0318 	and.w	r3, r5, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5ab8:	ba25      	rev	r5, r4
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5aba:	f00c 0418 	and.w	r4, ip, #24
static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5abe:	fa27 f303 	lsr.w	r3, r7, r3
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5ac2:	fa25 f404 	lsr.w	r4, r5, r4
static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    5ac6:	f003 030f 	and.w	r3, r3, #15
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5aca:	f004 040f 	and.w	r4, r4, #15
    5ace:	429c      	cmp	r4, r3
    5ad0:	d915      	bls.n	5afe <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0x76>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    5ad2:	f881 e004 	strb.w	lr, [r1, #4]
	c2.channel = c;
    5ad6:	7116      	strb	r6, [r2, #4]
	t = c1.TCD;
    5ad8:	680b      	ldr	r3, [r1, #0]
	c1.TCD = c2.TCD;
    5ada:	6814      	ldr	r4, [r2, #0]
    5adc:	600c      	str	r4, [r1, #0]
	c2.TCD = t;
    5ade:	6013      	str	r3, [r2, #0]
    5ae0:	790e      	ldrb	r6, [r1, #4]
    5ae2:	f006 04fc 	and.w	r4, r6, #252	; 0xfc
    5ae6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    5aea:	f504 4401 	add.w	r4, r4, #33024	; 0x8100
    5aee:	00f3      	lsls	r3, r6, #3
    5af0:	6824      	ldr	r4, [r4, #0]
    5af2:	f003 0518 	and.w	r5, r3, #24
    5af6:	ba23      	rev	r3, r4
    5af8:	40eb      	lsrs	r3, r5
    5afa:	f003 030f 	and.w	r3, r3, #15
    5afe:	f890 e004 	ldrb.w	lr, [r0, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5b02:	f00e 05fc 	and.w	r5, lr, #252	; 0xfc
    5b06:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    5b0a:	f505 4501 	add.w	r5, r5, #33024	; 0x8100
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    5b0e:	ea4f 04ce 	mov.w	r4, lr, lsl #3
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5b12:	682d      	ldr	r5, [r5, #0]
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    5b14:	f004 0718 	and.w	r7, r4, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5b18:	ba2c      	rev	r4, r5
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    5b1a:	40fc      	lsrs	r4, r7
    5b1c:	f004 040f 	and.w	r4, r4, #15
    5b20:	429c      	cmp	r4, r3
    5b22:	d215      	bcs.n	5b50 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0xc8>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    5b24:	7106      	strb	r6, [r0, #4]
	c2.channel = c;
	t = c1.TCD;
	c1.TCD = c2.TCD;
    5b26:	680c      	ldr	r4, [r1, #0]
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
	c2.channel = c;
    5b28:	f881 e004 	strb.w	lr, [r1, #4]
	t = c1.TCD;
    5b2c:	6803      	ldr	r3, [r0, #0]
	c1.TCD = c2.TCD;
    5b2e:	6004      	str	r4, [r0, #0]
    5b30:	790e      	ldrb	r6, [r1, #4]
	c2.TCD = t;
    5b32:	600b      	str	r3, [r1, #0]
    5b34:	f006 00fc 	and.w	r0, r6, #252	; 0xfc
    5b38:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    5b3c:	f500 4001 	add.w	r0, r0, #33024	; 0x8100
    5b40:	00f3      	lsls	r3, r6, #3
    5b42:	6800      	ldr	r0, [r0, #0]
    5b44:	f003 0418 	and.w	r4, r3, #24
    5b48:	ba03      	rev	r3, r0
    5b4a:	40e3      	lsrs	r3, r4
    5b4c:	f003 030f 	and.w	r3, r3, #15
    5b50:	7917      	ldrb	r7, [r2, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5b52:	f007 04fc 	and.w	r4, r7, #252	; 0xfc
    5b56:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    5b5a:	f504 4401 	add.w	r4, r4, #33024	; 0x8100

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5b5e:	00f8      	lsls	r0, r7, #3
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    5b60:	6824      	ldr	r4, [r4, #0]

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5b62:	f000 0518 	and.w	r5, r0, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    5b66:	ba20      	rev	r0, r4

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    5b68:	40e8      	lsrs	r0, r5
    5b6a:	f000 000f 	and.w	r0, r0, #15
    5b6e:	4298      	cmp	r0, r3
    5b70:	d905      	bls.n	5b7e <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0xf6>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    5b72:	710f      	strb	r7, [r1, #4]
	c2.channel = c;
    5b74:	7116      	strb	r6, [r2, #4]
	t = c1.TCD;
    5b76:	680b      	ldr	r3, [r1, #0]
	c1.TCD = c2.TCD;
    5b78:	6810      	ldr	r0, [r2, #0]
    5b7a:	6008      	str	r0, [r1, #0]
	c2.TCD = t;
    5b7c:	6013      	str	r3, [r2, #0]
    5b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005b80 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    5b80:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5b82:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5b86:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    5b88:	7f43      	ldrb	r3, [r0, #29]
    5b8a:	b933      	cbnz	r3, 5b9a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    5b8c:	7f01      	ldrb	r1, [r0, #28]
    5b8e:	2901      	cmp	r1, #1
    5b90:	d007      	beq.n	5ba2 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    5b92:	2903      	cmp	r1, #3
    5b94:	d00f      	beq.n	5bb6 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    5b96:	2301      	movs	r3, #1
    5b98:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5b9a:	b902      	cbnz	r2, 5b9e <EventResponder::triggerEventNotImmediate()+0x1e>
    5b9c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    5b9e:	bc10      	pop	{r4}
    5ba0:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    5ba2:	4c12      	ldr	r4, [pc, #72]	; (5bec <EventResponder::triggerEventNotImmediate()+0x6c>)
    5ba4:	6821      	ldr	r1, [r4, #0]
    5ba6:	b1a1      	cbz	r1, 5bd2 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5ba8:	4911      	ldr	r1, [pc, #68]	; (5bf0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    5baa:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    5bac:	680b      	ldr	r3, [r1, #0]
    5bae:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    5bb0:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    5bb2:	6158      	str	r0, [r3, #20]
    5bb4:	e7ef      	b.n	5b96 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    5bb6:	4c0f      	ldr	r4, [pc, #60]	; (5bf4 <EventResponder::triggerEventNotImmediate()+0x74>)
    5bb8:	6821      	ldr	r1, [r4, #0]
    5bba:	b181      	cbz	r1, 5bde <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    5bbc:	490e      	ldr	r1, [pc, #56]	; (5bf8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    5bbe:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    5bc0:	680b      	ldr	r3, [r1, #0]
    5bc2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    5bc4:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    5bc6:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    5bc8:	4b0c      	ldr	r3, [pc, #48]	; (5bfc <EventResponder::triggerEventNotImmediate()+0x7c>)
    5bca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5bce:	6019      	str	r1, [r3, #0]
    5bd0:	e7e1      	b.n	5b96 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    5bd2:	4b07      	ldr	r3, [pc, #28]	; (5bf0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    5bd4:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5bd6:	6181      	str	r1, [r0, #24]
				firstYield = this;
    5bd8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    5bda:	6018      	str	r0, [r3, #0]
    5bdc:	e7db      	b.n	5b96 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    5bde:	4b06      	ldr	r3, [pc, #24]	; (5bf8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    5be0:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5be2:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    5be4:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    5be6:	6018      	str	r0, [r3, #0]
    5be8:	e7ee      	b.n	5bc8 <EventResponder::triggerEventNotImmediate()+0x48>
    5bea:	bf00      	nop
    5bec:	1fffd544 	.word	0x1fffd544
    5bf0:	1fffd540 	.word	0x1fffd540
    5bf4:	1fffd534 	.word	0x1fffd534
    5bf8:	1fffd538 	.word	0x1fffd538
    5bfc:	e000ed04 	.word	0xe000ed04

00005c00 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    5c00:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5c02:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5c04:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5c06:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5c08:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    5c0a:	d002      	beq.n	5c12 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    5c0c:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5c0e:	f7ff bfb7 	b.w	5b80 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5c12:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    5c14:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5c16:	4718      	bx	r3

00005c18 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5c18:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5c1a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5c1e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5c20:	4c0c      	ldr	r4, [pc, #48]	; (5c54 <EventResponder::runFromInterrupt()+0x3c>)
    5c22:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5c24:	b180      	cbz	r0, 5c48 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5c26:	4e0c      	ldr	r6, [pc, #48]	; (5c58 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    5c28:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    5c2a:	6943      	ldr	r3, [r0, #20]
    5c2c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    5c2e:	b173      	cbz	r3, 5c4e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    5c30:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5c32:	b902      	cbnz	r2, 5c36 <EventResponder::runFromInterrupt()+0x1e>
    5c34:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    5c36:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    5c38:	6883      	ldr	r3, [r0, #8]
    5c3a:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5c3c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5c40:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5c42:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5c44:	2800      	cmp	r0, #0
    5c46:	d1f0      	bne.n	5c2a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5c48:	b902      	cbnz	r2, 5c4c <EventResponder::runFromInterrupt()+0x34>
    5c4a:	b662      	cpsie	i
    5c4c:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5c4e:	6033      	str	r3, [r6, #0]
    5c50:	e7ef      	b.n	5c32 <EventResponder::runFromInterrupt()+0x1a>
    5c52:	bf00      	nop
    5c54:	1fffd534 	.word	0x1fffd534
    5c58:	1fffd538 	.word	0x1fffd538

00005c5c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    5c5c:	f7ff bfdc 	b.w	5c18 <EventResponder::runFromInterrupt()>

00005c60 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    5c60:	4a18      	ldr	r2, [pc, #96]	; (5cc4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    5c62:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    5c64:	6814      	ldr	r4, [r2, #0]
    5c66:	2c00      	cmp	r4, #0
    5c68:	d027      	beq.n	5cba <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    5c6a:	6803      	ldr	r3, [r0, #0]
    5c6c:	6821      	ldr	r1, [r4, #0]
    5c6e:	428b      	cmp	r3, r1
    5c70:	d20e      	bcs.n	5c90 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5c72:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    5c74:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    5c76:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5c78:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5c7a:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    5c7c:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    5c7e:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    5c80:	2302      	movs	r3, #2
    5c82:	7503      	strb	r3, [r0, #20]
}
    5c84:	bc30      	pop	{r4, r5}
    5c86:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    5c88:	6811      	ldr	r1, [r2, #0]
    5c8a:	428b      	cmp	r3, r1
    5c8c:	4614      	mov	r4, r2
    5c8e:	d308      	bcc.n	5ca2 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5c90:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    5c92:	1a5b      	subs	r3, r3, r1
    5c94:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5c96:	2a00      	cmp	r2, #0
    5c98:	d1f6      	bne.n	5c88 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    5c9a:	6082      	str	r2, [r0, #8]
		_prev = timer;
    5c9c:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    5c9e:	60a0      	str	r0, [r4, #8]
    5ca0:	e7ee      	b.n	5c80 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    5ca2:	68d2      	ldr	r2, [r2, #12]
    5ca4:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    5ca6:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    5ca8:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    5caa:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    5cac:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    5cae:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    5cb0:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    5cb2:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    5cb4:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    5cb6:	bc30      	pop	{r4, r5}
    5cb8:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    5cba:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5cbc:	60c4      	str	r4, [r0, #12]
		listActive = this;
    5cbe:	6010      	str	r0, [r2, #0]
    5cc0:	e7de      	b.n	5c80 <MillisTimer::addToActiveList()+0x20>
    5cc2:	bf00      	nop
    5cc4:	1fffd53c 	.word	0x1fffd53c

00005cc8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    5cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    5cca:	4e22      	ldr	r6, [pc, #136]	; (5d54 <MillisTimer::runFromTimer()+0x8c>)
    5ccc:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    5cce:	b32c      	cbz	r4, 5d1c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5cd0:	6823      	ldr	r3, [r4, #0]
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	d13a      	bne.n	5d4c <MillisTimer::runFromTimer()+0x84>
    5cd6:	4f20      	ldr	r7, [pc, #128]	; (5d58 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    5cd8:	461d      	mov	r5, r3
    5cda:	e004      	b.n	5ce6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    5cdc:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    5cde:	b1ec      	cbz	r4, 5d1c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5ce0:	6823      	ldr	r3, [r4, #0]
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d132      	bne.n	5d4c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    5ce6:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    5ce8:	b103      	cbz	r3, 5cec <MillisTimer::runFromTimer()+0x24>
    5cea:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    5cec:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    5cee:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5cf0:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    5cf2:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5cf4:	681b      	ldr	r3, [r3, #0]
    5cf6:	42bb      	cmp	r3, r7
    5cf8:	d121      	bne.n	5d3e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5cfa:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5cfc:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5cfe:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5d00:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    5d02:	d020      	beq.n	5d46 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5d04:	f7ff ff3c 	bl	5b80 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    5d08:	6863      	ldr	r3, [r4, #4]
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d0e6      	beq.n	5cdc <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    5d0e:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    5d10:	4620      	mov	r0, r4
    5d12:	f7ff ffa5 	bl	5c60 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    5d16:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    5d18:	2c00      	cmp	r4, #0
    5d1a:	d1e1      	bne.n	5ce0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5d1c:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    5d20:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    5d22:	4a0e      	ldr	r2, [pc, #56]	; (5d5c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5d24:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    5d26:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5d28:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    5d2a:	b903      	cbnz	r3, 5d2e <MillisTimer::runFromTimer()+0x66>
    5d2c:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    5d2e:	b128      	cbz	r0, 5d3c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    5d30:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    5d32:	f7ff ff95 	bl	5c60 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    5d36:	4620      	mov	r0, r4
    5d38:	2800      	cmp	r0, #0
    5d3a:	d1f9      	bne.n	5d30 <MillisTimer::runFromTimer()+0x68>
    5d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5d3e:	4622      	mov	r2, r4
    5d40:	2100      	movs	r1, #0
    5d42:	4798      	blx	r3
    5d44:	e7e0      	b.n	5d08 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5d46:	6883      	ldr	r3, [r0, #8]
    5d48:	4798      	blx	r3
    5d4a:	e7dd      	b.n	5d08 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    5d4c:	3b01      	subs	r3, #1
    5d4e:	6023      	str	r3, [r4, #0]
			break;
    5d50:	e7e4      	b.n	5d1c <MillisTimer::runFromTimer()+0x54>
    5d52:	bf00      	nop
    5d54:	1fffd53c 	.word	0x1fffd53c
    5d58:	00005c01 	.word	0x00005c01
    5d5c:	1fffd54c 	.word	0x1fffd54c

00005d60 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    5d60:	4a02      	ldr	r2, [pc, #8]	; (5d6c <systick_isr+0xc>)
    5d62:	6813      	ldr	r3, [r2, #0]
    5d64:	3301      	adds	r3, #1
    5d66:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    5d68:	f7ff bfae 	b.w	5cc8 <MillisTimer::runFromTimer()>
    5d6c:	1fffd39c 	.word	0x1fffd39c

00005d70 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    5d70:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    5d72:	f7fb fc69 	bl	1648 <setup>
	while (1) {
		loop();
    5d76:	f7fb fc8f 	bl	1698 <loop>
		yield();
    5d7a:	f000 fa35 	bl	61e8 <yield>
    5d7e:	e7fa      	b.n	5d76 <main+0x6>

00005d80 <operator new(unsigned int)>:
    5d80:	f000 bfca 	b.w	6d18 <malloc>

00005d84 <Print::print(String const&)>:
	return count;
}


size_t Print::print(const String &s)
{
    5d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d88:	688c      	ldr	r4, [r1, #8]
    5d8a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    5d8c:	b1ec      	cbz	r4, 5dca <Print::print(String const&)+0x46>
    5d8e:	2500      	movs	r5, #0
    5d90:	4606      	mov	r6, r0
    5d92:	4689      	mov	r9, r1
    5d94:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    5d96:	462b      	mov	r3, r5
    5d98:	2221      	movs	r2, #33	; 0x21
    5d9a:	a901      	add	r1, sp, #4
    5d9c:	4648      	mov	r0, r9
    5d9e:	f000 f9df 	bl	6160 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    5da2:	6832      	ldr	r2, [r6, #0]
    5da4:	2c20      	cmp	r4, #32
    5da6:	4623      	mov	r3, r4
    5da8:	bf28      	it	cs
    5daa:	2320      	movcs	r3, #32
    5dac:	f8d2 8004 	ldr.w	r8, [r2, #4]
    5db0:	a901      	add	r1, sp, #4
    5db2:	461a      	mov	r2, r3
    5db4:	4630      	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    5db6:	441d      	add	r5, r3
		len -= nbytes;
    5db8:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    5dba:	47c0      	blx	r8
    5dbc:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    5dbe:	2c00      	cmp	r4, #0
    5dc0:	d1e9      	bne.n	5d96 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    5dc2:	4638      	mov	r0, r7
    5dc4:	b00b      	add	sp, #44	; 0x2c
    5dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    5dca:	4627      	mov	r7, r4
    5dcc:	e7f9      	b.n	5dc2 <Print::print(String const&)+0x3e>
    5dce:	bf00      	nop

00005dd0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5dd0:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    5dd2:	4a06      	ldr	r2, [pc, #24]	; (5dec <Print::println()+0x1c>)
	return write(buf, 2);
    5dd4:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5dd6:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    5dd8:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5dda:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    5ddc:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5dde:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    5de2:	2202      	movs	r2, #2
    5de4:	4798      	blx	r3
}
    5de6:	b003      	add	sp, #12
    5de8:	f85d fb04 	ldr.w	pc, [sp], #4
    5dec:	00008810 	.word	0x00008810

00005df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    5df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5df2:	4607      	mov	r7, r0
    5df4:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    5df6:	2a00      	cmp	r2, #0
    5df8:	d033      	beq.n	5e62 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    5dfa:	2a01      	cmp	r2, #1
    5dfc:	bf08      	it	eq
    5dfe:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    5e00:	b351      	cbz	r1, 5e58 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    5e02:	2421      	movs	r4, #33	; 0x21
    5e04:	e000      	b.n	5e08 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    5e06:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    5e08:	fbb1 f5f2 	udiv	r5, r1, r2
    5e0c:	fb02 1115 	mls	r1, r2, r5, r1
    5e10:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5e12:	2909      	cmp	r1, #9
    5e14:	f100 0130 	add.w	r1, r0, #48	; 0x30
    5e18:	bf98      	it	ls
    5e1a:	b2c8      	uxtbls	r0, r1
    5e1c:	a90a      	add	r1, sp, #40	; 0x28
    5e1e:	bf88      	it	hi
    5e20:	3037      	addhi	r0, #55	; 0x37
    5e22:	4421      	add	r1, r4
    5e24:	bf88      	it	hi
    5e26:	b2c0      	uxtbhi	r0, r0
    5e28:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    5e2c:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    5e2e:	4629      	mov	r1, r5
    5e30:	2d00      	cmp	r5, #0
    5e32:	d1e8      	bne.n	5e06 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    5e34:	b133      	cbz	r3, 5e44 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    5e36:	3c01      	subs	r4, #1
    5e38:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    5e3a:	ab0a      	add	r3, sp, #40	; 0x28
    5e3c:	4423      	add	r3, r4
    5e3e:	222d      	movs	r2, #45	; 0x2d
    5e40:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    5e44:	683b      	ldr	r3, [r7, #0]
    5e46:	aa01      	add	r2, sp, #4
    5e48:	1911      	adds	r1, r2, r4
    5e4a:	685b      	ldr	r3, [r3, #4]
    5e4c:	4638      	mov	r0, r7
    5e4e:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    5e52:	4798      	blx	r3
}
    5e54:	b00b      	add	sp, #44	; 0x2c
    5e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    5e58:	2230      	movs	r2, #48	; 0x30
    5e5a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    5e5e:	2421      	movs	r4, #33	; 0x21
    5e60:	e7e8      	b.n	5e34 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    5e62:	6803      	ldr	r3, [r0, #0]
    5e64:	b2c9      	uxtb	r1, r1
    5e66:	681b      	ldr	r3, [r3, #0]
    5e68:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    5e6a:	b00b      	add	sp, #44	; 0x2c
    5e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e6e:	bf00      	nop

00005e70 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    5e70:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    5e72:	bfba      	itte	lt
    5e74:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    5e76:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    5e78:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    5e7a:	220a      	movs	r2, #10
    5e7c:	f7ff bfb8 	b.w	5df0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00005e80 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    5e80:	f7ff bc64 	b.w	574c <usb_serial_flush_input>

00005e84 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    5e84:	f7ff bc3c 	b.w	5700 <usb_serial_peekchar>

00005e88 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    5e88:	f7ff bc16 	b.w	56b8 <usb_serial_getchar>

00005e8c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5e8c:	f7ff bc50 	b.w	5730 <usb_serial_available>

00005e90 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5e90:	f7ff bd2c 	b.w	58ec <usb_serial_flush_output>

00005e94 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5e94:	f7ff bd06 	b.w	58a4 <usb_serial_write_buffer_free>

00005e98 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5e98:	4608      	mov	r0, r1
    5e9a:	4611      	mov	r1, r2
    5e9c:	f7ff bc72 	b.w	5784 <usb_serial_write>

00005ea0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5ea0:	4608      	mov	r0, r1
    5ea2:	f7ff bcf3 	b.w	588c <usb_serial_putchar>
    5ea6:	bf00      	nop

00005ea8 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    5ea8:	4770      	bx	lr
    5eaa:	bf00      	nop

00005eac <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    5eac:	b5f0      	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    5eae:	4d16      	ldr	r5, [pc, #88]	; (5f08 <random(unsigned long) [clone .part.0]+0x5c>)
    5eb0:	682a      	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    5eb2:	b30a      	cbz	r2, 5ef8 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    5eb4:	4915      	ldr	r1, [pc, #84]	; (5f0c <random(unsigned long) [clone .part.0]+0x60>)
    5eb6:	4b16      	ldr	r3, [pc, #88]	; (5f10 <random(unsigned long) [clone .part.0]+0x64>)
    5eb8:	f8df e05c 	ldr.w	lr, [pc, #92]	; 5f18 <random(unsigned long) [clone .part.0]+0x6c>
    5ebc:	fb82 6701 	smull	r6, r7, r2, r1
    5ec0:	fb81 1402 	smull	r1, r4, r1, r2
    5ec4:	17d6      	asrs	r6, r2, #31
    5ec6:	19d1      	adds	r1, r2, r7
    5ec8:	4414      	add	r4, r2
    5eca:	ebc6 4121 	rsb	r1, r6, r1, asr #16
    5ece:	ebc6 4424 	rsb	r4, r6, r4, asr #16
    5ed2:	fb03 f404 	mul.w	r4, r3, r4
    5ed6:	fb0e 2211 	mls	r2, lr, r1, r2
    5eda:	f244 13a7 	movw	r3, #16807	; 0x41a7
    5ede:	fb03 4302 	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	da02      	bge.n	5eec <random(unsigned long) [clone .part.0]+0x40>
    5ee6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    5eea:	3b01      	subs	r3, #1
    5eec:	fbb3 f2f0 	udiv	r2, r3, r0
	seed = x;
    5ef0:	602b      	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    5ef2:	fb00 3012 	mls	r0, r0, r2, r3
    5ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    5ef8:	4b06      	ldr	r3, [pc, #24]	; (5f14 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    5efa:	602b      	str	r3, [r5, #0]
    5efc:	fbb3 f2f0 	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    5f00:	fb00 3012 	mls	r0, r0, r2, r3
    5f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f06:	bf00      	nop
    5f08:	1fffd550 	.word	0x1fffd550
    5f0c:	834e0b5f 	.word	0x834e0b5f
    5f10:	fffff4ec 	.word	0xfffff4ec
    5f14:	1f0cce42 	.word	0x1f0cce42
    5f18:	0001f31d 	.word	0x0001f31d

00005f1c <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    5f1c:	b108      	cbz	r0, 5f22 <random(unsigned long)+0x6>
    5f1e:	f7ff bfc5 	b.w	5eac <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    5f22:	4770      	bx	lr

00005f24 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    5f24:	b510      	push	{r4, lr}
    5f26:	4604      	mov	r4, r0
{
	free(buffer);
    5f28:	6800      	ldr	r0, [r0, #0]
    5f2a:	f000 fefd 	bl	6d28 <free>
}
    5f2e:	4620      	mov	r0, r4
    5f30:	bd10      	pop	{r4, pc}
    5f32:	bf00      	nop

00005f34 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    5f34:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    5f36:	6843      	ldr	r3, [r0, #4]
    5f38:	428b      	cmp	r3, r1
    5f3a:	d301      	bcc.n	5f40 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5f3c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    5f3e:	bd38      	pop	{r3, r4, r5, pc}
    5f40:	460d      	mov	r5, r1
    5f42:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5f44:	3101      	adds	r1, #1
    5f46:	6800      	ldr	r0, [r0, #0]
    5f48:	f001 fa7a 	bl	7440 <realloc>
	if (newbuffer) {
    5f4c:	2800      	cmp	r0, #0
    5f4e:	d0f6      	beq.n	5f3e <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5f50:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    5f52:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5f56:	2b00      	cmp	r3, #0
    5f58:	d1f0      	bne.n	5f3c <String::reserve(unsigned int)+0x8>
    5f5a:	7003      	strb	r3, [r0, #0]
    5f5c:	e7ee      	b.n	5f3c <String::reserve(unsigned int)+0x8>
    5f5e:	bf00      	nop

00005f60 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    5f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f62:	4604      	mov	r4, r0
	if (length == 0) {
    5f64:	4615      	mov	r5, r2
    5f66:	b932      	cbnz	r2, 5f76 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    5f68:	6803      	ldr	r3, [r0, #0]
    5f6a:	b103      	cbz	r3, 5f6e <String::copy(char const*, unsigned int)+0xe>
    5f6c:	701a      	strb	r2, [r3, #0]
		len = 0;
    5f6e:	2300      	movs	r3, #0
    5f70:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    5f72:	4620      	mov	r0, r4
    5f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f76:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    5f78:	4611      	mov	r1, r2
    5f7a:	f7ff ffdb 	bl	5f34 <String::reserve(unsigned int)>
    5f7e:	4607      	mov	r7, r0
    5f80:	b948      	cbnz	r0, 5f96 <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    5f82:	6820      	ldr	r0, [r4, #0]
    5f84:	b110      	cbz	r0, 5f8c <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    5f86:	f000 fecf 	bl	6d28 <free>
			buffer = NULL;
    5f8a:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    5f8c:	2300      	movs	r3, #0
    5f8e:	6063      	str	r3, [r4, #4]
    5f90:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    5f92:	4620      	mov	r0, r4
    5f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    5f96:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    5f98:	4631      	mov	r1, r6
    5f9a:	6820      	ldr	r0, [r4, #0]
    5f9c:	f001 fdce 	bl	7b3c <strcpy>
	return *this;
    5fa0:	e7e7      	b.n	5f72 <String::copy(char const*, unsigned int)+0x12>
    5fa2:	bf00      	nop

00005fa4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    5fa4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5fa6:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    5fa8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5faa:	6003      	str	r3, [r0, #0]
	capacity = 0;
    5fac:	6043      	str	r3, [r0, #4]
	len = 0;
    5fae:	6083      	str	r3, [r0, #8]
	flags = 0;
    5fb0:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    5fb2:	b141      	cbz	r1, 5fc6 <String::String(char const*)+0x22>
    5fb4:	4608      	mov	r0, r1
    5fb6:	460d      	mov	r5, r1
    5fb8:	f001 fe22 	bl	7c00 <strlen>
    5fbc:	4629      	mov	r1, r5
    5fbe:	4602      	mov	r2, r0
    5fc0:	4620      	mov	r0, r4
    5fc2:	f7ff ffcd 	bl	5f60 <String::copy(char const*, unsigned int)>
}
    5fc6:	4620      	mov	r0, r4
    5fc8:	bd38      	pop	{r3, r4, r5, pc}
    5fca:	bf00      	nop

00005fcc <String::String(__FlashStringHelper const*)>:

String::String(const __FlashStringHelper *pgmstr)
    5fcc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5fce:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    5fd0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5fd2:	6003      	str	r3, [r0, #0]
	capacity = 0;
    5fd4:	6043      	str	r3, [r0, #4]
	len = 0;
    5fd6:	6083      	str	r3, [r0, #8]
	flags = 0;
    5fd8:	7303      	strb	r3, [r0, #12]
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}

	// copy and move
	String & copy(const char *cstr, unsigned int length);
	String & copy(const __FlashStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    5fda:	4608      	mov	r0, r1
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    5fdc:	460d      	mov	r5, r1
    5fde:	f001 fe0f 	bl	7c00 <strlen>
    5fe2:	4629      	mov	r1, r5
    5fe4:	4602      	mov	r2, r0
    5fe6:	4620      	mov	r0, r4
    5fe8:	f7ff ffba 	bl	5f60 <String::copy(char const*, unsigned int)>
{
	init();
	*this = pgmstr;
}
    5fec:	4620      	mov	r0, r4
    5fee:	bd38      	pop	{r3, r4, r5, pc}

00005ff0 <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5ff0:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    5ff2:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    5ff4:	b510      	push	{r4, lr}
    5ff6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5ff8:	6003      	str	r3, [r0, #0]
	capacity = 0;
    5ffa:	6043      	str	r3, [r0, #4]
	len = 0;
    5ffc:	6083      	str	r3, [r0, #8]
	flags = 0;
    5ffe:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    6000:	d003      	beq.n	600a <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    6002:	688a      	ldr	r2, [r1, #8]
    6004:	6809      	ldr	r1, [r1, #0]
    6006:	f7ff ffab 	bl	5f60 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    600a:	4620      	mov	r0, r4
    600c:	bd10      	pop	{r4, pc}
    600e:	bf00      	nop

00006010 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    6010:	b538      	push	{r3, r4, r5, lr}
    6012:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    6014:	4608      	mov	r0, r1
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    6016:	460c      	mov	r4, r1
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    6018:	f001 fdf2 	bl	7c00 <strlen>
    601c:	4621      	mov	r1, r4
    601e:	4602      	mov	r2, r0
    6020:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    6022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    6026:	f7ff bf9b 	b.w	5f60 <String::copy(char const*, unsigned int)>
    602a:	bf00      	nop

0000602c <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    602c:	b510      	push	{r4, lr}
    602e:	4604      	mov	r4, r0
	if (cstr) {
    6030:	b119      	cbz	r1, 603a <String::operator=(char const*)+0xe>
    6032:	f7ff ffed 	bl	6010 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    6036:	4620      	mov	r0, r4
    6038:	bd10      	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    603a:	60a1      	str	r1, [r4, #8]
	}
	return *this;
}
    603c:	4620      	mov	r0, r4
    603e:	bd10      	pop	{r4, pc}

00006040 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    6040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6044:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    6046:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6048:	42bb      	cmp	r3, r7
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    604a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
    604c:	6881      	ldr	r1, [r0, #8]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    604e:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6050:	d80a      	bhi.n	6068 <String::append(char const*, unsigned int)+0x28>
    6052:	185a      	adds	r2, r3, r1
    6054:	4297      	cmp	r7, r2
    6056:	d207      	bcs.n	6068 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    6058:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    605c:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    6060:	b935      	cbnz	r5, 6070 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    6062:	4620      	mov	r0, r4
    6064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    6068:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    606c:	2d00      	cmp	r5, #0
    606e:	d0f8      	beq.n	6062 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    6070:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    6072:	4631      	mov	r1, r6
    6074:	4620      	mov	r0, r4
    6076:	f7ff ff5d 	bl	5f34 <String::reserve(unsigned int)>
    607a:	2800      	cmp	r0, #0
    607c:	d0f1      	beq.n	6062 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    607e:	f1b8 0f00 	cmp.w	r8, #0
    6082:	d00e      	beq.n	60a2 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    6084:	6823      	ldr	r3, [r4, #0]
    6086:	68a0      	ldr	r0, [r4, #8]
    6088:	462a      	mov	r2, r5
    608a:	eb03 0109 	add.w	r1, r3, r9
    608e:	4418      	add	r0, r3
    6090:	f7fe f8c0 	bl	4214 <memcpy>
		buffer[newlen] = 0;
    6094:	6823      	ldr	r3, [r4, #0]
    6096:	2200      	movs	r2, #0
    6098:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    609a:	60a6      	str	r6, [r4, #8]
	return *this;
}
    609c:	4620      	mov	r0, r4
    609e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    60a2:	6820      	ldr	r0, [r4, #0]
    60a4:	68a3      	ldr	r3, [r4, #8]
    60a6:	4639      	mov	r1, r7
    60a8:	4418      	add	r0, r3
    60aa:	f001 fd47 	bl	7b3c <strcpy>
    60ae:	e7f4      	b.n	609a <String::append(char const*, unsigned int)+0x5a>

000060b0 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    60b0:	b510      	push	{r4, lr}
    60b2:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    60b4:	2300      	movs	r3, #0
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    60b6:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    60ba:	2201      	movs	r2, #1
    60bc:	a901      	add	r1, sp, #4
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    60be:	4604      	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    60c0:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    60c4:	f7ff ffbc 	bl	6040 <String::append(char const*, unsigned int)>
	return *this;
}
    60c8:	4620      	mov	r0, r4
    60ca:	b002      	add	sp, #8
    60cc:	bd10      	pop	{r4, pc}
    60ce:	bf00      	nop

000060d0 <String::compareTo(String const&) const>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
    60d0:	6803      	ldr	r3, [r0, #0]
    60d2:	b153      	cbz	r3, 60ea <String::compareTo(String const&) const+0x1a>
    60d4:	6809      	ldr	r1, [r1, #0]
    60d6:	b111      	cbz	r1, 60de <String::compareTo(String const&) const+0xe>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
    60d8:	4618      	mov	r0, r3
    60da:	f001 bbc5 	b.w	7868 <strcmp>

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
    60de:	6880      	ldr	r0, [r0, #8]
    60e0:	b110      	cbz	r0, 60e8 <String::compareTo(String const&) const+0x18>
    60e2:	7818      	ldrb	r0, [r3, #0]
    60e4:	4770      	bx	lr
		return 0;
    60e6:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
    60e8:	4770      	bx	lr
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    60ea:	680b      	ldr	r3, [r1, #0]
    60ec:	2b00      	cmp	r3, #0
    60ee:	d0fa      	beq.n	60e6 <String::compareTo(String const&) const+0x16>
    60f0:	6888      	ldr	r0, [r1, #8]
    60f2:	2800      	cmp	r0, #0
    60f4:	d0f8      	beq.n	60e8 <String::compareTo(String const&) const+0x18>
    60f6:	7818      	ldrb	r0, [r3, #0]
    60f8:	4240      	negs	r0, r0
    60fa:	4770      	bx	lr

000060fc <String::equals(String const&) const>:
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
    60fc:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
    60fe:	6882      	ldr	r2, [r0, #8]
    6100:	688b      	ldr	r3, [r1, #8]
    6102:	429a      	cmp	r2, r3
    6104:	d001      	beq.n	610a <String::equals(String const&) const+0xe>
    6106:	2000      	movs	r0, #0
}
    6108:	bd08      	pop	{r3, pc}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    610a:	f7ff ffe1 	bl	60d0 <String::compareTo(String const&) const>
    610e:	fab0 f080 	clz	r0, r0
    6112:	0940      	lsrs	r0, r0, #5
    6114:	bd08      	pop	{r3, pc}
    6116:	bf00      	nop

00006118 <String::equals(char const*) const>:
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6118:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    611a:	b508      	push	{r3, lr}
    611c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    611e:	b92a      	cbnz	r2, 612c <String::equals(char const*) const+0x14>
    6120:	b171      	cbz	r1, 6140 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    6122:	7818      	ldrb	r0, [r3, #0]
    6124:	fab0 f080 	clz	r0, r0
    6128:	0940      	lsrs	r0, r0, #5
    612a:	bd08      	pop	{r3, pc}
    612c:	b131      	cbz	r1, 613c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    612e:	6800      	ldr	r0, [r0, #0]
    6130:	f001 fb9a 	bl	7868 <strcmp>
    6134:	fab0 f080 	clz	r0, r0
    6138:	0940      	lsrs	r0, r0, #5
}
    613a:	bd08      	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    613c:	6803      	ldr	r3, [r0, #0]
    613e:	e7f0      	b.n	6122 <String::equals(char const*) const+0xa>
    6140:	2001      	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6142:	bd08      	pop	{r3, pc}

00006144 <String::operator[](unsigned int)>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    6144:	6883      	ldr	r3, [r0, #8]
    6146:	428b      	cmp	r3, r1
    6148:	d903      	bls.n	6152 <String::operator[](unsigned int)+0xe>
    614a:	6800      	ldr	r0, [r0, #0]
    614c:	b108      	cbz	r0, 6152 <String::operator[](unsigned int)+0xe>
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
    614e:	4408      	add	r0, r1
}
    6150:	4770      	bx	lr

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    6152:	4902      	ldr	r1, [pc, #8]	; (615c <String::operator[](unsigned int)+0x18>)
    6154:	2300      	movs	r3, #0
    6156:	700b      	strb	r3, [r1, #0]
		return dummy_writable_char;
    6158:	4608      	mov	r0, r1
    615a:	4770      	bx	lr
    615c:	1fffd554 	.word	0x1fffd554

00006160 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    6160:	b1b2      	cbz	r2, 6190 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    6162:	b1a9      	cbz	r1, 6190 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    6164:	b538      	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    6166:	6884      	ldr	r4, [r0, #8]
    6168:	429c      	cmp	r4, r3
    616a:	d90e      	bls.n	618a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    616c:	1ae4      	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    616e:	3a01      	subs	r2, #1
    6170:	460d      	mov	r5, r1
    6172:	4294      	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    6174:	6801      	ldr	r1, [r0, #0]
    6176:	bf28      	it	cs
    6178:	4614      	movcs	r4, r2
    617a:	4419      	add	r1, r3
    617c:	4622      	mov	r2, r4
    617e:	4628      	mov	r0, r5
    6180:	f001 fdac 	bl	7cdc <strncpy>
	buf[n] = 0;
    6184:	2300      	movs	r3, #0
    6186:	552b      	strb	r3, [r5, r4]
    6188:	bd38      	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    618a:	2300      	movs	r3, #0
    618c:	700b      	strb	r3, [r1, #0]
		return;
    618e:	bd38      	pop	{r3, r4, r5, pc}
    6190:	4770      	bx	lr
    6192:	bf00      	nop

00006194 <String::substring(unsigned int, unsigned int) const>:
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    6194:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    6196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6198:	4604      	mov	r4, r0
    619a:	460e      	mov	r6, r1
	if (left > right) {
    619c:	d902      	bls.n	61a4 <String::substring(unsigned int, unsigned int) const+0x10>
    619e:	4611      	mov	r1, r2
    61a0:	461a      	mov	r2, r3
    61a2:	460b      	mov	r3, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    61a4:	2100      	movs	r1, #0
	capacity = 0;
	len = 0;
    61a6:	60a1      	str	r1, [r4, #8]
	flags = 0;
    61a8:	7321      	strb	r1, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    61aa:	68b0      	ldr	r0, [r6, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    61ac:	6021      	str	r1, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    61ae:	4282      	cmp	r2, r0
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    61b0:	6061      	str	r1, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    61b2:	d80e      	bhi.n	61d2 <String::substring(unsigned int, unsigned int) const+0x3e>
    61b4:	4283      	cmp	r3, r0
    61b6:	bf28      	it	cs
    61b8:	4603      	movcs	r3, r0
    61ba:	461d      	mov	r5, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    61bc:	6833      	ldr	r3, [r6, #0]
    61be:	5d5f      	ldrb	r7, [r3, r5]
	buffer[right] = '\0';	
    61c0:	5559      	strb	r1, [r3, r5]
	out = buffer + left;  // pointer arithmetic
    61c2:	6833      	ldr	r3, [r6, #0]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    61c4:	1899      	adds	r1, r3, r2
    61c6:	d006      	beq.n	61d6 <String::substring(unsigned int, unsigned int) const+0x42>
    61c8:	4620      	mov	r0, r4
    61ca:	f7ff ff21 	bl	6010 <String::operator=(char const*) [clone .part.3]>
    61ce:	6833      	ldr	r3, [r6, #0]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    61d0:	555f      	strb	r7, [r3, r5]
	return out;
}
    61d2:	4620      	mov	r0, r4
    61d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    61d6:	60a1      	str	r1, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    61d8:	555f      	strb	r7, [r3, r5]
    61da:	e7fa      	b.n	61d2 <String::substring(unsigned int, unsigned int) const+0x3e>

000061dc <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    61dc:	6800      	ldr	r0, [r0, #0]
    61de:	b108      	cbz	r0, 61e4 <String::toInt() const+0x8>
    61e0:	f000 bd5e 	b.w	6ca0 <atol>
	return 0;
}
    61e4:	4770      	bx	lr
    61e6:	bf00      	nop

000061e8 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    61e8:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    61ea:	4c22      	ldr	r4, [pc, #136]	; (6274 <yield+0x8c>)
    61ec:	7823      	ldrb	r3, [r4, #0]
    61ee:	b103      	cbz	r3, 61f2 <yield+0xa>
    61f0:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    61f2:	2301      	movs	r3, #1
    61f4:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    61f6:	f7ff fa9b 	bl	5730 <usb_serial_available>
	if (Serial.available()) serialEvent();
    61fa:	bb70      	cbnz	r0, 625a <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    61fc:	f7fe fa9e 	bl	473c <serial_available>
	if (Serial1.available()) serialEvent1();
    6200:	bb40      	cbnz	r0, 6254 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    6202:	f000 f8d5 	bl	63b0 <serial2_available>
	if (Serial2.available()) serialEvent2();
    6206:	bb10      	cbnz	r0, 624e <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    6208:	f000 f968 	bl	64dc <serial3_available>
	if (Serial3.available()) serialEvent3();
    620c:	b9e0      	cbnz	r0, 6248 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    620e:	2300      	movs	r3, #0
    6210:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    6212:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    6216:	2b00      	cmp	r3, #0
    6218:	d1ea      	bne.n	61f0 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    621a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    621e:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    6220:	4b15      	ldr	r3, [pc, #84]	; (6278 <yield+0x90>)
    6222:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    6224:	b1e0      	cbz	r0, 6260 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    6226:	4c15      	ldr	r4, [pc, #84]	; (627c <yield+0x94>)
    6228:	7822      	ldrb	r2, [r4, #0]
    622a:	b9ca      	cbnz	r2, 6260 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    622c:	6945      	ldr	r5, [r0, #20]
    622e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    6230:	2301      	movs	r3, #1
    6232:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    6234:	b1c5      	cbz	r5, 6268 <yield+0x80>
			firstYield->_prev = nullptr;
    6236:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6238:	b901      	cbnz	r1, 623c <yield+0x54>
    623a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    623c:	2500      	movs	r5, #0
    623e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    6240:	6883      	ldr	r3, [r0, #8]
    6242:	4798      	blx	r3
		runningFromYield = false;
    6244:	7025      	strb	r5, [r4, #0]
    6246:	e7d3      	b.n	61f0 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    6248:	f000 fa08 	bl	665c <serialEvent3()>
    624c:	e7df      	b.n	620e <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    624e:	f000 fa03 	bl	6658 <serialEvent2()>
    6252:	e7d9      	b.n	6208 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    6254:	f7fb fa78 	bl	1748 <serialEvent1()>
    6258:	e7d3      	b.n	6202 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    625a:	f7ff fe25 	bl	5ea8 <serialEvent()>
    625e:	e7cd      	b.n	61fc <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6260:	2900      	cmp	r1, #0
    6262:	d1c5      	bne.n	61f0 <yield+0x8>
    6264:	b662      	cpsie	i
    6266:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    6268:	4b05      	ldr	r3, [pc, #20]	; (6280 <yield+0x98>)
    626a:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    626c:	2900      	cmp	r1, #0
    626e:	d1e5      	bne.n	623c <yield+0x54>
    6270:	e7e3      	b.n	623a <yield+0x52>
    6272:	bf00      	nop
    6274:	1fffd555 	.word	0x1fffd555
    6278:	1fffd544 	.word	0x1fffd544
    627c:	1fffd548 	.word	0x1fffd548
    6280:	1fffd540 	.word	0x1fffd540

00006284 <analog_init>:
#else
#error "F_BUS must be 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    6284:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    6286:	4829      	ldr	r0, [pc, #164]	; (632c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    6288:	4a29      	ldr	r2, [pc, #164]	; (6330 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    628a:	4b2a      	ldr	r3, [pc, #168]	; (6334 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    628c:	4d2a      	ldr	r5, [pc, #168]	; (6338 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    628e:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    6290:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    6292:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    6294:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    6296:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6298:	4c28      	ldr	r4, [pc, #160]	; (633c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    629a:	2b08      	cmp	r3, #8
    629c:	d030      	beq.n	6300 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    629e:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    62a0:	4827      	ldr	r0, [pc, #156]	; (6340 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    62a2:	4928      	ldr	r1, [pc, #160]	; (6344 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    62a4:	d037      	beq.n	6316 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    62a6:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    62a8:	bf0c      	ite	eq
    62aa:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    62ac:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    62ae:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    62b0:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    62b2:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    62b4:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    62b6:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    62b8:	4b23      	ldr	r3, [pc, #140]	; (6348 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    62ba:	4924      	ldr	r1, [pc, #144]	; (634c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    62bc:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    62be:	4a24      	ldr	r2, [pc, #144]	; (6350 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    62c0:	b1bb      	cbz	r3, 62f2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    62c2:	2301      	movs	r3, #1
    62c4:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    62c6:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    62c8:	4b22      	ldr	r3, [pc, #136]	; (6354 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    62ca:	4923      	ldr	r1, [pc, #140]	; (6358 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    62cc:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    62ce:	4a23      	ldr	r2, [pc, #140]	; (635c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    62d0:	2b01      	cmp	r3, #1
    62d2:	d926      	bls.n	6322 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    62d4:	2b04      	cmp	r3, #4
    62d6:	d90f      	bls.n	62f8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    62d8:	2b08      	cmp	r3, #8
    62da:	d91e      	bls.n	631a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    62dc:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    62de:	bf94      	ite	ls
    62e0:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    62e2:	2387      	movhi	r3, #135	; 0x87
    62e4:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    62e6:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    62e8:	4b1d      	ldr	r3, [pc, #116]	; (6360 <analog_init+0xdc>)
    62ea:	2201      	movs	r2, #1
    62ec:	701a      	strb	r2, [r3, #0]
}
    62ee:	bc30      	pop	{r4, r5}
    62f0:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    62f2:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    62f4:	6013      	str	r3, [r2, #0]
    62f6:	e7e7      	b.n	62c8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    62f8:	2384      	movs	r3, #132	; 0x84
    62fa:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    62fc:	6013      	str	r3, [r2, #0]
    62fe:	e7f3      	b.n	62e8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6300:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6304:	490f      	ldr	r1, [pc, #60]	; (6344 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6306:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6308:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    630a:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    630c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    630e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6310:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6312:	600b      	str	r3, [r1, #0]
    6314:	e7d0      	b.n	62b8 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6316:	2239      	movs	r2, #57	; 0x39
    6318:	e7f7      	b.n	630a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    631a:	2385      	movs	r3, #133	; 0x85
    631c:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    631e:	6013      	str	r3, [r2, #0]
    6320:	e7e2      	b.n	62e8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    6322:	2380      	movs	r3, #128	; 0x80
    6324:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    6326:	6013      	str	r3, [r2, #0]
    6328:	e7de      	b.n	62e8 <analog_init+0x64>
    632a:	bf00      	nop
    632c:	40074000 	.word	0x40074000
    6330:	40074001 	.word	0x40074001
    6334:	1fff8744 	.word	0x1fff8744
    6338:	4003b008 	.word	0x4003b008
    633c:	4003b00c 	.word	0x4003b00c
    6340:	400bb008 	.word	0x400bb008
    6344:	400bb00c 	.word	0x400bb00c
    6348:	1fffd557 	.word	0x1fffd557
    634c:	4003b020 	.word	0x4003b020
    6350:	400bb020 	.word	0x400bb020
    6354:	1fff8745 	.word	0x1fff8745
    6358:	4003b024 	.word	0x4003b024
    635c:	400bb024 	.word	0x400bb024
    6360:	1fffd556 	.word	0x1fffd556

00006364 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    6364:	b4f0      	push	{r4, r5, r6, r7}
    6366:	1e4d      	subs	r5, r1, #1
    6368:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    636a:	2400      	movs	r4, #0
    636c:	e000      	b.n	6370 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    636e:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    6370:	fbb0 f3f2 	udiv	r3, r0, r2
    6374:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6378:	2809      	cmp	r0, #9
    637a:	f100 0730 	add.w	r7, r0, #48	; 0x30
    637e:	bf8a      	itet	hi
    6380:	3037      	addhi	r0, #55	; 0x37
    6382:	b2f8      	uxtbls	r0, r7
    6384:	b2c0      	uxtbhi	r0, r0
    6386:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    638a:	4618      	mov	r0, r3
    638c:	2b00      	cmp	r3, #0
    638e:	d1ee      	bne.n	636e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    6390:	190a      	adds	r2, r1, r4
    6392:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    6394:	b14c      	cbz	r4, 63aa <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    6396:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    6398:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    639c:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    639e:	3301      	adds	r3, #1
    63a0:	1ae0      	subs	r0, r4, r3
    63a2:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    63a4:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    63a8:	dbf5      	blt.n	6396 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    63aa:	4608      	mov	r0, r1
    63ac:	bcf0      	pop	{r4, r5, r6, r7}
    63ae:	4770      	bx	lr

000063b0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    63b0:	4a05      	ldr	r2, [pc, #20]	; (63c8 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    63b2:	4b06      	ldr	r3, [pc, #24]	; (63cc <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    63b4:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    63b6:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    63b8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    63ba:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    63bc:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    63be:	bf38      	it	cc
    63c0:	3040      	addcc	r0, #64	; 0x40
    63c2:	1ac0      	subs	r0, r0, r3
}
    63c4:	4770      	bx	lr
    63c6:	bf00      	nop
    63c8:	1fffd5c8 	.word	0x1fffd5c8
    63cc:	1fffd55d 	.word	0x1fffd55d

000063d0 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    63d0:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    63d2:	4b38      	ldr	r3, [pc, #224]	; (64b4 <uart1_status_isr+0xe4>)
    63d4:	791a      	ldrb	r2, [r3, #4]
    63d6:	f012 0f30 	tst.w	r2, #48	; 0x30
    63da:	d02c      	beq.n	6436 <uart1_status_isr+0x66>
		__disable_irq();
    63dc:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    63de:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    63e0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    63e4:	2900      	cmp	r1, #0
    63e6:	d03d      	beq.n	6464 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    63e8:	b662      	cpsie	i
			head = rx_buffer_head;
    63ea:	4f33      	ldr	r7, [pc, #204]	; (64b8 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    63ec:	4933      	ldr	r1, [pc, #204]	; (64bc <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    63ee:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    63f0:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    63f2:	4e33      	ldr	r6, [pc, #204]	; (64c0 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    63f4:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    63f6:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    63f8:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    63fa:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    63fc:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    63fe:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6400:	bf28      	it	cs
    6402:	2300      	movcs	r3, #0
				if (newhead != tail) {
    6404:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    6406:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    640a:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    640c:	bf1c      	itt	ne
    640e:	54f1      	strbne	r1, [r6, r3]
    6410:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    6412:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    6416:	d1f0      	bne.n	63fa <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    6418:	4b2a      	ldr	r3, [pc, #168]	; (64c4 <uart1_status_isr+0xf4>)
    641a:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    641c:	b2c2      	uxtb	r2, r0
    641e:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    6420:	b14b      	cbz	r3, 6436 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    6422:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6424:	bf36      	itet	cc
    6426:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    642a:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    642c:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    642e:	2827      	cmp	r0, #39	; 0x27
    6430:	bfc4      	itt	gt
    6432:	2201      	movgt	r2, #1
    6434:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    6436:	491f      	ldr	r1, [pc, #124]	; (64b4 <uart1_status_isr+0xe4>)
    6438:	78ca      	ldrb	r2, [r1, #3]
    643a:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    643c:	0615      	lsls	r5, r2, #24
    643e:	d416      	bmi.n	646e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    6440:	0652      	lsls	r2, r2, #25
    6442:	d50d      	bpl.n	6460 <uart1_status_isr+0x90>
    6444:	4b1b      	ldr	r3, [pc, #108]	; (64b4 <uart1_status_isr+0xe4>)
    6446:	791b      	ldrb	r3, [r3, #4]
    6448:	065b      	lsls	r3, r3, #25
    644a:	d509      	bpl.n	6460 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    644c:	4b1e      	ldr	r3, [pc, #120]	; (64c8 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    644e:	491f      	ldr	r1, [pc, #124]	; (64cc <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    6450:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    6452:	2200      	movs	r2, #0
    6454:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    6456:	b103      	cbz	r3, 645a <uart1_status_isr+0x8a>
    6458:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    645a:	4b16      	ldr	r3, [pc, #88]	; (64b4 <uart1_status_isr+0xe4>)
    645c:	223c      	movs	r2, #60	; 0x3c
    645e:	70da      	strb	r2, [r3, #3]
	}
}
    6460:	bcf0      	pop	{r4, r5, r6, r7}
    6462:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6464:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    6466:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6468:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    646a:	b662      	cpsie	i
    646c:	e7e3      	b.n	6436 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    646e:	790b      	ldrb	r3, [r1, #4]
    6470:	061c      	lsls	r4, r3, #24
    6472:	d5e5      	bpl.n	6440 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    6474:	4b16      	ldr	r3, [pc, #88]	; (64d0 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    6476:	4e17      	ldr	r6, [pc, #92]	; (64d4 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6478:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    647a:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    647c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    647e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    6480:	429c      	cmp	r4, r3
    6482:	d00e      	beq.n	64a2 <uart1_status_isr+0xd2>
    6484:	4d14      	ldr	r5, [pc, #80]	; (64d8 <uart1_status_isr+0x108>)
    6486:	e001      	b.n	648c <uart1_status_isr+0xbc>
    6488:	42a3      	cmp	r3, r4
    648a:	d00a      	beq.n	64a2 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    648c:	3301      	adds	r3, #1
    648e:	2b28      	cmp	r3, #40	; 0x28
    6490:	bf28      	it	cs
    6492:	2300      	movcs	r3, #0
			avail = UART1_S1;
    6494:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    6496:	5ce8      	ldrb	r0, [r5, r3]
    6498:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    649a:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    649c:	7d08      	ldrb	r0, [r1, #20]
    649e:	2807      	cmp	r0, #7
    64a0:	d9f2      	bls.n	6488 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    64a2:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    64a4:	4903      	ldr	r1, [pc, #12]	; (64b4 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    64a6:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    64a8:	790b      	ldrb	r3, [r1, #4]
    64aa:	0618      	lsls	r0, r3, #24
    64ac:	bf44      	itt	mi
    64ae:	237c      	movmi	r3, #124	; 0x7c
    64b0:	70cb      	strbmi	r3, [r1, #3]
    64b2:	e7c5      	b.n	6440 <uart1_status_isr+0x70>
    64b4:	4006b000 	.word	0x4006b000
    64b8:	1fffd5c8 	.word	0x1fffd5c8
    64bc:	1fffd55d 	.word	0x1fffd55d
    64c0:	1fffd588 	.word	0x1fffd588
    64c4:	1fffd558 	.word	0x1fffd558
    64c8:	1fffd5cc 	.word	0x1fffd5cc
    64cc:	1fffd55c 	.word	0x1fffd55c
    64d0:	1fffd5d0 	.word	0x1fffd5d0
    64d4:	1fffd5c9 	.word	0x1fffd5c9
    64d8:	1fffd560 	.word	0x1fffd560

000064dc <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    64dc:	4a05      	ldr	r2, [pc, #20]	; (64f4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    64de:	4b06      	ldr	r3, [pc, #24]	; (64f8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    64e0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    64e2:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    64e4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    64e6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    64e8:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    64ea:	bf38      	it	cc
    64ec:	3040      	addcc	r0, #64	; 0x40
    64ee:	1ac0      	subs	r0, r0, r3
}
    64f0:	4770      	bx	lr
    64f2:	bf00      	nop
    64f4:	1fffd5d8 	.word	0x1fffd5d8
    64f8:	1fffd5d9 	.word	0x1fffd5d9

000064fc <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    64fc:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    64fe:	4b2b      	ldr	r3, [pc, #172]	; (65ac <uart2_status_isr+0xb0>)
    6500:	791a      	ldrb	r2, [r3, #4]
    6502:	0694      	lsls	r4, r2, #26
    6504:	d51f      	bpl.n	6546 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6506:	482a      	ldr	r0, [pc, #168]	; (65b0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    6508:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    650a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    650c:	4929      	ldr	r1, [pc, #164]	; (65b4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    650e:	3301      	adds	r3, #1
    6510:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6512:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6514:	bfc8      	it	gt
    6516:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6518:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    651a:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    651c:	d003      	beq.n	6526 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    651e:	4c26      	ldr	r4, [pc, #152]	; (65b8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    6520:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    6522:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    6524:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    6526:	4a25      	ldr	r2, [pc, #148]	; (65bc <uart2_status_isr+0xc0>)
    6528:	6811      	ldr	r1, [r2, #0]
    652a:	b161      	cbz	r1, 6546 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    652c:	4a24      	ldr	r2, [pc, #144]	; (65c0 <uart2_status_isr+0xc4>)
    652e:	7812      	ldrb	r2, [r2, #0]
    6530:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    6532:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    6534:	bf36      	itet	cc
    6536:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    653a:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    653c:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    653e:	2b27      	cmp	r3, #39	; 0x27
    6540:	bfc4      	itt	gt
    6542:	2301      	movgt	r3, #1
    6544:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    6546:	4a19      	ldr	r2, [pc, #100]	; (65ac <uart2_status_isr+0xb0>)
    6548:	78d3      	ldrb	r3, [r2, #3]
    654a:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    654c:	0618      	lsls	r0, r3, #24
    654e:	d411      	bmi.n	6574 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    6550:	065a      	lsls	r2, r3, #25
    6552:	d50d      	bpl.n	6570 <uart2_status_isr+0x74>
    6554:	4b15      	ldr	r3, [pc, #84]	; (65ac <uart2_status_isr+0xb0>)
    6556:	791b      	ldrb	r3, [r3, #4]
    6558:	065b      	lsls	r3, r3, #25
    655a:	d509      	bpl.n	6570 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    655c:	4b19      	ldr	r3, [pc, #100]	; (65c4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    655e:	491a      	ldr	r1, [pc, #104]	; (65c8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    6560:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    6562:	2200      	movs	r2, #0
    6564:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    6566:	b103      	cbz	r3, 656a <uart2_status_isr+0x6e>
    6568:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    656a:	4b10      	ldr	r3, [pc, #64]	; (65ac <uart2_status_isr+0xb0>)
    656c:	222c      	movs	r2, #44	; 0x2c
    656e:	70da      	strb	r2, [r3, #3]
	}
}
    6570:	bc30      	pop	{r4, r5}
    6572:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    6574:	7911      	ldrb	r1, [r2, #4]
    6576:	0609      	lsls	r1, r1, #24
    6578:	d5ea      	bpl.n	6550 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    657a:	4914      	ldr	r1, [pc, #80]	; (65cc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    657c:	4810      	ldr	r0, [pc, #64]	; (65c0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    657e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    6580:	7801      	ldrb	r1, [r0, #0]
    6582:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    6584:	428c      	cmp	r4, r1
    6586:	d00d      	beq.n	65a4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    6588:	1c4a      	adds	r2, r1, #1
    658a:	2a27      	cmp	r2, #39	; 0x27
    658c:	bf84      	itt	hi
    658e:	2100      	movhi	r1, #0
    6590:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    6592:	4d0f      	ldr	r5, [pc, #60]	; (65d0 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    6594:	4c05      	ldr	r4, [pc, #20]	; (65ac <uart2_status_isr+0xb0>)
    6596:	bf98      	it	ls
    6598:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    659a:	5caa      	ldrb	r2, [r5, r2]
    659c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    659e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    65a0:	7001      	strb	r1, [r0, #0]
    65a2:	e7d5      	b.n	6550 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    65a4:	216c      	movs	r1, #108	; 0x6c
    65a6:	70d1      	strb	r1, [r2, #3]
    65a8:	e7d2      	b.n	6550 <uart2_status_isr+0x54>
    65aa:	bf00      	nop
    65ac:	4006c000 	.word	0x4006c000
    65b0:	1fffd5d8 	.word	0x1fffd5d8
    65b4:	1fffd5d9 	.word	0x1fffd5d9
    65b8:	1fffd604 	.word	0x1fffd604
    65bc:	1fffd5d4 	.word	0x1fffd5d4
    65c0:	1fffd645 	.word	0x1fffd645
    65c4:	1fffd648 	.word	0x1fffd648
    65c8:	1fffd644 	.word	0x1fffd644
    65cc:	1fffd64c 	.word	0x1fffd64c
    65d0:	1fffd5dc 	.word	0x1fffd5dc

000065d4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    65d4:	b570      	push	{r4, r5, r6, lr}
    65d6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    65d8:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    65da:	4b19      	ldr	r3, [pc, #100]	; (6640 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    65dc:	4d19      	ldr	r5, [pc, #100]	; (6644 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    65de:	481a      	ldr	r0, [pc, #104]	; (6648 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    65e0:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    65e2:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    65e4:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    65e6:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    65e8:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    65ea:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    65ec:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    65ee:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    65f0:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    65f2:	7813      	ldrb	r3, [r2, #0]
    65f4:	061b      	lsls	r3, r3, #24
    65f6:	d5fc      	bpl.n	65f2 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    65f8:	4b14      	ldr	r3, [pc, #80]	; (664c <usb_init_serialnumber+0x78>)
    65fa:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    65fc:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    65fe:	4b14      	ldr	r3, [pc, #80]	; (6650 <usb_init_serialnumber+0x7c>)
    6600:	4c14      	ldr	r4, [pc, #80]	; (6654 <usb_init_serialnumber+0x80>)
    6602:	4298      	cmp	r0, r3
    6604:	bf98      	it	ls
    6606:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    660a:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    660c:	bf98      	it	ls
    660e:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    6610:	220a      	movs	r2, #10
    6612:	f7ff fea7 	bl	6364 <ultoa>
    6616:	a901      	add	r1, sp, #4
    6618:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    661a:	2300      	movs	r3, #0
		char c = buf[i];
    661c:	f811 2b01 	ldrb.w	r2, [r1], #1
    6620:	3301      	adds	r3, #1
		if (!c) break;
    6622:	b13a      	cbz	r2, 6634 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    6624:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    6626:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    662a:	d1f7      	bne.n	661c <usb_init_serialnumber+0x48>
    662c:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    662e:	7023      	strb	r3, [r4, #0]
}
    6630:	b004      	add	sp, #16
    6632:	bd70      	pop	{r4, r5, r6, pc}
    6634:	005b      	lsls	r3, r3, #1
    6636:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6638:	7023      	strb	r3, [r4, #0]
}
    663a:	b004      	add	sp, #16
    663c:	bd70      	pop	{r4, r5, r6, pc}
    663e:	bf00      	nop
    6640:	40020000 	.word	0x40020000
    6644:	40020007 	.word	0x40020007
    6648:	40020006 	.word	0x40020006
    664c:	40020008 	.word	0x40020008
    6650:	0098967f 	.word	0x0098967f
    6654:	1fff87d4 	.word	0x1fff87d4

00006658 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    6658:	4770      	bx	lr
    665a:	bf00      	nop

0000665c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    665c:	4770      	bx	lr
    665e:	bf00      	nop

00006660 <__aeabi_frsub>:
    6660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    6664:	e002      	b.n	666c <__addsf3>
    6666:	bf00      	nop

00006668 <__aeabi_fsub>:
    6668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000666c <__addsf3>:
    666c:	0042      	lsls	r2, r0, #1
    666e:	bf1f      	itttt	ne
    6670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    6674:	ea92 0f03 	teqne	r2, r3
    6678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    667c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6680:	d06a      	beq.n	6758 <__addsf3+0xec>
    6682:	ea4f 6212 	mov.w	r2, r2, lsr #24
    6686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    668a:	bfc1      	itttt	gt
    668c:	18d2      	addgt	r2, r2, r3
    668e:	4041      	eorgt	r1, r0
    6690:	4048      	eorgt	r0, r1
    6692:	4041      	eorgt	r1, r0
    6694:	bfb8      	it	lt
    6696:	425b      	neglt	r3, r3
    6698:	2b19      	cmp	r3, #25
    669a:	bf88      	it	hi
    669c:	4770      	bxhi	lr
    669e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    66a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    66a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    66aa:	bf18      	it	ne
    66ac:	4240      	negne	r0, r0
    66ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    66b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    66b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    66ba:	bf18      	it	ne
    66bc:	4249      	negne	r1, r1
    66be:	ea92 0f03 	teq	r2, r3
    66c2:	d03f      	beq.n	6744 <__addsf3+0xd8>
    66c4:	f1a2 0201 	sub.w	r2, r2, #1
    66c8:	fa41 fc03 	asr.w	ip, r1, r3
    66cc:	eb10 000c 	adds.w	r0, r0, ip
    66d0:	f1c3 0320 	rsb	r3, r3, #32
    66d4:	fa01 f103 	lsl.w	r1, r1, r3
    66d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    66dc:	d502      	bpl.n	66e4 <__addsf3+0x78>
    66de:	4249      	negs	r1, r1
    66e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    66e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    66e8:	d313      	bcc.n	6712 <__addsf3+0xa6>
    66ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    66ee:	d306      	bcc.n	66fe <__addsf3+0x92>
    66f0:	0840      	lsrs	r0, r0, #1
    66f2:	ea4f 0131 	mov.w	r1, r1, rrx
    66f6:	f102 0201 	add.w	r2, r2, #1
    66fa:	2afe      	cmp	r2, #254	; 0xfe
    66fc:	d251      	bcs.n	67a2 <__addsf3+0x136>
    66fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6706:	bf08      	it	eq
    6708:	f020 0001 	biceq.w	r0, r0, #1
    670c:	ea40 0003 	orr.w	r0, r0, r3
    6710:	4770      	bx	lr
    6712:	0049      	lsls	r1, r1, #1
    6714:	eb40 0000 	adc.w	r0, r0, r0
    6718:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    671c:	f1a2 0201 	sub.w	r2, r2, #1
    6720:	d1ed      	bne.n	66fe <__addsf3+0x92>
    6722:	fab0 fc80 	clz	ip, r0
    6726:	f1ac 0c08 	sub.w	ip, ip, #8
    672a:	ebb2 020c 	subs.w	r2, r2, ip
    672e:	fa00 f00c 	lsl.w	r0, r0, ip
    6732:	bfaa      	itet	ge
    6734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6738:	4252      	neglt	r2, r2
    673a:	4318      	orrge	r0, r3
    673c:	bfbc      	itt	lt
    673e:	40d0      	lsrlt	r0, r2
    6740:	4318      	orrlt	r0, r3
    6742:	4770      	bx	lr
    6744:	f092 0f00 	teq	r2, #0
    6748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    674c:	bf06      	itte	eq
    674e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6752:	3201      	addeq	r2, #1
    6754:	3b01      	subne	r3, #1
    6756:	e7b5      	b.n	66c4 <__addsf3+0x58>
    6758:	ea4f 0341 	mov.w	r3, r1, lsl #1
    675c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6760:	bf18      	it	ne
    6762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6766:	d021      	beq.n	67ac <__addsf3+0x140>
    6768:	ea92 0f03 	teq	r2, r3
    676c:	d004      	beq.n	6778 <__addsf3+0x10c>
    676e:	f092 0f00 	teq	r2, #0
    6772:	bf08      	it	eq
    6774:	4608      	moveq	r0, r1
    6776:	4770      	bx	lr
    6778:	ea90 0f01 	teq	r0, r1
    677c:	bf1c      	itt	ne
    677e:	2000      	movne	r0, #0
    6780:	4770      	bxne	lr
    6782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6786:	d104      	bne.n	6792 <__addsf3+0x126>
    6788:	0040      	lsls	r0, r0, #1
    678a:	bf28      	it	cs
    678c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6790:	4770      	bx	lr
    6792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6796:	bf3c      	itt	cc
    6798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    679c:	4770      	bxcc	lr
    679e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    67a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    67a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    67aa:	4770      	bx	lr
    67ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
    67b0:	bf16      	itet	ne
    67b2:	4608      	movne	r0, r1
    67b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    67b8:	4601      	movne	r1, r0
    67ba:	0242      	lsls	r2, r0, #9
    67bc:	bf06      	itte	eq
    67be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    67c2:	ea90 0f01 	teqeq	r0, r1
    67c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    67ca:	4770      	bx	lr

000067cc <__aeabi_ui2f>:
    67cc:	f04f 0300 	mov.w	r3, #0
    67d0:	e004      	b.n	67dc <__aeabi_i2f+0x8>
    67d2:	bf00      	nop

000067d4 <__aeabi_i2f>:
    67d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    67d8:	bf48      	it	mi
    67da:	4240      	negmi	r0, r0
    67dc:	ea5f 0c00 	movs.w	ip, r0
    67e0:	bf08      	it	eq
    67e2:	4770      	bxeq	lr
    67e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    67e8:	4601      	mov	r1, r0
    67ea:	f04f 0000 	mov.w	r0, #0
    67ee:	e01c      	b.n	682a <__aeabi_l2f+0x2a>

000067f0 <__aeabi_ul2f>:
    67f0:	ea50 0201 	orrs.w	r2, r0, r1
    67f4:	bf08      	it	eq
    67f6:	4770      	bxeq	lr
    67f8:	f04f 0300 	mov.w	r3, #0
    67fc:	e00a      	b.n	6814 <__aeabi_l2f+0x14>
    67fe:	bf00      	nop

00006800 <__aeabi_l2f>:
    6800:	ea50 0201 	orrs.w	r2, r0, r1
    6804:	bf08      	it	eq
    6806:	4770      	bxeq	lr
    6808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    680c:	d502      	bpl.n	6814 <__aeabi_l2f+0x14>
    680e:	4240      	negs	r0, r0
    6810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6814:	ea5f 0c01 	movs.w	ip, r1
    6818:	bf02      	ittt	eq
    681a:	4684      	moveq	ip, r0
    681c:	4601      	moveq	r1, r0
    681e:	2000      	moveq	r0, #0
    6820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6824:	bf08      	it	eq
    6826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    682a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    682e:	fabc f28c 	clz	r2, ip
    6832:	3a08      	subs	r2, #8
    6834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6838:	db10      	blt.n	685c <__aeabi_l2f+0x5c>
    683a:	fa01 fc02 	lsl.w	ip, r1, r2
    683e:	4463      	add	r3, ip
    6840:	fa00 fc02 	lsl.w	ip, r0, r2
    6844:	f1c2 0220 	rsb	r2, r2, #32
    6848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    684c:	fa20 f202 	lsr.w	r2, r0, r2
    6850:	eb43 0002 	adc.w	r0, r3, r2
    6854:	bf08      	it	eq
    6856:	f020 0001 	biceq.w	r0, r0, #1
    685a:	4770      	bx	lr
    685c:	f102 0220 	add.w	r2, r2, #32
    6860:	fa01 fc02 	lsl.w	ip, r1, r2
    6864:	f1c2 0220 	rsb	r2, r2, #32
    6868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    686c:	fa21 f202 	lsr.w	r2, r1, r2
    6870:	eb43 0002 	adc.w	r0, r3, r2
    6874:	bf08      	it	eq
    6876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    687a:	4770      	bx	lr

0000687c <__aeabi_fmul>:
    687c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    6884:	bf1e      	ittt	ne
    6886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    688a:	ea92 0f0c 	teqne	r2, ip
    688e:	ea93 0f0c 	teqne	r3, ip
    6892:	d06f      	beq.n	6974 <__aeabi_fmul+0xf8>
    6894:	441a      	add	r2, r3
    6896:	ea80 0c01 	eor.w	ip, r0, r1
    689a:	0240      	lsls	r0, r0, #9
    689c:	bf18      	it	ne
    689e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    68a2:	d01e      	beq.n	68e2 <__aeabi_fmul+0x66>
    68a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    68a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    68ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    68b0:	fba0 3101 	umull	r3, r1, r0, r1
    68b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    68b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    68bc:	bf3e      	ittt	cc
    68be:	0049      	lslcc	r1, r1, #1
    68c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    68c4:	005b      	lslcc	r3, r3, #1
    68c6:	ea40 0001 	orr.w	r0, r0, r1
    68ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    68ce:	2afd      	cmp	r2, #253	; 0xfd
    68d0:	d81d      	bhi.n	690e <__aeabi_fmul+0x92>
    68d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    68d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    68da:	bf08      	it	eq
    68dc:	f020 0001 	biceq.w	r0, r0, #1
    68e0:	4770      	bx	lr
    68e2:	f090 0f00 	teq	r0, #0
    68e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    68ea:	bf08      	it	eq
    68ec:	0249      	lsleq	r1, r1, #9
    68ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    68f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    68f6:	3a7f      	subs	r2, #127	; 0x7f
    68f8:	bfc2      	ittt	gt
    68fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    68fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6902:	4770      	bxgt	lr
    6904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6908:	f04f 0300 	mov.w	r3, #0
    690c:	3a01      	subs	r2, #1
    690e:	dc5d      	bgt.n	69cc <__aeabi_fmul+0x150>
    6910:	f112 0f19 	cmn.w	r2, #25
    6914:	bfdc      	itt	le
    6916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    691a:	4770      	bxle	lr
    691c:	f1c2 0200 	rsb	r2, r2, #0
    6920:	0041      	lsls	r1, r0, #1
    6922:	fa21 f102 	lsr.w	r1, r1, r2
    6926:	f1c2 0220 	rsb	r2, r2, #32
    692a:	fa00 fc02 	lsl.w	ip, r0, r2
    692e:	ea5f 0031 	movs.w	r0, r1, rrx
    6932:	f140 0000 	adc.w	r0, r0, #0
    6936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    693a:	bf08      	it	eq
    693c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6940:	4770      	bx	lr
    6942:	f092 0f00 	teq	r2, #0
    6946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    694a:	bf02      	ittt	eq
    694c:	0040      	lsleq	r0, r0, #1
    694e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    6952:	3a01      	subeq	r2, #1
    6954:	d0f9      	beq.n	694a <__aeabi_fmul+0xce>
    6956:	ea40 000c 	orr.w	r0, r0, ip
    695a:	f093 0f00 	teq	r3, #0
    695e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6962:	bf02      	ittt	eq
    6964:	0049      	lsleq	r1, r1, #1
    6966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    696a:	3b01      	subeq	r3, #1
    696c:	d0f9      	beq.n	6962 <__aeabi_fmul+0xe6>
    696e:	ea41 010c 	orr.w	r1, r1, ip
    6972:	e78f      	b.n	6894 <__aeabi_fmul+0x18>
    6974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6978:	ea92 0f0c 	teq	r2, ip
    697c:	bf18      	it	ne
    697e:	ea93 0f0c 	teqne	r3, ip
    6982:	d00a      	beq.n	699a <__aeabi_fmul+0x11e>
    6984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6988:	bf18      	it	ne
    698a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    698e:	d1d8      	bne.n	6942 <__aeabi_fmul+0xc6>
    6990:	ea80 0001 	eor.w	r0, r0, r1
    6994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6998:	4770      	bx	lr
    699a:	f090 0f00 	teq	r0, #0
    699e:	bf17      	itett	ne
    69a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    69a4:	4608      	moveq	r0, r1
    69a6:	f091 0f00 	teqne	r1, #0
    69aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    69ae:	d014      	beq.n	69da <__aeabi_fmul+0x15e>
    69b0:	ea92 0f0c 	teq	r2, ip
    69b4:	d101      	bne.n	69ba <__aeabi_fmul+0x13e>
    69b6:	0242      	lsls	r2, r0, #9
    69b8:	d10f      	bne.n	69da <__aeabi_fmul+0x15e>
    69ba:	ea93 0f0c 	teq	r3, ip
    69be:	d103      	bne.n	69c8 <__aeabi_fmul+0x14c>
    69c0:	024b      	lsls	r3, r1, #9
    69c2:	bf18      	it	ne
    69c4:	4608      	movne	r0, r1
    69c6:	d108      	bne.n	69da <__aeabi_fmul+0x15e>
    69c8:	ea80 0001 	eor.w	r0, r0, r1
    69cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    69d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    69d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    69d8:	4770      	bx	lr
    69da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    69de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    69e2:	4770      	bx	lr

000069e4 <__aeabi_fdiv>:
    69e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    69e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    69ec:	bf1e      	ittt	ne
    69ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    69f2:	ea92 0f0c 	teqne	r2, ip
    69f6:	ea93 0f0c 	teqne	r3, ip
    69fa:	d069      	beq.n	6ad0 <__aeabi_fdiv+0xec>
    69fc:	eba2 0203 	sub.w	r2, r2, r3
    6a00:	ea80 0c01 	eor.w	ip, r0, r1
    6a04:	0249      	lsls	r1, r1, #9
    6a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
    6a0a:	d037      	beq.n	6a7c <__aeabi_fdiv+0x98>
    6a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    6a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    6a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    6a1c:	428b      	cmp	r3, r1
    6a1e:	bf38      	it	cc
    6a20:	005b      	lslcc	r3, r3, #1
    6a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    6a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    6a2a:	428b      	cmp	r3, r1
    6a2c:	bf24      	itt	cs
    6a2e:	1a5b      	subcs	r3, r3, r1
    6a30:	ea40 000c 	orrcs.w	r0, r0, ip
    6a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    6a38:	bf24      	itt	cs
    6a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    6a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    6a46:	bf24      	itt	cs
    6a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    6a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    6a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    6a54:	bf24      	itt	cs
    6a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    6a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6a5e:	011b      	lsls	r3, r3, #4
    6a60:	bf18      	it	ne
    6a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    6a66:	d1e0      	bne.n	6a2a <__aeabi_fdiv+0x46>
    6a68:	2afd      	cmp	r2, #253	; 0xfd
    6a6a:	f63f af50 	bhi.w	690e <__aeabi_fmul+0x92>
    6a6e:	428b      	cmp	r3, r1
    6a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6a74:	bf08      	it	eq
    6a76:	f020 0001 	biceq.w	r0, r0, #1
    6a7a:	4770      	bx	lr
    6a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    6a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    6a84:	327f      	adds	r2, #127	; 0x7f
    6a86:	bfc2      	ittt	gt
    6a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    6a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6a90:	4770      	bxgt	lr
    6a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6a96:	f04f 0300 	mov.w	r3, #0
    6a9a:	3a01      	subs	r2, #1
    6a9c:	e737      	b.n	690e <__aeabi_fmul+0x92>
    6a9e:	f092 0f00 	teq	r2, #0
    6aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    6aa6:	bf02      	ittt	eq
    6aa8:	0040      	lsleq	r0, r0, #1
    6aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    6aae:	3a01      	subeq	r2, #1
    6ab0:	d0f9      	beq.n	6aa6 <__aeabi_fdiv+0xc2>
    6ab2:	ea40 000c 	orr.w	r0, r0, ip
    6ab6:	f093 0f00 	teq	r3, #0
    6aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6abe:	bf02      	ittt	eq
    6ac0:	0049      	lsleq	r1, r1, #1
    6ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    6ac6:	3b01      	subeq	r3, #1
    6ac8:	d0f9      	beq.n	6abe <__aeabi_fdiv+0xda>
    6aca:	ea41 010c 	orr.w	r1, r1, ip
    6ace:	e795      	b.n	69fc <__aeabi_fdiv+0x18>
    6ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6ad4:	ea92 0f0c 	teq	r2, ip
    6ad8:	d108      	bne.n	6aec <__aeabi_fdiv+0x108>
    6ada:	0242      	lsls	r2, r0, #9
    6adc:	f47f af7d 	bne.w	69da <__aeabi_fmul+0x15e>
    6ae0:	ea93 0f0c 	teq	r3, ip
    6ae4:	f47f af70 	bne.w	69c8 <__aeabi_fmul+0x14c>
    6ae8:	4608      	mov	r0, r1
    6aea:	e776      	b.n	69da <__aeabi_fmul+0x15e>
    6aec:	ea93 0f0c 	teq	r3, ip
    6af0:	d104      	bne.n	6afc <__aeabi_fdiv+0x118>
    6af2:	024b      	lsls	r3, r1, #9
    6af4:	f43f af4c 	beq.w	6990 <__aeabi_fmul+0x114>
    6af8:	4608      	mov	r0, r1
    6afa:	e76e      	b.n	69da <__aeabi_fmul+0x15e>
    6afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6b00:	bf18      	it	ne
    6b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    6b06:	d1ca      	bne.n	6a9e <__aeabi_fdiv+0xba>
    6b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    6b0c:	f47f af5c 	bne.w	69c8 <__aeabi_fmul+0x14c>
    6b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    6b14:	f47f af3c 	bne.w	6990 <__aeabi_fmul+0x114>
    6b18:	e75f      	b.n	69da <__aeabi_fmul+0x15e>
    6b1a:	bf00      	nop

00006b1c <__gesf2>:
    6b1c:	f04f 3cff 	mov.w	ip, #4294967295
    6b20:	e006      	b.n	6b30 <__cmpsf2+0x4>
    6b22:	bf00      	nop

00006b24 <__lesf2>:
    6b24:	f04f 0c01 	mov.w	ip, #1
    6b28:	e002      	b.n	6b30 <__cmpsf2+0x4>
    6b2a:	bf00      	nop

00006b2c <__cmpsf2>:
    6b2c:	f04f 0c01 	mov.w	ip, #1
    6b30:	f84d cd04 	str.w	ip, [sp, #-4]!
    6b34:	ea4f 0240 	mov.w	r2, r0, lsl #1
    6b38:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6b40:	bf18      	it	ne
    6b42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6b46:	d011      	beq.n	6b6c <__cmpsf2+0x40>
    6b48:	b001      	add	sp, #4
    6b4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    6b4e:	bf18      	it	ne
    6b50:	ea90 0f01 	teqne	r0, r1
    6b54:	bf58      	it	pl
    6b56:	ebb2 0003 	subspl.w	r0, r2, r3
    6b5a:	bf88      	it	hi
    6b5c:	17c8      	asrhi	r0, r1, #31
    6b5e:	bf38      	it	cc
    6b60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    6b64:	bf18      	it	ne
    6b66:	f040 0001 	orrne.w	r0, r0, #1
    6b6a:	4770      	bx	lr
    6b6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6b70:	d102      	bne.n	6b78 <__cmpsf2+0x4c>
    6b72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    6b76:	d105      	bne.n	6b84 <__cmpsf2+0x58>
    6b78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    6b7c:	d1e4      	bne.n	6b48 <__cmpsf2+0x1c>
    6b7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    6b82:	d0e1      	beq.n	6b48 <__cmpsf2+0x1c>
    6b84:	f85d 0b04 	ldr.w	r0, [sp], #4
    6b88:	4770      	bx	lr
    6b8a:	bf00      	nop

00006b8c <__aeabi_cfrcmple>:
    6b8c:	4684      	mov	ip, r0
    6b8e:	4608      	mov	r0, r1
    6b90:	4661      	mov	r1, ip
    6b92:	e7ff      	b.n	6b94 <__aeabi_cfcmpeq>

00006b94 <__aeabi_cfcmpeq>:
    6b94:	b50f      	push	{r0, r1, r2, r3, lr}
    6b96:	f7ff ffc9 	bl	6b2c <__cmpsf2>
    6b9a:	2800      	cmp	r0, #0
    6b9c:	bf48      	it	mi
    6b9e:	f110 0f00 	cmnmi.w	r0, #0
    6ba2:	bd0f      	pop	{r0, r1, r2, r3, pc}

00006ba4 <__aeabi_fcmpeq>:
    6ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
    6ba8:	f7ff fff4 	bl	6b94 <__aeabi_cfcmpeq>
    6bac:	bf0c      	ite	eq
    6bae:	2001      	moveq	r0, #1
    6bb0:	2000      	movne	r0, #0
    6bb2:	f85d fb08 	ldr.w	pc, [sp], #8
    6bb6:	bf00      	nop

00006bb8 <__aeabi_fcmplt>:
    6bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
    6bbc:	f7ff ffea 	bl	6b94 <__aeabi_cfcmpeq>
    6bc0:	bf34      	ite	cc
    6bc2:	2001      	movcc	r0, #1
    6bc4:	2000      	movcs	r0, #0
    6bc6:	f85d fb08 	ldr.w	pc, [sp], #8
    6bca:	bf00      	nop

00006bcc <__aeabi_fcmple>:
    6bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
    6bd0:	f7ff ffe0 	bl	6b94 <__aeabi_cfcmpeq>
    6bd4:	bf94      	ite	ls
    6bd6:	2001      	movls	r0, #1
    6bd8:	2000      	movhi	r0, #0
    6bda:	f85d fb08 	ldr.w	pc, [sp], #8
    6bde:	bf00      	nop

00006be0 <__aeabi_fcmpge>:
    6be0:	f84d ed08 	str.w	lr, [sp, #-8]!
    6be4:	f7ff ffd2 	bl	6b8c <__aeabi_cfrcmple>
    6be8:	bf94      	ite	ls
    6bea:	2001      	movls	r0, #1
    6bec:	2000      	movhi	r0, #0
    6bee:	f85d fb08 	ldr.w	pc, [sp], #8
    6bf2:	bf00      	nop

00006bf4 <__aeabi_fcmpgt>:
    6bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
    6bf8:	f7ff ffc8 	bl	6b8c <__aeabi_cfrcmple>
    6bfc:	bf34      	ite	cc
    6bfe:	2001      	movcc	r0, #1
    6c00:	2000      	movcs	r0, #0
    6c02:	f85d fb08 	ldr.w	pc, [sp], #8
    6c06:	bf00      	nop

00006c08 <__aeabi_f2iz>:
    6c08:	ea4f 0240 	mov.w	r2, r0, lsl #1
    6c0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    6c10:	d30f      	bcc.n	6c32 <__aeabi_f2iz+0x2a>
    6c12:	f04f 039e 	mov.w	r3, #158	; 0x9e
    6c16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    6c1a:	d90d      	bls.n	6c38 <__aeabi_f2iz+0x30>
    6c1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    6c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6c24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    6c28:	fa23 f002 	lsr.w	r0, r3, r2
    6c2c:	bf18      	it	ne
    6c2e:	4240      	negne	r0, r0
    6c30:	4770      	bx	lr
    6c32:	f04f 0000 	mov.w	r0, #0
    6c36:	4770      	bx	lr
    6c38:	f112 0f61 	cmn.w	r2, #97	; 0x61
    6c3c:	d101      	bne.n	6c42 <__aeabi_f2iz+0x3a>
    6c3e:	0242      	lsls	r2, r0, #9
    6c40:	d105      	bne.n	6c4e <__aeabi_f2iz+0x46>
    6c42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    6c46:	bf08      	it	eq
    6c48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    6c4c:	4770      	bx	lr
    6c4e:	f04f 0000 	mov.w	r0, #0
    6c52:	4770      	bx	lr

00006c54 <__aeabi_f2uiz>:
    6c54:	0042      	lsls	r2, r0, #1
    6c56:	d20e      	bcs.n	6c76 <__aeabi_f2uiz+0x22>
    6c58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    6c5c:	d30b      	bcc.n	6c76 <__aeabi_f2uiz+0x22>
    6c5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
    6c62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    6c66:	d409      	bmi.n	6c7c <__aeabi_f2uiz+0x28>
    6c68:	ea4f 2300 	mov.w	r3, r0, lsl #8
    6c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6c70:	fa23 f002 	lsr.w	r0, r3, r2
    6c74:	4770      	bx	lr
    6c76:	f04f 0000 	mov.w	r0, #0
    6c7a:	4770      	bx	lr
    6c7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    6c80:	d101      	bne.n	6c86 <__aeabi_f2uiz+0x32>
    6c82:	0242      	lsls	r2, r0, #9
    6c84:	d102      	bne.n	6c8c <__aeabi_f2uiz+0x38>
    6c86:	f04f 30ff 	mov.w	r0, #4294967295
    6c8a:	4770      	bx	lr
    6c8c:	f04f 0000 	mov.w	r0, #0
    6c90:	4770      	bx	lr
    6c92:	bf00      	nop

00006c94 <__aeabi_atexit>:
    6c94:	460b      	mov	r3, r1
    6c96:	4601      	mov	r1, r0
    6c98:	4618      	mov	r0, r3
    6c9a:	f000 b805 	b.w	6ca8 <__cxa_atexit>
    6c9e:	bf00      	nop

00006ca0 <atol>:
    6ca0:	220a      	movs	r2, #10
    6ca2:	2100      	movs	r1, #0
    6ca4:	f001 b8ea 	b.w	7e7c <strtol>

00006ca8 <__cxa_atexit>:
    6ca8:	4613      	mov	r3, r2
    6caa:	460a      	mov	r2, r1
    6cac:	4601      	mov	r1, r0
    6cae:	2002      	movs	r0, #2
    6cb0:	f001 b908 	b.w	7ec4 <__register_exitproc>

00006cb4 <__errno>:
    6cb4:	4b01      	ldr	r3, [pc, #4]	; (6cbc <__errno+0x8>)
    6cb6:	6818      	ldr	r0, [r3, #0]
    6cb8:	4770      	bx	lr
    6cba:	bf00      	nop
    6cbc:	1fff8c18 	.word	0x1fff8c18

00006cc0 <__libc_init_array>:
    6cc0:	b570      	push	{r4, r5, r6, lr}
    6cc2:	4e0f      	ldr	r6, [pc, #60]	; (6d00 <__libc_init_array+0x40>)
    6cc4:	4d0f      	ldr	r5, [pc, #60]	; (6d04 <__libc_init_array+0x44>)
    6cc6:	1b76      	subs	r6, r6, r5
    6cc8:	10b6      	asrs	r6, r6, #2
    6cca:	bf18      	it	ne
    6ccc:	2400      	movne	r4, #0
    6cce:	d005      	beq.n	6cdc <__libc_init_array+0x1c>
    6cd0:	3401      	adds	r4, #1
    6cd2:	f855 3b04 	ldr.w	r3, [r5], #4
    6cd6:	4798      	blx	r3
    6cd8:	42a6      	cmp	r6, r4
    6cda:	d1f9      	bne.n	6cd0 <__libc_init_array+0x10>
    6cdc:	4e0a      	ldr	r6, [pc, #40]	; (6d08 <__libc_init_array+0x48>)
    6cde:	4d0b      	ldr	r5, [pc, #44]	; (6d0c <__libc_init_array+0x4c>)
    6ce0:	1b76      	subs	r6, r6, r5
    6ce2:	f001 fe63 	bl	89ac <_init>
    6ce6:	10b6      	asrs	r6, r6, #2
    6ce8:	bf18      	it	ne
    6cea:	2400      	movne	r4, #0
    6cec:	d006      	beq.n	6cfc <__libc_init_array+0x3c>
    6cee:	3401      	adds	r4, #1
    6cf0:	f855 3b04 	ldr.w	r3, [r5], #4
    6cf4:	4798      	blx	r3
    6cf6:	42a6      	cmp	r6, r4
    6cf8:	d1f9      	bne.n	6cee <__libc_init_array+0x2e>
    6cfa:	bd70      	pop	{r4, r5, r6, pc}
    6cfc:	bd70      	pop	{r4, r5, r6, pc}
    6cfe:	bf00      	nop
    6d00:	000089b8 	.word	0x000089b8
    6d04:	000089b8 	.word	0x000089b8
    6d08:	000089d8 	.word	0x000089d8
    6d0c:	000089b8 	.word	0x000089b8

00006d10 <__locale_ctype_ptr_l>:
    6d10:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    6d14:	4770      	bx	lr
    6d16:	bf00      	nop

00006d18 <malloc>:
    6d18:	4b02      	ldr	r3, [pc, #8]	; (6d24 <malloc+0xc>)
    6d1a:	4601      	mov	r1, r0
    6d1c:	6818      	ldr	r0, [r3, #0]
    6d1e:	f000 b80b 	b.w	6d38 <_malloc_r>
    6d22:	bf00      	nop
    6d24:	1fff8c18 	.word	0x1fff8c18

00006d28 <free>:
    6d28:	4b02      	ldr	r3, [pc, #8]	; (6d34 <free+0xc>)
    6d2a:	4601      	mov	r1, r0
    6d2c:	6818      	ldr	r0, [r3, #0]
    6d2e:	f001 b987 	b.w	8040 <_free_r>
    6d32:	bf00      	nop
    6d34:	1fff8c18 	.word	0x1fff8c18

00006d38 <_malloc_r>:
    6d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d3c:	f101 050b 	add.w	r5, r1, #11
    6d40:	2d16      	cmp	r5, #22
    6d42:	b083      	sub	sp, #12
    6d44:	4606      	mov	r6, r0
    6d46:	f240 809f 	bls.w	6e88 <_malloc_r+0x150>
    6d4a:	f035 0507 	bics.w	r5, r5, #7
    6d4e:	f100 80bf 	bmi.w	6ed0 <_malloc_r+0x198>
    6d52:	42a9      	cmp	r1, r5
    6d54:	f200 80bc 	bhi.w	6ed0 <_malloc_r+0x198>
    6d58:	f000 fb6e 	bl	7438 <__malloc_lock>
    6d5c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    6d60:	f0c0 829c 	bcc.w	729c <_malloc_r+0x564>
    6d64:	0a6b      	lsrs	r3, r5, #9
    6d66:	f000 80ba 	beq.w	6ede <_malloc_r+0x1a6>
    6d6a:	2b04      	cmp	r3, #4
    6d6c:	f200 8183 	bhi.w	7076 <_malloc_r+0x33e>
    6d70:	09a8      	lsrs	r0, r5, #6
    6d72:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    6d76:	ea4f 034e 	mov.w	r3, lr, lsl #1
    6d7a:	3038      	adds	r0, #56	; 0x38
    6d7c:	4fc4      	ldr	r7, [pc, #784]	; (7090 <_malloc_r+0x358>)
    6d7e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6d82:	f1a3 0108 	sub.w	r1, r3, #8
    6d86:	685c      	ldr	r4, [r3, #4]
    6d88:	42a1      	cmp	r1, r4
    6d8a:	d107      	bne.n	6d9c <_malloc_r+0x64>
    6d8c:	e0ac      	b.n	6ee8 <_malloc_r+0x1b0>
    6d8e:	2a00      	cmp	r2, #0
    6d90:	f280 80ac 	bge.w	6eec <_malloc_r+0x1b4>
    6d94:	68e4      	ldr	r4, [r4, #12]
    6d96:	42a1      	cmp	r1, r4
    6d98:	f000 80a6 	beq.w	6ee8 <_malloc_r+0x1b0>
    6d9c:	6863      	ldr	r3, [r4, #4]
    6d9e:	f023 0303 	bic.w	r3, r3, #3
    6da2:	1b5a      	subs	r2, r3, r5
    6da4:	2a0f      	cmp	r2, #15
    6da6:	ddf2      	ble.n	6d8e <_malloc_r+0x56>
    6da8:	49b9      	ldr	r1, [pc, #740]	; (7090 <_malloc_r+0x358>)
    6daa:	693c      	ldr	r4, [r7, #16]
    6dac:	f101 0e08 	add.w	lr, r1, #8
    6db0:	4574      	cmp	r4, lr
    6db2:	f000 81b3 	beq.w	711c <_malloc_r+0x3e4>
    6db6:	6863      	ldr	r3, [r4, #4]
    6db8:	f023 0303 	bic.w	r3, r3, #3
    6dbc:	1b5a      	subs	r2, r3, r5
    6dbe:	2a0f      	cmp	r2, #15
    6dc0:	f300 8199 	bgt.w	70f6 <_malloc_r+0x3be>
    6dc4:	2a00      	cmp	r2, #0
    6dc6:	f8c1 e014 	str.w	lr, [r1, #20]
    6dca:	f8c1 e010 	str.w	lr, [r1, #16]
    6dce:	f280 809e 	bge.w	6f0e <_malloc_r+0x1d6>
    6dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6dd6:	f080 8167 	bcs.w	70a8 <_malloc_r+0x370>
    6dda:	08db      	lsrs	r3, r3, #3
    6ddc:	f103 0c01 	add.w	ip, r3, #1
    6de0:	2201      	movs	r2, #1
    6de2:	109b      	asrs	r3, r3, #2
    6de4:	fa02 f303 	lsl.w	r3, r2, r3
    6de8:	684a      	ldr	r2, [r1, #4]
    6dea:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    6dee:	f8c4 8008 	str.w	r8, [r4, #8]
    6df2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    6df6:	431a      	orrs	r2, r3
    6df8:	f1a9 0308 	sub.w	r3, r9, #8
    6dfc:	60e3      	str	r3, [r4, #12]
    6dfe:	604a      	str	r2, [r1, #4]
    6e00:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    6e04:	f8c8 400c 	str.w	r4, [r8, #12]
    6e08:	1083      	asrs	r3, r0, #2
    6e0a:	2401      	movs	r4, #1
    6e0c:	409c      	lsls	r4, r3
    6e0e:	4294      	cmp	r4, r2
    6e10:	f200 808a 	bhi.w	6f28 <_malloc_r+0x1f0>
    6e14:	4214      	tst	r4, r2
    6e16:	d106      	bne.n	6e26 <_malloc_r+0xee>
    6e18:	f020 0003 	bic.w	r0, r0, #3
    6e1c:	0064      	lsls	r4, r4, #1
    6e1e:	4214      	tst	r4, r2
    6e20:	f100 0004 	add.w	r0, r0, #4
    6e24:	d0fa      	beq.n	6e1c <_malloc_r+0xe4>
    6e26:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    6e2a:	46cc      	mov	ip, r9
    6e2c:	4680      	mov	r8, r0
    6e2e:	f8dc 100c 	ldr.w	r1, [ip, #12]
    6e32:	458c      	cmp	ip, r1
    6e34:	d107      	bne.n	6e46 <_malloc_r+0x10e>
    6e36:	e173      	b.n	7120 <_malloc_r+0x3e8>
    6e38:	2a00      	cmp	r2, #0
    6e3a:	f280 8181 	bge.w	7140 <_malloc_r+0x408>
    6e3e:	68c9      	ldr	r1, [r1, #12]
    6e40:	458c      	cmp	ip, r1
    6e42:	f000 816d 	beq.w	7120 <_malloc_r+0x3e8>
    6e46:	684b      	ldr	r3, [r1, #4]
    6e48:	f023 0303 	bic.w	r3, r3, #3
    6e4c:	1b5a      	subs	r2, r3, r5
    6e4e:	2a0f      	cmp	r2, #15
    6e50:	ddf2      	ble.n	6e38 <_malloc_r+0x100>
    6e52:	460c      	mov	r4, r1
    6e54:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    6e58:	f854 8f08 	ldr.w	r8, [r4, #8]!
    6e5c:	194b      	adds	r3, r1, r5
    6e5e:	f045 0501 	orr.w	r5, r5, #1
    6e62:	604d      	str	r5, [r1, #4]
    6e64:	f042 0101 	orr.w	r1, r2, #1
    6e68:	f8c8 c00c 	str.w	ip, [r8, #12]
    6e6c:	4630      	mov	r0, r6
    6e6e:	f8cc 8008 	str.w	r8, [ip, #8]
    6e72:	617b      	str	r3, [r7, #20]
    6e74:	613b      	str	r3, [r7, #16]
    6e76:	f8c3 e00c 	str.w	lr, [r3, #12]
    6e7a:	f8c3 e008 	str.w	lr, [r3, #8]
    6e7e:	6059      	str	r1, [r3, #4]
    6e80:	509a      	str	r2, [r3, r2]
    6e82:	f000 fadb 	bl	743c <__malloc_unlock>
    6e86:	e01f      	b.n	6ec8 <_malloc_r+0x190>
    6e88:	2910      	cmp	r1, #16
    6e8a:	d821      	bhi.n	6ed0 <_malloc_r+0x198>
    6e8c:	f000 fad4 	bl	7438 <__malloc_lock>
    6e90:	2510      	movs	r5, #16
    6e92:	2306      	movs	r3, #6
    6e94:	2002      	movs	r0, #2
    6e96:	4f7e      	ldr	r7, [pc, #504]	; (7090 <_malloc_r+0x358>)
    6e98:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6e9c:	f1a3 0208 	sub.w	r2, r3, #8
    6ea0:	685c      	ldr	r4, [r3, #4]
    6ea2:	4294      	cmp	r4, r2
    6ea4:	f000 8145 	beq.w	7132 <_malloc_r+0x3fa>
    6ea8:	6863      	ldr	r3, [r4, #4]
    6eaa:	68e1      	ldr	r1, [r4, #12]
    6eac:	68a5      	ldr	r5, [r4, #8]
    6eae:	f023 0303 	bic.w	r3, r3, #3
    6eb2:	4423      	add	r3, r4
    6eb4:	4630      	mov	r0, r6
    6eb6:	685a      	ldr	r2, [r3, #4]
    6eb8:	60e9      	str	r1, [r5, #12]
    6eba:	f042 0201 	orr.w	r2, r2, #1
    6ebe:	608d      	str	r5, [r1, #8]
    6ec0:	605a      	str	r2, [r3, #4]
    6ec2:	f000 fabb 	bl	743c <__malloc_unlock>
    6ec6:	3408      	adds	r4, #8
    6ec8:	4620      	mov	r0, r4
    6eca:	b003      	add	sp, #12
    6ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ed0:	2400      	movs	r4, #0
    6ed2:	230c      	movs	r3, #12
    6ed4:	4620      	mov	r0, r4
    6ed6:	6033      	str	r3, [r6, #0]
    6ed8:	b003      	add	sp, #12
    6eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ede:	2380      	movs	r3, #128	; 0x80
    6ee0:	f04f 0e40 	mov.w	lr, #64	; 0x40
    6ee4:	203f      	movs	r0, #63	; 0x3f
    6ee6:	e749      	b.n	6d7c <_malloc_r+0x44>
    6ee8:	4670      	mov	r0, lr
    6eea:	e75d      	b.n	6da8 <_malloc_r+0x70>
    6eec:	4423      	add	r3, r4
    6eee:	68e1      	ldr	r1, [r4, #12]
    6ef0:	685a      	ldr	r2, [r3, #4]
    6ef2:	68a5      	ldr	r5, [r4, #8]
    6ef4:	f042 0201 	orr.w	r2, r2, #1
    6ef8:	60e9      	str	r1, [r5, #12]
    6efa:	4630      	mov	r0, r6
    6efc:	608d      	str	r5, [r1, #8]
    6efe:	605a      	str	r2, [r3, #4]
    6f00:	f000 fa9c 	bl	743c <__malloc_unlock>
    6f04:	3408      	adds	r4, #8
    6f06:	4620      	mov	r0, r4
    6f08:	b003      	add	sp, #12
    6f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f0e:	4423      	add	r3, r4
    6f10:	4630      	mov	r0, r6
    6f12:	685a      	ldr	r2, [r3, #4]
    6f14:	f042 0201 	orr.w	r2, r2, #1
    6f18:	605a      	str	r2, [r3, #4]
    6f1a:	f000 fa8f 	bl	743c <__malloc_unlock>
    6f1e:	3408      	adds	r4, #8
    6f20:	4620      	mov	r0, r4
    6f22:	b003      	add	sp, #12
    6f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f28:	68bc      	ldr	r4, [r7, #8]
    6f2a:	6863      	ldr	r3, [r4, #4]
    6f2c:	f023 0803 	bic.w	r8, r3, #3
    6f30:	45a8      	cmp	r8, r5
    6f32:	d304      	bcc.n	6f3e <_malloc_r+0x206>
    6f34:	ebc5 0308 	rsb	r3, r5, r8
    6f38:	2b0f      	cmp	r3, #15
    6f3a:	f300 808c 	bgt.w	7056 <_malloc_r+0x31e>
    6f3e:	4b55      	ldr	r3, [pc, #340]	; (7094 <_malloc_r+0x35c>)
    6f40:	f8df 9160 	ldr.w	r9, [pc, #352]	; 70a4 <_malloc_r+0x36c>
    6f44:	681a      	ldr	r2, [r3, #0]
    6f46:	f8d9 3000 	ldr.w	r3, [r9]
    6f4a:	3301      	adds	r3, #1
    6f4c:	442a      	add	r2, r5
    6f4e:	eb04 0a08 	add.w	sl, r4, r8
    6f52:	f000 8160 	beq.w	7216 <_malloc_r+0x4de>
    6f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6f5a:	320f      	adds	r2, #15
    6f5c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    6f60:	f022 020f 	bic.w	r2, r2, #15
    6f64:	4611      	mov	r1, r2
    6f66:	4630      	mov	r0, r6
    6f68:	9201      	str	r2, [sp, #4]
    6f6a:	f000 fc61 	bl	7830 <_sbrk_r>
    6f6e:	f1b0 3fff 	cmp.w	r0, #4294967295
    6f72:	4683      	mov	fp, r0
    6f74:	9a01      	ldr	r2, [sp, #4]
    6f76:	f000 8158 	beq.w	722a <_malloc_r+0x4f2>
    6f7a:	4582      	cmp	sl, r0
    6f7c:	f200 80fc 	bhi.w	7178 <_malloc_r+0x440>
    6f80:	4b45      	ldr	r3, [pc, #276]	; (7098 <_malloc_r+0x360>)
    6f82:	6819      	ldr	r1, [r3, #0]
    6f84:	45da      	cmp	sl, fp
    6f86:	4411      	add	r1, r2
    6f88:	6019      	str	r1, [r3, #0]
    6f8a:	f000 8153 	beq.w	7234 <_malloc_r+0x4fc>
    6f8e:	f8d9 0000 	ldr.w	r0, [r9]
    6f92:	f8df e110 	ldr.w	lr, [pc, #272]	; 70a4 <_malloc_r+0x36c>
    6f96:	3001      	adds	r0, #1
    6f98:	bf1b      	ittet	ne
    6f9a:	ebca 0a0b 	rsbne	sl, sl, fp
    6f9e:	4451      	addne	r1, sl
    6fa0:	f8ce b000 	streq.w	fp, [lr]
    6fa4:	6019      	strne	r1, [r3, #0]
    6fa6:	f01b 0107 	ands.w	r1, fp, #7
    6faa:	f000 8117 	beq.w	71dc <_malloc_r+0x4a4>
    6fae:	f1c1 0008 	rsb	r0, r1, #8
    6fb2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    6fb6:	4483      	add	fp, r0
    6fb8:	3108      	adds	r1, #8
    6fba:	445a      	add	r2, fp
    6fbc:	f3c2 020b 	ubfx	r2, r2, #0, #12
    6fc0:	ebc2 0901 	rsb	r9, r2, r1
    6fc4:	4649      	mov	r1, r9
    6fc6:	4630      	mov	r0, r6
    6fc8:	9301      	str	r3, [sp, #4]
    6fca:	f000 fc31 	bl	7830 <_sbrk_r>
    6fce:	1c43      	adds	r3, r0, #1
    6fd0:	9b01      	ldr	r3, [sp, #4]
    6fd2:	f000 813f 	beq.w	7254 <_malloc_r+0x51c>
    6fd6:	ebcb 0200 	rsb	r2, fp, r0
    6fda:	444a      	add	r2, r9
    6fdc:	f042 0201 	orr.w	r2, r2, #1
    6fe0:	6819      	ldr	r1, [r3, #0]
    6fe2:	f8c7 b008 	str.w	fp, [r7, #8]
    6fe6:	4449      	add	r1, r9
    6fe8:	42bc      	cmp	r4, r7
    6fea:	f8cb 2004 	str.w	r2, [fp, #4]
    6fee:	6019      	str	r1, [r3, #0]
    6ff0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 7098 <_malloc_r+0x360>
    6ff4:	d016      	beq.n	7024 <_malloc_r+0x2ec>
    6ff6:	f1b8 0f0f 	cmp.w	r8, #15
    6ffa:	f240 80fd 	bls.w	71f8 <_malloc_r+0x4c0>
    6ffe:	6862      	ldr	r2, [r4, #4]
    7000:	f1a8 030c 	sub.w	r3, r8, #12
    7004:	f023 0307 	bic.w	r3, r3, #7
    7008:	18e0      	adds	r0, r4, r3
    700a:	f002 0201 	and.w	r2, r2, #1
    700e:	f04f 0e05 	mov.w	lr, #5
    7012:	431a      	orrs	r2, r3
    7014:	2b0f      	cmp	r3, #15
    7016:	6062      	str	r2, [r4, #4]
    7018:	f8c0 e004 	str.w	lr, [r0, #4]
    701c:	f8c0 e008 	str.w	lr, [r0, #8]
    7020:	f200 811c 	bhi.w	725c <_malloc_r+0x524>
    7024:	4b1d      	ldr	r3, [pc, #116]	; (709c <_malloc_r+0x364>)
    7026:	68bc      	ldr	r4, [r7, #8]
    7028:	681a      	ldr	r2, [r3, #0]
    702a:	4291      	cmp	r1, r2
    702c:	bf88      	it	hi
    702e:	6019      	strhi	r1, [r3, #0]
    7030:	4b1b      	ldr	r3, [pc, #108]	; (70a0 <_malloc_r+0x368>)
    7032:	681a      	ldr	r2, [r3, #0]
    7034:	4291      	cmp	r1, r2
    7036:	6862      	ldr	r2, [r4, #4]
    7038:	bf88      	it	hi
    703a:	6019      	strhi	r1, [r3, #0]
    703c:	f022 0203 	bic.w	r2, r2, #3
    7040:	4295      	cmp	r5, r2
    7042:	eba2 0305 	sub.w	r3, r2, r5
    7046:	d801      	bhi.n	704c <_malloc_r+0x314>
    7048:	2b0f      	cmp	r3, #15
    704a:	dc04      	bgt.n	7056 <_malloc_r+0x31e>
    704c:	4630      	mov	r0, r6
    704e:	f000 f9f5 	bl	743c <__malloc_unlock>
    7052:	2400      	movs	r4, #0
    7054:	e738      	b.n	6ec8 <_malloc_r+0x190>
    7056:	1962      	adds	r2, r4, r5
    7058:	f043 0301 	orr.w	r3, r3, #1
    705c:	f045 0501 	orr.w	r5, r5, #1
    7060:	6065      	str	r5, [r4, #4]
    7062:	4630      	mov	r0, r6
    7064:	60ba      	str	r2, [r7, #8]
    7066:	6053      	str	r3, [r2, #4]
    7068:	f000 f9e8 	bl	743c <__malloc_unlock>
    706c:	3408      	adds	r4, #8
    706e:	4620      	mov	r0, r4
    7070:	b003      	add	sp, #12
    7072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7076:	2b14      	cmp	r3, #20
    7078:	d971      	bls.n	715e <_malloc_r+0x426>
    707a:	2b54      	cmp	r3, #84	; 0x54
    707c:	f200 80a4 	bhi.w	71c8 <_malloc_r+0x490>
    7080:	0b28      	lsrs	r0, r5, #12
    7082:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    7086:	ea4f 034e 	mov.w	r3, lr, lsl #1
    708a:	306e      	adds	r0, #110	; 0x6e
    708c:	e676      	b.n	6d7c <_malloc_r+0x44>
    708e:	bf00      	nop
    7090:	1fff8d88 	.word	0x1fff8d88
    7094:	1fffd658 	.word	0x1fffd658
    7098:	1fffd65c 	.word	0x1fffd65c
    709c:	1fffd654 	.word	0x1fffd654
    70a0:	1fffd650 	.word	0x1fffd650
    70a4:	1fff9194 	.word	0x1fff9194
    70a8:	0a5a      	lsrs	r2, r3, #9
    70aa:	2a04      	cmp	r2, #4
    70ac:	d95e      	bls.n	716c <_malloc_r+0x434>
    70ae:	2a14      	cmp	r2, #20
    70b0:	f200 80b3 	bhi.w	721a <_malloc_r+0x4e2>
    70b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    70b8:	0049      	lsls	r1, r1, #1
    70ba:	325b      	adds	r2, #91	; 0x5b
    70bc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    70c0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    70c4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 72a4 <_malloc_r+0x56c>
    70c8:	f1ac 0c08 	sub.w	ip, ip, #8
    70cc:	458c      	cmp	ip, r1
    70ce:	f000 8088 	beq.w	71e2 <_malloc_r+0x4aa>
    70d2:	684a      	ldr	r2, [r1, #4]
    70d4:	f022 0203 	bic.w	r2, r2, #3
    70d8:	4293      	cmp	r3, r2
    70da:	d202      	bcs.n	70e2 <_malloc_r+0x3aa>
    70dc:	6889      	ldr	r1, [r1, #8]
    70de:	458c      	cmp	ip, r1
    70e0:	d1f7      	bne.n	70d2 <_malloc_r+0x39a>
    70e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    70e6:	687a      	ldr	r2, [r7, #4]
    70e8:	f8c4 c00c 	str.w	ip, [r4, #12]
    70ec:	60a1      	str	r1, [r4, #8]
    70ee:	f8cc 4008 	str.w	r4, [ip, #8]
    70f2:	60cc      	str	r4, [r1, #12]
    70f4:	e688      	b.n	6e08 <_malloc_r+0xd0>
    70f6:	1963      	adds	r3, r4, r5
    70f8:	f042 0701 	orr.w	r7, r2, #1
    70fc:	f045 0501 	orr.w	r5, r5, #1
    7100:	6065      	str	r5, [r4, #4]
    7102:	4630      	mov	r0, r6
    7104:	614b      	str	r3, [r1, #20]
    7106:	610b      	str	r3, [r1, #16]
    7108:	f8c3 e00c 	str.w	lr, [r3, #12]
    710c:	f8c3 e008 	str.w	lr, [r3, #8]
    7110:	605f      	str	r7, [r3, #4]
    7112:	509a      	str	r2, [r3, r2]
    7114:	3408      	adds	r4, #8
    7116:	f000 f991 	bl	743c <__malloc_unlock>
    711a:	e6d5      	b.n	6ec8 <_malloc_r+0x190>
    711c:	684a      	ldr	r2, [r1, #4]
    711e:	e673      	b.n	6e08 <_malloc_r+0xd0>
    7120:	f108 0801 	add.w	r8, r8, #1
    7124:	f018 0f03 	tst.w	r8, #3
    7128:	f10c 0c08 	add.w	ip, ip, #8
    712c:	f47f ae7f 	bne.w	6e2e <_malloc_r+0xf6>
    7130:	e030      	b.n	7194 <_malloc_r+0x45c>
    7132:	68dc      	ldr	r4, [r3, #12]
    7134:	42a3      	cmp	r3, r4
    7136:	bf08      	it	eq
    7138:	3002      	addeq	r0, #2
    713a:	f43f ae35 	beq.w	6da8 <_malloc_r+0x70>
    713e:	e6b3      	b.n	6ea8 <_malloc_r+0x170>
    7140:	440b      	add	r3, r1
    7142:	460c      	mov	r4, r1
    7144:	685a      	ldr	r2, [r3, #4]
    7146:	68c9      	ldr	r1, [r1, #12]
    7148:	f854 5f08 	ldr.w	r5, [r4, #8]!
    714c:	f042 0201 	orr.w	r2, r2, #1
    7150:	605a      	str	r2, [r3, #4]
    7152:	4630      	mov	r0, r6
    7154:	60e9      	str	r1, [r5, #12]
    7156:	608d      	str	r5, [r1, #8]
    7158:	f000 f970 	bl	743c <__malloc_unlock>
    715c:	e6b4      	b.n	6ec8 <_malloc_r+0x190>
    715e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    7162:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    7166:	ea4f 034e 	mov.w	r3, lr, lsl #1
    716a:	e607      	b.n	6d7c <_malloc_r+0x44>
    716c:	099a      	lsrs	r2, r3, #6
    716e:	f102 0139 	add.w	r1, r2, #57	; 0x39
    7172:	0049      	lsls	r1, r1, #1
    7174:	3238      	adds	r2, #56	; 0x38
    7176:	e7a1      	b.n	70bc <_malloc_r+0x384>
    7178:	42bc      	cmp	r4, r7
    717a:	4b4a      	ldr	r3, [pc, #296]	; (72a4 <_malloc_r+0x56c>)
    717c:	f43f af00 	beq.w	6f80 <_malloc_r+0x248>
    7180:	689c      	ldr	r4, [r3, #8]
    7182:	6862      	ldr	r2, [r4, #4]
    7184:	f022 0203 	bic.w	r2, r2, #3
    7188:	e75a      	b.n	7040 <_malloc_r+0x308>
    718a:	f859 3908 	ldr.w	r3, [r9], #-8
    718e:	4599      	cmp	r9, r3
    7190:	f040 8082 	bne.w	7298 <_malloc_r+0x560>
    7194:	f010 0f03 	tst.w	r0, #3
    7198:	f100 30ff 	add.w	r0, r0, #4294967295
    719c:	d1f5      	bne.n	718a <_malloc_r+0x452>
    719e:	687b      	ldr	r3, [r7, #4]
    71a0:	ea23 0304 	bic.w	r3, r3, r4
    71a4:	607b      	str	r3, [r7, #4]
    71a6:	0064      	lsls	r4, r4, #1
    71a8:	429c      	cmp	r4, r3
    71aa:	f63f aebd 	bhi.w	6f28 <_malloc_r+0x1f0>
    71ae:	2c00      	cmp	r4, #0
    71b0:	f43f aeba 	beq.w	6f28 <_malloc_r+0x1f0>
    71b4:	421c      	tst	r4, r3
    71b6:	4640      	mov	r0, r8
    71b8:	f47f ae35 	bne.w	6e26 <_malloc_r+0xee>
    71bc:	0064      	lsls	r4, r4, #1
    71be:	421c      	tst	r4, r3
    71c0:	f100 0004 	add.w	r0, r0, #4
    71c4:	d0fa      	beq.n	71bc <_malloc_r+0x484>
    71c6:	e62e      	b.n	6e26 <_malloc_r+0xee>
    71c8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    71cc:	d818      	bhi.n	7200 <_malloc_r+0x4c8>
    71ce:	0be8      	lsrs	r0, r5, #15
    71d0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    71d4:	ea4f 034e 	mov.w	r3, lr, lsl #1
    71d8:	3077      	adds	r0, #119	; 0x77
    71da:	e5cf      	b.n	6d7c <_malloc_r+0x44>
    71dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    71e0:	e6eb      	b.n	6fba <_malloc_r+0x282>
    71e2:	2101      	movs	r1, #1
    71e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    71e8:	1092      	asrs	r2, r2, #2
    71ea:	fa01 f202 	lsl.w	r2, r1, r2
    71ee:	431a      	orrs	r2, r3
    71f0:	f8c8 2004 	str.w	r2, [r8, #4]
    71f4:	4661      	mov	r1, ip
    71f6:	e777      	b.n	70e8 <_malloc_r+0x3b0>
    71f8:	2301      	movs	r3, #1
    71fa:	f8cb 3004 	str.w	r3, [fp, #4]
    71fe:	e725      	b.n	704c <_malloc_r+0x314>
    7200:	f240 5254 	movw	r2, #1364	; 0x554
    7204:	4293      	cmp	r3, r2
    7206:	d820      	bhi.n	724a <_malloc_r+0x512>
    7208:	0ca8      	lsrs	r0, r5, #18
    720a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    720e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7212:	307c      	adds	r0, #124	; 0x7c
    7214:	e5b2      	b.n	6d7c <_malloc_r+0x44>
    7216:	3210      	adds	r2, #16
    7218:	e6a4      	b.n	6f64 <_malloc_r+0x22c>
    721a:	2a54      	cmp	r2, #84	; 0x54
    721c:	d826      	bhi.n	726c <_malloc_r+0x534>
    721e:	0b1a      	lsrs	r2, r3, #12
    7220:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    7224:	0049      	lsls	r1, r1, #1
    7226:	326e      	adds	r2, #110	; 0x6e
    7228:	e748      	b.n	70bc <_malloc_r+0x384>
    722a:	68bc      	ldr	r4, [r7, #8]
    722c:	6862      	ldr	r2, [r4, #4]
    722e:	f022 0203 	bic.w	r2, r2, #3
    7232:	e705      	b.n	7040 <_malloc_r+0x308>
    7234:	f3ca 000b 	ubfx	r0, sl, #0, #12
    7238:	2800      	cmp	r0, #0
    723a:	f47f aea8 	bne.w	6f8e <_malloc_r+0x256>
    723e:	4442      	add	r2, r8
    7240:	68bb      	ldr	r3, [r7, #8]
    7242:	f042 0201 	orr.w	r2, r2, #1
    7246:	605a      	str	r2, [r3, #4]
    7248:	e6ec      	b.n	7024 <_malloc_r+0x2ec>
    724a:	23fe      	movs	r3, #254	; 0xfe
    724c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    7250:	207e      	movs	r0, #126	; 0x7e
    7252:	e593      	b.n	6d7c <_malloc_r+0x44>
    7254:	2201      	movs	r2, #1
    7256:	f04f 0900 	mov.w	r9, #0
    725a:	e6c1      	b.n	6fe0 <_malloc_r+0x2a8>
    725c:	f104 0108 	add.w	r1, r4, #8
    7260:	4630      	mov	r0, r6
    7262:	f000 feed 	bl	8040 <_free_r>
    7266:	f8d9 1000 	ldr.w	r1, [r9]
    726a:	e6db      	b.n	7024 <_malloc_r+0x2ec>
    726c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    7270:	d805      	bhi.n	727e <_malloc_r+0x546>
    7272:	0bda      	lsrs	r2, r3, #15
    7274:	f102 0178 	add.w	r1, r2, #120	; 0x78
    7278:	0049      	lsls	r1, r1, #1
    727a:	3277      	adds	r2, #119	; 0x77
    727c:	e71e      	b.n	70bc <_malloc_r+0x384>
    727e:	f240 5154 	movw	r1, #1364	; 0x554
    7282:	428a      	cmp	r2, r1
    7284:	d805      	bhi.n	7292 <_malloc_r+0x55a>
    7286:	0c9a      	lsrs	r2, r3, #18
    7288:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    728c:	0049      	lsls	r1, r1, #1
    728e:	327c      	adds	r2, #124	; 0x7c
    7290:	e714      	b.n	70bc <_malloc_r+0x384>
    7292:	21fe      	movs	r1, #254	; 0xfe
    7294:	227e      	movs	r2, #126	; 0x7e
    7296:	e711      	b.n	70bc <_malloc_r+0x384>
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	e784      	b.n	71a6 <_malloc_r+0x46e>
    729c:	08e8      	lsrs	r0, r5, #3
    729e:	1c43      	adds	r3, r0, #1
    72a0:	005b      	lsls	r3, r3, #1
    72a2:	e5f8      	b.n	6e96 <_malloc_r+0x15e>
    72a4:	1fff8d88 	.word	0x1fff8d88

000072a8 <__ascii_mbtowc>:
    72a8:	b082      	sub	sp, #8
    72aa:	b149      	cbz	r1, 72c0 <__ascii_mbtowc+0x18>
    72ac:	b15a      	cbz	r2, 72c6 <__ascii_mbtowc+0x1e>
    72ae:	b16b      	cbz	r3, 72cc <__ascii_mbtowc+0x24>
    72b0:	7813      	ldrb	r3, [r2, #0]
    72b2:	600b      	str	r3, [r1, #0]
    72b4:	7812      	ldrb	r2, [r2, #0]
    72b6:	1c10      	adds	r0, r2, #0
    72b8:	bf18      	it	ne
    72ba:	2001      	movne	r0, #1
    72bc:	b002      	add	sp, #8
    72be:	4770      	bx	lr
    72c0:	a901      	add	r1, sp, #4
    72c2:	2a00      	cmp	r2, #0
    72c4:	d1f3      	bne.n	72ae <__ascii_mbtowc+0x6>
    72c6:	4610      	mov	r0, r2
    72c8:	b002      	add	sp, #8
    72ca:	4770      	bx	lr
    72cc:	f06f 0001 	mvn.w	r0, #1
    72d0:	e7f4      	b.n	72bc <__ascii_mbtowc+0x14>
    72d2:	bf00      	nop

000072d4 <memmove>:
    72d4:	4288      	cmp	r0, r1
    72d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    72d8:	d90d      	bls.n	72f6 <memmove+0x22>
    72da:	188b      	adds	r3, r1, r2
    72dc:	4298      	cmp	r0, r3
    72de:	d20a      	bcs.n	72f6 <memmove+0x22>
    72e0:	1881      	adds	r1, r0, r2
    72e2:	2a00      	cmp	r2, #0
    72e4:	d051      	beq.n	738a <memmove+0xb6>
    72e6:	1a9a      	subs	r2, r3, r2
    72e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    72ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
    72f0:	4293      	cmp	r3, r2
    72f2:	d1f9      	bne.n	72e8 <memmove+0x14>
    72f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72f6:	2a0f      	cmp	r2, #15
    72f8:	d948      	bls.n	738c <memmove+0xb8>
    72fa:	ea41 0300 	orr.w	r3, r1, r0
    72fe:	079b      	lsls	r3, r3, #30
    7300:	d146      	bne.n	7390 <memmove+0xbc>
    7302:	f100 0410 	add.w	r4, r0, #16
    7306:	f101 0310 	add.w	r3, r1, #16
    730a:	4615      	mov	r5, r2
    730c:	f853 6c10 	ldr.w	r6, [r3, #-16]
    7310:	f844 6c10 	str.w	r6, [r4, #-16]
    7314:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    7318:	f844 6c0c 	str.w	r6, [r4, #-12]
    731c:	f853 6c08 	ldr.w	r6, [r3, #-8]
    7320:	f844 6c08 	str.w	r6, [r4, #-8]
    7324:	3d10      	subs	r5, #16
    7326:	f853 6c04 	ldr.w	r6, [r3, #-4]
    732a:	f844 6c04 	str.w	r6, [r4, #-4]
    732e:	2d0f      	cmp	r5, #15
    7330:	f103 0310 	add.w	r3, r3, #16
    7334:	f104 0410 	add.w	r4, r4, #16
    7338:	d8e8      	bhi.n	730c <memmove+0x38>
    733a:	f1a2 0310 	sub.w	r3, r2, #16
    733e:	f023 030f 	bic.w	r3, r3, #15
    7342:	f002 0e0f 	and.w	lr, r2, #15
    7346:	3310      	adds	r3, #16
    7348:	f1be 0f03 	cmp.w	lr, #3
    734c:	4419      	add	r1, r3
    734e:	4403      	add	r3, r0
    7350:	d921      	bls.n	7396 <memmove+0xc2>
    7352:	1f1e      	subs	r6, r3, #4
    7354:	460d      	mov	r5, r1
    7356:	4674      	mov	r4, lr
    7358:	3c04      	subs	r4, #4
    735a:	f855 7b04 	ldr.w	r7, [r5], #4
    735e:	f846 7f04 	str.w	r7, [r6, #4]!
    7362:	2c03      	cmp	r4, #3
    7364:	d8f8      	bhi.n	7358 <memmove+0x84>
    7366:	f1ae 0404 	sub.w	r4, lr, #4
    736a:	f024 0403 	bic.w	r4, r4, #3
    736e:	3404      	adds	r4, #4
    7370:	4423      	add	r3, r4
    7372:	4421      	add	r1, r4
    7374:	f002 0203 	and.w	r2, r2, #3
    7378:	b162      	cbz	r2, 7394 <memmove+0xc0>
    737a:	3b01      	subs	r3, #1
    737c:	440a      	add	r2, r1
    737e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7382:	f803 4f01 	strb.w	r4, [r3, #1]!
    7386:	428a      	cmp	r2, r1
    7388:	d1f9      	bne.n	737e <memmove+0xaa>
    738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    738c:	4603      	mov	r3, r0
    738e:	e7f3      	b.n	7378 <memmove+0xa4>
    7390:	4603      	mov	r3, r0
    7392:	e7f2      	b.n	737a <memmove+0xa6>
    7394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7396:	4672      	mov	r2, lr
    7398:	e7ee      	b.n	7378 <memmove+0xa4>
    739a:	bf00      	nop

0000739c <memset>:
    739c:	b470      	push	{r4, r5, r6}
    739e:	0784      	lsls	r4, r0, #30
    73a0:	d046      	beq.n	7430 <memset+0x94>
    73a2:	1e54      	subs	r4, r2, #1
    73a4:	2a00      	cmp	r2, #0
    73a6:	d041      	beq.n	742c <memset+0x90>
    73a8:	b2cd      	uxtb	r5, r1
    73aa:	4603      	mov	r3, r0
    73ac:	e002      	b.n	73b4 <memset+0x18>
    73ae:	1e62      	subs	r2, r4, #1
    73b0:	b3e4      	cbz	r4, 742c <memset+0x90>
    73b2:	4614      	mov	r4, r2
    73b4:	f803 5b01 	strb.w	r5, [r3], #1
    73b8:	079a      	lsls	r2, r3, #30
    73ba:	d1f8      	bne.n	73ae <memset+0x12>
    73bc:	2c03      	cmp	r4, #3
    73be:	d92e      	bls.n	741e <memset+0x82>
    73c0:	b2cd      	uxtb	r5, r1
    73c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    73c6:	2c0f      	cmp	r4, #15
    73c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    73cc:	d919      	bls.n	7402 <memset+0x66>
    73ce:	f103 0210 	add.w	r2, r3, #16
    73d2:	4626      	mov	r6, r4
    73d4:	3e10      	subs	r6, #16
    73d6:	2e0f      	cmp	r6, #15
    73d8:	f842 5c10 	str.w	r5, [r2, #-16]
    73dc:	f842 5c0c 	str.w	r5, [r2, #-12]
    73e0:	f842 5c08 	str.w	r5, [r2, #-8]
    73e4:	f842 5c04 	str.w	r5, [r2, #-4]
    73e8:	f102 0210 	add.w	r2, r2, #16
    73ec:	d8f2      	bhi.n	73d4 <memset+0x38>
    73ee:	f1a4 0210 	sub.w	r2, r4, #16
    73f2:	f022 020f 	bic.w	r2, r2, #15
    73f6:	f004 040f 	and.w	r4, r4, #15
    73fa:	3210      	adds	r2, #16
    73fc:	2c03      	cmp	r4, #3
    73fe:	4413      	add	r3, r2
    7400:	d90d      	bls.n	741e <memset+0x82>
    7402:	461e      	mov	r6, r3
    7404:	4622      	mov	r2, r4
    7406:	3a04      	subs	r2, #4
    7408:	2a03      	cmp	r2, #3
    740a:	f846 5b04 	str.w	r5, [r6], #4
    740e:	d8fa      	bhi.n	7406 <memset+0x6a>
    7410:	1f22      	subs	r2, r4, #4
    7412:	f022 0203 	bic.w	r2, r2, #3
    7416:	3204      	adds	r2, #4
    7418:	4413      	add	r3, r2
    741a:	f004 0403 	and.w	r4, r4, #3
    741e:	b12c      	cbz	r4, 742c <memset+0x90>
    7420:	b2c9      	uxtb	r1, r1
    7422:	441c      	add	r4, r3
    7424:	f803 1b01 	strb.w	r1, [r3], #1
    7428:	42a3      	cmp	r3, r4
    742a:	d1fb      	bne.n	7424 <memset+0x88>
    742c:	bc70      	pop	{r4, r5, r6}
    742e:	4770      	bx	lr
    7430:	4614      	mov	r4, r2
    7432:	4603      	mov	r3, r0
    7434:	e7c2      	b.n	73bc <memset+0x20>
    7436:	bf00      	nop

00007438 <__malloc_lock>:
    7438:	4770      	bx	lr
    743a:	bf00      	nop

0000743c <__malloc_unlock>:
    743c:	4770      	bx	lr
    743e:	bf00      	nop

00007440 <realloc>:
    7440:	4b02      	ldr	r3, [pc, #8]	; (744c <realloc+0xc>)
    7442:	460a      	mov	r2, r1
    7444:	4601      	mov	r1, r0
    7446:	6818      	ldr	r0, [r3, #0]
    7448:	f000 b802 	b.w	7450 <_realloc_r>
    744c:	1fff8c18 	.word	0x1fff8c18

00007450 <_realloc_r>:
    7450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7454:	4617      	mov	r7, r2
    7456:	b083      	sub	sp, #12
    7458:	2900      	cmp	r1, #0
    745a:	f000 80c1 	beq.w	75e0 <_realloc_r+0x190>
    745e:	460e      	mov	r6, r1
    7460:	4681      	mov	r9, r0
    7462:	f107 050b 	add.w	r5, r7, #11
    7466:	f7ff ffe7 	bl	7438 <__malloc_lock>
    746a:	f856 ec04 	ldr.w	lr, [r6, #-4]
    746e:	2d16      	cmp	r5, #22
    7470:	f02e 0403 	bic.w	r4, lr, #3
    7474:	f1a6 0808 	sub.w	r8, r6, #8
    7478:	d840      	bhi.n	74fc <_realloc_r+0xac>
    747a:	2210      	movs	r2, #16
    747c:	4615      	mov	r5, r2
    747e:	42af      	cmp	r7, r5
    7480:	d841      	bhi.n	7506 <_realloc_r+0xb6>
    7482:	4294      	cmp	r4, r2
    7484:	da75      	bge.n	7572 <_realloc_r+0x122>
    7486:	4bc9      	ldr	r3, [pc, #804]	; (77ac <_realloc_r+0x35c>)
    7488:	6899      	ldr	r1, [r3, #8]
    748a:	eb08 0004 	add.w	r0, r8, r4
    748e:	4288      	cmp	r0, r1
    7490:	6841      	ldr	r1, [r0, #4]
    7492:	f000 80d9 	beq.w	7648 <_realloc_r+0x1f8>
    7496:	f021 0301 	bic.w	r3, r1, #1
    749a:	4403      	add	r3, r0
    749c:	685b      	ldr	r3, [r3, #4]
    749e:	07db      	lsls	r3, r3, #31
    74a0:	d57d      	bpl.n	759e <_realloc_r+0x14e>
    74a2:	f01e 0f01 	tst.w	lr, #1
    74a6:	d035      	beq.n	7514 <_realloc_r+0xc4>
    74a8:	4639      	mov	r1, r7
    74aa:	4648      	mov	r0, r9
    74ac:	f7ff fc44 	bl	6d38 <_malloc_r>
    74b0:	4607      	mov	r7, r0
    74b2:	b1e0      	cbz	r0, 74ee <_realloc_r+0x9e>
    74b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
    74b8:	f023 0301 	bic.w	r3, r3, #1
    74bc:	4443      	add	r3, r8
    74be:	f1a0 0208 	sub.w	r2, r0, #8
    74c2:	429a      	cmp	r2, r3
    74c4:	f000 8144 	beq.w	7750 <_realloc_r+0x300>
    74c8:	1f22      	subs	r2, r4, #4
    74ca:	2a24      	cmp	r2, #36	; 0x24
    74cc:	f200 8131 	bhi.w	7732 <_realloc_r+0x2e2>
    74d0:	2a13      	cmp	r2, #19
    74d2:	f200 8104 	bhi.w	76de <_realloc_r+0x28e>
    74d6:	4603      	mov	r3, r0
    74d8:	4632      	mov	r2, r6
    74da:	6811      	ldr	r1, [r2, #0]
    74dc:	6019      	str	r1, [r3, #0]
    74de:	6851      	ldr	r1, [r2, #4]
    74e0:	6059      	str	r1, [r3, #4]
    74e2:	6892      	ldr	r2, [r2, #8]
    74e4:	609a      	str	r2, [r3, #8]
    74e6:	4631      	mov	r1, r6
    74e8:	4648      	mov	r0, r9
    74ea:	f000 fda9 	bl	8040 <_free_r>
    74ee:	4648      	mov	r0, r9
    74f0:	f7ff ffa4 	bl	743c <__malloc_unlock>
    74f4:	4638      	mov	r0, r7
    74f6:	b003      	add	sp, #12
    74f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74fc:	f025 0507 	bic.w	r5, r5, #7
    7500:	2d00      	cmp	r5, #0
    7502:	462a      	mov	r2, r5
    7504:	dabb      	bge.n	747e <_realloc_r+0x2e>
    7506:	230c      	movs	r3, #12
    7508:	2000      	movs	r0, #0
    750a:	f8c9 3000 	str.w	r3, [r9]
    750e:	b003      	add	sp, #12
    7510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7514:	f856 3c08 	ldr.w	r3, [r6, #-8]
    7518:	ebc3 0a08 	rsb	sl, r3, r8
    751c:	f8da 3004 	ldr.w	r3, [sl, #4]
    7520:	f023 0c03 	bic.w	ip, r3, #3
    7524:	eb04 030c 	add.w	r3, r4, ip
    7528:	4293      	cmp	r3, r2
    752a:	dbbd      	blt.n	74a8 <_realloc_r+0x58>
    752c:	4657      	mov	r7, sl
    752e:	f8da 100c 	ldr.w	r1, [sl, #12]
    7532:	f857 0f08 	ldr.w	r0, [r7, #8]!
    7536:	1f22      	subs	r2, r4, #4
    7538:	2a24      	cmp	r2, #36	; 0x24
    753a:	60c1      	str	r1, [r0, #12]
    753c:	6088      	str	r0, [r1, #8]
    753e:	f200 8117 	bhi.w	7770 <_realloc_r+0x320>
    7542:	2a13      	cmp	r2, #19
    7544:	f240 8112 	bls.w	776c <_realloc_r+0x31c>
    7548:	6831      	ldr	r1, [r6, #0]
    754a:	f8ca 1008 	str.w	r1, [sl, #8]
    754e:	6871      	ldr	r1, [r6, #4]
    7550:	f8ca 100c 	str.w	r1, [sl, #12]
    7554:	2a1b      	cmp	r2, #27
    7556:	f200 812b 	bhi.w	77b0 <_realloc_r+0x360>
    755a:	3608      	adds	r6, #8
    755c:	f10a 0210 	add.w	r2, sl, #16
    7560:	6831      	ldr	r1, [r6, #0]
    7562:	6011      	str	r1, [r2, #0]
    7564:	6871      	ldr	r1, [r6, #4]
    7566:	6051      	str	r1, [r2, #4]
    7568:	68b1      	ldr	r1, [r6, #8]
    756a:	6091      	str	r1, [r2, #8]
    756c:	463e      	mov	r6, r7
    756e:	461c      	mov	r4, r3
    7570:	46d0      	mov	r8, sl
    7572:	1b63      	subs	r3, r4, r5
    7574:	2b0f      	cmp	r3, #15
    7576:	d81d      	bhi.n	75b4 <_realloc_r+0x164>
    7578:	f8d8 3004 	ldr.w	r3, [r8, #4]
    757c:	f003 0301 	and.w	r3, r3, #1
    7580:	4323      	orrs	r3, r4
    7582:	4444      	add	r4, r8
    7584:	f8c8 3004 	str.w	r3, [r8, #4]
    7588:	6863      	ldr	r3, [r4, #4]
    758a:	f043 0301 	orr.w	r3, r3, #1
    758e:	6063      	str	r3, [r4, #4]
    7590:	4648      	mov	r0, r9
    7592:	f7ff ff53 	bl	743c <__malloc_unlock>
    7596:	4630      	mov	r0, r6
    7598:	b003      	add	sp, #12
    759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    759e:	f021 0103 	bic.w	r1, r1, #3
    75a2:	4421      	add	r1, r4
    75a4:	4291      	cmp	r1, r2
    75a6:	db21      	blt.n	75ec <_realloc_r+0x19c>
    75a8:	68c3      	ldr	r3, [r0, #12]
    75aa:	6882      	ldr	r2, [r0, #8]
    75ac:	460c      	mov	r4, r1
    75ae:	60d3      	str	r3, [r2, #12]
    75b0:	609a      	str	r2, [r3, #8]
    75b2:	e7de      	b.n	7572 <_realloc_r+0x122>
    75b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    75b8:	eb08 0105 	add.w	r1, r8, r5
    75bc:	f002 0201 	and.w	r2, r2, #1
    75c0:	4315      	orrs	r5, r2
    75c2:	f043 0201 	orr.w	r2, r3, #1
    75c6:	440b      	add	r3, r1
    75c8:	f8c8 5004 	str.w	r5, [r8, #4]
    75cc:	604a      	str	r2, [r1, #4]
    75ce:	685a      	ldr	r2, [r3, #4]
    75d0:	f042 0201 	orr.w	r2, r2, #1
    75d4:	3108      	adds	r1, #8
    75d6:	605a      	str	r2, [r3, #4]
    75d8:	4648      	mov	r0, r9
    75da:	f000 fd31 	bl	8040 <_free_r>
    75de:	e7d7      	b.n	7590 <_realloc_r+0x140>
    75e0:	4611      	mov	r1, r2
    75e2:	b003      	add	sp, #12
    75e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75e8:	f7ff bba6 	b.w	6d38 <_malloc_r>
    75ec:	f01e 0f01 	tst.w	lr, #1
    75f0:	f47f af5a 	bne.w	74a8 <_realloc_r+0x58>
    75f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
    75f8:	ebc3 0a08 	rsb	sl, r3, r8
    75fc:	f8da 3004 	ldr.w	r3, [sl, #4]
    7600:	f023 0c03 	bic.w	ip, r3, #3
    7604:	eb01 0e0c 	add.w	lr, r1, ip
    7608:	4596      	cmp	lr, r2
    760a:	db8b      	blt.n	7524 <_realloc_r+0xd4>
    760c:	68c3      	ldr	r3, [r0, #12]
    760e:	6882      	ldr	r2, [r0, #8]
    7610:	4657      	mov	r7, sl
    7612:	60d3      	str	r3, [r2, #12]
    7614:	609a      	str	r2, [r3, #8]
    7616:	f857 1f08 	ldr.w	r1, [r7, #8]!
    761a:	f8da 300c 	ldr.w	r3, [sl, #12]
    761e:	60cb      	str	r3, [r1, #12]
    7620:	1f22      	subs	r2, r4, #4
    7622:	2a24      	cmp	r2, #36	; 0x24
    7624:	6099      	str	r1, [r3, #8]
    7626:	f200 8099 	bhi.w	775c <_realloc_r+0x30c>
    762a:	2a13      	cmp	r2, #19
    762c:	d962      	bls.n	76f4 <_realloc_r+0x2a4>
    762e:	6833      	ldr	r3, [r6, #0]
    7630:	f8ca 3008 	str.w	r3, [sl, #8]
    7634:	6873      	ldr	r3, [r6, #4]
    7636:	f8ca 300c 	str.w	r3, [sl, #12]
    763a:	2a1b      	cmp	r2, #27
    763c:	f200 80a0 	bhi.w	7780 <_realloc_r+0x330>
    7640:	3608      	adds	r6, #8
    7642:	f10a 0310 	add.w	r3, sl, #16
    7646:	e056      	b.n	76f6 <_realloc_r+0x2a6>
    7648:	f021 0b03 	bic.w	fp, r1, #3
    764c:	44a3      	add	fp, r4
    764e:	f105 0010 	add.w	r0, r5, #16
    7652:	4583      	cmp	fp, r0
    7654:	da59      	bge.n	770a <_realloc_r+0x2ba>
    7656:	f01e 0f01 	tst.w	lr, #1
    765a:	f47f af25 	bne.w	74a8 <_realloc_r+0x58>
    765e:	f856 1c08 	ldr.w	r1, [r6, #-8]
    7662:	ebc1 0a08 	rsb	sl, r1, r8
    7666:	f8da 1004 	ldr.w	r1, [sl, #4]
    766a:	f021 0c03 	bic.w	ip, r1, #3
    766e:	44e3      	add	fp, ip
    7670:	4558      	cmp	r0, fp
    7672:	f73f af57 	bgt.w	7524 <_realloc_r+0xd4>
    7676:	4657      	mov	r7, sl
    7678:	f8da 100c 	ldr.w	r1, [sl, #12]
    767c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    7680:	1f22      	subs	r2, r4, #4
    7682:	2a24      	cmp	r2, #36	; 0x24
    7684:	60c1      	str	r1, [r0, #12]
    7686:	6088      	str	r0, [r1, #8]
    7688:	f200 80b4 	bhi.w	77f4 <_realloc_r+0x3a4>
    768c:	2a13      	cmp	r2, #19
    768e:	f240 80a5 	bls.w	77dc <_realloc_r+0x38c>
    7692:	6831      	ldr	r1, [r6, #0]
    7694:	f8ca 1008 	str.w	r1, [sl, #8]
    7698:	6871      	ldr	r1, [r6, #4]
    769a:	f8ca 100c 	str.w	r1, [sl, #12]
    769e:	2a1b      	cmp	r2, #27
    76a0:	f200 80af 	bhi.w	7802 <_realloc_r+0x3b2>
    76a4:	3608      	adds	r6, #8
    76a6:	f10a 0210 	add.w	r2, sl, #16
    76aa:	6831      	ldr	r1, [r6, #0]
    76ac:	6011      	str	r1, [r2, #0]
    76ae:	6871      	ldr	r1, [r6, #4]
    76b0:	6051      	str	r1, [r2, #4]
    76b2:	68b1      	ldr	r1, [r6, #8]
    76b4:	6091      	str	r1, [r2, #8]
    76b6:	eb0a 0105 	add.w	r1, sl, r5
    76ba:	ebc5 020b 	rsb	r2, r5, fp
    76be:	f042 0201 	orr.w	r2, r2, #1
    76c2:	6099      	str	r1, [r3, #8]
    76c4:	604a      	str	r2, [r1, #4]
    76c6:	f8da 3004 	ldr.w	r3, [sl, #4]
    76ca:	f003 0301 	and.w	r3, r3, #1
    76ce:	431d      	orrs	r5, r3
    76d0:	4648      	mov	r0, r9
    76d2:	f8ca 5004 	str.w	r5, [sl, #4]
    76d6:	f7ff feb1 	bl	743c <__malloc_unlock>
    76da:	4638      	mov	r0, r7
    76dc:	e75c      	b.n	7598 <_realloc_r+0x148>
    76de:	6833      	ldr	r3, [r6, #0]
    76e0:	6003      	str	r3, [r0, #0]
    76e2:	6873      	ldr	r3, [r6, #4]
    76e4:	6043      	str	r3, [r0, #4]
    76e6:	2a1b      	cmp	r2, #27
    76e8:	d827      	bhi.n	773a <_realloc_r+0x2ea>
    76ea:	f100 0308 	add.w	r3, r0, #8
    76ee:	f106 0208 	add.w	r2, r6, #8
    76f2:	e6f2      	b.n	74da <_realloc_r+0x8a>
    76f4:	463b      	mov	r3, r7
    76f6:	6832      	ldr	r2, [r6, #0]
    76f8:	601a      	str	r2, [r3, #0]
    76fa:	6872      	ldr	r2, [r6, #4]
    76fc:	605a      	str	r2, [r3, #4]
    76fe:	68b2      	ldr	r2, [r6, #8]
    7700:	609a      	str	r2, [r3, #8]
    7702:	463e      	mov	r6, r7
    7704:	4674      	mov	r4, lr
    7706:	46d0      	mov	r8, sl
    7708:	e733      	b.n	7572 <_realloc_r+0x122>
    770a:	eb08 0105 	add.w	r1, r8, r5
    770e:	ebc5 0b0b 	rsb	fp, r5, fp
    7712:	f04b 0201 	orr.w	r2, fp, #1
    7716:	6099      	str	r1, [r3, #8]
    7718:	604a      	str	r2, [r1, #4]
    771a:	f856 3c04 	ldr.w	r3, [r6, #-4]
    771e:	f003 0301 	and.w	r3, r3, #1
    7722:	431d      	orrs	r5, r3
    7724:	4648      	mov	r0, r9
    7726:	f846 5c04 	str.w	r5, [r6, #-4]
    772a:	f7ff fe87 	bl	743c <__malloc_unlock>
    772e:	4630      	mov	r0, r6
    7730:	e732      	b.n	7598 <_realloc_r+0x148>
    7732:	4631      	mov	r1, r6
    7734:	f7ff fdce 	bl	72d4 <memmove>
    7738:	e6d5      	b.n	74e6 <_realloc_r+0x96>
    773a:	68b3      	ldr	r3, [r6, #8]
    773c:	6083      	str	r3, [r0, #8]
    773e:	68f3      	ldr	r3, [r6, #12]
    7740:	60c3      	str	r3, [r0, #12]
    7742:	2a24      	cmp	r2, #36	; 0x24
    7744:	d028      	beq.n	7798 <_realloc_r+0x348>
    7746:	f100 0310 	add.w	r3, r0, #16
    774a:	f106 0210 	add.w	r2, r6, #16
    774e:	e6c4      	b.n	74da <_realloc_r+0x8a>
    7750:	f850 3c04 	ldr.w	r3, [r0, #-4]
    7754:	f023 0303 	bic.w	r3, r3, #3
    7758:	441c      	add	r4, r3
    775a:	e70a      	b.n	7572 <_realloc_r+0x122>
    775c:	4631      	mov	r1, r6
    775e:	4638      	mov	r0, r7
    7760:	4674      	mov	r4, lr
    7762:	46d0      	mov	r8, sl
    7764:	f7ff fdb6 	bl	72d4 <memmove>
    7768:	463e      	mov	r6, r7
    776a:	e702      	b.n	7572 <_realloc_r+0x122>
    776c:	463a      	mov	r2, r7
    776e:	e6f7      	b.n	7560 <_realloc_r+0x110>
    7770:	4631      	mov	r1, r6
    7772:	4638      	mov	r0, r7
    7774:	461c      	mov	r4, r3
    7776:	46d0      	mov	r8, sl
    7778:	f7ff fdac 	bl	72d4 <memmove>
    777c:	463e      	mov	r6, r7
    777e:	e6f8      	b.n	7572 <_realloc_r+0x122>
    7780:	68b3      	ldr	r3, [r6, #8]
    7782:	f8ca 3010 	str.w	r3, [sl, #16]
    7786:	68f3      	ldr	r3, [r6, #12]
    7788:	f8ca 3014 	str.w	r3, [sl, #20]
    778c:	2a24      	cmp	r2, #36	; 0x24
    778e:	d01b      	beq.n	77c8 <_realloc_r+0x378>
    7790:	3610      	adds	r6, #16
    7792:	f10a 0318 	add.w	r3, sl, #24
    7796:	e7ae      	b.n	76f6 <_realloc_r+0x2a6>
    7798:	6933      	ldr	r3, [r6, #16]
    779a:	6103      	str	r3, [r0, #16]
    779c:	6973      	ldr	r3, [r6, #20]
    779e:	6143      	str	r3, [r0, #20]
    77a0:	f106 0218 	add.w	r2, r6, #24
    77a4:	f100 0318 	add.w	r3, r0, #24
    77a8:	e697      	b.n	74da <_realloc_r+0x8a>
    77aa:	bf00      	nop
    77ac:	1fff8d88 	.word	0x1fff8d88
    77b0:	68b1      	ldr	r1, [r6, #8]
    77b2:	f8ca 1010 	str.w	r1, [sl, #16]
    77b6:	68f1      	ldr	r1, [r6, #12]
    77b8:	f8ca 1014 	str.w	r1, [sl, #20]
    77bc:	2a24      	cmp	r2, #36	; 0x24
    77be:	d00f      	beq.n	77e0 <_realloc_r+0x390>
    77c0:	3610      	adds	r6, #16
    77c2:	f10a 0218 	add.w	r2, sl, #24
    77c6:	e6cb      	b.n	7560 <_realloc_r+0x110>
    77c8:	6933      	ldr	r3, [r6, #16]
    77ca:	f8ca 3018 	str.w	r3, [sl, #24]
    77ce:	6973      	ldr	r3, [r6, #20]
    77d0:	f8ca 301c 	str.w	r3, [sl, #28]
    77d4:	3618      	adds	r6, #24
    77d6:	f10a 0320 	add.w	r3, sl, #32
    77da:	e78c      	b.n	76f6 <_realloc_r+0x2a6>
    77dc:	463a      	mov	r2, r7
    77de:	e764      	b.n	76aa <_realloc_r+0x25a>
    77e0:	6932      	ldr	r2, [r6, #16]
    77e2:	f8ca 2018 	str.w	r2, [sl, #24]
    77e6:	6972      	ldr	r2, [r6, #20]
    77e8:	f8ca 201c 	str.w	r2, [sl, #28]
    77ec:	3618      	adds	r6, #24
    77ee:	f10a 0220 	add.w	r2, sl, #32
    77f2:	e6b5      	b.n	7560 <_realloc_r+0x110>
    77f4:	4631      	mov	r1, r6
    77f6:	4638      	mov	r0, r7
    77f8:	9301      	str	r3, [sp, #4]
    77fa:	f7ff fd6b 	bl	72d4 <memmove>
    77fe:	9b01      	ldr	r3, [sp, #4]
    7800:	e759      	b.n	76b6 <_realloc_r+0x266>
    7802:	68b1      	ldr	r1, [r6, #8]
    7804:	f8ca 1010 	str.w	r1, [sl, #16]
    7808:	68f1      	ldr	r1, [r6, #12]
    780a:	f8ca 1014 	str.w	r1, [sl, #20]
    780e:	2a24      	cmp	r2, #36	; 0x24
    7810:	d003      	beq.n	781a <_realloc_r+0x3ca>
    7812:	3610      	adds	r6, #16
    7814:	f10a 0218 	add.w	r2, sl, #24
    7818:	e747      	b.n	76aa <_realloc_r+0x25a>
    781a:	6932      	ldr	r2, [r6, #16]
    781c:	f8ca 2018 	str.w	r2, [sl, #24]
    7820:	6972      	ldr	r2, [r6, #20]
    7822:	f8ca 201c 	str.w	r2, [sl, #28]
    7826:	3618      	adds	r6, #24
    7828:	f10a 0220 	add.w	r2, sl, #32
    782c:	e73d      	b.n	76aa <_realloc_r+0x25a>
    782e:	bf00      	nop

00007830 <_sbrk_r>:
    7830:	b538      	push	{r3, r4, r5, lr}
    7832:	4c07      	ldr	r4, [pc, #28]	; (7850 <_sbrk_r+0x20>)
    7834:	2300      	movs	r3, #0
    7836:	4605      	mov	r5, r0
    7838:	4608      	mov	r0, r1
    783a:	6023      	str	r3, [r4, #0]
    783c:	f7fc fdb4 	bl	43a8 <_sbrk>
    7840:	1c43      	adds	r3, r0, #1
    7842:	d000      	beq.n	7846 <_sbrk_r+0x16>
    7844:	bd38      	pop	{r3, r4, r5, pc}
    7846:	6823      	ldr	r3, [r4, #0]
    7848:	2b00      	cmp	r3, #0
    784a:	d0fb      	beq.n	7844 <_sbrk_r+0x14>
    784c:	602b      	str	r3, [r5, #0]
    784e:	bd38      	pop	{r3, r4, r5, pc}
    7850:	1fffd698 	.word	0x1fffd698
    7854:	ffffffff 	.word	0xffffffff
    7858:	ffffffff 	.word	0xffffffff
    785c:	ffffffff 	.word	0xffffffff
    7860:	eba2 0003 	sub.w	r0, r2, r3
    7864:	4770      	bx	lr
    7866:	bf00      	nop

00007868 <strcmp>:
    7868:	7802      	ldrb	r2, [r0, #0]
    786a:	780b      	ldrb	r3, [r1, #0]
    786c:	2a01      	cmp	r2, #1
    786e:	bf28      	it	cs
    7870:	429a      	cmpcs	r2, r3
    7872:	d1f5      	bne.n	7860 <_sbrk_r+0x30>
    7874:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    7878:	ea40 0401 	orr.w	r4, r0, r1
    787c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    7880:	f06f 0c00 	mvn.w	ip, #0
    7884:	ea4f 7244 	mov.w	r2, r4, lsl #29
    7888:	b312      	cbz	r2, 78d0 <strcmp+0x68>
    788a:	ea80 0401 	eor.w	r4, r0, r1
    788e:	f014 0f07 	tst.w	r4, #7
    7892:	d16a      	bne.n	796a <strcmp+0x102>
    7894:	f000 0407 	and.w	r4, r0, #7
    7898:	f020 0007 	bic.w	r0, r0, #7
    789c:	f004 0503 	and.w	r5, r4, #3
    78a0:	f021 0107 	bic.w	r1, r1, #7
    78a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    78a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    78ac:	f014 0f04 	tst.w	r4, #4
    78b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    78b4:	fa0c f405 	lsl.w	r4, ip, r5
    78b8:	ea62 0204 	orn	r2, r2, r4
    78bc:	ea66 0604 	orn	r6, r6, r4
    78c0:	d00a      	beq.n	78d8 <strcmp+0x70>
    78c2:	ea63 0304 	orn	r3, r3, r4
    78c6:	4662      	mov	r2, ip
    78c8:	ea67 0704 	orn	r7, r7, r4
    78cc:	4666      	mov	r6, ip
    78ce:	e003      	b.n	78d8 <strcmp+0x70>
    78d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    78d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    78d8:	fa82 f54c 	uadd8	r5, r2, ip
    78dc:	ea82 0406 	eor.w	r4, r2, r6
    78e0:	faa4 f48c 	sel	r4, r4, ip
    78e4:	bb6c      	cbnz	r4, 7942 <strcmp+0xda>
    78e6:	fa83 f54c 	uadd8	r5, r3, ip
    78ea:	ea83 0507 	eor.w	r5, r3, r7
    78ee:	faa5 f58c 	sel	r5, r5, ip
    78f2:	b995      	cbnz	r5, 791a <strcmp+0xb2>
    78f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    78f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    78fc:	fa82 f54c 	uadd8	r5, r2, ip
    7900:	ea82 0406 	eor.w	r4, r2, r6
    7904:	faa4 f48c 	sel	r4, r4, ip
    7908:	fa83 f54c 	uadd8	r5, r3, ip
    790c:	ea83 0507 	eor.w	r5, r3, r7
    7910:	faa5 f58c 	sel	r5, r5, ip
    7914:	4325      	orrs	r5, r4
    7916:	d0db      	beq.n	78d0 <strcmp+0x68>
    7918:	b99c      	cbnz	r4, 7942 <strcmp+0xda>
    791a:	ba2d      	rev	r5, r5
    791c:	fab5 f485 	clz	r4, r5
    7920:	f024 0407 	bic.w	r4, r4, #7
    7924:	fa27 f104 	lsr.w	r1, r7, r4
    7928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    792c:	fa23 f304 	lsr.w	r3, r3, r4
    7930:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    7934:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7938:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    793c:	eba0 0001 	sub.w	r0, r0, r1
    7940:	4770      	bx	lr
    7942:	ba24      	rev	r4, r4
    7944:	fab4 f484 	clz	r4, r4
    7948:	f024 0407 	bic.w	r4, r4, #7
    794c:	fa26 f104 	lsr.w	r1, r6, r4
    7950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    7954:	fa22 f204 	lsr.w	r2, r2, r4
    7958:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    795c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7960:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7964:	eba0 0001 	sub.w	r0, r0, r1
    7968:	4770      	bx	lr
    796a:	f014 0f03 	tst.w	r4, #3
    796e:	d13c      	bne.n	79ea <strcmp+0x182>
    7970:	f010 0403 	ands.w	r4, r0, #3
    7974:	d128      	bne.n	79c8 <strcmp+0x160>
    7976:	f850 2b08 	ldr.w	r2, [r0], #8
    797a:	f851 3b08 	ldr.w	r3, [r1], #8
    797e:	fa82 f54c 	uadd8	r5, r2, ip
    7982:	ea82 0503 	eor.w	r5, r2, r3
    7986:	faa5 f58c 	sel	r5, r5, ip
    798a:	b95d      	cbnz	r5, 79a4 <strcmp+0x13c>
    798c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7990:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7994:	fa82 f54c 	uadd8	r5, r2, ip
    7998:	ea82 0503 	eor.w	r5, r2, r3
    799c:	faa5 f58c 	sel	r5, r5, ip
    79a0:	2d00      	cmp	r5, #0
    79a2:	d0e8      	beq.n	7976 <strcmp+0x10e>
    79a4:	ba2d      	rev	r5, r5
    79a6:	fab5 f485 	clz	r4, r5
    79aa:	f024 0407 	bic.w	r4, r4, #7
    79ae:	fa23 f104 	lsr.w	r1, r3, r4
    79b2:	fa22 f204 	lsr.w	r2, r2, r4
    79b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    79ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    79be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    79c2:	eba0 0001 	sub.w	r0, r0, r1
    79c6:	4770      	bx	lr
    79c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    79cc:	f020 0003 	bic.w	r0, r0, #3
    79d0:	f850 2b08 	ldr.w	r2, [r0], #8
    79d4:	f021 0103 	bic.w	r1, r1, #3
    79d8:	f851 3b08 	ldr.w	r3, [r1], #8
    79dc:	fa0c f404 	lsl.w	r4, ip, r4
    79e0:	ea62 0204 	orn	r2, r2, r4
    79e4:	ea63 0304 	orn	r3, r3, r4
    79e8:	e7c9      	b.n	797e <strcmp+0x116>
    79ea:	f010 0403 	ands.w	r4, r0, #3
    79ee:	d01a      	beq.n	7a26 <strcmp+0x1be>
    79f0:	eba1 0104 	sub.w	r1, r1, r4
    79f4:	f020 0003 	bic.w	r0, r0, #3
    79f8:	07e4      	lsls	r4, r4, #31
    79fa:	f850 2b04 	ldr.w	r2, [r0], #4
    79fe:	d006      	beq.n	7a0e <strcmp+0x1a6>
    7a00:	d20f      	bcs.n	7a22 <strcmp+0x1ba>
    7a02:	788b      	ldrb	r3, [r1, #2]
    7a04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    7a08:	1ae4      	subs	r4, r4, r3
    7a0a:	d106      	bne.n	7a1a <strcmp+0x1b2>
    7a0c:	b12b      	cbz	r3, 7a1a <strcmp+0x1b2>
    7a0e:	78cb      	ldrb	r3, [r1, #3]
    7a10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    7a14:	1ae4      	subs	r4, r4, r3
    7a16:	d100      	bne.n	7a1a <strcmp+0x1b2>
    7a18:	b91b      	cbnz	r3, 7a22 <strcmp+0x1ba>
    7a1a:	4620      	mov	r0, r4
    7a1c:	f85d 4b10 	ldr.w	r4, [sp], #16
    7a20:	4770      	bx	lr
    7a22:	f101 0104 	add.w	r1, r1, #4
    7a26:	f850 2b04 	ldr.w	r2, [r0], #4
    7a2a:	07cc      	lsls	r4, r1, #31
    7a2c:	f021 0103 	bic.w	r1, r1, #3
    7a30:	f851 3b04 	ldr.w	r3, [r1], #4
    7a34:	d848      	bhi.n	7ac8 <strcmp+0x260>
    7a36:	d224      	bcs.n	7a82 <strcmp+0x21a>
    7a38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    7a3c:	fa82 f54c 	uadd8	r5, r2, ip
    7a40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    7a44:	faa5 f58c 	sel	r5, r5, ip
    7a48:	d10a      	bne.n	7a60 <strcmp+0x1f8>
    7a4a:	b965      	cbnz	r5, 7a66 <strcmp+0x1fe>
    7a4c:	f851 3b04 	ldr.w	r3, [r1], #4
    7a50:	ea84 0402 	eor.w	r4, r4, r2
    7a54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    7a58:	d10e      	bne.n	7a78 <strcmp+0x210>
    7a5a:	f850 2b04 	ldr.w	r2, [r0], #4
    7a5e:	e7eb      	b.n	7a38 <strcmp+0x1d0>
    7a60:	ea4f 2313 	mov.w	r3, r3, lsr #8
    7a64:	e055      	b.n	7b12 <strcmp+0x2aa>
    7a66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    7a6a:	d14d      	bne.n	7b08 <strcmp+0x2a0>
    7a6c:	7808      	ldrb	r0, [r1, #0]
    7a6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7a72:	f1c0 0000 	rsb	r0, r0, #0
    7a76:	4770      	bx	lr
    7a78:	ea4f 6212 	mov.w	r2, r2, lsr #24
    7a7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    7a80:	e047      	b.n	7b12 <strcmp+0x2aa>
    7a82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    7a86:	fa82 f54c 	uadd8	r5, r2, ip
    7a8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    7a8e:	faa5 f58c 	sel	r5, r5, ip
    7a92:	d10a      	bne.n	7aaa <strcmp+0x242>
    7a94:	b965      	cbnz	r5, 7ab0 <strcmp+0x248>
    7a96:	f851 3b04 	ldr.w	r3, [r1], #4
    7a9a:	ea84 0402 	eor.w	r4, r4, r2
    7a9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    7aa2:	d10c      	bne.n	7abe <strcmp+0x256>
    7aa4:	f850 2b04 	ldr.w	r2, [r0], #4
    7aa8:	e7eb      	b.n	7a82 <strcmp+0x21a>
    7aaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    7aae:	e030      	b.n	7b12 <strcmp+0x2aa>
    7ab0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    7ab4:	d128      	bne.n	7b08 <strcmp+0x2a0>
    7ab6:	880b      	ldrh	r3, [r1, #0]
    7ab8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7abc:	e029      	b.n	7b12 <strcmp+0x2aa>
    7abe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7ac2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    7ac6:	e024      	b.n	7b12 <strcmp+0x2aa>
    7ac8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    7acc:	fa82 f54c 	uadd8	r5, r2, ip
    7ad0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    7ad4:	faa5 f58c 	sel	r5, r5, ip
    7ad8:	d10a      	bne.n	7af0 <strcmp+0x288>
    7ada:	b965      	cbnz	r5, 7af6 <strcmp+0x28e>
    7adc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ae0:	ea84 0402 	eor.w	r4, r4, r2
    7ae4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    7ae8:	d109      	bne.n	7afe <strcmp+0x296>
    7aea:	f850 2b04 	ldr.w	r2, [r0], #4
    7aee:	e7eb      	b.n	7ac8 <strcmp+0x260>
    7af0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    7af4:	e00d      	b.n	7b12 <strcmp+0x2aa>
    7af6:	f015 0fff 	tst.w	r5, #255	; 0xff
    7afa:	d105      	bne.n	7b08 <strcmp+0x2a0>
    7afc:	680b      	ldr	r3, [r1, #0]
    7afe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    7b02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7b06:	e004      	b.n	7b12 <strcmp+0x2aa>
    7b08:	f04f 0000 	mov.w	r0, #0
    7b0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7b10:	4770      	bx	lr
    7b12:	ba12      	rev	r2, r2
    7b14:	ba1b      	rev	r3, r3
    7b16:	fa82 f44c 	uadd8	r4, r2, ip
    7b1a:	ea82 0403 	eor.w	r4, r2, r3
    7b1e:	faa4 f58c 	sel	r5, r4, ip
    7b22:	fab5 f485 	clz	r4, r5
    7b26:	fa02 f204 	lsl.w	r2, r2, r4
    7b2a:	fa03 f304 	lsl.w	r3, r3, r4
    7b2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    7b32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7b36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    7b3a:	4770      	bx	lr

00007b3c <strcpy>:
    7b3c:	ea80 0201 	eor.w	r2, r0, r1
    7b40:	4684      	mov	ip, r0
    7b42:	f012 0f03 	tst.w	r2, #3
    7b46:	d14f      	bne.n	7be8 <strcpy+0xac>
    7b48:	f011 0f03 	tst.w	r1, #3
    7b4c:	d132      	bne.n	7bb4 <strcpy+0x78>
    7b4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    7b52:	f011 0f04 	tst.w	r1, #4
    7b56:	f851 3b04 	ldr.w	r3, [r1], #4
    7b5a:	d00b      	beq.n	7b74 <strcpy+0x38>
    7b5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7b60:	439a      	bics	r2, r3
    7b62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7b66:	bf04      	itt	eq
    7b68:	f84c 3b04 	streq.w	r3, [ip], #4
    7b6c:	f851 3b04 	ldreq.w	r3, [r1], #4
    7b70:	d116      	bne.n	7ba0 <strcpy+0x64>
    7b72:	bf00      	nop
    7b74:	f851 4b04 	ldr.w	r4, [r1], #4
    7b78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7b7c:	439a      	bics	r2, r3
    7b7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7b82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    7b86:	d10b      	bne.n	7ba0 <strcpy+0x64>
    7b88:	f84c 3b04 	str.w	r3, [ip], #4
    7b8c:	43a2      	bics	r2, r4
    7b8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7b92:	bf04      	itt	eq
    7b94:	f851 3b04 	ldreq.w	r3, [r1], #4
    7b98:	f84c 4b04 	streq.w	r4, [ip], #4
    7b9c:	d0ea      	beq.n	7b74 <strcpy+0x38>
    7b9e:	4623      	mov	r3, r4
    7ba0:	f80c 3b01 	strb.w	r3, [ip], #1
    7ba4:	f013 0fff 	tst.w	r3, #255	; 0xff
    7ba8:	ea4f 2333 	mov.w	r3, r3, ror #8
    7bac:	d1f8      	bne.n	7ba0 <strcpy+0x64>
    7bae:	f85d 4b04 	ldr.w	r4, [sp], #4
    7bb2:	4770      	bx	lr
    7bb4:	f011 0f01 	tst.w	r1, #1
    7bb8:	d006      	beq.n	7bc8 <strcpy+0x8c>
    7bba:	f811 2b01 	ldrb.w	r2, [r1], #1
    7bbe:	f80c 2b01 	strb.w	r2, [ip], #1
    7bc2:	2a00      	cmp	r2, #0
    7bc4:	bf08      	it	eq
    7bc6:	4770      	bxeq	lr
    7bc8:	f011 0f02 	tst.w	r1, #2
    7bcc:	d0bf      	beq.n	7b4e <strcpy+0x12>
    7bce:	f831 2b02 	ldrh.w	r2, [r1], #2
    7bd2:	f012 0fff 	tst.w	r2, #255	; 0xff
    7bd6:	bf16      	itet	ne
    7bd8:	f82c 2b02 	strhne.w	r2, [ip], #2
    7bdc:	f88c 2000 	strbeq.w	r2, [ip]
    7be0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    7be4:	d1b3      	bne.n	7b4e <strcpy+0x12>
    7be6:	4770      	bx	lr
    7be8:	f811 2b01 	ldrb.w	r2, [r1], #1
    7bec:	f80c 2b01 	strb.w	r2, [ip], #1
    7bf0:	2a00      	cmp	r2, #0
    7bf2:	d1f9      	bne.n	7be8 <strcpy+0xac>
    7bf4:	4770      	bx	lr
    7bf6:	bf00      	nop
    7bf8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    7bfc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00007c00 <strlen>:
    7c00:	f890 f000 	pld	[r0]
    7c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    7c08:	f020 0107 	bic.w	r1, r0, #7
    7c0c:	f06f 0c00 	mvn.w	ip, #0
    7c10:	f010 0407 	ands.w	r4, r0, #7
    7c14:	f891 f020 	pld	[r1, #32]
    7c18:	f040 8049 	bne.w	7cae <strlen+0xae>
    7c1c:	f04f 0400 	mov.w	r4, #0
    7c20:	f06f 0007 	mvn.w	r0, #7
    7c24:	e9d1 2300 	ldrd	r2, r3, [r1]
    7c28:	f891 f040 	pld	[r1, #64]	; 0x40
    7c2c:	f100 0008 	add.w	r0, r0, #8
    7c30:	fa82 f24c 	uadd8	r2, r2, ip
    7c34:	faa4 f28c 	sel	r2, r4, ip
    7c38:	fa83 f34c 	uadd8	r3, r3, ip
    7c3c:	faa2 f38c 	sel	r3, r2, ip
    7c40:	bb4b      	cbnz	r3, 7c96 <strlen+0x96>
    7c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    7c46:	fa82 f24c 	uadd8	r2, r2, ip
    7c4a:	f100 0008 	add.w	r0, r0, #8
    7c4e:	faa4 f28c 	sel	r2, r4, ip
    7c52:	fa83 f34c 	uadd8	r3, r3, ip
    7c56:	faa2 f38c 	sel	r3, r2, ip
    7c5a:	b9e3      	cbnz	r3, 7c96 <strlen+0x96>
    7c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    7c60:	fa82 f24c 	uadd8	r2, r2, ip
    7c64:	f100 0008 	add.w	r0, r0, #8
    7c68:	faa4 f28c 	sel	r2, r4, ip
    7c6c:	fa83 f34c 	uadd8	r3, r3, ip
    7c70:	faa2 f38c 	sel	r3, r2, ip
    7c74:	b97b      	cbnz	r3, 7c96 <strlen+0x96>
    7c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    7c7a:	f101 0120 	add.w	r1, r1, #32
    7c7e:	fa82 f24c 	uadd8	r2, r2, ip
    7c82:	f100 0008 	add.w	r0, r0, #8
    7c86:	faa4 f28c 	sel	r2, r4, ip
    7c8a:	fa83 f34c 	uadd8	r3, r3, ip
    7c8e:	faa2 f38c 	sel	r3, r2, ip
    7c92:	2b00      	cmp	r3, #0
    7c94:	d0c6      	beq.n	7c24 <strlen+0x24>
    7c96:	2a00      	cmp	r2, #0
    7c98:	bf04      	itt	eq
    7c9a:	3004      	addeq	r0, #4
    7c9c:	461a      	moveq	r2, r3
    7c9e:	ba12      	rev	r2, r2
    7ca0:	fab2 f282 	clz	r2, r2
    7ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    7ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    7cac:	4770      	bx	lr
    7cae:	e9d1 2300 	ldrd	r2, r3, [r1]
    7cb2:	f004 0503 	and.w	r5, r4, #3
    7cb6:	f1c4 0000 	rsb	r0, r4, #0
    7cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7cbe:	f014 0f04 	tst.w	r4, #4
    7cc2:	f891 f040 	pld	[r1, #64]	; 0x40
    7cc6:	fa0c f505 	lsl.w	r5, ip, r5
    7cca:	ea62 0205 	orn	r2, r2, r5
    7cce:	bf1c      	itt	ne
    7cd0:	ea63 0305 	ornne	r3, r3, r5
    7cd4:	4662      	movne	r2, ip
    7cd6:	f04f 0400 	mov.w	r4, #0
    7cda:	e7a9      	b.n	7c30 <strlen+0x30>

00007cdc <strncpy>:
    7cdc:	ea40 0301 	orr.w	r3, r0, r1
    7ce0:	079b      	lsls	r3, r3, #30
    7ce2:	b470      	push	{r4, r5, r6}
    7ce4:	d12b      	bne.n	7d3e <strncpy+0x62>
    7ce6:	2a03      	cmp	r2, #3
    7ce8:	d929      	bls.n	7d3e <strncpy+0x62>
    7cea:	460c      	mov	r4, r1
    7cec:	4603      	mov	r3, r0
    7cee:	4621      	mov	r1, r4
    7cf0:	f854 6b04 	ldr.w	r6, [r4], #4
    7cf4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    7cf8:	ea25 0506 	bic.w	r5, r5, r6
    7cfc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    7d00:	d106      	bne.n	7d10 <strncpy+0x34>
    7d02:	3a04      	subs	r2, #4
    7d04:	2a03      	cmp	r2, #3
    7d06:	f843 6b04 	str.w	r6, [r3], #4
    7d0a:	4621      	mov	r1, r4
    7d0c:	d8ef      	bhi.n	7cee <strncpy+0x12>
    7d0e:	b1a2      	cbz	r2, 7d3a <strncpy+0x5e>
    7d10:	780c      	ldrb	r4, [r1, #0]
    7d12:	701c      	strb	r4, [r3, #0]
    7d14:	3a01      	subs	r2, #1
    7d16:	3301      	adds	r3, #1
    7d18:	3101      	adds	r1, #1
    7d1a:	b13c      	cbz	r4, 7d2c <strncpy+0x50>
    7d1c:	b16a      	cbz	r2, 7d3a <strncpy+0x5e>
    7d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7d22:	f803 4b01 	strb.w	r4, [r3], #1
    7d26:	3a01      	subs	r2, #1
    7d28:	2c00      	cmp	r4, #0
    7d2a:	d1f7      	bne.n	7d1c <strncpy+0x40>
    7d2c:	b12a      	cbz	r2, 7d3a <strncpy+0x5e>
    7d2e:	441a      	add	r2, r3
    7d30:	2100      	movs	r1, #0
    7d32:	f803 1b01 	strb.w	r1, [r3], #1
    7d36:	429a      	cmp	r2, r3
    7d38:	d1fb      	bne.n	7d32 <strncpy+0x56>
    7d3a:	bc70      	pop	{r4, r5, r6}
    7d3c:	4770      	bx	lr
    7d3e:	4603      	mov	r3, r0
    7d40:	e7e5      	b.n	7d0e <strncpy+0x32>
    7d42:	bf00      	nop

00007d44 <_strtol_l.isra.0>:
    7d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d48:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    7d4c:	460f      	mov	r7, r1
    7d4e:	4680      	mov	r8, r0
    7d50:	4616      	mov	r6, r2
    7d52:	461d      	mov	r5, r3
    7d54:	468b      	mov	fp, r1
    7d56:	e000      	b.n	7d5a <_strtol_l.isra.0+0x16>
    7d58:	46a3      	mov	fp, r4
    7d5a:	465c      	mov	r4, fp
    7d5c:	4648      	mov	r0, r9
    7d5e:	f814 ab01 	ldrb.w	sl, [r4], #1
    7d62:	f7fe ffd5 	bl	6d10 <__locale_ctype_ptr_l>
    7d66:	4450      	add	r0, sl
    7d68:	7841      	ldrb	r1, [r0, #1]
    7d6a:	f001 0108 	and.w	r1, r1, #8
    7d6e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    7d72:	2900      	cmp	r1, #0
    7d74:	d1f0      	bne.n	7d58 <_strtol_l.isra.0+0x14>
    7d76:	4652      	mov	r2, sl
    7d78:	2a2d      	cmp	r2, #45	; 0x2d
    7d7a:	d061      	beq.n	7e40 <_strtol_l.isra.0+0xfc>
    7d7c:	2a2b      	cmp	r2, #43	; 0x2b
    7d7e:	bf04      	itt	eq
    7d80:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    7d84:	f10b 0402 	addeq.w	r4, fp, #2
    7d88:	2d00      	cmp	r5, #0
    7d8a:	d043      	beq.n	7e14 <_strtol_l.isra.0+0xd0>
    7d8c:	2d10      	cmp	r5, #16
    7d8e:	d065      	beq.n	7e5c <_strtol_l.isra.0+0x118>
    7d90:	46a9      	mov	r9, r5
    7d92:	f1bc 0f00 	cmp.w	ip, #0
    7d96:	bf0c      	ite	eq
    7d98:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    7d9c:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    7da0:	2100      	movs	r1, #0
    7da2:	fbba fef9 	udiv	lr, sl, r9
    7da6:	4608      	mov	r0, r1
    7da8:	fb09 aa1e 	mls	sl, r9, lr, sl
    7dac:	e005      	b.n	7dba <_strtol_l.isra.0+0x76>
    7dae:	d029      	beq.n	7e04 <_strtol_l.isra.0+0xc0>
    7db0:	fb09 3000 	mla	r0, r9, r0, r3
    7db4:	2101      	movs	r1, #1
    7db6:	f814 2b01 	ldrb.w	r2, [r4], #1
    7dba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    7dbe:	2b09      	cmp	r3, #9
    7dc0:	d905      	bls.n	7dce <_strtol_l.isra.0+0x8a>
    7dc2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    7dc6:	2b19      	cmp	r3, #25
    7dc8:	d80a      	bhi.n	7de0 <_strtol_l.isra.0+0x9c>
    7dca:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    7dce:	429d      	cmp	r5, r3
    7dd0:	dd0e      	ble.n	7df0 <_strtol_l.isra.0+0xac>
    7dd2:	1c4a      	adds	r2, r1, #1
    7dd4:	d0ef      	beq.n	7db6 <_strtol_l.isra.0+0x72>
    7dd6:	4586      	cmp	lr, r0
    7dd8:	d2e9      	bcs.n	7dae <_strtol_l.isra.0+0x6a>
    7dda:	f04f 31ff 	mov.w	r1, #4294967295
    7dde:	e7ea      	b.n	7db6 <_strtol_l.isra.0+0x72>
    7de0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    7de4:	2b19      	cmp	r3, #25
    7de6:	d803      	bhi.n	7df0 <_strtol_l.isra.0+0xac>
    7de8:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    7dec:	429d      	cmp	r5, r3
    7dee:	dcf0      	bgt.n	7dd2 <_strtol_l.isra.0+0x8e>
    7df0:	1c4b      	adds	r3, r1, #1
    7df2:	d015      	beq.n	7e20 <_strtol_l.isra.0+0xdc>
    7df4:	f1bc 0f00 	cmp.w	ip, #0
    7df8:	d110      	bne.n	7e1c <_strtol_l.isra.0+0xd8>
    7dfa:	b14e      	cbz	r6, 7e10 <_strtol_l.isra.0+0xcc>
    7dfc:	b9e1      	cbnz	r1, 7e38 <_strtol_l.isra.0+0xf4>
    7dfe:	6037      	str	r7, [r6, #0]
    7e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e04:	459a      	cmp	sl, r3
    7e06:	dad3      	bge.n	7db0 <_strtol_l.isra.0+0x6c>
    7e08:	4670      	mov	r0, lr
    7e0a:	f04f 31ff 	mov.w	r1, #4294967295
    7e0e:	e7d2      	b.n	7db6 <_strtol_l.isra.0+0x72>
    7e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e14:	2a30      	cmp	r2, #48	; 0x30
    7e16:	d01a      	beq.n	7e4e <_strtol_l.isra.0+0x10a>
    7e18:	250a      	movs	r5, #10
    7e1a:	e7b9      	b.n	7d90 <_strtol_l.isra.0+0x4c>
    7e1c:	4240      	negs	r0, r0
    7e1e:	e7ec      	b.n	7dfa <_strtol_l.isra.0+0xb6>
    7e20:	f1bc 0f00 	cmp.w	ip, #0
    7e24:	f04f 0322 	mov.w	r3, #34	; 0x22
    7e28:	bf0c      	ite	eq
    7e2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    7e2e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    7e32:	f8c8 3000 	str.w	r3, [r8]
    7e36:	b1f6      	cbz	r6, 7e76 <_strtol_l.isra.0+0x132>
    7e38:	1e67      	subs	r7, r4, #1
    7e3a:	6037      	str	r7, [r6, #0]
    7e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e40:	f10b 0402 	add.w	r4, fp, #2
    7e44:	f89b 2001 	ldrb.w	r2, [fp, #1]
    7e48:	f04f 0c01 	mov.w	ip, #1
    7e4c:	e79c      	b.n	7d88 <_strtol_l.isra.0+0x44>
    7e4e:	7823      	ldrb	r3, [r4, #0]
    7e50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7e54:	2b58      	cmp	r3, #88	; 0x58
    7e56:	d008      	beq.n	7e6a <_strtol_l.isra.0+0x126>
    7e58:	2508      	movs	r5, #8
    7e5a:	e799      	b.n	7d90 <_strtol_l.isra.0+0x4c>
    7e5c:	2a30      	cmp	r2, #48	; 0x30
    7e5e:	d197      	bne.n	7d90 <_strtol_l.isra.0+0x4c>
    7e60:	7823      	ldrb	r3, [r4, #0]
    7e62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7e66:	2b58      	cmp	r3, #88	; 0x58
    7e68:	d192      	bne.n	7d90 <_strtol_l.isra.0+0x4c>
    7e6a:	f04f 0910 	mov.w	r9, #16
    7e6e:	7862      	ldrb	r2, [r4, #1]
    7e70:	464d      	mov	r5, r9
    7e72:	3402      	adds	r4, #2
    7e74:	e78d      	b.n	7d92 <_strtol_l.isra.0+0x4e>
    7e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e7a:	bf00      	nop

00007e7c <strtol>:
    7e7c:	b530      	push	{r4, r5, lr}
    7e7e:	4c08      	ldr	r4, [pc, #32]	; (7ea0 <strtol+0x24>)
    7e80:	4b08      	ldr	r3, [pc, #32]	; (7ea4 <strtol+0x28>)
    7e82:	6825      	ldr	r5, [r4, #0]
    7e84:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    7e86:	b083      	sub	sp, #12
    7e88:	2c00      	cmp	r4, #0
    7e8a:	bf08      	it	eq
    7e8c:	461c      	moveq	r4, r3
    7e8e:	9400      	str	r4, [sp, #0]
    7e90:	4613      	mov	r3, r2
    7e92:	460a      	mov	r2, r1
    7e94:	4601      	mov	r1, r0
    7e96:	4628      	mov	r0, r5
    7e98:	f7ff ff54 	bl	7d44 <_strtol_l.isra.0>
    7e9c:	b003      	add	sp, #12
    7e9e:	bd30      	pop	{r4, r5, pc}
    7ea0:	1fff8c18 	.word	0x1fff8c18
    7ea4:	1fff8c1c 	.word	0x1fff8c1c

00007ea8 <__ascii_wctomb>:
    7ea8:	b121      	cbz	r1, 7eb4 <__ascii_wctomb+0xc>
    7eaa:	2aff      	cmp	r2, #255	; 0xff
    7eac:	d804      	bhi.n	7eb8 <__ascii_wctomb+0x10>
    7eae:	700a      	strb	r2, [r1, #0]
    7eb0:	2001      	movs	r0, #1
    7eb2:	4770      	bx	lr
    7eb4:	4608      	mov	r0, r1
    7eb6:	4770      	bx	lr
    7eb8:	238a      	movs	r3, #138	; 0x8a
    7eba:	6003      	str	r3, [r0, #0]
    7ebc:	f04f 30ff 	mov.w	r0, #4294967295
    7ec0:	4770      	bx	lr
    7ec2:	bf00      	nop

00007ec4 <__register_exitproc>:
    7ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ec8:	4c25      	ldr	r4, [pc, #148]	; (7f60 <__register_exitproc+0x9c>)
    7eca:	6825      	ldr	r5, [r4, #0]
    7ecc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    7ed0:	4606      	mov	r6, r0
    7ed2:	4688      	mov	r8, r1
    7ed4:	4692      	mov	sl, r2
    7ed6:	4699      	mov	r9, r3
    7ed8:	b3c4      	cbz	r4, 7f4c <__register_exitproc+0x88>
    7eda:	6860      	ldr	r0, [r4, #4]
    7edc:	281f      	cmp	r0, #31
    7ede:	dc17      	bgt.n	7f10 <__register_exitproc+0x4c>
    7ee0:	1c43      	adds	r3, r0, #1
    7ee2:	b176      	cbz	r6, 7f02 <__register_exitproc+0x3e>
    7ee4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    7ee8:	2201      	movs	r2, #1
    7eea:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    7eee:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    7ef2:	4082      	lsls	r2, r0
    7ef4:	4311      	orrs	r1, r2
    7ef6:	2e02      	cmp	r6, #2
    7ef8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    7efc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    7f00:	d01e      	beq.n	7f40 <__register_exitproc+0x7c>
    7f02:	3002      	adds	r0, #2
    7f04:	6063      	str	r3, [r4, #4]
    7f06:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    7f0a:	2000      	movs	r0, #0
    7f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f10:	4b14      	ldr	r3, [pc, #80]	; (7f64 <__register_exitproc+0xa0>)
    7f12:	b303      	cbz	r3, 7f56 <__register_exitproc+0x92>
    7f14:	f44f 70c8 	mov.w	r0, #400	; 0x190
    7f18:	f7fe fefe 	bl	6d18 <malloc>
    7f1c:	4604      	mov	r4, r0
    7f1e:	b1d0      	cbz	r0, 7f56 <__register_exitproc+0x92>
    7f20:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    7f24:	2700      	movs	r7, #0
    7f26:	e880 0088 	stmia.w	r0, {r3, r7}
    7f2a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    7f2e:	4638      	mov	r0, r7
    7f30:	2301      	movs	r3, #1
    7f32:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    7f36:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    7f3a:	2e00      	cmp	r6, #0
    7f3c:	d0e1      	beq.n	7f02 <__register_exitproc+0x3e>
    7f3e:	e7d1      	b.n	7ee4 <__register_exitproc+0x20>
    7f40:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    7f44:	430a      	orrs	r2, r1
    7f46:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    7f4a:	e7da      	b.n	7f02 <__register_exitproc+0x3e>
    7f4c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    7f50:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    7f54:	e7c1      	b.n	7eda <__register_exitproc+0x16>
    7f56:	f04f 30ff 	mov.w	r0, #4294967295
    7f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f5e:	bf00      	nop
    7f60:	00008894 	.word	0x00008894
    7f64:	00006d19 	.word	0x00006d19

00007f68 <register_fini>:
    7f68:	4b02      	ldr	r3, [pc, #8]	; (7f74 <register_fini+0xc>)
    7f6a:	b113      	cbz	r3, 7f72 <register_fini+0xa>
    7f6c:	4802      	ldr	r0, [pc, #8]	; (7f78 <register_fini+0x10>)
    7f6e:	f7f9 bf83 	b.w	1e78 <atexit>
    7f72:	4770      	bx	lr
    7f74:	00000000 	.word	0x00000000
    7f78:	00007f7d 	.word	0x00007f7d

00007f7c <__libc_fini_array>:
    7f7c:	b538      	push	{r3, r4, r5, lr}
    7f7e:	4d07      	ldr	r5, [pc, #28]	; (7f9c <__libc_fini_array+0x20>)
    7f80:	4c07      	ldr	r4, [pc, #28]	; (7fa0 <__libc_fini_array+0x24>)
    7f82:	1b2c      	subs	r4, r5, r4
    7f84:	10a4      	asrs	r4, r4, #2
    7f86:	d005      	beq.n	7f94 <__libc_fini_array+0x18>
    7f88:	3c01      	subs	r4, #1
    7f8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    7f8e:	4798      	blx	r3
    7f90:	2c00      	cmp	r4, #0
    7f92:	d1f9      	bne.n	7f88 <__libc_fini_array+0xc>
    7f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f98:	f000 bd1e 	b.w	89d8 <__init_array_end>
	...

00007fa4 <_malloc_trim_r>:
    7fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fa6:	4f23      	ldr	r7, [pc, #140]	; (8034 <_malloc_trim_r+0x90>)
    7fa8:	460c      	mov	r4, r1
    7faa:	4606      	mov	r6, r0
    7fac:	f7ff fa44 	bl	7438 <__malloc_lock>
    7fb0:	68bb      	ldr	r3, [r7, #8]
    7fb2:	685d      	ldr	r5, [r3, #4]
    7fb4:	f025 0503 	bic.w	r5, r5, #3
    7fb8:	1b29      	subs	r1, r5, r4
    7fba:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    7fbe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    7fc2:	f021 010f 	bic.w	r1, r1, #15
    7fc6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    7fca:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    7fce:	db07      	blt.n	7fe0 <_malloc_trim_r+0x3c>
    7fd0:	2100      	movs	r1, #0
    7fd2:	4630      	mov	r0, r6
    7fd4:	f7ff fc2c 	bl	7830 <_sbrk_r>
    7fd8:	68bb      	ldr	r3, [r7, #8]
    7fda:	442b      	add	r3, r5
    7fdc:	4298      	cmp	r0, r3
    7fde:	d004      	beq.n	7fea <_malloc_trim_r+0x46>
    7fe0:	4630      	mov	r0, r6
    7fe2:	f7ff fa2b 	bl	743c <__malloc_unlock>
    7fe6:	2000      	movs	r0, #0
    7fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7fea:	4261      	negs	r1, r4
    7fec:	4630      	mov	r0, r6
    7fee:	f7ff fc1f 	bl	7830 <_sbrk_r>
    7ff2:	3001      	adds	r0, #1
    7ff4:	d00d      	beq.n	8012 <_malloc_trim_r+0x6e>
    7ff6:	4b10      	ldr	r3, [pc, #64]	; (8038 <_malloc_trim_r+0x94>)
    7ff8:	68ba      	ldr	r2, [r7, #8]
    7ffa:	6819      	ldr	r1, [r3, #0]
    7ffc:	1b2d      	subs	r5, r5, r4
    7ffe:	f045 0501 	orr.w	r5, r5, #1
    8002:	4630      	mov	r0, r6
    8004:	1b09      	subs	r1, r1, r4
    8006:	6055      	str	r5, [r2, #4]
    8008:	6019      	str	r1, [r3, #0]
    800a:	f7ff fa17 	bl	743c <__malloc_unlock>
    800e:	2001      	movs	r0, #1
    8010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8012:	2100      	movs	r1, #0
    8014:	4630      	mov	r0, r6
    8016:	f7ff fc0b 	bl	7830 <_sbrk_r>
    801a:	68ba      	ldr	r2, [r7, #8]
    801c:	1a83      	subs	r3, r0, r2
    801e:	2b0f      	cmp	r3, #15
    8020:	ddde      	ble.n	7fe0 <_malloc_trim_r+0x3c>
    8022:	4c06      	ldr	r4, [pc, #24]	; (803c <_malloc_trim_r+0x98>)
    8024:	4904      	ldr	r1, [pc, #16]	; (8038 <_malloc_trim_r+0x94>)
    8026:	6824      	ldr	r4, [r4, #0]
    8028:	f043 0301 	orr.w	r3, r3, #1
    802c:	1b00      	subs	r0, r0, r4
    802e:	6053      	str	r3, [r2, #4]
    8030:	6008      	str	r0, [r1, #0]
    8032:	e7d5      	b.n	7fe0 <_malloc_trim_r+0x3c>
    8034:	1fff8d88 	.word	0x1fff8d88
    8038:	1fffd65c 	.word	0x1fffd65c
    803c:	1fff9194 	.word	0x1fff9194

00008040 <_free_r>:
    8040:	2900      	cmp	r1, #0
    8042:	d045      	beq.n	80d0 <_free_r+0x90>
    8044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8048:	460d      	mov	r5, r1
    804a:	4680      	mov	r8, r0
    804c:	f7ff f9f4 	bl	7438 <__malloc_lock>
    8050:	f855 7c04 	ldr.w	r7, [r5, #-4]
    8054:	496a      	ldr	r1, [pc, #424]	; (8200 <_free_r+0x1c0>)
    8056:	f027 0301 	bic.w	r3, r7, #1
    805a:	f1a5 0408 	sub.w	r4, r5, #8
    805e:	18e2      	adds	r2, r4, r3
    8060:	688e      	ldr	r6, [r1, #8]
    8062:	6850      	ldr	r0, [r2, #4]
    8064:	42b2      	cmp	r2, r6
    8066:	f020 0003 	bic.w	r0, r0, #3
    806a:	d062      	beq.n	8132 <_free_r+0xf2>
    806c:	07fe      	lsls	r6, r7, #31
    806e:	6050      	str	r0, [r2, #4]
    8070:	d40b      	bmi.n	808a <_free_r+0x4a>
    8072:	f855 7c08 	ldr.w	r7, [r5, #-8]
    8076:	1be4      	subs	r4, r4, r7
    8078:	f101 0e08 	add.w	lr, r1, #8
    807c:	68a5      	ldr	r5, [r4, #8]
    807e:	4575      	cmp	r5, lr
    8080:	443b      	add	r3, r7
    8082:	d06f      	beq.n	8164 <_free_r+0x124>
    8084:	68e7      	ldr	r7, [r4, #12]
    8086:	60ef      	str	r7, [r5, #12]
    8088:	60bd      	str	r5, [r7, #8]
    808a:	1815      	adds	r5, r2, r0
    808c:	686d      	ldr	r5, [r5, #4]
    808e:	07ed      	lsls	r5, r5, #31
    8090:	d542      	bpl.n	8118 <_free_r+0xd8>
    8092:	f043 0201 	orr.w	r2, r3, #1
    8096:	6062      	str	r2, [r4, #4]
    8098:	50e3      	str	r3, [r4, r3]
    809a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    809e:	d218      	bcs.n	80d2 <_free_r+0x92>
    80a0:	08db      	lsrs	r3, r3, #3
    80a2:	1c5a      	adds	r2, r3, #1
    80a4:	684d      	ldr	r5, [r1, #4]
    80a6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    80aa:	60a7      	str	r7, [r4, #8]
    80ac:	2001      	movs	r0, #1
    80ae:	109b      	asrs	r3, r3, #2
    80b0:	fa00 f303 	lsl.w	r3, r0, r3
    80b4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    80b8:	431d      	orrs	r5, r3
    80ba:	3808      	subs	r0, #8
    80bc:	60e0      	str	r0, [r4, #12]
    80be:	604d      	str	r5, [r1, #4]
    80c0:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    80c4:	60fc      	str	r4, [r7, #12]
    80c6:	4640      	mov	r0, r8
    80c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    80cc:	f7ff b9b6 	b.w	743c <__malloc_unlock>
    80d0:	4770      	bx	lr
    80d2:	0a5a      	lsrs	r2, r3, #9
    80d4:	2a04      	cmp	r2, #4
    80d6:	d853      	bhi.n	8180 <_free_r+0x140>
    80d8:	099a      	lsrs	r2, r3, #6
    80da:	f102 0739 	add.w	r7, r2, #57	; 0x39
    80de:	007f      	lsls	r7, r7, #1
    80e0:	f102 0538 	add.w	r5, r2, #56	; 0x38
    80e4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    80e8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    80ec:	4944      	ldr	r1, [pc, #272]	; (8200 <_free_r+0x1c0>)
    80ee:	3808      	subs	r0, #8
    80f0:	4290      	cmp	r0, r2
    80f2:	d04d      	beq.n	8190 <_free_r+0x150>
    80f4:	6851      	ldr	r1, [r2, #4]
    80f6:	f021 0103 	bic.w	r1, r1, #3
    80fa:	428b      	cmp	r3, r1
    80fc:	d202      	bcs.n	8104 <_free_r+0xc4>
    80fe:	6892      	ldr	r2, [r2, #8]
    8100:	4290      	cmp	r0, r2
    8102:	d1f7      	bne.n	80f4 <_free_r+0xb4>
    8104:	68d0      	ldr	r0, [r2, #12]
    8106:	60e0      	str	r0, [r4, #12]
    8108:	60a2      	str	r2, [r4, #8]
    810a:	6084      	str	r4, [r0, #8]
    810c:	60d4      	str	r4, [r2, #12]
    810e:	4640      	mov	r0, r8
    8110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8114:	f7ff b992 	b.w	743c <__malloc_unlock>
    8118:	6895      	ldr	r5, [r2, #8]
    811a:	4f3a      	ldr	r7, [pc, #232]	; (8204 <_free_r+0x1c4>)
    811c:	42bd      	cmp	r5, r7
    811e:	4403      	add	r3, r0
    8120:	d03f      	beq.n	81a2 <_free_r+0x162>
    8122:	68d0      	ldr	r0, [r2, #12]
    8124:	60e8      	str	r0, [r5, #12]
    8126:	f043 0201 	orr.w	r2, r3, #1
    812a:	6085      	str	r5, [r0, #8]
    812c:	6062      	str	r2, [r4, #4]
    812e:	50e3      	str	r3, [r4, r3]
    8130:	e7b3      	b.n	809a <_free_r+0x5a>
    8132:	07ff      	lsls	r7, r7, #31
    8134:	4403      	add	r3, r0
    8136:	d407      	bmi.n	8148 <_free_r+0x108>
    8138:	f855 2c08 	ldr.w	r2, [r5, #-8]
    813c:	1aa4      	subs	r4, r4, r2
    813e:	4413      	add	r3, r2
    8140:	68a0      	ldr	r0, [r4, #8]
    8142:	68e2      	ldr	r2, [r4, #12]
    8144:	60c2      	str	r2, [r0, #12]
    8146:	6090      	str	r0, [r2, #8]
    8148:	4a2f      	ldr	r2, [pc, #188]	; (8208 <_free_r+0x1c8>)
    814a:	6812      	ldr	r2, [r2, #0]
    814c:	f043 0001 	orr.w	r0, r3, #1
    8150:	4293      	cmp	r3, r2
    8152:	6060      	str	r0, [r4, #4]
    8154:	608c      	str	r4, [r1, #8]
    8156:	d3b6      	bcc.n	80c6 <_free_r+0x86>
    8158:	4b2c      	ldr	r3, [pc, #176]	; (820c <_free_r+0x1cc>)
    815a:	4640      	mov	r0, r8
    815c:	6819      	ldr	r1, [r3, #0]
    815e:	f7ff ff21 	bl	7fa4 <_malloc_trim_r>
    8162:	e7b0      	b.n	80c6 <_free_r+0x86>
    8164:	1811      	adds	r1, r2, r0
    8166:	6849      	ldr	r1, [r1, #4]
    8168:	07c9      	lsls	r1, r1, #31
    816a:	d444      	bmi.n	81f6 <_free_r+0x1b6>
    816c:	6891      	ldr	r1, [r2, #8]
    816e:	68d2      	ldr	r2, [r2, #12]
    8170:	60ca      	str	r2, [r1, #12]
    8172:	4403      	add	r3, r0
    8174:	f043 0001 	orr.w	r0, r3, #1
    8178:	6091      	str	r1, [r2, #8]
    817a:	6060      	str	r0, [r4, #4]
    817c:	50e3      	str	r3, [r4, r3]
    817e:	e7a2      	b.n	80c6 <_free_r+0x86>
    8180:	2a14      	cmp	r2, #20
    8182:	d817      	bhi.n	81b4 <_free_r+0x174>
    8184:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    8188:	007f      	lsls	r7, r7, #1
    818a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    818e:	e7a9      	b.n	80e4 <_free_r+0xa4>
    8190:	10aa      	asrs	r2, r5, #2
    8192:	684b      	ldr	r3, [r1, #4]
    8194:	2501      	movs	r5, #1
    8196:	fa05 f202 	lsl.w	r2, r5, r2
    819a:	4313      	orrs	r3, r2
    819c:	604b      	str	r3, [r1, #4]
    819e:	4602      	mov	r2, r0
    81a0:	e7b1      	b.n	8106 <_free_r+0xc6>
    81a2:	f043 0201 	orr.w	r2, r3, #1
    81a6:	614c      	str	r4, [r1, #20]
    81a8:	610c      	str	r4, [r1, #16]
    81aa:	60e5      	str	r5, [r4, #12]
    81ac:	60a5      	str	r5, [r4, #8]
    81ae:	6062      	str	r2, [r4, #4]
    81b0:	50e3      	str	r3, [r4, r3]
    81b2:	e788      	b.n	80c6 <_free_r+0x86>
    81b4:	2a54      	cmp	r2, #84	; 0x54
    81b6:	d806      	bhi.n	81c6 <_free_r+0x186>
    81b8:	0b1a      	lsrs	r2, r3, #12
    81ba:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    81be:	007f      	lsls	r7, r7, #1
    81c0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    81c4:	e78e      	b.n	80e4 <_free_r+0xa4>
    81c6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    81ca:	d806      	bhi.n	81da <_free_r+0x19a>
    81cc:	0bda      	lsrs	r2, r3, #15
    81ce:	f102 0778 	add.w	r7, r2, #120	; 0x78
    81d2:	007f      	lsls	r7, r7, #1
    81d4:	f102 0577 	add.w	r5, r2, #119	; 0x77
    81d8:	e784      	b.n	80e4 <_free_r+0xa4>
    81da:	f240 5054 	movw	r0, #1364	; 0x554
    81de:	4282      	cmp	r2, r0
    81e0:	d806      	bhi.n	81f0 <_free_r+0x1b0>
    81e2:	0c9a      	lsrs	r2, r3, #18
    81e4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    81e8:	007f      	lsls	r7, r7, #1
    81ea:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    81ee:	e779      	b.n	80e4 <_free_r+0xa4>
    81f0:	27fe      	movs	r7, #254	; 0xfe
    81f2:	257e      	movs	r5, #126	; 0x7e
    81f4:	e776      	b.n	80e4 <_free_r+0xa4>
    81f6:	f043 0201 	orr.w	r2, r3, #1
    81fa:	6062      	str	r2, [r4, #4]
    81fc:	50e3      	str	r3, [r4, r3]
    81fe:	e762      	b.n	80c6 <_free_r+0x86>
    8200:	1fff8d88 	.word	0x1fff8d88
    8204:	1fff8d90 	.word	0x1fff8d90
    8208:	1fff9190 	.word	0x1fff9190
    820c:	1fffd658 	.word	0x1fffd658

00008210 <vtable for COctoWS2811Controller<(EOrder)66, (unsigned char)0>>:
	...
    8218:	00000959 00000a25 00000475 00000851     Y...%...u...Q...
    8228:	0000046d 00000471 000004f5 0000203a     m...q.......: ..
    8238:	30303030 00000000 67676f54 676e696c     0000....Toggling
    8248:	65754820 00000000 74746553 20676e69      Hue....Setting 
    8258:	74746170 206e7265 626d756e 00007265     pattern number..
    8268:	74746553 20676e69 20706f74 69736f70     Setting top posi
    8278:	6e6f6974 00000000 74746553 20676e69     tion....Setting 
    8288:	74746f62 70206d6f 7469736f 006e6f69     bottom position.
    8298:	74746553 20676e69 65666665 6e207463     Setting effect n
    82a8:	65626d75 00000072 74746553 20676e69     umber...Setting 
    82b8:	65646f6d 6d756e20 00726562 61736944     mode number.Disa
    82c8:	6e696c62 75412067 4d206f74 2e65646f     bling Auto Mode.
    82d8:	00000000 74746553 20676e69 6f747541     ....Setting Auto
    82e8:	74615020 6e726574 646f4d20 00002e65      Pattern Mode...
    82f8:	74746553 20676e69 6f747541 646f4d20     Setting Auto Mod
    8308:	6f4d2065 002e6564 74746553 20676e69     e Mode..Setting 
    8318:	6f747541 74615020 6e726574 646f4d20     Auto Pattern Mod
    8328:	6f4d2065 002e6564 74746553 20676e69     e Mode..Setting 
    8338:	6f747541 656c5320 4d207065 2e65646f     Auto Sleep Mode.
    8348:	00000000 656d6f53 6e696874 65772067     ....Something we
    8358:	7720746e 676e6f72 61657220 676e6964     nt wrong reading
    8368:	72657320 206c6169 6d6d6f63 00646e61      serial command.
    8378:	656d6f53 6e696874 65772067 7720746e     Something went w
    8388:	676e6f72 61657220 676e6964 72657320     rong reading ser
    8398:	2c6c6169 6d6f6320 646e616d 73617720     ial, command was
    83a8:	616c6220 002e6b6e 74746553 20676e69      blank..Setting 
    83b8:	6c616e41 4520676f 63656666 00000074     Analog Effect...
    83c8:	74746553 20676e69 6c616e41 5020676f     Setting Analog P
    83d8:	65747461 00006e72 69726553 70206c61     attern..Serial p
    83e8:	2074726f 6e65706f 002e6465 65636552     ort opened..Rece
    83f8:	64657669 706e6920 73207475 6e697274     ived input strin
    8408:	00000067 50444d56 7c315f56 4d565f31     g...VMDPV_1|1_VM
    8418:	0d565044 0000000a ffff007c              DPV.....|...

00008424 <RainbowColors_p>:
    8424:	00ff0000 00d52a00 00ab5500 00ab7f00     .....*...U......
    8434:	00abab00 0056d500 0000ff00 0000d52a     ......V.....*...
    8444:	0000ab55 000056aa 000000ff 002a00d5     U....V........*.
    8454:	005500ab 007f0081 00ab0055 00d5002b     ..U.....U...+...

00008464 <PartyColors_p>:
    8464:	005500ab 0084007c 00b5004b 00e5001b     ..U.|...K.......
    8474:	00e81700 00b84700 00ab7700 00abab00     .....G...w......
    8484:	00ab5500 00dd2200 00f2000e 00c2003e     .U..."......>...
    8494:	008f0071 005f00a1 002f00d0 000007f9     q....._.../.....

000084a4 <CloudColors_p>:
    84a4:	000000ff 0000008b 0000008b 0000008b     ................
    84b4:	0000008b 0000008b 0000008b 0000008b     ................
    84c4:	000000ff 0000008b 0087ceeb 0087ceeb     ................
    84d4:	00add8e6 00ffffff 00add8e6 0087ceeb     ................

000084e4 <HeatColors_p>:
    84e4:	00000000 00330000 00660000 00990000     ......3...f.....
    84f4:	00cc0000 00ff0000 00ff3300 00ff6600     .........3...f..
    8504:	00ff9900 00ffcc00 00ffff00 00ffff33     ............3...
    8514:	00ffff66 00ffff99 00ffffcc 00ffffff     f...............

00008524 <ForestColors_p>:
    8524:	00006400 00006400 00556b2f 00006400     .d...d../kU..d..
    8534:	00008000 00228b22 006b8e23 00008000     ....".".#.k.....
    8544:	002e8b57 0066cdaa 0032cd32 009acd32     W.....f.2.2.2...
    8554:	0090ee90 007cfc00 0066cdaa 00228b22     ......|...f.".".
    8564:	00002545 00000000 00002f7d 00000000     E%......}/......
    8574:	00002005 00000000 00003599 00000000     . .......5......
    8584:	000029c5 00000000 00002c7d 00000000     .)......},......
    8594:	00002159 00000000 000022ed 00000000     Y!......."......
    85a4:	00002001 00000000 000020e1 00000000     . ....... ......

000085b4 <sin16_C(unsigned short)::base>:
    85b4:	18f90000 471c30fb 6a6d5a82 7d897641     .....0.G.ZmjAv.}

000085c4 <b_m16_interleave>:
    85c4:	29313100 0a751b5a                       .11)Z.u.

000085cc <CSWTCH.134>:
    85cc:	00000005 00000007 00000009              ............

000085d8 <sin16_C(unsigned short)::slope>:
    85d8:	262c3031 040e171f 4e525450 00000000     10,&....PTRN....
    85e8:	54434645 00000000 45444f4d 00000000     EFCT....MODE....
    85f8:	54495242 00000000 31455548 00000000     BRIT....HUE1....
    8608:	32455548 00000000 33455548 00000000     HUE2....HUE3....
    8618:	34455548 00000000 35455548 00000000     HUE4....HUE5....
    8628:	52424c46 00000000 50504f54 00000000     FLBR....TOPP....
    8638:	50544f42 00000000 48544f42 00000000     BOTP....BOTH....
    8648:	54504e41 00000000 46454e41 00000000     ANPT....ANEF....
    8658:	53554150 00000000 43415541 00000000     PAUS....AUAC....
    8668:	4f4e5541 00000000 4c535541 00000000     AUNO....AUSL....
    8678:	54505541 00000000 4f4d5541 00000000     AUPT....AUMO....
    8688:	4d505541 ffffff00 50444d56 00005f45     AUPM....VMDPE_..
    8698:	003a323a 0000003a 444d565f 00004550     :2:.:..._VMDPE..
    86a8:	50444d56 00005f43 444d565f 00004350     VMDPC_.._VMDPC..
    86b8:	6f727245 41203a72 6d657474 74207470     Error: Attempt t
    86c8:	6573206f 20612074 64616572 6c6e6f2d     o set a read-onl
    86d8:	61762079 62616972 6f20656c 61642072     y variable or da
    86e8:	74206174 20657079 20746f6e 70707573     ta type not supp
    86f8:	6574726f 000a0d64                       orted...

00008700 <digital_pin_to_info_PGM>:
    8700:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    8710:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    8720:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    8730:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    8740:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    8750:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    8760:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    8770:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    8780:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    8790:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    87a0:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    87b0:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    87c0:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
    87d0:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
    87e0:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
    87f0:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
    8800:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@
    8810:	ffff0a0d                                ....

00008814 <vtable for usb_serial_class>:
	...
    881c:	00005ea1 00005e99 00005e95 00005e91     .^...^...^...^..
    882c:	00005e8d 00005e89 00005e85 00005e81     .^...^...^...^..

0000883c <usb_endpoint_config_table>:
    883c:	15191500                                ....

00008840 <usb_descriptor_list>:
    8840:	00000100 1fff8748 00000012 00000200     ....H...........
    8850:	1fff8774 00000043 00000300 1fff87d0     t...C...........
    8860:	00000000 04090301 1fff875c 00000000     ........\.......
    8870:	04090302 1fff87b8 00000000 04090303     ................
    8880:	1fff87d4 00000000 00000000 00000000     ................
    8890:	00000000                                ....

00008894 <_global_impure_ptr>:
    8894:	1fff87f0 00000043 49534f50 00000058     ....C...POSIX...
    88a4:	0000002e                                ....

000088a8 <_ctype_>:
    88a8:	20202000 20202020 28282020 20282828     .         ((((( 
    88b8:	20202020 20202020 20202020 20202020                     
    88c8:	10108820 10101010 10101010 10101010      ...............
    88d8:	04040410 04040404 10040404 10101010     ................
    88e8:	41411010 41414141 01010101 01010101     ..AAAAAA........
    88f8:	01010101 01010101 01010101 10101010     ................
    8908:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8918:	02020202 02020202 02020202 10101010     ................
    8928:	00000020 00000000 00000000 00000000      ...............
	...
    89a8:	ffffff00                                ....

000089ac <_init>:
    89ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89ae:	bf00      	nop
    89b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    89b2:	bc08      	pop	{r3}
    89b4:	469e      	mov	lr, r3
    89b6:	4770      	bx	lr

000089b8 <__init_array_start>:
    89b8:	00007f69 	.word	0x00007f69

000089bc <__frame_dummy_init_array_entry>:
    89bc:	00000435 00001b79 00001e7d 00003ca9     5...y...}....<..
    89cc:	00003ec9 00003eed 00004201              .>...>...B..

Disassembly of section .fini:

000089d8 <_fini>:
    89d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89da:	bf00      	nop
