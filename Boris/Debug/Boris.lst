
C:\Users\klyem\AppData\Local\Temp\VMBuilds\Boris\teensy31\Debug/Boris.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	00 80 00 20 bd 01 00 00 b1 49 00 00 69 49 00 00     ... .....I..iI..
      10:	69 49 00 00 69 49 00 00 69 49 00 00 69 49 00 00     iI..iI..iI..iI..
      20:	69 49 00 00 69 49 00 00 69 49 00 00 b1 49 00 00     iI..iI..iI...I..
      30:	b1 49 00 00 69 49 00 00 7d 62 00 00 81 63 00 00     .I..iI..}b...c..
      40:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      50:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      60:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      70:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      80:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      90:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      a0:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      b0:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      c0:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      d0:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      e0:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
      f0:	b1 49 00 00 e5 4d 00 00 b1 49 00 00 59 6a 00 00     .I...M...I..Yj..
     100:	b1 49 00 00 85 6b 00 00 b1 49 00 00 b1 49 00 00     .I...k...I...I..
     110:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     120:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     130:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     140:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     150:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     160:	b1 49 00 00 a5 50 00 00 b1 49 00 00 b1 49 00 00     .I...P...I...I..
     170:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     180:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     190:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     1a0:	b1 49 00 00 b1 49 00 00 b1 49 00 00 b1 49 00 00     .I...I...I...I..
     1b0:	b1 49 00 00 b1 49 00 00 b1 49 00 00                 .I...I...I..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f004 fbf2 	bl	49b8 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 216000000 || F_CPU == 180000000
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f004 fc5c 	bl	4b90 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f004 fbcd 	bl	4a80 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f004 fbbe 	bl	4a80 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f007 f9f6 	bl	76f8 <__libc_init_array>

	startup_late_hook();
     30c:	f004 fb5a 	bl	49c4 <startup_late_hook>
	main();
     310:	f006 f83e 	bl	6390 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff91a0 	.word	0x1fff91a0
     33c:	00009488 	.word	0x00009488
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff91a0 	.word	0x1fff91a0
     348:	1fff9e38 	.word	0x1fff9e38
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5f5f69b5 	.word	0x5f5f69b5
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff91a0 	.word	0x1fff91a0
     42c:	00000000 	.word	0x00000000
     430:	0000948c 	.word	0x0000948c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff91a4 	.word	0x1fff91a4
     460:	0000948c 	.word	0x0000948c
     464:	1fff91a0 	.word	0x1fff91a0
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     46c:	2000      	movs	r0, #0
     46e:	4770      	bx	lr

00000470 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::init()>:
  }
public:
  COctoWS2811Controller() { pocto = NULL; }
  virtual int size() { return CLEDController::size() * 8; }

  virtual void init() { /* do nothing yet */ }
     470:	4770      	bx	lr
     472:	bf00      	nop

00000474 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::size()>:
      pocto->begin();
    }
  }
public:
  COctoWS2811Controller() { pocto = NULL; }
  virtual int size() { return CLEDController::size() * 8; }
     474:	6940      	ldr	r0, [r0, #20]
     476:	00c0      	lsls	r0, r0, #3
     478:	4770      	bx	lr
     47a:	bf00      	nop

0000047c <Meltdown::executeSpokes(int) [clone .part.48]>:
		}
	}

	void executeSpokes(int numLeds)
	{
		if (MeltdownLED.GetTop())
     47c:	b570      	push	{r4, r5, r6, lr}
		  int GetPatternNumber(int offset = 0)
		  {
			  // A value less than zero indicates we want the base pattern.
			  if (offset < 0) return 0;

			  return (gCurrentPatternNumber + offset) % ARRAY_SIZE(gPatterns);
     47e:	4c1d      	ldr	r4, [pc, #116]	; (4f4 <Meltdown::executeSpokes(int) [clone .part.48]+0x78>)
			  return SetPatternNumber(gCurrentPatternNumber + 1);
		  }

		  void ExecutePattern(CRGB leds[], uint16_t indexes[], int numLeds, int patternOffset = 0, int modeOffset = 0)
		  {
			  MeltdownPattern pattern = gPatterns[GetPatternNumber(patternOffset)];
     480:	4b1d      	ldr	r3, [pc, #116]	; (4f8 <Meltdown::executeSpokes(int) [clone .part.48]+0x7c>)
     482:	6822      	ldr	r2, [r4, #0]
     484:	fba3 1302 	umull	r1, r3, r3, r2
     488:	08db      	lsrs	r3, r3, #3
     48a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     48e:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
     492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     496:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     49a:	4605      	mov	r5, r0
     49c:	6d58      	ldr	r0, [r3, #84]	; 0x54
     49e:	6d1e      	ldr	r6, [r3, #80]	; 0x50

			  (this->*(pattern.patternFunc))(leds, indexes, numLeds, modeOffset);
     4a0:	07c2      	lsls	r2, r0, #31
     4a2:	b082      	sub	sp, #8
     4a4:	d520      	bpl.n	4e8 <Meltdown::executeSpokes(int) [clone .part.48]+0x6c>
     4a6:	1043      	asrs	r3, r0, #1
     4a8:	1918      	adds	r0, r3, r4
     4aa:	591b      	ldr	r3, [r3, r4]
     4ac:	599e      	ldr	r6, [r3, r6]
     4ae:	4a13      	ldr	r2, [pc, #76]	; (4fc <Meltdown::executeSpokes(int) [clone .part.48]+0x80>)
     4b0:	4913      	ldr	r1, [pc, #76]	; (500 <Meltdown::executeSpokes(int) [clone .part.48]+0x84>)
     4b2:	2300      	movs	r3, #0
     4b4:	9300      	str	r3, [sp, #0]
     4b6:	462b      	mov	r3, r5
     4b8:	47b0      	blx	r6
		  int IncrementEffectNumber()
		  {
			  return SetEffectNumber(gCurrentEffectNumber + 1);
		  }

		  void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
     4ba:	6863      	ldr	r3, [r4, #4]
		  int GetEffectNumber(int offset = 0)
		  {
			  // A value less than zero indicates we want the base effect.
			  if (offset < 0) return 0;

			  return (gCurrentEffectNumber + offset) % ARRAY_SIZE(gEffects);
     4bc:	4a0d      	ldr	r2, [pc, #52]	; (4f4 <Meltdown::executeSpokes(int) [clone .part.48]+0x78>)
		  int IncrementEffectNumber()
		  {
			  return SetEffectNumber(gCurrentEffectNumber + 1);
		  }

		  void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }
     4be:	f003 0301 	and.w	r3, r3, #1
     4c2:	3318      	adds	r3, #24
     4c4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     4c8:	68a0      	ldr	r0, [r4, #8]
     4ca:	6864      	ldr	r4, [r4, #4]
     4cc:	07c3      	lsls	r3, r0, #31
     4ce:	d50e      	bpl.n	4ee <Meltdown::executeSpokes(int) [clone .part.48]+0x72>
     4d0:	1043      	asrs	r3, r0, #1
     4d2:	1898      	adds	r0, r3, r2
     4d4:	589b      	ldr	r3, [r3, r2]
     4d6:	591c      	ldr	r4, [r3, r4]
     4d8:	4a08      	ldr	r2, [pc, #32]	; (4fc <Meltdown::executeSpokes(int) [clone .part.48]+0x80>)
     4da:	4909      	ldr	r1, [pc, #36]	; (500 <Meltdown::executeSpokes(int) [clone .part.48]+0x84>)
     4dc:	462b      	mov	r3, r5
     4de:	46a4      	mov	ip, r4
			MeltdownLED.ExecutePattern(leds, ledIndexes, numLeds);
			MeltdownLED.ExecuteEffect(leds, ledIndexes, numLeds);
		}
	}

	void executeLoop()
     4e0:	b002      	add	sp, #8
     4e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     4e6:	4760      	bx	ip
     4e8:	eb04 0060 	add.w	r0, r4, r0, asr #1
     4ec:	e7df      	b.n	4ae <Meltdown::executeSpokes(int) [clone .part.48]+0x32>
     4ee:	eb02 0060 	add.w	r0, r2, r0, asr #1
     4f2:	e7f1      	b.n	4d8 <Meltdown::executeSpokes(int) [clone .part.48]+0x5c>
     4f4:	1fff9890 	.word	0x1fff9890
     4f8:	cccccccd 	.word	0xcccccccd
     4fc:	1fff922c 	.word	0x1fff922c
     500:	1fff94b4 	.word	0x1fff94b4

00000504 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)>:
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
     508:	6986      	ldr	r6, [r0, #24]
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     50a:	b085      	sub	sp, #20
     50c:	4605      	mov	r5, r0
     50e:	460c      	mov	r4, r1
class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
     510:	2e00      	cmp	r6, #0
     512:	f000 8171 	beq.w	7f8 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x2f4>

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
     516:	68a3      	ldr	r3, [r4, #8]
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
     518:	69ea      	ldr	r2, [r5, #28]
    while(pixels.has(1)) {
     51a:	2b00      	cmp	r3, #0
     51c:	f340 8166 	ble.w	7ec <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x2e8>
     520:	4627      	mov	r7, r4
     522:	3218      	adds	r2, #24
     524:	f857 8b14 	ldr.w	r8, [r7], #20
     528:	f104 0034 	add.w	r0, r4, #52	; 0x34
     52c:	f894 9013 	ldrb.w	r9, [r4, #19]
     530:	f10d 0607 	add.w	r6, sp, #7
     534:	4639      	mov	r1, r7
     536:	f109 0901 	add.w	r9, r9, #1
  typedef union {
    uint8_t bytes[8];
    uint32_t raw[2];
  } Lines;

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     53a:	46b4      	mov	ip, r6
     53c:	46be      	mov	lr, r7
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     53e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     542:	4443      	add	r3, r8
     544:	785b      	ldrb	r3, [r3, #1]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     546:	b143      	cbz	r3, 55a <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x56>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     548:	f894 a00d 	ldrb.w	sl, [r4, #13]
     54c:	fa83 f35a 	uqadd8	r3, r3, sl
     550:	b2db      	uxtb	r3, r3
     552:	fb09 f303 	mul.w	r3, r9, r3
     556:	f3c3 2307 	ubfx	r3, r3, #8, #8

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
      Lines b;

      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale0(i); }
     55a:	4586      	cmp	lr, r0
     55c:	f80c 3f01 	strb.w	r3, [ip, #1]!
     560:	d1ed      	bne.n	53e <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x3a>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     562:	f8dd 8008 	ldr.w	r8, [sp, #8]
  x = *(unsigned int*)(A+4);
     566:	9b03      	ldr	r3, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     568:	ea88 1cd8 	eor.w	ip, r8, r8, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     56c:	ea83 1ed3 	eor.w	lr, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     570:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     574:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     578:	ea88 080c 	eor.w	r8, r8, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     57c:	ea83 030e 	eor.w	r3, r3, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     580:	ea88 1ccc 	eor.w	ip, r8, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     584:	ea83 1ece 	eor.w	lr, r3, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     588:	f64c 48cc 	movw	r8, #52428	; 0xcccc
     58c:	ea8c 3a9c 	eor.w	sl, ip, ip, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     590:	ea8e 399e 	eor.w	r9, lr, lr, lsr #14
     594:	4643      	mov	r3, r8
     596:	ea09 0303 	and.w	r3, r9, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     59a:	ea0a 0808 	and.w	r8, sl, r8
     59e:	ea8c 0c08 	eor.w	ip, ip, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5a2:	ea8e 0e03 	eor.w	lr, lr, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     5a6:	ea8c 3c88 	eor.w	ip, ip, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     5aa:	ea8e 3e83 	eor.w	lr, lr, r3, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     5ae:	ea4f 180e 	mov.w	r8, lr, lsl #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     5b2:	ea4f 131c 	mov.w	r3, ip, lsr #4
     5b6:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     5ba:	f00c 3c0f 	and.w	ip, ip, #252645135	; 0xf0f0f0f
     5be:	f008 38f0 	and.w	r8, r8, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     5c2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
     5c6:	ea43 030e 	orr.w	r3, r3, lr
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     5ca:	ea48 0e0c 	orr.w	lr, r8, ip
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     5ce:	ea4f 491e 	mov.w	r9, lr, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     5d2:	ea4f 681e 	mov.w	r8, lr, lsr #24

  B[3] = x; x >>= 8;
     5d6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     5da:	f802 ec11 	strb.w	lr, [r2, #-17]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     5de:	f802 3c15 	strb.w	r3, [r2, #-21]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     5e2:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     5e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     5ea:	0e1b      	lsrs	r3, r3, #24
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     5ec:	f802 cc16 	strb.w	ip, [r2, #-22]
  B[1] = x; x >>= 8;
     5f0:	f802 ec17 	strb.w	lr, [r2, #-23]
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     5f4:	f802 ac12 	strb.w	sl, [r2, #-18]
  B[5] = y; y >>= 8;
     5f8:	f802 9c13 	strb.w	r9, [r2, #-19]
  B[4] = y;
     5fc:	f802 8c14 	strb.w	r8, [r2, #-20]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     600:	f802 3c18 	strb.w	r3, [r2, #-24]
     604:	f894 9012 	ldrb.w	r9, [r4, #18]
     608:	f8d4 8000 	ldr.w	r8, [r4]
     60c:	f109 0901 	add.w	r9, r9, #1
     610:	f10d 0c07 	add.w	ip, sp, #7
     614:	46be      	mov	lr, r7
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     616:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     61a:	f818 3003 	ldrb.w	r3, [r8, r3]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     61e:	b143      	cbz	r3, 632 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x12e>
     620:	f894 a00c 	ldrb.w	sl, [r4, #12]
     624:	fa83 f35a 	uqadd8	r3, r3, sl
     628:	b2db      	uxtb	r3, r3
     62a:	fb09 f303 	mul.w	r3, r9, r3
     62e:	f3c3 2307 	ubfx	r3, r3, #8, #8
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale1(i); }
     632:	4586      	cmp	lr, r0
     634:	f80c 3f01 	strb.w	r3, [ip, #1]!
     638:	d1ed      	bne.n	616 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x112>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     63a:	f8dd 8008 	ldr.w	r8, [sp, #8]
  x = *(unsigned int*)(A+4);
     63e:	9b03      	ldr	r3, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     640:	ea88 1cd8 	eor.w	ip, r8, r8, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     644:	ea83 1ed3 	eor.w	lr, r3, r3, lsr #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     648:	f00c 1caa 	and.w	ip, ip, #11141290	; 0xaa00aa
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     64c:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     650:	ea88 080c 	eor.w	r8, r8, ip
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     654:	ea83 030e 	eor.w	r3, r3, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     658:	ea88 1ccc 	eor.w	ip, r8, ip, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     65c:	ea83 1ece 	eor.w	lr, r3, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     660:	f64c 48cc 	movw	r8, #52428	; 0xcccc
     664:	ea8c 3a9c 	eor.w	sl, ip, ip, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     668:	ea8e 399e 	eor.w	r9, lr, lr, lsr #14
     66c:	4643      	mov	r3, r8
     66e:	ea09 0303 	and.w	r3, r9, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     672:	ea0a 0808 	and.w	r8, sl, r8
     676:	ea8c 0c08 	eor.w	ip, ip, r8
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     67a:	ea8e 0e03 	eor.w	lr, lr, r3

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     67e:	ea8c 3c88 	eor.w	ip, ip, r8, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     682:	ea8e 3e83 	eor.w	lr, lr, r3, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     686:	ea4f 180e 	mov.w	r8, lr, lsl #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     68a:	ea4f 131c 	mov.w	r3, ip, lsr #4
     68e:	f00e 3ef0 	and.w	lr, lr, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     692:	f00c 3c0f 	and.w	ip, ip, #252645135	; 0xf0f0f0f
     696:	f008 38f0 	and.w	r8, r8, #4042322160	; 0xf0f0f0f0
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     69a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
     69e:	ea43 030e 	orr.w	r3, r3, lr
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     6a2:	ea48 0e0c 	orr.w	lr, r8, ip
  x = t;

  B[7] = y; y >>= 8;
     6a6:	f802 ec09 	strb.w	lr, [r2, #-9]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     6aa:	ea4f 2c13 	mov.w	ip, r3, lsr #8
     6ae:	f802 3c0d 	strb.w	r3, [r2, #-13]
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     6b2:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
  B[6] = y; y >>= 8;
     6b6:	ea4f 491e 	mov.w	r9, lr, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     6ba:	ea4f 681e 	mov.w	r8, lr, lsr #24

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     6be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     6c2:	0e1b      	lsrs	r3, r3, #24
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     6c4:	f802 ac0a 	strb.w	sl, [r2, #-10]
  B[5] = y; y >>= 8;
     6c8:	f802 9c0b 	strb.w	r9, [r2, #-11]
  B[4] = y;
     6cc:	f802 8c0c 	strb.w	r8, [r2, #-12]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     6d0:	f802 cc0e 	strb.w	ip, [r2, #-14]
  B[1] = x; x >>= 8;
     6d4:	f802 ec0f 	strb.w	lr, [r2, #-15]
  B[0] = x; /* */
     6d8:	f802 3c10 	strb.w	r3, [r2, #-16]
     6dc:	f894 c014 	ldrb.w	ip, [r4, #20]
     6e0:	f8d4 e000 	ldr.w	lr, [r4]
     6e4:	f10c 0c01 	add.w	ip, ip, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     6e8:	f851 3f04 	ldr.w	r3, [r1, #4]!
     6ec:	4473      	add	r3, lr
     6ee:	789b      	ldrb	r3, [r3, #2]

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     6f0:	b143      	cbz	r3, 704 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x200>
     6f2:	f894 800e 	ldrb.w	r8, [r4, #14]
     6f6:	fa83 f358 	uqadd8	r3, r3, r8
     6fa:	b2db      	uxtb	r3, r3
     6fc:	fb0c f303 	mul.w	r3, ip, r3
     700:	f3c3 2307 	ubfx	r3, r3, #8, #8
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      for(int i = 0; i < 8; i++) { b.bytes[i] = pixels.loadAndScale2(i); }
     704:	4288      	cmp	r0, r1
     706:	f806 3f01 	strb.w	r3, [r6, #1]!
     70a:	d1ed      	bne.n	6e8 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x1e4>
/// Simplified form of bits rotating function.  Based on code  found here - http://www.hackersdelight.org/hdcodetxt/transpose8.c.txt
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {
  uint32_t x, y, t;

  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
     70c:	9b02      	ldr	r3, [sp, #8]
  x = *(unsigned int*)(A+4);
     70e:	9e03      	ldr	r6, [sp, #12]
  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     710:	ea83 11d3 	eor.w	r1, r3, r3, lsr #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     714:	ea86 1ed6 	eor.w	lr, r6, r6, lsr #7
     718:	f00e 1eaa 	and.w	lr, lr, #11141290	; 0xaa00aa
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     71c:	f001 11aa 	and.w	r1, r1, #11141290	; 0xaa00aa
     720:	404b      	eors	r3, r1
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     722:	ea86 060e 	eor.w	r6, r6, lr
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
     726:	ea83 11c1 	eor.w	r1, r3, r1, lsl #7
  // Load the array and pack it into x and y.
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
     72a:	ea86 16ce 	eor.w	r6, r6, lr, lsl #7
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     72e:	f64c 43cc 	movw	r3, #52428	; 0xcccc
     732:	ea81 3891 	eor.w	r8, r1, r1, lsr #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     736:	ea86 3c96 	eor.w	ip, r6, r6, lsr #14
     73a:	469e      	mov	lr, r3
     73c:	ea0c 0e0e 	and.w	lr, ip, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     740:	ea08 0303 	and.w	r3, r8, r3
     744:	4059      	eors	r1, r3
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     746:	ea86 060e 	eor.w	r6, r6, lr

  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);
     74a:	ea81 3183 	eor.w	r1, r1, r3, lsl #14
  y = *(unsigned int*)(A);
  x = *(unsigned int*)(A+4);

  // pre-transform x
  t = (x ^ (x >> 7)) & 0x00AA00AA;  x = x ^ t ^ (t << 7);
  t = (x ^ (x >>14)) & 0x0000CCCC;  x = x ^ t ^ (t <<14);
     74e:	ea86 368e 	eor.w	r6, r6, lr, lsl #14
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     752:	0133      	lsls	r3, r6, #4
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     754:	ea4f 1e11 	mov.w	lr, r1, lsr #4
     758:	f00e 3e0f 	and.w	lr, lr, #252645135	; 0xf0f0f0f
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     75c:	f001 310f 	and.w	r1, r1, #252645135	; 0xf0f0f0f
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     760:	f006 36f0 	and.w	r6, r6, #4042322160	; 0xf0f0f0f0
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
     764:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
     768:	430b      	orrs	r3, r1
  // pre-transform y
  t = (y ^ (y >> 7)) & 0x00AA00AA;  y = y ^ t ^ (t << 7);
  t = (y ^ (y >>14)) & 0x0000CCCC;  y = y ^ t ^ (t <<14);

  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
     76a:	ea4e 0606 	orr.w	r6, lr, r6
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     76e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
  B[6] = y; y >>= 8;
     772:	ea4f 4913 	mov.w	r9, r3, lsr #16
  B[5] = y; y >>= 8;
  B[4] = y;
     776:	ea4f 6813 	mov.w	r8, r3, lsr #24

  B[3] = x; x >>= 8;
     77a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
  B[2] = x; x >>= 8;
     77e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  B[1] = x; x >>= 8;
  B[0] = x; /* */
     782:	0e31      	lsrs	r1, r6, #24
  // final transform
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
     784:	f802 3c01 	strb.w	r3, [r2, #-1]
  B[6] = y; y >>= 8;
  B[5] = y; y >>= 8;
  B[4] = y;

  B[3] = x; x >>= 8;
     788:	f802 6c05 	strb.w	r6, [r2, #-5]
  t = (x & 0xF0F0F0F0) | ((y >> 4) & 0x0F0F0F0F);
  y = ((x << 4) & 0xF0F0F0F0) | (y & 0x0F0F0F0F);
  x = t;

  B[7] = y; y >>= 8;
  B[6] = y; y >>= 8;
     78c:	f802 ac02 	strb.w	sl, [r2, #-2]
  B[5] = y; y >>= 8;
     790:	f802 9c03 	strb.w	r9, [r2, #-3]
  B[4] = y;
     794:	f802 8c04 	strb.w	r8, [r2, #-4]

  B[3] = x; x >>= 8;
  B[2] = x; x >>= 8;
     798:	f802 cc06 	strb.w	ip, [r2, #-6]
  B[1] = x; x >>= 8;
     79c:	f802 ec07 	strb.w	lr, [r2, #-7]
  B[0] = x; /* */
     7a0:	f802 1c08 	strb.w	r1, [r2, #-8]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7a4:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     7a6:	f894 c00c 	ldrb.w	ip, [r4, #12]
                d[1] = e[1] - d[1];
     7aa:	f894 e00d 	ldrb.w	lr, [r4, #13]
                d[2] = e[2] - d[2];
     7ae:	f894 900e 	ldrb.w	r9, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7b2:	6826      	ldr	r6, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     7b4:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
     7b8:	f894 a010 	ldrb.w	sl, [r4, #16]
                d[2] = e[2] - d[2];
     7bc:	7c61      	ldrb	r1, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7be:	f994 8015 	ldrsb.w	r8, [r4, #21]
     7c2:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     7c4:	ebcc 0c0b 	rsb	ip, ip, fp
                d[1] = e[1] - d[1];
     7c8:	ebce 0e0a 	rsb	lr, lr, sl
                d[2] = e[2] - d[2];
     7cc:	ebc9 0101 	rsb	r1, r9, r1

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7d0:	44b0      	add	r8, r6

  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
    _init(pixels.size());

    uint8_t *pData = drawbuffer;
    while(pixels.has(1)) {
     7d2:	2b00      	cmp	r3, #0
     7d4:	f102 0218 	add.w	r2, r2, #24

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     7d8:	f884 c00c 	strb.w	ip, [r4, #12]
                d[1] = e[1] - d[1];
     7dc:	f884 e00d 	strb.w	lr, [r4, #13]
                d[2] = e[2] - d[2];
     7e0:	73a1      	strb	r1, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     7e2:	f8c4 8000 	str.w	r8, [r4]
     7e6:	60a3      	str	r3, [r4, #8]
     7e8:	f73f aea0 	bgt.w	52c <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x28>
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      pixels.stepDithering();
      pixels.advanceData();
    }

    pocto->show();
     7ec:	69a8      	ldr	r0, [r5, #24]
  }
     7ee:	b005      	add	sp, #20
     7f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      transpose8x1_MSB(b.bytes,pData); pData += 8;
      pixels.stepDithering();
      pixels.advanceData();
    }

    pocto->show();
     7f4:	f001 ba36 	b.w	1c64 <OctoWS2811::show()>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
            }
        }

        __attribute__((always_inline)) inline int size() { return mLen; }
     7f8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  OctoWS2811  *pocto;
  uint8_t *drawbuffer,*framebuffer;

  void _init(int nLeds) {
    if(pocto == NULL) {
      drawbuffer = (uint8_t*)malloc(nLeds * 8 * 3);
     7fc:	eb08 0748 	add.w	r7, r8, r8, lsl #1
     800:	00ff      	lsls	r7, r7, #3
     802:	4638      	mov	r0, r7
     804:	f006 ffa4 	bl	7750 <malloc>
     808:	61e8      	str	r0, [r5, #28]
      framebuffer = (uint8_t*)malloc(nLeds * 8 * 3);
     80a:	4638      	mov	r0, r7
     80c:	f006 ffa0 	bl	7750 <malloc>
     810:	6228      	str	r0, [r5, #32]

      // byte ordering is handled in show by the pixel controller
      int config = WS2811_RGB;
      config |= CHIP;

      pocto = new OctoWS2811(nLeds, framebuffer, drawbuffer, config);
     812:	2001      	movs	r0, #1
     814:	f005 fdc4 	bl	63a0 <operator new(unsigned int)>
     818:	69eb      	ldr	r3, [r5, #28]
     81a:	6a2a      	ldr	r2, [r5, #32]
     81c:	9600      	str	r6, [sp, #0]
     81e:	4607      	mov	r7, r0
     820:	4641      	mov	r1, r8
     822:	f001 f89b 	bl	195c <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)>
     826:	61af      	str	r7, [r5, #24]

      pocto->begin();
     828:	4638      	mov	r0, r7
     82a:	f001 f8ad 	bl	1988 <OctoWS2811::begin()>
     82e:	e672      	b.n	516 <COctoWS2811Controller<(EOrder)66, (unsigned char)0>::showPixels(PixelController<(EOrder)66, 8, 255ul>&)+0x12>

00000830 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.8] [clone .constprop.56]>:
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
     830:	b538      	push	{r3, r4, r5, lr}
		{
			if (!m_isDebug) return;

			serial.print(msg);
     832:	4c09      	ldr	r4, [pc, #36]	; (858 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.8] [clone .constprop.56]+0x28>)
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
     834:	460d      	mov	r5, r1
		{
			if (!m_isDebug) return;

			serial.print(msg);
     836:	4601      	mov	r1, r0
     838:	4620      	mov	r0, r4
     83a:	f005 fdb3 	bl	63a4 <Print::print(String const&)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     83e:	2102      	movs	r1, #2
     840:	4806      	ldr	r0, [pc, #24]	; (85c <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.8] [clone .constprop.56]+0x2c>)
     842:	f005 faaf 	bl	5da4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     846:	4629      	mov	r1, r5
     848:	4620      	mov	r0, r4
     84a:	f005 fe21 	bl	6490 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     84e:	4620      	mov	r0, r4
			serial.print(": ");
			serial.println(value);
		}
     850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     854:	f005 bdcc 	b.w	63f0 <Print::println()>
     858:	1fff873c 	.word	0x1fff873c
     85c:	00008c74 	.word	0x00008c74

00000860 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     860:	b5f0      	push	{r4, r5, r6, r7, lr}
     862:	b091      	sub	sp, #68	; 0x44
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     864:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     866:	6805      	ldr	r5, [r0, #0]
     868:	f88d 3000 	strb.w	r3, [sp]
     86c:	f88d 3001 	strb.w	r3, [sp, #1]
     870:	f88d 3002 	strb.w	r3, [sp, #2]
     874:	682e      	ldr	r6, [r5, #0]
     876:	4a3a      	ldr	r2, [pc, #232]	; (960 <CLEDController::clearLeds(int)+0x100>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     878:	f88d 3004 	strb.w	r3, [sp, #4]
     87c:	4296      	cmp	r6, r2
     87e:	f88d 3005 	strb.w	r3, [sp, #5]
     882:	f88d 3006 	strb.w	r3, [sp, #6]
     886:	d164      	bne.n	952 <CLEDController::clearLeds(int)+0xf2>
     888:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     88a:	9103      	str	r1, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     88c:	2a01      	cmp	r2, #1
     88e:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     890:	9104      	str	r1, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     892:	f88d 301a 	strb.w	r3, [sp, #26]
        g = rhs.g;
     896:	f88d 301b 	strb.w	r3, [sp, #27]
        b = rhs.b;
     89a:	f88d 301c 	strb.w	r3, [sp, #28]
     89e:	f8cd d008 	str.w	sp, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8a2:	d01a      	beq.n	8da <CLEDController::clearLeds(int)+0x7a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     8a4:	f88d 3019 	strb.w	r3, [sp, #25]
     8a8:	f88d 3018 	strb.w	r3, [sp, #24]
     8ac:	f88d 3017 	strb.w	r3, [sp, #23]
     8b0:	f88d 3016 	strb.w	r3, [sp, #22]
     8b4:	f88d 3015 	strb.w	r3, [sp, #21]
     8b8:	f88d 3014 	strb.w	r3, [sp, #20]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     8bc:	2200      	movs	r2, #0
     8be:	f88d 201d 	strb.w	r2, [sp, #29]
     8c2:	ab07      	add	r3, sp, #28
     8c4:	a90f      	add	r1, sp, #60	; 0x3c
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     8c6:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     8ca:	4299      	cmp	r1, r3
     8cc:	d1fb      	bne.n	8c6 <CLEDController::clearLeds(int)+0x66>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8ce:	69ab      	ldr	r3, [r5, #24]
     8d0:	4620      	mov	r0, r4
     8d2:	a902      	add	r1, sp, #8
     8d4:	4798      	blx	r3

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     8d6:	b011      	add	sp, #68	; 0x44
     8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     8da:	4a22      	ldr	r2, [pc, #136]	; (964 <CLEDController::clearLeds(int)+0x104>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     8dc:	7813      	ldrb	r3, [r2, #0]
     8de:	3301      	adds	r3, #1
     8e0:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     8e4:	f013 0f01 	tst.w	r3, #1
     8e8:	bf14      	ite	ne
     8ea:	2180      	movne	r1, #128	; 0x80
     8ec:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     8ee:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     8f0:	079a      	lsls	r2, r3, #30
     8f2:	bf44      	itt	mi
     8f4:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     8f8:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     8fa:	075b      	lsls	r3, r3, #29
     8fc:	bf48      	it	mi
     8fe:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     902:	3110      	adds	r1, #16
     904:	2200      	movs	r2, #0
     906:	b2c9      	uxtb	r1, r1
     908:	f10d 0317 	add.w	r3, sp, #23
     90c:	f10d 071a 	add.w	r7, sp, #26
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     910:	f44f 7e80 	mov.w	lr, #256	; 0x100
     914:	b1aa      	cbz	r2, 942 <CLEDController::clearLeds(int)+0xe2>
     916:	fb9e f2f2 	sdiv	r2, lr, r2
     91a:	b2d2      	uxtb	r2, r2
     91c:	1c50      	adds	r0, r2, #1
     91e:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     920:	fb00 1501 	mla	r5, r0, r1, r1
     924:	122d      	asrs	r5, r5, #8
     926:	7018      	strb	r0, [r3, #0]
     928:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     92a:	b105      	cbz	r5, 92e <CLEDController::clearLeds(int)+0xce>
     92c:	3e01      	subs	r6, #1
     92e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     932:	b100      	cbz	r0, 936 <CLEDController::clearLeds(int)+0xd6>
     934:	701a      	strb	r2, [r3, #0]
     936:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     938:	429f      	cmp	r7, r3
     93a:	d008      	beq.n	94e <CLEDController::clearLeds(int)+0xee>
     93c:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     93e:	2a00      	cmp	r2, #0
     940:	d1e9      	bne.n	916 <CLEDController::clearLeds(int)+0xb6>
     942:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     944:	f803 2c03 	strb.w	r2, [r3, #-3]
     948:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     94a:	429f      	cmp	r7, r3
     94c:	d1f6      	bne.n	93c <CLEDController::clearLeds(int)+0xdc>
     94e:	6825      	ldr	r5, [r4, #0]
     950:	e7b4      	b.n	8bc <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     952:	460a      	mov	r2, r1
     954:	ab01      	add	r3, sp, #4
     956:	4669      	mov	r1, sp
     958:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     95a:	b011      	add	sp, #68	; 0x44
     95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     95e:	bf00      	nop
     960:	00000969 	.word	0x00000969
     964:	1fff91bc 	.word	0x1fff91bc

00000968 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     968:	b5f0      	push	{r4, r5, r6, r7, lr}
     96a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     96c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     96e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     970:	789b      	ldrb	r3, [r3, #2]
     972:	b08f      	sub	sp, #60	; 0x3c
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     974:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     976:	e88d 0006 	stmia.w	sp, {r1, r2}
     97a:	9202      	str	r2, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     97c:	f88d 4012 	strb.w	r4, [sp, #18]
        g = rhs.g;
     980:	f88d 6013 	strb.w	r6, [sp, #19]
        b = rhs.b;
     984:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     988:	d01b      	beq.n	9c2 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x5a>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     98a:	2300      	movs	r3, #0
     98c:	f88d 3011 	strb.w	r3, [sp, #17]
     990:	f88d 3010 	strb.w	r3, [sp, #16]
     994:	f88d 300f 	strb.w	r3, [sp, #15]
     998:	f88d 300e 	strb.w	r3, [sp, #14]
     99c:	f88d 300d 	strb.w	r3, [sp, #13]
     9a0:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     9a4:	2200      	movs	r2, #0
     9a6:	f88d 2015 	strb.w	r2, [sp, #21]
     9aa:	ab05      	add	r3, sp, #20
     9ac:	a90d      	add	r1, sp, #52	; 0x34
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     9ae:	f843 2f04 	str.w	r2, [r3, #4]!

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     9b2:	428b      	cmp	r3, r1
     9b4:	d1fb      	bne.n	9ae <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x46>
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     9b6:	6803      	ldr	r3, [r0, #0]
     9b8:	4669      	mov	r1, sp
     9ba:	699b      	ldr	r3, [r3, #24]
     9bc:	4798      	blx	r3
  }
     9be:	b00f      	add	sp, #60	; 0x3c
     9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     9c2:	4a1b      	ldr	r2, [pc, #108]	; (a30 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     9c4:	7813      	ldrb	r3, [r2, #0]
     9c6:	3301      	adds	r3, #1
     9c8:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     9cc:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     9d0:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     9d2:	bf14      	ite	ne
     9d4:	2280      	movne	r2, #128	; 0x80
     9d6:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     9d8:	0799      	lsls	r1, r3, #30
     9da:	bf44      	itt	mi
     9dc:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     9e0:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     9e2:	075b      	lsls	r3, r3, #29
     9e4:	bf48      	it	mi
     9e6:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     9ea:	3210      	adds	r2, #16
     9ec:	b2d2      	uxtb	r2, r2
     9ee:	f10d 030f 	add.w	r3, sp, #15
     9f2:	f10d 0712 	add.w	r7, sp, #18
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     9f6:	f44f 7e80 	mov.w	lr, #256	; 0x100
     9fa:	b1ac      	cbz	r4, a28 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xc0>
     9fc:	fb9e f4f4 	sdiv	r4, lr, r4
     a00:	b2e4      	uxtb	r4, r4
     a02:	1c61      	adds	r1, r4, #1
     a04:	b2c9      	uxtb	r1, r1
     a06:	fb01 2502 	mla	r5, r1, r2, r2
     a0a:	122d      	asrs	r5, r5, #8
     a0c:	7019      	strb	r1, [r3, #0]
     a0e:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     a10:	b105      	cbz	r5, a14 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xac>
     a12:	3e01      	subs	r6, #1
     a14:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     a18:	b101      	cbz	r1, a1c <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb4>
     a1a:	701c      	strb	r4, [r3, #0]
     a1c:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     a1e:	429f      	cmp	r7, r3
     a20:	d0c0      	beq.n	9a4 <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     a22:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a24:	2c00      	cmp	r4, #0
     a26:	d1e9      	bne.n	9fc <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x94>
     a28:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     a2a:	f803 4c03 	strb.w	r4, [r3, #-3]
     a2e:	e7f5      	b.n	a1c <CPixelLEDController<(EOrder)66, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb4>
     a30:	1fff91bc 	.word	0x1fff91bc

00000a34 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     a34:	b5f0      	push	{r4, r5, r6, r7, lr}
     a36:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a38:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     a3a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     a3c:	789b      	ldrb	r3, [r3, #2]
     a3e:	b08f      	sub	sp, #60	; 0x3c
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     a40:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     a42:	e88d 0006 	stmia.w	sp, {r1, r2}
     a46:	9202      	str	r2, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a48:	f88d 4012 	strb.w	r4, [sp, #18]
        g = rhs.g;
     a4c:	f88d 6013 	strb.w	r6, [sp, #19]
        b = rhs.b;
     a50:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     a54:	d020      	beq.n	a98 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x64>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     a56:	2300      	movs	r3, #0
     a58:	f88d 3011 	strb.w	r3, [sp, #17]
     a5c:	f88d 3010 	strb.w	r3, [sp, #16]
     a60:	f88d 300f 	strb.w	r3, [sp, #15]
     a64:	f88d 300e 	strb.w	r3, [sp, #14]
     a68:	f88d 300d 	strb.w	r3, [sp, #13]
     a6c:	f88d 300c 	strb.w	r3, [sp, #12]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     a70:	2103      	movs	r1, #3
            for(int i = 0; i < LANES; i++) { mOffsets[i] = other.mOffsets[i]; }

        }

        void initOffsets(int len) {
          int nOffset = 0;
     a72:	2300      	movs	r3, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     a74:	f88d 1015 	strb.w	r1, [sp, #21]
     a78:	eb02 0242 	add.w	r2, r2, r2, lsl #1

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     a7c:	4619      	mov	r1, r3
     a7e:	ac05      	add	r4, sp, #20
     a80:	3101      	adds	r1, #1
     a82:	2908      	cmp	r1, #8
            mOffsets[i] = nOffset;
     a84:	f844 3f04 	str.w	r3, [r4, #4]!
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     a88:	4413      	add	r3, r2

        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
     a8a:	d1f9      	bne.n	a80 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x4c>
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     a8c:	6803      	ldr	r3, [r0, #0]
     a8e:	4669      	mov	r1, sp
     a90:	699b      	ldr	r3, [r3, #24]
     a92:	4798      	blx	r3
  }
     a94:	b00f      	add	sp, #60	; 0x3c
     a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     a98:	491b      	ldr	r1, [pc, #108]	; (b08 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xd4>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a9a:	780b      	ldrb	r3, [r1, #0]
     a9c:	3301      	adds	r3, #1
     a9e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     aa2:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     aa6:	700b      	strb	r3, [r1, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     aa8:	bf14      	ite	ne
     aaa:	2180      	movne	r1, #128	; 0x80
     aac:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     aae:	079d      	lsls	r5, r3, #30
     ab0:	bf44      	itt	mi
     ab2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     ab6:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     ab8:	075b      	lsls	r3, r3, #29
     aba:	bf48      	it	mi
     abc:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     ac0:	3110      	adds	r1, #16
     ac2:	b2c9      	uxtb	r1, r1
     ac4:	f10d 030f 	add.w	r3, sp, #15
     ac8:	f10d 0e12 	add.w	lr, sp, #18
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     acc:	f44f 7c80 	mov.w	ip, #256	; 0x100
     ad0:	b1ac      	cbz	r4, afe <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xca>
     ad2:	fb9c f4f4 	sdiv	r4, ip, r4
     ad6:	b2e4      	uxtb	r4, r4
     ad8:	1c65      	adds	r5, r4, #1
     ada:	b2ed      	uxtb	r5, r5
     adc:	fb05 1601 	mla	r6, r5, r1, r1
     ae0:	1236      	asrs	r6, r6, #8
     ae2:	701d      	strb	r5, [r3, #0]
     ae4:	b2f7      	uxtb	r7, r6
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     ae6:	b106      	cbz	r6, aea <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xb6>
     ae8:	3f01      	subs	r7, #1
     aea:	f803 7c03 	strb.w	r7, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     aee:	b105      	cbz	r5, af2 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xbe>
     af0:	701c      	strb	r4, [r3, #0]
     af2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     af4:	4573      	cmp	r3, lr
     af6:	d0bb      	beq.n	a70 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x3c>
     af8:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     afa:	2c00      	cmp	r4, #0
     afc:	d1e9      	bne.n	ad2 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0x9e>
     afe:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     b00:	f803 4c03 	strb.w	r4, [r3, #-3]
     b04:	e7f5      	b.n	af2 <CPixelLEDController<(EOrder)66, 8, 255ul>::show(CRGB const*, int, CRGB)+0xbe>
     b06:	bf00      	nop
     b08:	1fff91bc 	.word	0x1fff91bc

00000b0c <Print::println(String const&)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     b0c:	b538      	push	{r3, r4, r5, lr}
     b0e:	4605      	mov	r5, r0
     b10:	f005 fc48 	bl	63a4 <Print::print(String const&)>
     b14:	4604      	mov	r4, r0
     b16:	4628      	mov	r0, r5
     b18:	f005 fc6a 	bl	63f0 <Print::println()>
     b1c:	4420      	add	r0, r4
     b1e:	bd38      	pop	{r3, r4, r5, pc}

00000b20 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.7] [clone .constprop.57]>:
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
     b20:	b538      	push	{r3, r4, r5, lr}
		{
			if (!m_isDebug) return;

			serial.print(msg);
     b22:	4c0a      	ldr	r4, [pc, #40]	; (b4c <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.7] [clone .constprop.57]+0x2c>)
			serial.print(msg);
			serial.print(": ");
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
     b24:	460d      	mov	r5, r1
		{
			if (!m_isDebug) return;

			serial.print(msg);
     b26:	4601      	mov	r1, r0
     b28:	4620      	mov	r0, r4
     b2a:	f005 fc3b 	bl	63a4 <Print::print(String const&)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     b2e:	4620      	mov	r0, r4
     b30:	2202      	movs	r2, #2
     b32:	4907      	ldr	r1, [pc, #28]	; (b50 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.7] [clone .constprop.57]+0x30>)
     b34:	f005 fcc0 	bl	64b8 <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     b38:	4629      	mov	r1, r5
     b3a:	4620      	mov	r0, r4
     b3c:	f005 fca8 	bl	6490 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     b40:	4620      	mov	r0, r4
			serial.print(": ");
			serial.println(value);
		}
     b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     b46:	f005 bc53 	b.w	63f0 <Print::println()>
     b4a:	bf00      	nop
     b4c:	1fff873c 	.word	0x1fff873c
     b50:	00008c74 	.word	0x00008c74

00000b54 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>:
			String m_inputString;
			boolean m_inputStringComplete; // whether the String is complete

#pragma region INPUTS

			int GetAnalogValue(int currVal)
     b54:	b570      	push	{r4, r5, r6, lr}
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     b56:	1d05      	adds	r5, r0, #4
			String m_inputString;
			boolean m_inputStringComplete; // whether the String is complete

#pragma region INPUTS

			int GetAnalogValue(int currVal)
     b58:	b088      	sub	sp, #32
     b5a:	460e      	mov	r6, r1
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     b5c:	4628      	mov	r0, r5
     b5e:	491b      	ldr	r1, [pc, #108]	; (bcc <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x78>)
     b60:	f005 fe0c 	bl	677c <String::equals(char const*) const>
     b64:	b110      	cbz	r0, b6c <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x18>
				{
					val = GetSerialValue(m_inputString, currVal);
				}

				return val;
			}
     b66:	4630      	mov	r0, r6
     b68:	b008      	add	sp, #32
     b6a:	bd70      	pop	{r4, r5, r6, pc}
     b6c:	4604      	mov	r4, r0
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     b6e:	4629      	mov	r1, r5
     b70:	4668      	mov	r0, sp
     b72:	f005 fd4d 	bl	6610 <String::String(String const&)>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     b76:	4621      	mov	r1, r4
     b78:	4668      	mov	r0, sp
     b7a:	f005 fe15 	bl	67a8 <String::operator[](unsigned int)>
     b7e:	7803      	ldrb	r3, [r0, #0]
     b80:	2b23      	cmp	r3, #35	; 0x23
     b82:	d005      	beq.n	b90 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x3c>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     b84:	4668      	mov	r0, sp
     b86:	f005 fcdd 	bl	6544 <String::~String()>
				}

				return val;
			}
     b8a:	4630      	mov	r0, r6
     b8c:	b008      	add	sp, #32
     b8e:	bd70      	pop	{r4, r5, r6, pc}
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     b90:	9b02      	ldr	r3, [sp, #8]
     b92:	2b09      	cmp	r3, #9
     b94:	d9f6      	bls.n	b84 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>
				{
					String valString = inputString.substring(5, 9);
     b96:	a804      	add	r0, sp, #16
     b98:	2309      	movs	r3, #9
     b9a:	2205      	movs	r2, #5
     b9c:	4669      	mov	r1, sp
     b9e:	f005 fe2b 	bl	67f8 <String::substring(unsigned int, unsigned int) const>
					int val = valString.toInt();
     ba2:	a804      	add	r0, sp, #16
     ba4:	f005 fe4c 	bl	6840 <String::toInt() const>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     ba8:	4604      	mov	r4, r0
     baa:	b120      	cbz	r0, bb6 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x62>
					{
						return val;
     bac:	a804      	add	r0, sp, #16
     bae:	f005 fcc9 	bl	6544 <String::~String()>
			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
					int val = valString.toInt();
     bb2:	4626      	mov	r6, r4
     bb4:	e7e6      	b.n	b84 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     bb6:	4906      	ldr	r1, [pc, #24]	; (bd0 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x7c>)
     bb8:	a804      	add	r0, sp, #16
     bba:	f005 fddf 	bl	677c <String::equals(char const*) const>
     bbe:	2800      	cmp	r0, #0
     bc0:	d1f4      	bne.n	bac <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x58>

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
     bc2:	a804      	add	r0, sp, #16
     bc4:	f005 fcbe 	bl	6544 <String::~String()>
     bc8:	e7dc      	b.n	b84 <Meltdown::CMeltdownSerial::GetAnalogValue(int)+0x30>
     bca:	bf00      	nop
     bcc:	00008e5c 	.word	0x00008e5c
     bd0:	00008c78 	.word	0x00008c78

00000bd4 <Meltdown::CMeltdownSerial::GetValue()>:
					return m_inputString.substring(1, 5);
				}
				return "";
			}

			int GetValue()
     bd4:	b530      	push	{r4, r5, lr}
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     bd6:	1d04      	adds	r4, r0, #4
					return m_inputString.substring(1, 5);
				}
				return "";
			}

			int GetValue()
     bd8:	b085      	sub	sp, #20
     bda:	4605      	mov	r5, r0
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     bdc:	2100      	movs	r1, #0
     bde:	4620      	mov	r0, r4
     be0:	f005 fde2 	bl	67a8 <String::operator[](unsigned int)>
     be4:	7803      	ldrb	r3, [r0, #0]
     be6:	2b23      	cmp	r3, #35	; 0x23
     be8:	d003      	beq.n	bf2 <Meltdown::CMeltdownSerial::GetValue()+0x1e>
				return "";
			}

			int GetValue()
			{
				int val = 0;
     bea:	2400      	movs	r4, #0
				{
					String valString = m_inputString.substring(5, 9);
					val = valString.toInt();
				}
				return val;
			}
     bec:	4620      	mov	r0, r4
     bee:	b005      	add	sp, #20
     bf0:	bd30      	pop	{r4, r5, pc}
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     bf2:	68eb      	ldr	r3, [r5, #12]
     bf4:	2b09      	cmp	r3, #9
     bf6:	d9f8      	bls.n	bea <Meltdown::CMeltdownSerial::GetValue()+0x16>
				{
					String valString = m_inputString.substring(5, 9);
     bf8:	4621      	mov	r1, r4
     bfa:	2309      	movs	r3, #9
     bfc:	2205      	movs	r2, #5
     bfe:	4668      	mov	r0, sp
     c00:	f005 fdfa 	bl	67f8 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
     c04:	4668      	mov	r0, sp
     c06:	f005 fe1b 	bl	6840 <String::toInt() const>
     c0a:	4604      	mov	r4, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
     c0c:	4668      	mov	r0, sp
     c0e:	f005 fc99 	bl	6544 <String::~String()>
					val = valString.toInt();
				}
				return val;
			}
     c12:	4620      	mov	r0, r4
     c14:	b005      	add	sp, #20
     c16:	bd30      	pop	{r4, r5, pc}

00000c18 <Meltdown::setIndexesForAll()>:
	}

	void setIndexesForAll()
	{
		if (gSelectedIndexes != INDEXES_ALL)
		{
     c18:	b510      	push	{r4, lr}
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
     c1a:	490a      	ldr	r1, [pc, #40]	; (c44 <Meltdown::setIndexesForAll()+0x2c>)
     c1c:	480a      	ldr	r0, [pc, #40]	; (c48 <Meltdown::setIndexesForAll()+0x30>)
     c1e:	f005 fd9f 	bl	6760 <String::equals(String const&) const>
			gSelectedIndexes = INDEXES_ALL;
     c22:	b100      	cbz	r0, c26 <Meltdown::setIndexesForAll()+0xe>
     c24:	bd10      	pop	{r4, pc}
     c26:	4604      	mov	r4, r0

			for (int i = 0; i < NUM_LEDS; i++)
     c28:	4906      	ldr	r1, [pc, #24]	; (c44 <Meltdown::setIndexesForAll()+0x2c>)
     c2a:	4807      	ldr	r0, [pc, #28]	; (c48 <Meltdown::setIndexesForAll()+0x30>)
     c2c:	f005 fd0e 	bl	664c <String::operator=(String const&)>
     c30:	4b06      	ldr	r3, [pc, #24]	; (c4c <Meltdown::setIndexesForAll()+0x34>)
			{
				ledIndexes[i] = i;
     c32:	4620      	mov	r0, r4
			}
		}
     c34:	f823 0f02 	strh.w	r0, [r3, #2]!
		{
			gSelectedIndexes = INDEXES_ALL;

			for (int i = 0; i < NUM_LEDS; i++)
			{
				ledIndexes[i] = i;
     c38:	3001      	adds	r0, #1
     c3a:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
     c3e:	d1f9      	bne.n	c34 <Meltdown::setIndexesForAll()+0x1c>
     c40:	bd10      	pop	{r4, pc}
     c42:	bf00      	nop
     c44:	1fff91e8 	.word	0x1fff91e8
     c48:	1fff91f8 	.word	0x1fff91f8
     c4c:	1fff922a 	.word	0x1fff922a

00000c50 <Meltdown::tryExecuteCommand() [clone .part.50]>:
		MeltdownLED.Sunrise(leds, ledIndexes, NUM_LEDS);
	}

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
     c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
     c54:	4db0      	ldr	r5, [pc, #704]	; (f18 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2c8>)
     c56:	2300      	movs	r3, #0

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     c58:	4619      	mov	r1, r3

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
     c5a:	752b      	strb	r3, [r5, #20]
     c5c:	b08d      	sub	sp, #52	; 0x34

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     c5e:	1d28      	adds	r0, r5, #4
     c60:	f005 fda2 	bl	67a8 <String::operator[](unsigned int)>
     c64:	7803      	ldrb	r3, [r0, #0]
     c66:	2b23      	cmp	r3, #35	; 0x23
     c68:	d071      	beq.n	d4e <Meltdown::tryExecuteCommand() [clone .part.50]+0xfe>
				{
					return m_inputString.substring(1, 5);
				}
				return "";
     c6a:	4668      	mov	r0, sp
     c6c:	49ab      	ldr	r1, [pc, #684]	; (f1c <Meltdown::tryExecuteCommand() [clone .part.50]+0x2cc>)
     c6e:	466c      	mov	r4, sp
     c70:	f005 fca8 	bl	65c4 <String::String(char const*)>
			MeltdownSerial.SetInputStringComplete(false);

			String command = MeltdownSerial.GetCommand();
			if (!command.equals(""))
			{
				if (command.equals(MeltdownSerial.BRIGHTNESS))
     c74:	49a9      	ldr	r1, [pc, #676]	; (f1c <Meltdown::tryExecuteCommand() [clone .part.50]+0x2cc>)
     c76:	4620      	mov	r0, r4
     c78:	f005 fd80 	bl	677c <String::equals(char const*) const>
     c7c:	b990      	cbnz	r0, ca4 <Meltdown::tryExecuteCommand() [clone .part.50]+0x54>
				{
					MeltdownLED.SetBrightness(-1);
     c7e:	49a8      	ldr	r1, [pc, #672]	; (f20 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d0>)
     c80:	4620      	mov	r0, r4
     c82:	f005 fd6d 	bl	6760 <String::equals(String const&) const>
     c86:	b318      	cbz	r0, cd0 <Meltdown::tryExecuteCommand() [clone .part.50]+0x80>

		  // BRIGHTNESS //

		  int SetBrightness(int pin)
		  {
			  gBrightness = MeltdownSerial.GetAnalogValue(pin, gBrightness);
     c88:	4da6      	ldr	r5, [pc, #664]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)

			int GetAnalogValue(int currVal)
			{
				int val = currVal;

				if (!m_inputString.equals(""))
     c8a:	49a4      	ldr	r1, [pc, #656]	; (f1c <Meltdown::tryExecuteCommand() [clone .part.50]+0x2cc>)
     c8c:	48a6      	ldr	r0, [pc, #664]	; (f28 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d8>)
     c8e:	68ef      	ldr	r7, [r5, #12]
     c90:	f005 fd74 	bl	677c <String::equals(char const*) const>
     c94:	4606      	mov	r6, r0
     c96:	2800      	cmp	r0, #0
     c98:	f000 8084 	beq.w	da4 <Meltdown::tryExecuteCommand() [clone .part.50]+0x154>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     c9c:	4ba3      	ldr	r3, [pc, #652]	; (f2c <Meltdown::tryExecuteCommand() [clone .part.50]+0x2dc>)
     c9e:	60ef      	str	r7, [r5, #12]
     ca0:	701f      	strb	r7, [r3, #0]
     ca2:	e00b      	b.n	cbc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6c>
			}
			else
			{
				MeltdownLogger.Debug(Serial, F("Something went wrong reading serial, command was blank."));
			}

     ca4:	ae08      	add	r6, sp, #32
     ca6:	4630      	mov	r0, r6
     ca8:	49a1      	ldr	r1, [pc, #644]	; (f30 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2e0>)
     caa:	f005 fc9f 	bl	65ec <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
     cae:	4ba1      	ldr	r3, [pc, #644]	; (f34 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2e4>)
     cb0:	781b      	ldrb	r3, [r3, #0]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d156      	bne.n	d64 <Meltdown::tryExecuteCommand() [clone .part.50]+0x114>
     cb6:	4630      	mov	r0, r6
     cb8:	f005 fc44 	bl	6544 <String::~String()>
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
			}

			String GetInputString() { return m_inputString; }

			void ClearInputString() { m_inputString = ""; }
     cbc:	4997      	ldr	r1, [pc, #604]	; (f1c <Meltdown::tryExecuteCommand() [clone .part.50]+0x2cc>)
     cbe:	489a      	ldr	r0, [pc, #616]	; (f28 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d8>)
     cc0:	f005 fccc 	bl	665c <String::operator=(char const*)>
		{
			MeltdownSerial.SetInputStringComplete(false);

			String command = MeltdownSerial.GetCommand();
			if (!command.equals(""))
			{
     cc4:	4620      	mov	r0, r4
     cc6:	f005 fc3d 	bl	6544 <String::~String()>

			MeltdownSerial.ClearInputString();
		}
	}

#pragma endregion COMMANDS
     cca:	b00d      	add	sp, #52	; 0x34
     ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				{
					MeltdownLED.SetBrightness(-1);
				}
				else if (command.equals(MeltdownSerial.HUE1))
				{
					bool hueValue = MeltdownLED.ToggleHue(1);
     cd0:	4999      	ldr	r1, [pc, #612]	; (f38 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2e8>)
     cd2:	4620      	mov	r0, r4
     cd4:	f005 fd44 	bl	6760 <String::equals(String const&) const>
     cd8:	2800      	cmp	r0, #0
     cda:	d04b      	beq.n	d74 <Meltdown::tryExecuteCommand() [clone .part.50]+0x124>
		  {
			  bool hueVal = false;
			  switch (index)
			  {
			  case 1:
				  gHue1 = !gHue1;
     cdc:	4d91      	ldr	r5, [pc, #580]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     cde:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     ce2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
     ce6:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
     cea:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     cee:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
		  {
			  bool hueVal = false;
			  switch (index)
			  {
			  case 1:
				  gHue1 = !gHue1;
     cf2:	f087 0701 	eor.w	r7, r7, #1
     cf6:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     cfa:	2b00      	cmp	r3, #0
     cfc:	d063      	beq.n	dc6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x176>
     cfe:	1c7b      	adds	r3, r7, #1
			  if (gHue3) val++;
     d00:	b100      	cbz	r0, d04 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb4>
     d02:	3301      	adds	r3, #1
			  if (gHue4) val++;
     d04:	b101      	cbz	r1, d08 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb8>
     d06:	3301      	adds	r3, #1
			  if (gHue5) val++;
     d08:	b102      	cbz	r2, d0c <Meltdown::tryExecuteCommand() [clone .part.50]+0xbc>
     d0a:	3301      	adds	r3, #1
			  }
		  }

		  void SetHue()
		  {
			  gHue = map(GetToggledHueCount(), 0, 6, 0, 255);
     d0c:	4a8b      	ldr	r2, [pc, #556]	; (f3c <Meltdown::tryExecuteCommand() [clone .part.50]+0x2ec>)
				else if (command.equals(MeltdownSerial.HUE5))
				{
					bool hueValue = MeltdownLED.ToggleHue(5);
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.PAUSE))
     d0e:	498c      	ldr	r1, [pc, #560]	; (f40 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2f0>)
     d10:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
     d14:	fb82 0203 	smull	r0, r2, r2, r3
     d18:	ae08      	add	r6, sp, #32
     d1a:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
     d1e:	4630      	mov	r0, r6
     d20:	612b      	str	r3, [r5, #16]
     d22:	f005 fc63 	bl	65ec <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
		{
			if (!m_isDebug) return;
     d26:	4b83      	ldr	r3, [pc, #524]	; (f34 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2e4>)
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b00      	cmp	r3, #0
     d2c:	d0c3      	beq.n	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>

			serial.print(msg);
     d2e:	4631      	mov	r1, r6
     d30:	4884      	ldr	r0, [pc, #528]	; (f44 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2f4>)
     d32:	f005 fb37 	bl	63a4 <Print::print(String const&)>
     d36:	2102      	movs	r1, #2
     d38:	4883      	ldr	r0, [pc, #524]	; (f48 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2f8>)
     d3a:	f005 f833 	bl	5da4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d3e:	4639      	mov	r1, r7
     d40:	4880      	ldr	r0, [pc, #512]	; (f44 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2f4>)
     d42:	f005 fba5 	bl	6490 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d46:	487f      	ldr	r0, [pc, #508]	; (f44 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2f4>)
     d48:	f005 fb52 	bl	63f0 <Print::println()>
     d4c:	e7b3      	b.n	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }

			String GetCommand()
			{
				if (m_inputString[0] == '#' && m_inputString.length() >= 6)
     d4e:	68eb      	ldr	r3, [r5, #12]
     d50:	2b05      	cmp	r3, #5
     d52:	d98a      	bls.n	c6a <Meltdown::tryExecuteCommand() [clone .part.50]+0x1a>
				{
					return m_inputString.substring(1, 5);
     d54:	4668      	mov	r0, sp
     d56:	2305      	movs	r3, #5
     d58:	2201      	movs	r2, #1
     d5a:	1d29      	adds	r1, r5, #4
     d5c:	466c      	mov	r4, sp
     d5e:	f005 fd4b 	bl	67f8 <String::substring(unsigned int, unsigned int) const>
     d62:	e787      	b.n	c74 <Meltdown::tryExecuteCommand() [clone .part.50]+0x24>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     d64:	4631      	mov	r1, r6
     d66:	4877      	ldr	r0, [pc, #476]	; (f44 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2f4>)
     d68:	f005 fb1c 	bl	63a4 <Print::print(String const&)>
     d6c:	4875      	ldr	r0, [pc, #468]	; (f44 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2f4>)
     d6e:	f005 fb3f 	bl	63f0 <Print::println()>
     d72:	e7a0      	b.n	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
					bool hueValue = MeltdownLED.ToggleHue(1);
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE2))
				{
					bool hueValue = MeltdownLED.ToggleHue(2);
     d74:	4975      	ldr	r1, [pc, #468]	; (f4c <Meltdown::tryExecuteCommand() [clone .part.50]+0x2fc>)
     d76:	4620      	mov	r0, r4
     d78:	f005 fcf2 	bl	6760 <String::equals(String const&) const>
     d7c:	b328      	cbz	r0, dca <Meltdown::tryExecuteCommand() [clone .part.50]+0x17a>
			  case 1:
				  gHue1 = !gHue1;
				  hueVal = gHue1;
				  break;
			  case 2:
				  gHue2 = !gHue2;
     d7e:	4d69      	ldr	r5, [pc, #420]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     d80:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
     d84:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
     d88:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     d8c:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
		  }

		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
     d90:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
			  case 1:
				  gHue1 = !gHue1;
				  hueVal = gHue1;
				  break;
			  case 2:
				  gHue2 = !gHue2;
     d94:	f087 0701 	eor.w	r7, r7, #1
     d98:	f885 7031 	strb.w	r7, [r5, #49]	; 0x31
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     d9c:	2f00      	cmp	r7, #0
     d9e:	d0af      	beq.n	d00 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb0>
     da0:	3301      	adds	r3, #1
     da2:	e7ad      	b.n	d00 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb0>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     da4:	f10d 0810 	add.w	r8, sp, #16
     da8:	495f      	ldr	r1, [pc, #380]	; (f28 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d8>)
     daa:	4640      	mov	r0, r8
     dac:	f005 fc30 	bl	6610 <String::String(String const&)>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     db0:	4631      	mov	r1, r6
     db2:	4640      	mov	r0, r8
     db4:	f005 fcf8 	bl	67a8 <String::operator[](unsigned int)>
     db8:	7803      	ldrb	r3, [r0, #0]
     dba:	2b23      	cmp	r3, #35	; 0x23
     dbc:	d03c      	beq.n	e38 <Meltdown::tryExecuteCommand() [clone .part.50]+0x1e8>
			{
				int val = currVal;

				if (!m_inputString.equals(""))
				{
					val = GetSerialValue(m_inputString, currVal);
     dbe:	4640      	mov	r0, r8
     dc0:	f005 fbc0 	bl	6544 <String::~String()>
     dc4:	e76a      	b.n	c9c <Meltdown::tryExecuteCommand() [clone .part.50]+0x4c>
     dc6:	463b      	mov	r3, r7
     dc8:	e79a      	b.n	d00 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb0>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE3))
				{
					bool hueValue = MeltdownLED.ToggleHue(3);
     dca:	4961      	ldr	r1, [pc, #388]	; (f50 <Meltdown::tryExecuteCommand() [clone .part.50]+0x300>)
     dcc:	4620      	mov	r0, r4
     dce:	f005 fcc7 	bl	6760 <String::equals(String const&) const>
     dd2:	b9e0      	cbnz	r0, e0e <Meltdown::tryExecuteCommand() [clone .part.50]+0x1be>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE4))
				{
					bool hueValue = MeltdownLED.ToggleHue(4);
     dd4:	495f      	ldr	r1, [pc, #380]	; (f54 <Meltdown::tryExecuteCommand() [clone .part.50]+0x304>)
     dd6:	4620      	mov	r0, r4
     dd8:	f005 fcc2 	bl	6760 <String::equals(String const&) const>
     ddc:	2800      	cmp	r0, #0
     dde:	d03f      	beq.n	e60 <Meltdown::tryExecuteCommand() [clone .part.50]+0x210>
			  case 3:
				  gHue3 = !gHue3;
				  hueVal = gHue3;
				  break;
			  case 4:
				  gHue4 = !gHue4;
     de0:	4d50      	ldr	r5, [pc, #320]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     de2:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     de6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     dea:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
     dee:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
		  }

		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
     df2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
			  case 3:
				  gHue3 = !gHue3;
				  hueVal = gHue3;
				  break;
			  case 4:
				  gHue4 = !gHue4;
     df6:	f087 0701 	eor.w	r7, r7, #1
     dfa:	f885 7033 	strb.w	r7, [r5, #51]	; 0x33
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     dfe:	b100      	cbz	r0, e02 <Meltdown::tryExecuteCommand() [clone .part.50]+0x1b2>
     e00:	3301      	adds	r3, #1
			  if (gHue3) val++;
     e02:	b101      	cbz	r1, e06 <Meltdown::tryExecuteCommand() [clone .part.50]+0x1b6>
     e04:	3301      	adds	r3, #1
			  if (gHue4) val++;
     e06:	2f00      	cmp	r7, #0
     e08:	f43f af7e 	beq.w	d08 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb8>
     e0c:	e77b      	b.n	d06 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb6>
			  case 2:
				  gHue2 = !gHue2;
				  hueVal = gHue2;
				  break;
			  case 3:
				  gHue3 = !gHue3;
     e0e:	4d45      	ldr	r5, [pc, #276]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     e10:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     e14:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     e18:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
     e1c:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
		  }

		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
     e20:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
			  case 2:
				  gHue2 = !gHue2;
				  hueVal = gHue2;
				  break;
			  case 3:
				  gHue3 = !gHue3;
     e24:	f087 0701 	eor.w	r7, r7, #1
     e28:	f885 7032 	strb.w	r7, [r5, #50]	; 0x32
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     e2c:	b100      	cbz	r0, e30 <Meltdown::tryExecuteCommand() [clone .part.50]+0x1e0>
     e2e:	3301      	adds	r3, #1
			  if (gHue3) val++;
     e30:	2f00      	cmp	r7, #0
     e32:	f43f af67 	beq.w	d04 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb4>
     e36:	e764      	b.n	d02 <Meltdown::tryExecuteCommand() [clone .part.50]+0xb2>
				}
			}

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
     e38:	9b06      	ldr	r3, [sp, #24]
     e3a:	2b09      	cmp	r3, #9
     e3c:	d9bf      	bls.n	dbe <Meltdown::tryExecuteCommand() [clone .part.50]+0x16e>
				{
					String valString = inputString.substring(5, 9);
     e3e:	ae08      	add	r6, sp, #32
     e40:	4630      	mov	r0, r6
     e42:	2309      	movs	r3, #9
     e44:	2205      	movs	r2, #5
     e46:	4641      	mov	r1, r8
     e48:	f005 fcd6 	bl	67f8 <String::substring(unsigned int, unsigned int) const>
					int val = valString.toInt();
     e4c:	4630      	mov	r0, r6
     e4e:	f005 fcf7 	bl	6840 <String::toInt() const>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     e52:	4681      	mov	r9, r0
     e54:	b318      	cbz	r0, e9e <Meltdown::tryExecuteCommand() [clone .part.50]+0x24e>
					{
						return val;
     e56:	4630      	mov	r0, r6
     e58:	f005 fb74 	bl	6544 <String::~String()>
			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
					int val = valString.toInt();
     e5c:	464f      	mov	r7, r9
     e5e:	e7ae      	b.n	dbe <Meltdown::tryExecuteCommand() [clone .part.50]+0x16e>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.HUE5))
				{
					bool hueValue = MeltdownLED.ToggleHue(5);
     e60:	493d      	ldr	r1, [pc, #244]	; (f58 <Meltdown::tryExecuteCommand() [clone .part.50]+0x308>)
     e62:	4620      	mov	r0, r4
     e64:	f005 fc7c 	bl	6760 <String::equals(String const&) const>
     e68:	4606      	mov	r6, r0
     e6a:	b310      	cbz	r0, eb2 <Meltdown::tryExecuteCommand() [clone .part.50]+0x262>
			  case 4:
				  gHue4 = !gHue4;
				  hueVal = gHue4;
				  break;
			  case 5:
				  gHue5 = !gHue5;
     e6c:	4d2d      	ldr	r5, [pc, #180]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     e6e:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     e72:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
     e76:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
     e7a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
		  }

		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
     e7e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
			  case 4:
				  gHue4 = !gHue4;
				  hueVal = gHue4;
				  break;
			  case 5:
				  gHue5 = !gHue5;
     e82:	f087 0701 	eor.w	r7, r7, #1
     e86:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
     e8a:	b100      	cbz	r0, e8e <Meltdown::tryExecuteCommand() [clone .part.50]+0x23e>
     e8c:	3301      	adds	r3, #1
			  if (gHue3) val++;
     e8e:	b101      	cbz	r1, e92 <Meltdown::tryExecuteCommand() [clone .part.50]+0x242>
     e90:	3301      	adds	r3, #1
			  if (gHue4) val++;
     e92:	b102      	cbz	r2, e96 <Meltdown::tryExecuteCommand() [clone .part.50]+0x246>
     e94:	3301      	adds	r3, #1
			  if (gHue5) val++;
     e96:	2f00      	cmp	r7, #0
     e98:	f47f af37 	bne.w	d0a <Meltdown::tryExecuteCommand() [clone .part.50]+0xba>
     e9c:	e736      	b.n	d0c <Meltdown::tryExecuteCommand() [clone .part.50]+0xbc>

					// A value of 0 indicates an error but is acceptable if the intended value is actually 0.
					if (val != 0 || valString.equals("0000"))
     e9e:	492f      	ldr	r1, [pc, #188]	; (f5c <Meltdown::tryExecuteCommand() [clone .part.50]+0x30c>)
     ea0:	4630      	mov	r0, r6
     ea2:	f005 fc6b 	bl	677c <String::equals(char const*) const>
     ea6:	2800      	cmp	r0, #0
     ea8:	d1d5      	bne.n	e56 <Meltdown::tryExecuteCommand() [clone .part.50]+0x206>

			int GetSerialValue(String inputString, int currVal)
			{
				if (inputString[0] == '#' && inputString.length() >= 10)
				{
					String valString = inputString.substring(5, 9);
     eaa:	4630      	mov	r0, r6
     eac:	f005 fb4a 	bl	6544 <String::~String()>
     eb0:	e785      	b.n	dbe <Meltdown::tryExecuteCommand() [clone .part.50]+0x16e>
					MeltdownLogger.Debug(Serial, F("Toggling Hue"), hueValue);
				}
				else if (command.equals(MeltdownSerial.PAUSE))
				{
					MeltdownLED.SetPause();
     eb2:	492b      	ldr	r1, [pc, #172]	; (f60 <Meltdown::tryExecuteCommand() [clone .part.50]+0x310>)
     eb4:	4620      	mov	r0, r4
     eb6:	f005 fc53 	bl	6760 <String::equals(String const&) const>
     eba:	4607      	mov	r7, r0
     ebc:	b150      	cbz	r0, ed4 <Meltdown::tryExecuteCommand() [clone .part.50]+0x284>
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     ebe:	4631      	mov	r1, r6
     ec0:	4819      	ldr	r0, [pc, #100]	; (f28 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d8>)
     ec2:	f005 fc71 	bl	67a8 <String::operator[](unsigned int)>
     ec6:	7803      	ldrb	r3, [r0, #0]
     ec8:	2b23      	cmp	r3, #35	; 0x23
     eca:	d04f      	beq.n	f6c <Meltdown::tryExecuteCommand() [clone .part.50]+0x31c>
		  bool TogglePause()
		  {
			  gPause = !gPause;
			  return gPause;
		  }
		  void SetPause() { gPause = MeltdownSerial.GetBoolValue(); }
     ecc:	4b15      	ldr	r3, [pc, #84]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     ece:	f883 6038 	strb.w	r6, [r3, #56]	; 0x38
     ed2:	e6f3      	b.n	cbc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6c>
				}
				else if (command.equals(MeltdownSerial.BLACK))
				{
					MeltdownLED.SetBlack();
     ed4:	4923      	ldr	r1, [pc, #140]	; (f64 <Meltdown::tryExecuteCommand() [clone .part.50]+0x314>)
     ed6:	4620      	mov	r0, r4
     ed8:	f005 fc42 	bl	6760 <String::equals(String const&) const>
     edc:	b160      	cbz	r0, ef8 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2a8>
     ede:	4639      	mov	r1, r7
     ee0:	4811      	ldr	r0, [pc, #68]	; (f28 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d8>)
     ee2:	f005 fc61 	bl	67a8 <String::operator[](unsigned int)>
     ee6:	7803      	ldrb	r3, [r0, #0]
     ee8:	2b23      	cmp	r3, #35	; 0x23
     eea:	f000 80a6 	beq.w	103a <Meltdown::tryExecuteCommand() [clone .part.50]+0x3ea>
     eee:	2300      	movs	r3, #0
		  bool ToggleBlack()
		  {
			  gBlack = !gBlack;
			  return gBlack;
		  }
		  void SetBlack() { gBlack = MeltdownSerial.GetBoolValue(); }
     ef0:	4a0c      	ldr	r2, [pc, #48]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     ef2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
     ef6:	e6e1      	b.n	cbc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6c>
				}
				else if (command.equals(MeltdownSerial.MIRROR))
				{
					MeltdownLED.SetMirror();
     ef8:	491b      	ldr	r1, [pc, #108]	; (f68 <Meltdown::tryExecuteCommand() [clone .part.50]+0x318>)
     efa:	4620      	mov	r0, r4
     efc:	f005 fc30 	bl	6760 <String::equals(String const&) const>
     f00:	2800      	cmp	r0, #0
     f02:	d049      	beq.n	f98 <Meltdown::tryExecuteCommand() [clone .part.50]+0x348>
				return val;
			}

			bool GetBoolValue()
			{
				int val = GetValue();
     f04:	4804      	ldr	r0, [pc, #16]	; (f18 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2c8>)
     f06:	f7ff fe65 	bl	bd4 <Meltdown::CMeltdownSerial::GetValue()>
		  bool ToggleMirror()
		  {
			  gMirror = !gMirror;
			  return gMirror;
		  }
		  void SetMirror() { gMirror = MeltdownSerial.GetBoolValue(); }
     f0a:	4b06      	ldr	r3, [pc, #24]	; (f24 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2d4>)
     f0c:	3000      	adds	r0, #0
     f0e:	bf18      	it	ne
     f10:	2001      	movne	r0, #1
     f12:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
     f16:	e6d1      	b.n	cbc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6c>
     f18:	1fff9968 	.word	0x1fff9968
     f1c:	00008e5c 	.word	0x00008e5c
     f20:	1fff99b0 	.word	0x1fff99b0
     f24:	1fff9890 	.word	0x1fff9890
     f28:	1fff996c 	.word	0x1fff996c
     f2c:	1fff986c 	.word	0x1fff986c
     f30:	00008db8 	.word	0x00008db8
     f34:	1fff9964 	.word	0x1fff9964
     f38:	1fff99c0 	.word	0x1fff99c0
     f3c:	2aaaaaab 	.word	0x2aaaaaab
     f40:	00008c80 	.word	0x00008c80
     f44:	1fff873c 	.word	0x1fff873c
     f48:	00008c74 	.word	0x00008c74
     f4c:	1fff99d0 	.word	0x1fff99d0
     f50:	1fff99e0 	.word	0x1fff99e0
     f54:	1fff99f0 	.word	0x1fff99f0
     f58:	1fff9a00 	.word	0x1fff9a00
     f5c:	00008c78 	.word	0x00008c78
     f60:	1fff9a70 	.word	0x1fff9a70
     f64:	1fff9ae0 	.word	0x1fff9ae0
     f68:	1fff9a10 	.word	0x1fff9a10
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
     f6c:	68eb      	ldr	r3, [r5, #12]
     f6e:	2b09      	cmp	r3, #9
     f70:	d801      	bhi.n	f76 <Meltdown::tryExecuteCommand() [clone .part.50]+0x326>
     f72:	2600      	movs	r6, #0
     f74:	e7aa      	b.n	ecc <Meltdown::tryExecuteCommand() [clone .part.50]+0x27c>
				{
					String valString = m_inputString.substring(5, 9);
     f76:	2309      	movs	r3, #9
     f78:	2205      	movs	r2, #5
     f7a:	49b4      	ldr	r1, [pc, #720]	; (124c <Meltdown::tryExecuteCommand() [clone .part.50]+0x5fc>)
     f7c:	a808      	add	r0, sp, #32
     f7e:	f005 fc3b 	bl	67f8 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
     f82:	a808      	add	r0, sp, #32
     f84:	f005 fc5c 	bl	6840 <String::toInt() const>
     f88:	4606      	mov	r6, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
     f8a:	a808      	add	r0, sp, #32
     f8c:	f005 fada 	bl	6544 <String::~String()>
     f90:	3600      	adds	r6, #0
     f92:	bf18      	it	ne
     f94:	2601      	movne	r6, #1
     f96:	e799      	b.n	ecc <Meltdown::tryExecuteCommand() [clone .part.50]+0x27c>
				}
				else if (command.equals(MeltdownSerial.PATTERN))
				{
					// Set to black.
     f98:	4dad      	ldr	r5, [pc, #692]	; (1250 <Meltdown::tryExecuteCommand() [clone .part.50]+0x600>)
     f9a:	4620      	mov	r0, r4
     f9c:	4629      	mov	r1, r5
     f9e:	f005 fbdf 	bl	6760 <String::equals(String const&) const>
     fa2:	4607      	mov	r7, r0
     fa4:	b350      	cbz	r0, ffc <Meltdown::tryExecuteCommand() [clone .part.50]+0x3ac>
					setIndexesForAll();
					MeltdownLED.SetAllColor(leds, ledIndexes, NUM_LEDS, CRGB::Black);

     fa6:	f7ff fe37 	bl	c18 <Meltdown::setIndexesForAll()>
     faa:	4aaa      	ldr	r2, [pc, #680]	; (1254 <Meltdown::tryExecuteCommand() [clone .part.50]+0x604>)
     fac:	4daa      	ldr	r5, [pc, #680]	; (1258 <Meltdown::tryExecuteCommand() [clone .part.50]+0x608>)
     fae:	f502 7616 	add.w	r6, r2, #600	; 0x258
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     fb2:	2100      	movs	r1, #0

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
			  {
				  leds[indexes[i]] = color;
     fb4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
     fb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     fbc:	18e8      	adds	r0, r5, r3

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
     fbe:	4296      	cmp	r6, r2
     fc0:	54e9      	strb	r1, [r5, r3]
     fc2:	f04f 0300 	mov.w	r3, #0
        g = (colorcode >>  8) & 0xFF;
     fc6:	7041      	strb	r1, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
     fc8:	7081      	strb	r1, [r0, #2]
     fca:	d1f3      	bne.n	fb4 <Meltdown::tryExecuteCommand() [clone .part.50]+0x364>
		  }
		  void SetBottom() { gBottom = MeltdownSerial.GetBoolValue(); }

		  bool GetBottom() { return gBottom; }

		  void ResetFrame() { gFrame = 1; }
     fcc:	4da3      	ldr	r5, [pc, #652]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
		  int SetPatternNumber()
		  {
			  ResetFrame();
			  ResetDelay();

			  gCurrentPatternNumber = MeltdownSerial.GetValue();
     fce:	48a4      	ldr	r0, [pc, #656]	; (1260 <Meltdown::tryExecuteCommand() [clone .part.50]+0x610>)

		  // DELAY //

		  int GetDelay() { return gDelay; }

		  void ResetDelay() { gDelay = 0; }
     fd0:	616b      	str	r3, [r5, #20]
		  }
		  void SetBottom() { gBottom = MeltdownSerial.GetBoolValue(); }

		  bool GetBottom() { return gBottom; }

		  void ResetFrame() { gFrame = 1; }
     fd2:	2301      	movs	r3, #1
     fd4:	62ab      	str	r3, [r5, #40]	; 0x28
		  int SetPatternNumber()
		  {
			  ResetFrame();
			  ResetDelay();

			  gCurrentPatternNumber = MeltdownSerial.GetValue();
     fd6:	f7ff fdfd 	bl	bd4 <Meltdown::CMeltdownSerial::GetValue()>
					int patternNumber = MeltdownLED.SetPatternNumber();
					MeltdownLogger.Debug(Serial, F("Setting pattern number"), patternNumber);
				}
				else if (command.equals(MeltdownSerial.TOP))
     fda:	ae08      	add	r6, sp, #32
     fdc:	6028      	str	r0, [r5, #0]
     fde:	4607      	mov	r7, r0
     fe0:	49a0      	ldr	r1, [pc, #640]	; (1264 <Meltdown::tryExecuteCommand() [clone .part.50]+0x614>)
     fe2:	4630      	mov	r0, r6
     fe4:	f005 fb02 	bl	65ec <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
		{
			if (!m_isDebug) return;
     fe8:	4b9f      	ldr	r3, [pc, #636]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	2b00      	cmp	r3, #0
     fee:	f43f ae62 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
     ff2:	4639      	mov	r1, r7
     ff4:	4630      	mov	r0, r6
     ff6:	f7ff fd93 	bl	b20 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.7] [clone .constprop.57]>
     ffa:	e65c      	b.n	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
				{
					bool topVal = MeltdownLED.ToggleTop();
     ffc:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
    1000:	4620      	mov	r0, r4
    1002:	f005 fbad 	bl	6760 <String::equals(String const&) const>
    1006:	4606      	mov	r6, r0
    1008:	b360      	cbz	r0, 1064 <Meltdown::tryExecuteCommand() [clone .part.50]+0x414>

		  // POSITION //

		  bool ToggleTop()
		  {
			  gBottom = false;
    100a:	4b94      	ldr	r3, [pc, #592]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting top position"), topVal);
				}
				else if (command.equals(MeltdownSerial.BOTTOM))
    100c:	4997      	ldr	r1, [pc, #604]	; (126c <Meltdown::tryExecuteCommand() [clone .part.50]+0x61c>)
			  gTop = !gTop;
    100e:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a

		  // POSITION //

		  bool ToggleTop()
		  {
			  gBottom = false;
    1012:	f883 703b 	strb.w	r7, [r3, #59]	; 0x3b
    1016:	ae08      	add	r6, sp, #32
			  gTop = !gTop;
    1018:	f085 0501 	eor.w	r5, r5, #1
    101c:	f883 503a 	strb.w	r5, [r3, #58]	; 0x3a
    1020:	4630      	mov	r0, r6
    1022:	f005 fae3 	bl	65ec <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, bool value)
		{
			if (!m_isDebug) return;
    1026:	4b90      	ldr	r3, [pc, #576]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
    1028:	781b      	ldrb	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	f43f ae43 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
    1030:	4629      	mov	r1, r5
    1032:	4630      	mov	r0, r6
    1034:	f7ff fbfc 	bl	830 <Meltdown::CMeltdownLogger::Debug(Stream&, String, bool) [clone .part.8] [clone .constprop.56]>
    1038:	e63d      	b.n	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
			}

			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
    103a:	68eb      	ldr	r3, [r5, #12]
    103c:	2b09      	cmp	r3, #9
    103e:	f67f af56 	bls.w	eee <Meltdown::tryExecuteCommand() [clone .part.50]+0x29e>
				{
					String valString = m_inputString.substring(5, 9);
    1042:	2309      	movs	r3, #9
    1044:	2205      	movs	r2, #5
    1046:	4981      	ldr	r1, [pc, #516]	; (124c <Meltdown::tryExecuteCommand() [clone .part.50]+0x5fc>)
    1048:	a808      	add	r0, sp, #32
    104a:	f005 fbd5 	bl	67f8 <String::substring(unsigned int, unsigned int) const>
					val = valString.toInt();
    104e:	a808      	add	r0, sp, #32
    1050:	f005 fbf6 	bl	6840 <String::toInt() const>
    1054:	4605      	mov	r5, r0
			int GetValue()
			{
				int val = 0;
				if (m_inputString[0] == '#' && m_inputString.length() >= 10)
				{
					String valString = m_inputString.substring(5, 9);
    1056:	a808      	add	r0, sp, #32
    1058:	f005 fa74 	bl	6544 <String::~String()>
    105c:	1c2b      	adds	r3, r5, #0
    105e:	bf18      	it	ne
    1060:	2301      	movne	r3, #1
    1062:	e745      	b.n	ef0 <Meltdown::tryExecuteCommand() [clone .part.50]+0x2a0>
				{
					bool bottomVal = MeltdownLED.ToggleBottom();
    1064:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    1068:	4620      	mov	r0, r4
    106a:	f005 fb79 	bl	6760 <String::equals(String const&) const>
    106e:	b198      	cbz	r0, 1098 <Meltdown::tryExecuteCommand() [clone .part.50]+0x448>

		  bool GetTop() { return gTop; }

		  bool ToggleBottom()
		  {
			  gTop = false;
    1070:	4b7a      	ldr	r3, [pc, #488]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting bottom position"), bottomVal);
				}
				else if (command.equals(MeltdownSerial.EFFECT))
    1072:	497f      	ldr	r1, [pc, #508]	; (1270 <Meltdown::tryExecuteCommand() [clone .part.50]+0x620>)
			  gBottom = !gBottom;
    1074:	f893 503b 	ldrb.w	r5, [r3, #59]	; 0x3b

		  bool GetTop() { return gTop; }

		  bool ToggleBottom()
		  {
			  gTop = false;
    1078:	f883 603a 	strb.w	r6, [r3, #58]	; 0x3a
			  gBottom = !gBottom;
    107c:	f085 0501 	eor.w	r5, r5, #1
    1080:	ae08      	add	r6, sp, #32
    1082:	f883 503b 	strb.w	r5, [r3, #59]	; 0x3b
    1086:	4630      	mov	r0, r6
    1088:	f005 fab0 	bl	65ec <String::String(__FlashStringHelper const*)>
    108c:	4b76      	ldr	r3, [pc, #472]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
    108e:	781b      	ldrb	r3, [r3, #0]
    1090:	2b00      	cmp	r3, #0
    1092:	f43f ae10 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
    1096:	e7cb      	b.n	1030 <Meltdown::tryExecuteCommand() [clone .part.50]+0x3e0>
				{
					int effectNumber = MeltdownLED.SetEffectNumber();
    1098:	f105 0110 	add.w	r1, r5, #16
    109c:	4620      	mov	r0, r4
    109e:	f005 fb5f 	bl	6760 <String::equals(String const&) const>
    10a2:	b1a8      	cbz	r0, 10d0 <Meltdown::tryExecuteCommand() [clone .part.50]+0x480>
			  return gCurrentEffectNumber;
		  }

		  int SetEffectNumber()
		  {
			  gCurrentEffectNumber = MeltdownSerial.GetValue();
    10a4:	f1a5 0018 	sub.w	r0, r5, #24
    10a8:	f7ff fd94 	bl	bd4 <Meltdown::CMeltdownSerial::GetValue()>
    10ac:	4b6b      	ldr	r3, [pc, #428]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting effect number"), effectNumber);
				}
				else if (command.equals(MeltdownSerial.MODE))
    10ae:	4971      	ldr	r1, [pc, #452]	; (1274 <Meltdown::tryExecuteCommand() [clone .part.50]+0x624>)
    10b0:	6058      	str	r0, [r3, #4]
    10b2:	4605      	mov	r5, r0
				{
					int modeNumber = MeltdownLED.SetModeNumber();
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
    10b4:	ae08      	add	r6, sp, #32
    10b6:	4630      	mov	r0, r6
    10b8:	f005 fa98 	bl	65ec <String::String(__FlashStringHelper const*)>
			serial.println(value);
		}

		void Debug(Stream &serial, String msg, int value)
		{
			if (!m_isDebug) return;
    10bc:	4b6a      	ldr	r3, [pc, #424]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	2b00      	cmp	r3, #0
    10c2:	f43f adf8 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
    10c6:	4629      	mov	r1, r5
    10c8:	4630      	mov	r0, r6
    10ca:	f7ff fd29 	bl	b20 <Meltdown::CMeltdownLogger::Debug(Stream&, String, int) [clone .part.7] [clone .constprop.57]>
    10ce:	e5f2      	b.n	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
					int effectNumber = MeltdownLED.SetEffectNumber();
					MeltdownLogger.Debug(Serial, F("Setting effect number"), effectNumber);
				}
				else if (command.equals(MeltdownSerial.MODE))
				{
					int modeNumber = MeltdownLED.SetModeNumber();
    10d0:	f105 0120 	add.w	r1, r5, #32
    10d4:	4620      	mov	r0, r4
    10d6:	f005 fb43 	bl	6760 <String::equals(String const&) const>
    10da:	b140      	cbz	r0, 10ee <Meltdown::tryExecuteCommand() [clone .part.50]+0x49e>
			  return gCurrentModeNumber;
		  }

		  int SetModeNumber()
		  {
			  gCurrentModeNumber = MeltdownSerial.GetValue();
    10dc:	f1a5 0018 	sub.w	r0, r5, #24
    10e0:	f7ff fd78 	bl	bd4 <Meltdown::CMeltdownSerial::GetValue()>
    10e4:	4b5d      	ldr	r3, [pc, #372]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting mode number"), modeNumber);
				}
				else if (command.equals(MeltdownSerial.ANALOG_EFFECT))
    10e6:	4964      	ldr	r1, [pc, #400]	; (1278 <Meltdown::tryExecuteCommand() [clone .part.50]+0x628>)
    10e8:	6098      	str	r0, [r3, #8]
    10ea:	4605      	mov	r5, r0
    10ec:	e7e2      	b.n	10b4 <Meltdown::tryExecuteCommand() [clone .part.50]+0x464>
				{
					int currVal = MeltdownLED.GetAnalogEffect();
    10ee:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
    10f2:	4620      	mov	r0, r4
    10f4:	f005 fb34 	bl	6760 <String::equals(String const&) const>
    10f8:	b1f8      	cbz	r0, 113a <Meltdown::tryExecuteCommand() [clone .part.50]+0x4ea>
    10fa:	f8df 8160 	ldr.w	r8, [pc, #352]	; 125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>
    10fe:	f8d8 601c 	ldr.w	r6, [r8, #28]

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    1102:	f1a5 0018 	sub.w	r0, r5, #24
    1106:	4631      	mov	r1, r6
    1108:	f7ff fd24 	bl	b54 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>
    110c:	f855 3c18 	ldr.w	r3, [r5, #-24]

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }

		  int SetAnalogEffect(int pin)
		  {
			  gAnalogEffect = MeltdownSerial.GetAnalogValue(pin, gAnalogEffect);
    1110:	f8c8 001c 	str.w	r0, [r8, #28]
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    1114:	1af2      	subs	r2, r6, r3
    1116:	4282      	cmp	r2, r0

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    1118:	4607      	mov	r7, r0
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    111a:	da03      	bge.n	1124 <Meltdown::tryExecuteCommand() [clone .part.50]+0x4d4>
    111c:	4433      	add	r3, r6
    111e:	4283      	cmp	r3, r0
    1120:	f73f adcc 	bgt.w	cbc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6c>

					if (MeltdownSerial.HasChanged(currVal, modeVal))
					{
						MeltdownLogger.Debug(Serial, F("Setting Analog Effect"), modeVal);
					}
				}
    1124:	ae08      	add	r6, sp, #32
    1126:	4630      	mov	r0, r6
    1128:	4954      	ldr	r1, [pc, #336]	; (127c <Meltdown::tryExecuteCommand() [clone .part.50]+0x62c>)
    112a:	f005 fa5f 	bl	65ec <String::String(__FlashStringHelper const*)>
    112e:	4b4e      	ldr	r3, [pc, #312]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	2b00      	cmp	r3, #0
    1134:	f43f adbf 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
    1138:	e75b      	b.n	ff2 <Meltdown::tryExecuteCommand() [clone .part.50]+0x3a2>
				else if (command.equals(MeltdownSerial.ANALOG_PATTERN))
				{
					int currVal = MeltdownLED.GetAnalogPattern();
    113a:	f105 01d0 	add.w	r1, r5, #208	; 0xd0
    113e:	4620      	mov	r0, r4
    1140:	f005 fb0e 	bl	6760 <String::equals(String const&) const>
    1144:	4607      	mov	r7, r0
    1146:	b1f8      	cbz	r0, 1188 <Meltdown::tryExecuteCommand() [clone .part.50]+0x538>
    1148:	f8df 8110 	ldr.w	r8, [pc, #272]	; 125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>
    114c:	f8d8 6018 	ldr.w	r6, [r8, #24]

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    1150:	f1a5 0018 	sub.w	r0, r5, #24
    1154:	4631      	mov	r1, r6
    1156:	f7ff fcfd 	bl	b54 <Meltdown::CMeltdownSerial::GetAnalogValue(int)>
    115a:	f855 3c18 	ldr.w	r3, [r5, #-24]

		  // ANALOG //

		  int SetAnalogPattern(int pin)
		  {
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
    115e:	f8c8 0018 	str.w	r0, [r8, #24]
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    1162:	1af2      	subs	r2, r6, r3
    1164:	4282      	cmp	r2, r0

			int GetAnalogValue(int pin, int currVal)
			{
				if (pin == -1)
				{
					return GetAnalogValue(currVal);
    1166:	4607      	mov	r7, r0
			// Because an analog read can waiver between values, we need to determine if an analog value has changed enough
			// for us to do anything about.
			bool HasChanged(int oldVal, int newVal)
			{
				// Otherwise, check that the value has surpassed the tolerance threshold.
				return newVal <= (oldVal - m_analogTolerance) || newVal >= (oldVal + m_analogTolerance);
    1168:	da03      	bge.n	1172 <Meltdown::tryExecuteCommand() [clone .part.50]+0x522>
    116a:	4433      	add	r3, r6
    116c:	4283      	cmp	r3, r0
    116e:	f73f ada5 	bgt.w	cbc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6c>

					if (MeltdownSerial.HasChanged(currVal, patternVal))
					{
						MeltdownLogger.Debug(Serial, F("Setting Analog Pattern"), patternVal);
					}
				}
    1172:	ae08      	add	r6, sp, #32
    1174:	4630      	mov	r0, r6
    1176:	4942      	ldr	r1, [pc, #264]	; (1280 <Meltdown::tryExecuteCommand() [clone .part.50]+0x630>)
    1178:	f005 fa38 	bl	65ec <String::String(__FlashStringHelper const*)>
    117c:	4b3a      	ldr	r3, [pc, #232]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
    117e:	781b      	ldrb	r3, [r3, #0]
    1180:	2b00      	cmp	r3, #0
    1182:	f43f ad98 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
    1186:	e734      	b.n	ff2 <Meltdown::tryExecuteCommand() [clone .part.50]+0x3a2>
				else if (command.equals(MeltdownSerial.AUTO_NONE))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.None);
    1188:	f505 7188 	add.w	r1, r5, #272	; 0x110
    118c:	4620      	mov	r0, r4
    118e:	f005 fae7 	bl	6760 <String::equals(String const&) const>
    1192:	b1c0      	cbz	r0, 11c6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x576>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1194:	4a3b      	ldr	r2, [pc, #236]	; (1284 <Meltdown::tryExecuteCommand() [clone .part.50]+0x634>)

		  // AUTO MODE //

		  void SetAutoMode(AutoMode mode)
		  {
			  gAutoMode = mode;
    1196:	4b31      	ldr	r3, [pc, #196]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
    1198:	6812      	ldr	r2, [r2, #0]
    119a:	9204      	str	r2, [sp, #16]
	return ret;
    119c:	9a04      	ldr	r2, [sp, #16]
		  {
			  gAutoModeActive = isActive;
			  // If we're waking up, reset the timer.
			  if (!gAutoModeActive)
			  {
				  gAutoModeStartMillis = millis();
    119e:	645a      	str	r2, [r3, #68]	; 0x44
					MeltdownLogger.Debug(Serial, F("Disabling Auto Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_PATTERN))
    11a0:	ae08      	add	r6, sp, #32

		  bool IsAutoSleep() { return gAutoMode == Sleep; }

		  bool SetAutoModeActive(bool isActive)
		  {
			  gAutoModeActive = isActive;
    11a2:	f883 703c 	strb.w	r7, [r3, #60]	; 0x3c
    11a6:	4938      	ldr	r1, [pc, #224]	; (1288 <Meltdown::tryExecuteCommand() [clone .part.50]+0x638>)

		  // AUTO MODE //

		  void SetAutoMode(AutoMode mode)
		  {
			  gAutoMode = mode;
    11a8:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    11ac:	4630      	mov	r0, r6
    11ae:	f005 fa1d 	bl	65ec <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
    11b2:	4b2d      	ldr	r3, [pc, #180]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
    11b4:	781b      	ldrb	r3, [r3, #0]
    11b6:	2b00      	cmp	r3, #0
    11b8:	f43f ad7d 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>

			serial.println(msg);
    11bc:	4631      	mov	r1, r6
    11be:	4833      	ldr	r0, [pc, #204]	; (128c <Meltdown::tryExecuteCommand() [clone .part.50]+0x63c>)
    11c0:	f7ff fca4 	bl	b0c <Print::println(String const&)>
    11c4:	e577      	b.n	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Pattern);
    11c6:	f505 7198 	add.w	r1, r5, #304	; 0x130
    11ca:	4620      	mov	r0, r4
    11cc:	f005 fac8 	bl	6760 <String::equals(String const&) const>
    11d0:	b188      	cbz	r0, 11f6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x5a6>
    11d2:	4b22      	ldr	r3, [pc, #136]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_MODE))
    11d4:	492e      	ldr	r1, [pc, #184]	; (1290 <Meltdown::tryExecuteCommand() [clone .part.50]+0x640>)
    11d6:	ae08      	add	r6, sp, #32
    11d8:	2502      	movs	r5, #2

		  bool IsAutoSleep() { return gAutoMode == Sleep; }

		  bool SetAutoModeActive(bool isActive)
		  {
			  gAutoModeActive = isActive;
    11da:	2201      	movs	r2, #1
    11dc:	4630      	mov	r0, r6

		  // AUTO MODE //

		  void SetAutoMode(AutoMode mode)
		  {
			  gAutoMode = mode;
    11de:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d

		  bool IsAutoSleep() { return gAutoMode == Sleep; }

		  bool SetAutoModeActive(bool isActive)
		  {
			  gAutoModeActive = isActive;
    11e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				else if (command.equals(MeltdownSerial.AUTO_SLEEP))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Sleep);
					MeltdownLogger.Debug(Serial, F("Setting Auto Sleep Mode."));
				}
				else
    11e6:	f005 fa01 	bl	65ec <String::String(__FlashStringHelper const*)>
			m_isDebug = isDebug;
		}

		void Debug(Stream &serial, String msg)
		{
			if (!m_isDebug) return;
    11ea:	4b1f      	ldr	r3, [pc, #124]	; (1268 <Meltdown::tryExecuteCommand() [clone .part.50]+0x618>)
    11ec:	781b      	ldrb	r3, [r3, #0]
    11ee:	2b00      	cmp	r3, #0
    11f0:	f43f ad61 	beq.w	cb6 <Meltdown::tryExecuteCommand() [clone .part.50]+0x66>
    11f4:	e7e2      	b.n	11bc <Meltdown::tryExecuteCommand() [clone .part.50]+0x56c>
					MeltdownLED.SetAutoMode(MeltdownLED.Pattern);
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_MODE))
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Mode);
    11f6:	f505 71a0 	add.w	r1, r5, #320	; 0x140
    11fa:	4620      	mov	r0, r4
    11fc:	f005 fab0 	bl	6760 <String::equals(String const&) const>
    1200:	b140      	cbz	r0, 1214 <Meltdown::tryExecuteCommand() [clone .part.50]+0x5c4>

		  // AUTO MODE //

		  void SetAutoMode(AutoMode mode)
		  {
			  gAutoMode = mode;
    1202:	4b16      	ldr	r3, [pc, #88]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Mode Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_PATTERN_MODE))
    1204:	4923      	ldr	r1, [pc, #140]	; (1294 <Meltdown::tryExecuteCommand() [clone .part.50]+0x644>)
    1206:	ae08      	add	r6, sp, #32
    1208:	2503      	movs	r5, #3

		  bool IsAutoSleep() { return gAutoMode == Sleep; }

		  bool SetAutoModeActive(bool isActive)
		  {
			  gAutoModeActive = isActive;
    120a:	2201      	movs	r2, #1
    120c:	4630      	mov	r0, r6

		  // AUTO MODE //

		  void SetAutoMode(AutoMode mode)
		  {
			  gAutoMode = mode;
    120e:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
    1212:	e7e6      	b.n	11e2 <Meltdown::tryExecuteCommand() [clone .part.50]+0x592>
				{
					MeltdownLED.SetAutoMode(MeltdownLED.PatternMode);
    1214:	4920      	ldr	r1, [pc, #128]	; (1298 <Meltdown::tryExecuteCommand() [clone .part.50]+0x648>)
    1216:	4620      	mov	r0, r4
    1218:	f005 faa2 	bl	6760 <String::equals(String const&) const>
    121c:	b140      	cbz	r0, 1230 <Meltdown::tryExecuteCommand() [clone .part.50]+0x5e0>
    121e:	4b0f      	ldr	r3, [pc, #60]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Pattern Mode Mode."));
				}
				else if (command.equals(MeltdownSerial.AUTO_SLEEP))
    1220:	491e      	ldr	r1, [pc, #120]	; (129c <Meltdown::tryExecuteCommand() [clone .part.50]+0x64c>)
    1222:	ae08      	add	r6, sp, #32
    1224:	2504      	movs	r5, #4

		  bool IsAutoSleep() { return gAutoMode == Sleep; }

		  bool SetAutoModeActive(bool isActive)
		  {
			  gAutoModeActive = isActive;
    1226:	2201      	movs	r2, #1
    1228:	4630      	mov	r0, r6

		  // AUTO MODE //

		  void SetAutoMode(AutoMode mode)
		  {
			  gAutoMode = mode;
    122a:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
    122e:	e7d8      	b.n	11e2 <Meltdown::tryExecuteCommand() [clone .part.50]+0x592>
				{
					MeltdownLED.SetAutoMode(MeltdownLED.Sleep);
    1230:	491b      	ldr	r1, [pc, #108]	; (12a0 <Meltdown::tryExecuteCommand() [clone .part.50]+0x650>)
    1232:	4620      	mov	r0, r4
    1234:	f005 fa94 	bl	6760 <String::equals(String const&) const>
    1238:	b3b0      	cbz	r0, 12a8 <Meltdown::tryExecuteCommand() [clone .part.50]+0x658>
    123a:	4b08      	ldr	r3, [pc, #32]	; (125c <Meltdown::tryExecuteCommand() [clone .part.50]+0x60c>)
					MeltdownLogger.Debug(Serial, F("Setting Auto Sleep Mode."));
				}
				else
    123c:	4919      	ldr	r1, [pc, #100]	; (12a4 <Meltdown::tryExecuteCommand() [clone .part.50]+0x654>)
    123e:	ae08      	add	r6, sp, #32
    1240:	2201      	movs	r2, #1
    1242:	4630      	mov	r0, r6
    1244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    1248:	e7cb      	b.n	11e2 <Meltdown::tryExecuteCommand() [clone .part.50]+0x592>
    124a:	bf00      	nop
    124c:	1fff996c 	.word	0x1fff996c
    1250:	1fff9980 	.word	0x1fff9980
    1254:	1fff922a 	.word	0x1fff922a
    1258:	1fff94b4 	.word	0x1fff94b4
    125c:	1fff9890 	.word	0x1fff9890
    1260:	1fff9968 	.word	0x1fff9968
    1264:	00008c90 	.word	0x00008c90
    1268:	1fff9964 	.word	0x1fff9964
    126c:	00008ca8 	.word	0x00008ca8
    1270:	00008cc0 	.word	0x00008cc0
    1274:	00008cd8 	.word	0x00008cd8
    1278:	00008cf0 	.word	0x00008cf0
    127c:	00008df0 	.word	0x00008df0
    1280:	00008e08 	.word	0x00008e08
    1284:	1fff9b38 	.word	0x1fff9b38
    1288:	00008d04 	.word	0x00008d04
    128c:	1fff873c 	.word	0x1fff873c
    1290:	00008d1c 	.word	0x00008d1c
    1294:	00008d38 	.word	0x00008d38
    1298:	1fff9ad0 	.word	0x1fff9ad0
    129c:	00008d50 	.word	0x00008d50
    12a0:	1fff9aa0 	.word	0x1fff9aa0
    12a4:	00008d70 	.word	0x00008d70
				{
					MeltdownLogger.Debug(Serial, F("Something went wrong reading serial command"), command);
				}
			}
    12a8:	ae08      	add	r6, sp, #32
    12aa:	4911      	ldr	r1, [pc, #68]	; (12f0 <Meltdown::tryExecuteCommand() [clone .part.50]+0x6a0>)
    12ac:	4630      	mov	r0, r6
    12ae:	f10d 0810 	add.w	r8, sp, #16
    12b2:	f005 f99b 	bl	65ec <String::String(__FlashStringHelper const*)>
    12b6:	4640      	mov	r0, r8
    12b8:	4621      	mov	r1, r4
    12ba:	f005 f9a9 	bl	6610 <String::String(String const&)>
			serial.println(msg);
		}

		void Debug(Stream &serial, String msg, String value)
		{
			if (!m_isDebug) return;
    12be:	4b0d      	ldr	r3, [pc, #52]	; (12f4 <Meltdown::tryExecuteCommand() [clone .part.50]+0x6a4>)
    12c0:	781b      	ldrb	r3, [r3, #0]
    12c2:	b173      	cbz	r3, 12e2 <Meltdown::tryExecuteCommand() [clone .part.50]+0x692>

			serial.print(msg);
    12c4:	4631      	mov	r1, r6
    12c6:	480c      	ldr	r0, [pc, #48]	; (12f8 <Meltdown::tryExecuteCommand() [clone .part.50]+0x6a8>)
    12c8:	f005 f86c 	bl	63a4 <Print::print(String const&)>
    12cc:	2102      	movs	r1, #2
    12ce:	480b      	ldr	r0, [pc, #44]	; (12fc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6ac>)
    12d0:	f004 fd68 	bl	5da4 <usb_serial_write>
    12d4:	4641      	mov	r1, r8
    12d6:	4808      	ldr	r0, [pc, #32]	; (12f8 <Meltdown::tryExecuteCommand() [clone .part.50]+0x6a8>)
    12d8:	f005 f864 	bl	63a4 <Print::print(String const&)>
    12dc:	4806      	ldr	r0, [pc, #24]	; (12f8 <Meltdown::tryExecuteCommand() [clone .part.50]+0x6a8>)
    12de:	f005 f887 	bl	63f0 <Print::println()>
    12e2:	4640      	mov	r0, r8
    12e4:	f005 f92e 	bl	6544 <String::~String()>
    12e8:	4630      	mov	r0, r6
    12ea:	f005 f92b 	bl	6544 <String::~String()>
    12ee:	e4e5      	b.n	cbc <Meltdown::tryExecuteCommand() [clone .part.50]+0x6c>
    12f0:	00008d8c 	.word	0x00008d8c
    12f4:	1fff9964 	.word	0x1fff9964
    12f8:	1fff873c 	.word	0x1fff873c
    12fc:	00008c74 	.word	0x00008c74

00001300 <Meltdown::setIndexesForWheels()>:

	/// Set the indexes for all wheel sections, treating them as one long contiguous strip.
	void setIndexesForWheels()
	{
		if (gSelectedIndexes != INDEXES_WHEELS)
		{
    1300:	b510      	push	{r4, lr}
    1302:	490e      	ldr	r1, [pc, #56]	; (133c <Meltdown::setIndexesForWheels()+0x3c>)
    1304:	480e      	ldr	r0, [pc, #56]	; (1340 <Meltdown::setIndexesForWheels()+0x40>)
    1306:	f005 fa2b 	bl	6760 <String::equals(String const&) const>
			gSelectedIndexes = INDEXES_WHEELS;
    130a:	b100      	cbz	r0, 130e <Meltdown::setIndexesForWheels()+0xe>
    130c:	bd10      	pop	{r4, pc}
    130e:	4604      	mov	r4, r0

			clearLedIndexes();
    1310:	490a      	ldr	r1, [pc, #40]	; (133c <Meltdown::setIndexesForWheels()+0x3c>)
    1312:	480b      	ldr	r0, [pc, #44]	; (1340 <Meltdown::setIndexesForWheels()+0x40>)
    1314:	f005 f99a 	bl	664c <String::operator=(String const&)>
    1318:	4a0a      	ldr	r2, [pc, #40]	; (1344 <Meltdown::setIndexesForWheels()+0x44>)
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
    131a:	4620      	mov	r0, r4
    131c:	f502 7116 	add.w	r1, r2, #600	; 0x258
	{
		if (gSelectedIndexes != INDEXES_WHEELS)
		{
			gSelectedIndexes = INDEXES_WHEELS;

			clearLedIndexes();
    1320:	4613      	mov	r3, r2
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
    1322:	f823 0f02 	strh.w	r0, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
    1326:	428b      	cmp	r3, r1
    1328:	d1fb      	bne.n	1322 <Meltdown::setIndexesForWheels()+0x22>
    132a:	2300      	movs	r3, #0
					// Temporary workaround for hardware fault.
					if (i == 3 && j == 4) continue;

					for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
					{
						ledIndexes[(i * NUM_WHEEL_LEDS_PER_PENT) + (j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
    132c:	f240 112b 	movw	r1, #299	; 0x12b
					}
				}
    1330:	f822 3f02 	strh.w	r3, [r2, #2]!
					// Temporary workaround for hardware fault.
					if (i == 3 && j == 4) continue;

					for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
					{
						ledIndexes[(i * NUM_WHEEL_LEDS_PER_PENT) + (j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
    1334:	3301      	adds	r3, #1
    1336:	428b      	cmp	r3, r1
    1338:	d1fa      	bne.n	1330 <Meltdown::setIndexesForWheels()+0x30>
    133a:	bd10      	pop	{r4, pc}
    133c:	1fff94a4 	.word	0x1fff94a4
    1340:	1fff91f8 	.word	0x1fff91f8
    1344:	1fff922a 	.word	0x1fff922a

00001348 <Meltdown::setIndexesForWheel(int)>:

	/// Set the indexes for the wheel section of a single pent.
	void setIndexesForWheel(int pentNumber)
	{
		if (gSelectedIndexes != INDEXES_WHEEL + pentNumber)
		{
    1348:	b530      	push	{r4, r5, lr}
    134a:	b085      	sub	sp, #20
    134c:	4604      	mov	r4, r0
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    134e:	491d      	ldr	r1, [pc, #116]	; (13c4 <Meltdown::setIndexesForWheel(int)+0x7c>)
    1350:	4668      	mov	r0, sp
    1352:	f005 f95d 	bl	6610 <String::String(String const&)>
			gSelectedIndexes = INDEXES_WHEEL + pentNumber;
    1356:	4621      	mov	r1, r4
    1358:	4668      	mov	r0, sp
    135a:	f005 f9e5 	bl	6728 <operator+(StringSumHelper const&, int)>
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    135e:	4601      	mov	r1, r0
    1360:	4819      	ldr	r0, [pc, #100]	; (13c8 <Meltdown::setIndexesForWheel(int)+0x80>)
    1362:	f005 f9fd 	bl	6760 <String::equals(String const&) const>
    1366:	4605      	mov	r5, r0
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1368:	4668      	mov	r0, sp
    136a:	f005 f8eb 	bl	6544 <String::~String()>
    136e:	b10d      	cbz	r5, 1374 <Meltdown::setIndexesForWheel(int)+0x2c>
				}
			}
		}
	}

	/// Set the indexes for all spoke sections, treating them as one long contigous strip.
    1370:	b005      	add	sp, #20
    1372:	bd30      	pop	{r4, r5, pc}
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1374:	4913      	ldr	r1, [pc, #76]	; (13c4 <Meltdown::setIndexesForWheel(int)+0x7c>)
    1376:	4668      	mov	r0, sp
    1378:	f005 f94a 	bl	6610 <String::String(String const&)>
	{
		if (gSelectedIndexes != INDEXES_WHEEL + pentNumber)
		{
			gSelectedIndexes = INDEXES_WHEEL + pentNumber;

			clearLedIndexes();
    137c:	4621      	mov	r1, r4
    137e:	4668      	mov	r0, sp
    1380:	f005 f9d2 	bl	6728 <operator+(StringSumHelper const&, int)>
    1384:	4601      	mov	r1, r0
    1386:	4810      	ldr	r0, [pc, #64]	; (13c8 <Meltdown::setIndexesForWheel(int)+0x80>)
    1388:	f005 f960 	bl	664c <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    138c:	4668      	mov	r0, sp
    138e:	f005 f8d9 	bl	6544 <String::~String()>
    1392:	4a0e      	ldr	r2, [pc, #56]	; (13cc <Meltdown::setIndexesForWheel(int)+0x84>)
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
    1394:	4628      	mov	r0, r5
    1396:	f502 7116 	add.w	r1, r2, #600	; 0x258
	{
		if (gSelectedIndexes != INDEXES_WHEEL + pentNumber)
		{
			gSelectedIndexes = INDEXES_WHEEL + pentNumber;

			clearLedIndexes();
    139a:	4613      	mov	r3, r2
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
    139c:	f823 0f02 	strh.w	r0, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
    13a0:	428b      	cmp	r3, r1
    13a2:	d1fb      	bne.n	139c <Meltdown::setIndexesForWheel(int)+0x54>
    13a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    13a8:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    13ac:	00a3      	lsls	r3, r4, #2
    13ae:	4908      	ldr	r1, [pc, #32]	; (13d0 <Meltdown::setIndexesForWheel(int)+0x88>)
    13b0:	b29b      	uxth	r3, r3

				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
				{
					ledIndexes[(j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
				}
			}
    13b2:	f822 3f02 	strh.w	r3, [r2, #2]!
    13b6:	3301      	adds	r3, #1
				// Temporary workaround for hardware fault.
				if (pentNumber == 3 && j == 4) continue;

				for (int k = 0; k < NUM_WHEEL_LEDS_PER_STRIP; k++)
				{
					ledIndexes[(j * NUM_WHEEL_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + k;
    13b8:	4291      	cmp	r1, r2
    13ba:	b29b      	uxth	r3, r3
    13bc:	d1f9      	bne.n	13b2 <Meltdown::setIndexesForWheel(int)+0x6a>
				}
			}
		}
	}

	/// Set the indexes for all spoke sections, treating them as one long contigous strip.
    13be:	b005      	add	sp, #20
    13c0:	bd30      	pop	{r4, r5, pc}
    13c2:	bf00      	nop
    13c4:	1fff9218 	.word	0x1fff9218
    13c8:	1fff91f8 	.word	0x1fff91f8
    13cc:	1fff922a 	.word	0x1fff922a
    13d0:	1fff9480 	.word	0x1fff9480

000013d4 <Meltdown::setIndexesForSpokes()>:
	void setIndexesForSpokes()
	{
		if (gSelectedIndexes != INDEXES_SPOKES)
		{
    13d4:	b510      	push	{r4, lr}
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    13d6:	490c      	ldr	r1, [pc, #48]	; (1408 <Meltdown::setIndexesForSpokes()+0x34>)
    13d8:	480c      	ldr	r0, [pc, #48]	; (140c <Meltdown::setIndexesForSpokes()+0x38>)
    13da:	f005 f9c1 	bl	6760 <String::equals(String const&) const>
			gSelectedIndexes = INDEXES_SPOKES;
    13de:	b100      	cbz	r0, 13e2 <Meltdown::setIndexesForSpokes()+0xe>
    13e0:	bd10      	pop	{r4, pc}
    13e2:	4604      	mov	r4, r0

			clearLedIndexes();
    13e4:	4908      	ldr	r1, [pc, #32]	; (1408 <Meltdown::setIndexesForSpokes()+0x34>)
    13e6:	4809      	ldr	r0, [pc, #36]	; (140c <Meltdown::setIndexesForSpokes()+0x38>)
    13e8:	f005 f930 	bl	664c <String::operator=(String const&)>
    13ec:	4b08      	ldr	r3, [pc, #32]	; (1410 <Meltdown::setIndexesForSpokes()+0x3c>)
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
    13ee:	4620      	mov	r0, r4
    13f0:	f503 7216 	add.w	r2, r3, #600	; 0x258
    13f4:	f823 0f02 	strh.w	r0, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
    13f8:	4293      	cmp	r3, r2
    13fa:	d1fb      	bne.n	13f4 <Meltdown::setIndexesForSpokes()+0x20>
				{
					for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
					{
						ledIndexes[(i * NUM_SPOKE_LEDS_PER_PENT) + (j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (i * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
					}
				}
    13fc:	4b05      	ldr	r3, [pc, #20]	; (1414 <Meltdown::setIndexesForSpokes()+0x40>)
    13fe:	f240 122b 	movw	r2, #299	; 0x12b
    1402:	801a      	strh	r2, [r3, #0]
    1404:	bd10      	pop	{r4, pc}
    1406:	bf00      	nop
    1408:	1fff9208 	.word	0x1fff9208
    140c:	1fff91f8 	.word	0x1fff91f8
    1410:	1fff922a 	.word	0x1fff922a
    1414:	1fff922c 	.word	0x1fff922c

00001418 <Meltdown::setIndexesForSpokes(int)>:

	/// Set the indexes for the spokes of a single pent.
	void setIndexesForSpokes(int pentNumber)
	{
		if (gSelectedIndexes != INDEXES_SPOKE + pentNumber)
		{
    1418:	b530      	push	{r4, r5, lr}
    141a:	b085      	sub	sp, #20
    141c:	4605      	mov	r5, r0
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    141e:	491a      	ldr	r1, [pc, #104]	; (1488 <Meltdown::setIndexesForSpokes(int)+0x70>)
    1420:	4668      	mov	r0, sp
    1422:	f005 f8f5 	bl	6610 <String::String(String const&)>
			gSelectedIndexes = INDEXES_SPOKE + pentNumber;
    1426:	4629      	mov	r1, r5
    1428:	4668      	mov	r0, sp
    142a:	f005 f97d 	bl	6728 <operator+(StringSumHelper const&, int)>
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    142e:	4601      	mov	r1, r0
    1430:	4816      	ldr	r0, [pc, #88]	; (148c <Meltdown::setIndexesForSpokes(int)+0x74>)
    1432:	f005 f995 	bl	6760 <String::equals(String const&) const>
    1436:	4604      	mov	r4, r0
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1438:	4668      	mov	r0, sp
    143a:	f005 f883 	bl	6544 <String::~String()>
    143e:	b10c      	cbz	r4, 1444 <Meltdown::setIndexesForSpokes(int)+0x2c>
				}
			}
		}
	}


    1440:	b005      	add	sp, #20
    1442:	bd30      	pop	{r4, r5, pc}
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1444:	4910      	ldr	r1, [pc, #64]	; (1488 <Meltdown::setIndexesForSpokes(int)+0x70>)
    1446:	4668      	mov	r0, sp
    1448:	f005 f8e2 	bl	6610 <String::String(String const&)>
	{
		if (gSelectedIndexes != INDEXES_SPOKE + pentNumber)
		{
			gSelectedIndexes = INDEXES_SPOKE + pentNumber;

			clearLedIndexes();
    144c:	4629      	mov	r1, r5
    144e:	4668      	mov	r0, sp
    1450:	f005 f96a 	bl	6728 <operator+(StringSumHelper const&, int)>
    1454:	4601      	mov	r1, r0
    1456:	480d      	ldr	r0, [pc, #52]	; (148c <Meltdown::setIndexesForSpokes(int)+0x74>)
    1458:	f005 f8f8 	bl	664c <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    145c:	4668      	mov	r0, sp
    145e:	f005 f871 	bl	6544 <String::~String()>
    1462:	4b0b      	ldr	r3, [pc, #44]	; (1490 <Meltdown::setIndexesForSpokes(int)+0x78>)
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
		}
	}
    1464:	4620      	mov	r0, r4
    1466:	f503 7216 	add.w	r2, r3, #600	; 0x258
    146a:	f823 0f02 	strh.w	r0, [r3, #2]!

	void clearLedIndexes()
	{
		for (int i = 0; i < NUM_LEDS; i++)
		{
			ledIndexes[i] = 0;
    146e:	4293      	cmp	r3, r2
    1470:	d1fb      	bne.n	146a <Meltdown::setIndexesForSpokes(int)+0x52>
			{
				for (int k = 0; k < NUM_SPOKE_LEDS_PER_STRIP; k++)
				{
					ledIndexes[(j * NUM_SPOKE_LEDS_PER_STRIP) + k] = (pentNumber * NUM_LEDS_PER_PENT) + (j * NUM_LEDS_PER_STRIP) + NUM_WHEEL_LEDS_PER_STRIP + k;
				}
			}
    1472:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1476:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    147a:	00ab      	lsls	r3, r5, #2
    147c:	4a05      	ldr	r2, [pc, #20]	; (1494 <Meltdown::setIndexesForSpokes(int)+0x7c>)
    147e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    1482:	8013      	strh	r3, [r2, #0]
		}
	}


    1484:	b005      	add	sp, #20
    1486:	bd30      	pop	{r4, r5, pc}
    1488:	1fff9484 	.word	0x1fff9484
    148c:	1fff91f8 	.word	0x1fff91f8
    1490:	1fff922a 	.word	0x1fff922a
    1494:	1fff922c 	.word	0x1fff922c

00001498 <Meltdown::executeSetup()>:
#pragma endregion COMMANDS

	void executeSetup()
	{
		// initialize serial communication at 9600 bits per second:
		Serial.begin(9600);
    1498:	b538      	push	{r3, r4, r5, lr}
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	constexpr HardwareSerial() {}
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
    149a:	f644 6020 	movw	r0, #20000	; 0x4e20
    149e:	f003 fbe7 	bl	4c70 <serial_begin>
    14a2:	2113      	movs	r1, #19
    14a4:	481f      	ldr	r0, [pc, #124]	; (1524 <Meltdown::executeSetup()+0x8c>)
    14a6:	f004 fc7d 	bl	5da4 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    14aa:	481f      	ldr	r0, [pc, #124]	; (1528 <Meltdown::executeSetup()+0x90>)
    14ac:	f004 ffa0 	bl	63f0 <Print::println()>

		bool m_isDebug = false;

		void InitSerial(bool isDebug)
		{
			m_isDebug = isDebug;
    14b0:	4b1e      	ldr	r3, [pc, #120]	; (152c <Meltdown::executeSetup()+0x94>)
    14b2:	2501      	movs	r5, #1
		Serial.println(F("Serial port opened."));
		MeltdownLogger.InitSerial(DEBUG);

		delay(3000);

		LEDS.addLeds<OCTOWS2811>(leds, NUM_LEDS_PER_PENT);
    14b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    14b8:	701d      	strb	r5, [r3, #0]
    14ba:	f003 fb1b 	bl	4af4 <delay>
#ifdef USE_OCTOWS2811
	template<OWS2811 CHIPSET, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		switch(CHIPSET) {
			case OCTOWS2811: { static COctoWS2811Controller<RGB_ORDER,WS2811_800kHz> controller; return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset); }
    14be:	481c      	ldr	r0, [pc, #112]	; (1530 <Meltdown::executeSetup()+0x98>)
    14c0:	6803      	ldr	r3, [r0, #0]
    14c2:	ea13 0405 	ands.w	r4, r3, r5
    14c6:	d00b      	beq.n	14e0 <Meltdown::executeSetup()+0x48>
    14c8:	2300      	movs	r3, #0
    14ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
    14ce:	4919      	ldr	r1, [pc, #100]	; (1534 <Meltdown::executeSetup()+0x9c>)
    14d0:	4819      	ldr	r0, [pc, #100]	; (1538 <Meltdown::executeSetup()+0xa0>)
    14d2:	f000 fd0b 	bl	1eec <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    14d6:	4a19      	ldr	r2, [pc, #100]	; (153c <Meltdown::executeSetup()+0xa4>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    14d8:	4b19      	ldr	r3, [pc, #100]	; (1540 <Meltdown::executeSetup()+0xa8>)
    14da:	68d2      	ldr	r2, [r2, #12]
    14dc:	701a      	strb	r2, [r3, #0]
    14de:	bd38      	pop	{r3, r4, r5, pc}
#ifdef USE_OCTOWS2811
	template<OWS2811 CHIPSET, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)
	{
		switch(CHIPSET) {
			case OCTOWS2811: { static COctoWS2811Controller<RGB_ORDER,WS2811_800kHz> controller; return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset); }
    14e0:	f003 fa88 	bl	49f4 <__cxa_guard_acquire>
    14e4:	2800      	cmp	r0, #0
    14e6:	d0ef      	beq.n	14c8 <Meltdown::executeSetup()+0x30>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    14e8:	4916      	ldr	r1, [pc, #88]	; (1544 <Meltdown::executeSetup()+0xac>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    14ea:	4b13      	ldr	r3, [pc, #76]	; (1538 <Meltdown::executeSetup()+0xa0>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    14ec:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    14ee:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14f0:	22ff      	movs	r2, #255	; 0xff
    14f2:	749d      	strb	r5, [r3, #18]
    14f4:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    14f6:	609c      	str	r4, [r3, #8]
    14f8:	731a      	strb	r2, [r3, #12]
    14fa:	735a      	strb	r2, [r3, #13]
    14fc:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14fe:	73da      	strb	r2, [r3, #15]
    1500:	741a      	strb	r2, [r3, #16]
    1502:	745a      	strb	r2, [r3, #17]
        if(m_pHead==NULL) { m_pHead = this; }
    1504:	b160      	cbz	r0, 1520 <Meltdown::executeSetup()+0x88>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    1506:	4a10      	ldr	r2, [pc, #64]	; (1548 <Meltdown::executeSetup()+0xb0>)
    1508:	6811      	ldr	r1, [r2, #0]
    150a:	b101      	cbz	r1, 150e <Meltdown::executeSetup()+0x76>
    150c:	608b      	str	r3, [r1, #8]
    }
  }
public:
  COctoWS2811Controller() { pocto = NULL; }
    150e:	490f      	ldr	r1, [pc, #60]	; (154c <Meltdown::executeSetup()+0xb4>)
        m_pTail = this;
    1510:	6013      	str	r3, [r2, #0]
    1512:	4807      	ldr	r0, [pc, #28]	; (1530 <Meltdown::executeSetup()+0x98>)
    1514:	6019      	str	r1, [r3, #0]
    1516:	2200      	movs	r2, #0
    1518:	619a      	str	r2, [r3, #24]
    151a:	f003 fa71 	bl	4a00 <__cxa_guard_release>
    151e:	e7d3      	b.n	14c8 <Meltdown::executeSetup()+0x30>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    1520:	600b      	str	r3, [r1, #0]
    1522:	e7f0      	b.n	1506 <Meltdown::executeSetup()+0x6e>
    1524:	00008e20 	.word	0x00008e20
    1528:	1fff873c 	.word	0x1fff873c
    152c:	1fff9964 	.word	0x1fff9964
    1530:	1fff91c0 	.word	0x1fff91c0
    1534:	1fff94b4 	.word	0x1fff94b4
    1538:	1fff91c4 	.word	0x1fff91c4
    153c:	1fff9890 	.word	0x1fff9890
    1540:	1fff986c 	.word	0x1fff986c
    1544:	1fff987c 	.word	0x1fff987c
    1548:	1fff988c 	.word	0x1fff988c
    154c:	00008c58 	.word	0x00008c58

00001550 <Meltdown::executeWheels(int)>:
	}

	void executeWheels(int numLeds)
	{
		if (MeltdownLED.GetBottom())
		{
    1550:	4b0c      	ldr	r3, [pc, #48]	; (1584 <Meltdown::executeWheels(int)+0x34>)
			// Call the current pattern function once, updating the 'leds' array.
    1552:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
    1556:	b19a      	cbz	r2, 1580 <Meltdown::executeWheels(int)+0x30>

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    1558:	2800      	cmp	r0, #0
    155a:	dd10      	ble.n	157e <Meltdown::executeWheels(int)+0x2e>
    155c:	4a0a      	ldr	r2, [pc, #40]	; (1588 <Meltdown::executeWheels(int)+0x38>)
	}

	void executeWheels(int numLeds)
	{
		if (MeltdownLED.GetBottom())
		{
    155e:	b430      	push	{r4, r5}
    1560:	4d0a      	ldr	r5, [pc, #40]	; (158c <Meltdown::executeWheels(int)+0x3c>)
    1562:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1566:	2100      	movs	r1, #0
			  {
				  leds[indexes[i]] = color;
    1568:	f832 3b02 	ldrh.w	r3, [r2], #2
    156c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1570:	18ec      	adds	r4, r5, r3

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    1572:	4290      	cmp	r0, r2
    1574:	54e9      	strb	r1, [r5, r3]
        g = (colorcode >>  8) & 0xFF;
    1576:	7061      	strb	r1, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    1578:	70a1      	strb	r1, [r4, #2]
    157a:	d1f5      	bne.n	1568 <Meltdown::executeWheels(int)+0x18>
			MeltdownLED.ExecutePattern(leds, ledIndexes, numLeds);
			MeltdownLED.ExecuteEffect(leds, ledIndexes, numLeds);
		}
	}

	void executeSpokes(int numLeds)
    157c:	bc30      	pop	{r4, r5}
    157e:	4770      	bx	lr
    1580:	f7fe bf7c 	b.w	47c <Meltdown::executeSpokes(int) [clone .part.48]>
    1584:	1fff9890 	.word	0x1fff9890
    1588:	1fff922c 	.word	0x1fff922c
    158c:	1fff94b4 	.word	0x1fff94b4

00001590 <Meltdown::executeSpokes(int)>:
	{
		if (MeltdownLED.GetTop())
		{
    1590:	4b0c      	ldr	r3, [pc, #48]	; (15c4 <Meltdown::executeSpokes(int)+0x34>)
			// Call the current pattern function once, updating the 'leds' array.
    1592:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    1596:	b19a      	cbz	r2, 15c0 <Meltdown::executeSpokes(int)+0x30>
    1598:	2800      	cmp	r0, #0
    159a:	dd10      	ble.n	15be <Meltdown::executeSpokes(int)+0x2e>
    159c:	4a0a      	ldr	r2, [pc, #40]	; (15c8 <Meltdown::executeSpokes(int)+0x38>)
	}

	void executeSpokes(int numLeds)
	{
		if (MeltdownLED.GetTop())
		{
    159e:	b430      	push	{r4, r5}
    15a0:	4d0a      	ldr	r5, [pc, #40]	; (15cc <Meltdown::executeSpokes(int)+0x3c>)
    15a2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    15a6:	2100      	movs	r1, #0
			  {
				  leds[indexes[i]] = color;
    15a8:	f832 3b02 	ldrh.w	r3, [r2], #2
    15ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    15b0:	18ec      	adds	r4, r5, r3

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    15b2:	4290      	cmp	r0, r2
    15b4:	54e9      	strb	r1, [r5, r3]
        g = (colorcode >>  8) & 0xFF;
    15b6:	7061      	strb	r1, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    15b8:	70a1      	strb	r1, [r4, #2]
    15ba:	d1f5      	bne.n	15a8 <Meltdown::executeSpokes(int)+0x18>
			MeltdownLED.ExecutePattern(leds, ledIndexes, numLeds);
			MeltdownLED.ExecuteEffect(leds, ledIndexes, numLeds);
		}
	}

	void executeLoop()
    15bc:	bc30      	pop	{r4, r5}
    15be:	4770      	bx	lr
    15c0:	f7fe bf5c 	b.w	47c <Meltdown::executeSpokes(int) [clone .part.48]>
    15c4:	1fff9890 	.word	0x1fff9890
    15c8:	1fff922c 	.word	0x1fff922c
    15cc:	1fff94b4 	.word	0x1fff94b4

000015d0 <Meltdown::executeLoop()>:
	{
		tryExecuteCommand();

    15d0:	4b34      	ldr	r3, [pc, #208]	; (16a4 <Meltdown::executeLoop()+0xd4>)

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
		{
			MeltdownSerial.SetInputStringComplete(false);
    15d2:	7d1b      	ldrb	r3, [r3, #20]
	}

	void executeLoop()
	{
		tryExecuteCommand();

    15d4:	b570      	push	{r4, r5, r6, lr}

	void tryExecuteCommand()
	{
		if (MeltdownSerial.GetInputStringComplete())
		{
			MeltdownSerial.SetInputStringComplete(false);
    15d6:	2b00      	cmp	r3, #0
    15d8:	d143      	bne.n	1662 <Meltdown::executeLoop()+0x92>
    15da:	4e33      	ldr	r6, [pc, #204]	; (16a8 <Meltdown::executeLoop()+0xd8>)
	{
		tryExecuteCommand();

		if (!MeltdownLED.GetPause() && !MeltdownLED.GetBlack())
		{
			if (MeltdownLED.GetMirror())
    15dc:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    15e0:	2b00      	cmp	r3, #0
    15e2:	d139      	bne.n	1658 <Meltdown::executeLoop()+0x88>
    15e4:	f896 4039 	ldrb.w	r4, [r6, #57]	; 0x39
    15e8:	b18c      	cbz	r4, 160e <Meltdown::executeLoop()+0x3e>
		else if (MeltdownLED.GetBlack())
		{
			// Set to black.
			setIndexesForAll();
			MeltdownLED.SetAllColor(leds, ledIndexes, NUM_LEDS, CRGB::Black);
		}
    15ea:	f7ff fb15 	bl	c18 <Meltdown::setIndexesForAll()>
    15ee:	4a2f      	ldr	r2, [pc, #188]	; (16ac <Meltdown::executeLoop()+0xdc>)
    15f0:	4c2f      	ldr	r4, [pc, #188]	; (16b0 <Meltdown::executeLoop()+0xe0>)
    15f2:	f502 7516 	add.w	r5, r2, #600	; 0x258
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    15f6:	2100      	movs	r1, #0
			  {
				  leds[indexes[i]] = color;
    15f8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    15fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1600:	18e0      	adds	r0, r4, r3

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    1602:	42aa      	cmp	r2, r5
    1604:	54e1      	strb	r1, [r4, r3]
        g = (colorcode >>  8) & 0xFF;
    1606:	7041      	strb	r1, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1608:	7081      	strb	r1, [r0, #2]
    160a:	d1f5      	bne.n	15f8 <Meltdown::executeLoop()+0x28>
    160c:	e019      	b.n	1642 <Meltdown::executeLoop()+0x72>

		if (!MeltdownLED.GetPause() && !MeltdownLED.GetBlack())
		{
			if (MeltdownLED.GetMirror())
			{
				for (int i = 0; i < NUM_PENTS; i++)
    160e:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
    1612:	b34b      	cbz	r3, 1668 <Meltdown::executeLoop()+0x98>
				{
					// WHEELS
					setIndexesForWheel(i);
					executeWheels(NUM_WHEEL_LEDS_PER_PENT);

    1614:	4620      	mov	r0, r4
    1616:	f7ff fe97 	bl	1348 <Meltdown::setIndexesForWheel(int)>
					// SPOKES
    161a:	f240 102b 	movw	r0, #299	; 0x12b
    161e:	f7ff ff97 	bl	1550 <Meltdown::executeWheels(int)>
					setIndexesForSpokes(i);
					executeSpokes(NUM_SPOKE_LEDS_PER_PENT);
				}
    1622:	4620      	mov	r0, r4
    1624:	f7ff fef8 	bl	1418 <Meltdown::setIndexesForSpokes(int)>

    1628:	2001      	movs	r0, #1
    162a:	f7ff ffb1 	bl	1590 <Meltdown::executeSpokes(int)>
    162e:	6af0      	ldr	r0, [r6, #44]	; 0x2c

		  int GetFrameStep(float multiplier = 1)
		  {
			  // A value of less than zero indicates that we don't want to have any kind of modified increase, like in the case
			  // of an especially long string of lights that would otherwise slow some patterns down.
			  if (gFrameStep <= 0) return 1;
    1630:	2800      	cmp	r0, #0
    1632:	dd33      	ble.n	169c <Meltdown::executeLoop()+0xcc>

			  return gFrameStep * multiplier;
    1634:	f005 fdea 	bl	720c <__aeabi_i2f>
    1638:	f006 f802 	bl	7640 <__aeabi_f2iz>

		  void ResetFrame() { gFrame = 1; }

		  void IncrementFrame(float multiplier = 1)
		  {
			  gFrame += (GetFrameStep(multiplier));
    163c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    163e:	4418      	add	r0, r3
    1640:	62b0      	str	r0, [r6, #40]	; 0x28
    1642:	6970      	ldr	r0, [r6, #20]
			MeltdownLED.SetAllColor(leds, ledIndexes, NUM_LEDS, CRGB::Black);
		}

		if (MeltdownLED.GetDelay() > 0)
		{
			delay(MeltdownLED.GetDelay());
    1644:	2800      	cmp	r0, #0
    1646:	dd01      	ble.n	164c <Meltdown::executeLoop()+0x7c>
		}

    1648:	f003 fa54 	bl	4af4 <delay>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    164c:	4819      	ldr	r0, [pc, #100]	; (16b4 <Meltdown::executeLoop()+0xe4>)
		//displayDebugColors();

		LEDS.show();
	}

	void executeSerialEvent()
    164e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1652:	7801      	ldrb	r1, [r0, #0]
    1654:	f000 bc9c 	b.w	1f90 <CFastLED::show(unsigned char)>
				MeltdownLED.IncrementFrame(1.5f);
			}
		}
		else if (MeltdownLED.GetBlack())
		{
			// Set to black.
    1658:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    165c:	2b00      	cmp	r3, #0
    165e:	d0f0      	beq.n	1642 <Meltdown::executeLoop()+0x72>
    1660:	e7c3      	b.n	15ea <Meltdown::executeLoop()+0x1a>
    1662:	f7ff faf5 	bl	c50 <Meltdown::tryExecuteCommand() [clone .part.50]>
    1666:	e7b8      	b.n	15da <Meltdown::executeLoop()+0xa>
			else
			{
				// WHEELS
				setIndexesForWheels();
				executeWheels(NUM_WHEEL_LEDS);

    1668:	f7ff fe4a 	bl	1300 <Meltdown::setIndexesForWheels()>
				// SPOKES
    166c:	f240 102b 	movw	r0, #299	; 0x12b
    1670:	f7ff ff6e 	bl	1550 <Meltdown::executeWheels(int)>
				setIndexesForSpokes();
				executeSpokes(NUM_SPOKE_LEDS);

    1674:	f7ff feae 	bl	13d4 <Meltdown::setIndexesForSpokes()>
				MeltdownLED.IncrementFrame(1.5f);
    1678:	2001      	movs	r0, #1
    167a:	f7ff ff89 	bl	1590 <Meltdown::executeSpokes(int)>
    167e:	6af0      	ldr	r0, [r6, #44]	; 0x2c

		  int GetFrameStep(float multiplier = 1)
		  {
			  // A value of less than zero indicates that we don't want to have any kind of modified increase, like in the case
			  // of an especially long string of lights that would otherwise slow some patterns down.
			  if (gFrameStep <= 0) return 1;
    1680:	2800      	cmp	r0, #0
    1682:	dd0d      	ble.n	16a0 <Meltdown::executeLoop()+0xd0>

			  return gFrameStep * multiplier;
    1684:	f005 fdc2 	bl	720c <__aeabi_i2f>
    1688:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    168c:	f005 fe12 	bl	72b4 <__aeabi_fmul>
    1690:	f005 ffd6 	bl	7640 <__aeabi_f2iz>

		  void ResetFrame() { gFrame = 1; }

		  void IncrementFrame(float multiplier = 1)
		  {
			  gFrame += (GetFrameStep(multiplier));
    1694:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1696:	4403      	add	r3, r0
    1698:	62b3      	str	r3, [r6, #40]	; 0x28
    169a:	e7d2      	b.n	1642 <Meltdown::executeLoop()+0x72>

		  int GetFrameStep(float multiplier = 1)
		  {
			  // A value of less than zero indicates that we don't want to have any kind of modified increase, like in the case
			  // of an especially long string of lights that would otherwise slow some patterns down.
			  if (gFrameStep <= 0) return 1;
    169c:	2001      	movs	r0, #1
    169e:	e7cd      	b.n	163c <Meltdown::executeLoop()+0x6c>
    16a0:	2001      	movs	r0, #1
    16a2:	e7f7      	b.n	1694 <Meltdown::executeLoop()+0xc4>
    16a4:	1fff9968 	.word	0x1fff9968
    16a8:	1fff9890 	.word	0x1fff9890
    16ac:	1fff922a 	.word	0x1fff922a
    16b0:	1fff94b4 	.word	0x1fff94b4
    16b4:	1fff986c 	.word	0x1fff986c

000016b8 <Meltdown::executeSerialEvent()>:
	}

	void executeSerialEvent()
	{
		while (Serial1.available() && !MeltdownSerial.GetInputStringComplete())
		{
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	4d1c      	ldr	r5, [pc, #112]	; (172c <Meltdown::executeSerialEvent()+0x74>)
    16bc:	b088      	sub	sp, #32
    16be:	462e      	mov	r6, r5
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    16c0:	f003 fb4c 	bl	4d5c <serial_available>
			// get the new byte:
    16c4:	b908      	cbnz	r0, 16ca <Meltdown::executeSerialEvent()+0x12>
				MeltdownSerial.SetInputStringComplete(true);
			}
		}
	}
}

    16c6:	b008      	add	sp, #32
    16c8:	bd70      	pop	{r4, r5, r6, pc}

	void executeSerialEvent()
	{
		while (Serial1.available() && !MeltdownSerial.GetInputStringComplete())
		{
			// get the new byte:
    16ca:	7d2b      	ldrb	r3, [r5, #20]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d1fa      	bne.n	16c6 <Meltdown::executeSerialEvent()+0xe>
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
    16d0:	f003 fb54 	bl	4d7c <serial_getchar>
			char inChar = (char)Serial1.read();
			// add it to the inputString:
			MeltdownSerial.AddCharToInputString(inChar);
    16d4:	b2c4      	uxtb	r4, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    16d6:	4621      	mov	r1, r4
    16d8:	4815      	ldr	r0, [pc, #84]	; (1730 <Meltdown::executeSerialEvent()+0x78>)
    16da:	f005 f801 	bl	66e0 <String::append(char)>
			// if the incoming character is a newline, set a flag
			// so the main loop can do something about it:
			if (inChar == '\n')
			{
				MeltdownLogger.Debug(Serial, F("Received input string"), MeltdownSerial.GetInputString());
    16de:	2c0a      	cmp	r4, #10
    16e0:	d1ee      	bne.n	16c0 <Meltdown::executeSerialEvent()+0x8>
				MeltdownSerial.SetInputStringComplete(true);
			}
    16e2:	4914      	ldr	r1, [pc, #80]	; (1734 <Meltdown::executeSerialEvent()+0x7c>)
    16e4:	a804      	add	r0, sp, #16
    16e6:	f004 ff81 	bl	65ec <String::String(__FlashStringHelper const*)>
			}

			String GetInputString() { return m_inputString; }
    16ea:	4668      	mov	r0, sp
    16ec:	4910      	ldr	r1, [pc, #64]	; (1730 <Meltdown::executeSerialEvent()+0x78>)
    16ee:	f004 ff8f 	bl	6610 <String::String(String const&)>
			serial.println(msg);
		}

		void Debug(Stream &serial, String msg, String value)
		{
			if (!m_isDebug) return;
    16f2:	4b11      	ldr	r3, [pc, #68]	; (1738 <Meltdown::executeSerialEvent()+0x80>)
    16f4:	781b      	ldrb	r3, [r3, #0]
    16f6:	b943      	cbnz	r3, 170a <Meltdown::executeSerialEvent()+0x52>
    16f8:	4668      	mov	r0, sp
    16fa:	f004 ff23 	bl	6544 <String::~String()>
    16fe:	a804      	add	r0, sp, #16
    1700:	f004 ff20 	bl	6544 <String::~String()>

			void AddCharToInputString(char inChar) { m_inputString += inChar; }

			bool GetInputStringComplete() { return m_inputStringComplete; }

			void SetInputStringComplete(bool value) { m_inputStringComplete = value; }
    1704:	2301      	movs	r3, #1
    1706:	7533      	strb	r3, [r6, #20]
    1708:	e7da      	b.n	16c0 <Meltdown::executeSerialEvent()+0x8>

			serial.print(msg);
    170a:	a904      	add	r1, sp, #16
    170c:	480b      	ldr	r0, [pc, #44]	; (173c <Meltdown::executeSerialEvent()+0x84>)
    170e:	f004 fe49 	bl	63a4 <Print::print(String const&)>
    1712:	2102      	movs	r1, #2
    1714:	480a      	ldr	r0, [pc, #40]	; (1740 <Meltdown::executeSerialEvent()+0x88>)
    1716:	f004 fb45 	bl	5da4 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    171a:	4669      	mov	r1, sp
    171c:	4807      	ldr	r0, [pc, #28]	; (173c <Meltdown::executeSerialEvent()+0x84>)
    171e:	f004 fe41 	bl	63a4 <Print::print(String const&)>
    1722:	4806      	ldr	r0, [pc, #24]	; (173c <Meltdown::executeSerialEvent()+0x84>)
    1724:	f004 fe64 	bl	63f0 <Print::println()>
    1728:	e7e6      	b.n	16f8 <Meltdown::executeSerialEvent()+0x40>
    172a:	bf00      	nop
    172c:	1fff9968 	.word	0x1fff9968
    1730:	1fff996c 	.word	0x1fff996c
    1734:	00008e34 	.word	0x00008e34
    1738:	1fff9964 	.word	0x1fff9964
    173c:	1fff873c 	.word	0x1fff873c
    1740:	00008c74 	.word	0x00008c74

00001744 <setup>:
	}
}

void setup()
{
	Meltdown::executeSetup();
    1744:	b508      	push	{r3, lr}
    1746:	f640 31b8 	movw	r1, #3000	; 0xbb8
    174a:	4810      	ldr	r0, [pc, #64]	; (178c <setup+0x48>)
    174c:	f002 ff98 	bl	4680 <VisualMicroDebug::init(unsigned long)>
    1750:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    1754:	480d      	ldr	r0, [pc, #52]	; (178c <setup+0x48>)
    1756:	f002 ff8f 	bl	4678 <VisualMicroDebug::begin(unsigned long)>
    175a:	2101      	movs	r1, #1
    175c:	480b      	ldr	r0, [pc, #44]	; (178c <setup+0x48>)
    175e:	f002 ff65 	bl	462c <VisualMicroDebug::outPacketStart(bool)>
    1762:	b150      	cbz	r0, 177a <setup+0x36>
    1764:	2110      	movs	r1, #16
    1766:	480a      	ldr	r0, [pc, #40]	; (1790 <setup+0x4c>)
    1768:	f004 fb1c 	bl	5da4 <usb_serial_write>
    176c:	4807      	ldr	r0, [pc, #28]	; (178c <setup+0x48>)
    176e:	210a      	movs	r1, #10
    1770:	f002 fed2 	bl	4518 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    1774:	4805      	ldr	r0, [pc, #20]	; (178c <setup+0x48>)
    1776:	f002 ff7d 	bl	4674 <VisualMicroDebug::outPacketEnd()>
    177a:	2201      	movs	r2, #1
    177c:	2100      	movs	r1, #0
    177e:	4803      	ldr	r0, [pc, #12]	; (178c <setup+0x48>)
    1780:	f003 f82a 	bl	47d8 <VisualMicroDebug::start(bool, bool)>
}

void loop()
    1784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup()
{
	Meltdown::executeSetup();
}

    1788:	f7ff be86 	b.w	1498 <Meltdown::executeSetup()>
    178c:	1fff9af0 	.word	0x1fff9af0
    1790:	00008e4c 	.word	0x00008e4c

00001794 <loop>:
void loop()
{
	Meltdown::executeLoop();
    1794:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1796:	4c25      	ldr	r4, [pc, #148]	; (182c <loop+0x98>)
    1798:	b085      	sub	sp, #20
    179a:	6823      	ldr	r3, [r4, #0]
    179c:	9301      	str	r3, [sp, #4]
	return ret;
    179e:	9b01      	ldr	r3, [sp, #4]
    17a0:	b923      	cbnz	r3, 17ac <loop+0x18>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17a2:	6823      	ldr	r3, [r4, #0]
    17a4:	9302      	str	r3, [sp, #8]
	return ret;
    17a6:	9b02      	ldr	r3, [sp, #8]
    17a8:	2b01      	cmp	r3, #1
    17aa:	d91e      	bls.n	17ea <loop+0x56>
    17ac:	4820      	ldr	r0, [pc, #128]	; (1830 <loop+0x9c>)
    17ae:	4d21      	ldr	r5, [pc, #132]	; (1834 <loop+0xa0>)
    17b0:	f002 fec4 	bl	453c <VisualMicroDebug::DBG_Millis()>
    17b4:	682a      	ldr	r2, [r5, #0]
    17b6:	4920      	ldr	r1, [pc, #128]	; (1838 <loop+0xa4>)
    17b8:	4290      	cmp	r0, r2
    17ba:	4603      	mov	r3, r0
    17bc:	6008      	str	r0, [r1, #0]
    17be:	d318      	bcc.n	17f2 <loop+0x5e>
    17c0:	1a9a      	subs	r2, r3, r2
    17c2:	2af9      	cmp	r2, #249	; 0xf9
    17c4:	d911      	bls.n	17ea <loop+0x56>
    17c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    17ca:	4819      	ldr	r0, [pc, #100]	; (1830 <loop+0x9c>)
    17cc:	602b      	str	r3, [r5, #0]
    17ce:	f002 febf 	bl	4550 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
    17d2:	2101      	movs	r1, #1
    17d4:	4816      	ldr	r0, [pc, #88]	; (1830 <loop+0x9c>)
    17d6:	f002 ff29 	bl	462c <VisualMicroDebug::outPacketStart(bool)>
    17da:	b978      	cbnz	r0, 17fc <loop+0x68>
    17dc:	4814      	ldr	r0, [pc, #80]	; (1830 <loop+0x9c>)
    17de:	2102      	movs	r1, #2
    17e0:	f002 fe9a 	bl	4518 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    17e4:	4812      	ldr	r0, [pc, #72]	; (1830 <loop+0x9c>)
    17e6:	f002 ff17 	bl	4618 <VisualMicroDebug::OnBreakPointEnd()>
}

    17ea:	f7ff fef1 	bl	15d0 <Meltdown::executeLoop()>
void serialEvent1()
    17ee:	b005      	add	sp, #20
    17f0:	bd30      	pop	{r4, r5, pc}
	Meltdown::executeSetup();
}

void loop()
{
	Meltdown::executeLoop();
    17f2:	602b      	str	r3, [r5, #0]
}

    17f4:	f7ff feec 	bl	15d0 <Meltdown::executeLoop()>
void serialEvent1()
    17f8:	b005      	add	sp, #20
    17fa:	bd30      	pop	{r4, r5, pc}
	Meltdown::executeSetup();
}

void loop()
{
	Meltdown::executeLoop();
    17fc:	2101      	movs	r1, #1
    17fe:	480c      	ldr	r0, [pc, #48]	; (1830 <loop+0x9c>)
    1800:	f002 feb8 	bl	4574 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
    1804:	2101      	movs	r1, #1
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <loop+0xa8>)
    1808:	f004 facc 	bl	5da4 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    180c:	6823      	ldr	r3, [r4, #0]
    180e:	9303      	str	r3, [sp, #12]
	return ret;
    1810:	9903      	ldr	r1, [sp, #12]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1812:	480b      	ldr	r0, [pc, #44]	; (1840 <loop+0xac>)
    1814:	2300      	movs	r3, #0
    1816:	220a      	movs	r2, #10
    1818:	f004 fdfa 	bl	6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    181c:	4804      	ldr	r0, [pc, #16]	; (1830 <loop+0x9c>)
    181e:	f002 feed 	bl	45fc <VisualMicroDebug::OnBreakPointPrintEnd()>
    1822:	4803      	ldr	r0, [pc, #12]	; (1830 <loop+0x9c>)
    1824:	f002 ff26 	bl	4674 <VisualMicroDebug::outPacketEnd()>
    1828:	e7d8      	b.n	17dc <loop+0x48>
    182a:	bf00      	nop
    182c:	1fff9b38 	.word	0x1fff9b38
    1830:	1fff9af0 	.word	0x1fff9af0
    1834:	1fff9228 	.word	0x1fff9228
    1838:	1fff9838 	.word	0x1fff9838
    183c:	00008e60 	.word	0x00008e60
    1840:	1fff873c 	.word	0x1fff873c

00001844 <serialEvent1()>:

void serialEvent1()
{
	Meltdown::executeSerialEvent();
    1844:	f7ff bf38 	b.w	16b8 <Meltdown::executeSerialEvent()>

00001848 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__>:
    1848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#pragma region INDEX SETUP

	const String INDEXES_NONE = "NONE";
	const String INDEXES_ALL = "ALL";
	const String INDEXES_WHEELS = "WHEELS";
    184c:	4e26      	ldr	r6, [pc, #152]	; (18e8 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xa0>)
    184e:	4d27      	ldr	r5, [pc, #156]	; (18ec <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xa4>)
    1850:	4c27      	ldr	r4, [pc, #156]	; (18f0 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xa8>)
	const String INDEXES_WHEEL = "WHEEL";
    1852:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1914 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xcc>

#pragma region INDEX SETUP

	const String INDEXES_NONE = "NONE";
	const String INDEXES_ALL = "ALL";
	const String INDEXES_WHEELS = "WHEELS";
    1856:	4927      	ldr	r1, [pc, #156]	; (18f4 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xac>)
	const String INDEXES_WHEEL = "WHEEL";
	const String INDEXES_SPOKES = "SPOKES";
    1858:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1918 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xd0>
	const String INDEXES_SPOKE = "SPOKE";
    185c:	4f26      	ldr	r7, [pc, #152]	; (18f8 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xb0>)

#pragma region INDEX SETUP

	const String INDEXES_NONE = "NONE";
	const String INDEXES_ALL = "ALL";
	const String INDEXES_WHEELS = "WHEELS";
    185e:	4630      	mov	r0, r6
    1860:	f004 feb0 	bl	65c4 <String::String(char const*)>
    1864:	462a      	mov	r2, r5
    1866:	4621      	mov	r1, r4
    1868:	4630      	mov	r0, r6
    186a:	f005 ff2f 	bl	76cc <__aeabi_atexit>
	const String INDEXES_WHEEL = "WHEEL";
    186e:	4648      	mov	r0, r9
    1870:	4922      	ldr	r1, [pc, #136]	; (18fc <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xb4>)
    1872:	f004 fea7 	bl	65c4 <String::String(char const*)>
    1876:	462a      	mov	r2, r5
    1878:	4621      	mov	r1, r4
    187a:	4648      	mov	r0, r9
    187c:	f005 ff26 	bl	76cc <__aeabi_atexit>
	const String INDEXES_SPOKES = "SPOKES";
    1880:	4640      	mov	r0, r8
    1882:	491f      	ldr	r1, [pc, #124]	; (1900 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xb8>)
	const String INDEXES_SPOKE = "SPOKE";

    1884:	f8df 9094 	ldr.w	r9, [pc, #148]	; 191c <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xd4>

	const String INDEXES_NONE = "NONE";
	const String INDEXES_ALL = "ALL";
	const String INDEXES_WHEELS = "WHEELS";
	const String INDEXES_WHEEL = "WHEEL";
	const String INDEXES_SPOKES = "SPOKES";
    1888:	f004 fe9c 	bl	65c4 <String::String(char const*)>
    188c:	462a      	mov	r2, r5
    188e:	4621      	mov	r1, r4
    1890:	4640      	mov	r0, r8
    1892:	f005 ff1b 	bl	76cc <__aeabi_atexit>
	const String INDEXES_SPOKE = "SPOKE";
    1896:	4638      	mov	r0, r7
    1898:	491a      	ldr	r1, [pc, #104]	; (1904 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xbc>)

	String gSelectedIndexes = INDEXES_NONE;
    189a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1920 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xd8>
	const String INDEXES_NONE = "NONE";
	const String INDEXES_ALL = "ALL";
	const String INDEXES_WHEELS = "WHEELS";
	const String INDEXES_WHEEL = "WHEEL";
	const String INDEXES_SPOKES = "SPOKES";
	const String INDEXES_SPOKE = "SPOKE";
    189e:	f004 fe91 	bl	65c4 <String::String(char const*)>
    18a2:	462a      	mov	r2, r5
    18a4:	4621      	mov	r1, r4
    18a6:	4638      	mov	r0, r7
    18a8:	f005 ff10 	bl	76cc <__aeabi_atexit>

    18ac:	4648      	mov	r0, r9
    18ae:	4916      	ldr	r1, [pc, #88]	; (1908 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xc0>)
	String gSelectedIndexes = INDEXES_NONE;

	void clearLedIndexes()
    18b0:	4f16      	ldr	r7, [pc, #88]	; (190c <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xc4>)
	const String INDEXES_ALL = "ALL";
	const String INDEXES_WHEELS = "WHEELS";
	const String INDEXES_WHEEL = "WHEEL";
	const String INDEXES_SPOKES = "SPOKES";
	const String INDEXES_SPOKE = "SPOKE";

    18b2:	f004 fe87 	bl	65c4 <String::String(char const*)>
    18b6:	462a      	mov	r2, r5
    18b8:	4621      	mov	r1, r4
    18ba:	4648      	mov	r0, r9
    18bc:	f005 ff06 	bl	76cc <__aeabi_atexit>
	String gSelectedIndexes = INDEXES_NONE;
    18c0:	4640      	mov	r0, r8
    18c2:	4913      	ldr	r1, [pc, #76]	; (1910 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0xc8>)
    18c4:	f004 fe7e 	bl	65c4 <String::String(char const*)>
    18c8:	462a      	mov	r2, r5
    18ca:	4621      	mov	r1, r4
    18cc:	4640      	mov	r0, r8
    18ce:	f005 fefd 	bl	76cc <__aeabi_atexit>

	void clearLedIndexes()
    18d2:	4631      	mov	r1, r6
    18d4:	4638      	mov	r0, r7
    18d6:	f004 fe9b 	bl	6610 <String::String(String const&)>
    18da:	462a      	mov	r2, r5
    18dc:	4621      	mov	r1, r4
    18de:	4638      	mov	r0, r7
void serialEvent1()
{
	Meltdown::executeSerialEvent();
    18e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const String INDEXES_SPOKES = "SPOKES";
	const String INDEXES_SPOKE = "SPOKE";

	String gSelectedIndexes = INDEXES_NONE;

	void clearLedIndexes()
    18e4:	f005 bef2 	b.w	76cc <__aeabi_atexit>
    18e8:	1fff9494 	.word	0x1fff9494
    18ec:	1fff8720 	.word	0x1fff8720
    18f0:	00006545 	.word	0x00006545
    18f4:	00008e64 	.word	0x00008e64
    18f8:	1fff9218 	.word	0x1fff9218
    18fc:	00008e6c 	.word	0x00008e6c
    1900:	00008e70 	.word	0x00008e70
    1904:	00008e78 	.word	0x00008e78
    1908:	00008e80 	.word	0x00008e80
    190c:	1fff91f8 	.word	0x1fff91f8
    1910:	00008e88 	.word	0x00008e88
    1914:	1fff91e8 	.word	0x1fff91e8
    1918:	1fff94a4 	.word	0x1fff94a4
    191c:	1fff9208 	.word	0x1fff9208
    1920:	1fff9484 	.word	0x1fff9484

00001924 <OctoWS2811::isr()>:
	dma3.attachInterrupt(isr);
	//pinMode(9, OUTPUT); // testing: oscilloscope trigger
}

void OctoWS2811::isr(void)
{
    1924:	b508      	push	{r3, lr}
    1926:	4a06      	ldr	r2, [pc, #24]	; (1940 <OctoWS2811::isr()+0x1c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1928:	4b06      	ldr	r3, [pc, #24]	; (1944 <OctoWS2811::isr()+0x20>)
    192a:	7912      	ldrb	r2, [r2, #4]
    192c:	701a      	strb	r2, [r3, #0]
	dma3.clearInterrupt();
#if defined(__MKL26Z64__)
	GPIOD_PCOR = 0xFF;
#endif
	//Serial1.print("*");
	update_completed_at = micros();
    192e:	f003 f8bf 	bl	4ab0 <micros>
    1932:	4a05      	ldr	r2, [pc, #20]	; (1948 <OctoWS2811::isr()+0x24>)
	update_in_progress = 0;
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <OctoWS2811::isr()+0x28>)
	dma3.clearInterrupt();
#if defined(__MKL26Z64__)
	GPIOD_PCOR = 0xFF;
#endif
	//Serial1.print("*");
	update_completed_at = micros();
    1936:	6010      	str	r0, [r2, #0]
	update_in_progress = 0;
    1938:	2200      	movs	r2, #0
    193a:	701a      	strb	r2, [r3, #0]
    193c:	bd08      	pop	{r3, pc}
    193e:	bf00      	nop
    1940:	1fff985c 	.word	0x1fff985c
    1944:	4000801f 	.word	0x4000801f
    1948:	1fff9840 	.word	0x1fff9840
    194c:	1fff9858 	.word	0x1fff9858

00001950 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    1950:	b510      	push	{r4, lr}
    1952:	4604      	mov	r4, r0
		release();
    1954:	f004 fb8e 	bl	6074 <DMAChannel::release()>
	}
    1958:	4620      	mov	r0, r4
    195a:	bd10      	pop	{r4, pc}

0000195c <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)>:

static uint8_t ones = 0xFF;
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
    195c:	b4f0      	push	{r4, r5, r6, r7}
{
	stripLen = numPerStrip;
    195e:	4f06      	ldr	r7, [pc, #24]	; (1978 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x1c>)
	frameBuffer = frameBuf;
    1960:	4e06      	ldr	r6, [pc, #24]	; (197c <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x20>)
	drawBuffer = drawBuf;
    1962:	4d07      	ldr	r5, [pc, #28]	; (1980 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x24>)
	params = config;
    1964:	4c07      	ldr	r4, [pc, #28]	; (1984 <OctoWS2811::OctoWS2811(unsigned long, void*, void*, unsigned char)+0x28>)
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
{
	stripLen = numPerStrip;
    1966:	8039      	strh	r1, [r7, #0]

static uint8_t ones = 0xFF;
static volatile uint8_t update_in_progress = 0;
static uint32_t update_completed_at = 0;

OctoWS2811::OctoWS2811(uint32_t numPerStrip, void *frameBuf, void *drawBuf, uint8_t config)
    1968:	f89d 1010 	ldrb.w	r1, [sp, #16]
{
	stripLen = numPerStrip;
	frameBuffer = frameBuf;
    196c:	6032      	str	r2, [r6, #0]
	drawBuffer = drawBuf;
    196e:	602b      	str	r3, [r5, #0]
	params = config;
    1970:	7021      	strb	r1, [r4, #0]
}
    1972:	bcf0      	pop	{r4, r5, r6, r7}
    1974:	4770      	bx	lr
    1976:	bf00      	nop
    1978:	1fff9848 	.word	0x1fff9848
    197c:	1fff9844 	.word	0x1fff9844
    1980:	1fff9854 	.word	0x1fff9854
    1984:	1fff983c 	.word	0x1fff983c

00001988 <OctoWS2811::begin()>:

// Discussion about timing and flicker & color shift issues:
// http://forum.pjrc.com/threads/23877-WS2812B-compatible-with-OctoWS2811-library?p=38190&viewfull=1#post38190

void OctoWS2811::begin(void)
{
    1988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    198a:	4ba2      	ldr	r3, [pc, #648]	; (1c14 <OctoWS2811::begin()+0x28c>)

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    198c:	4ea2      	ldr	r6, [pc, #648]	; (1c18 <OctoWS2811::begin()+0x290>)
// http://forum.pjrc.com/threads/23877-WS2812B-compatible-with-OctoWS2811-library?p=38190&viewfull=1#post38190

void OctoWS2811::begin(void)
{
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    198e:	881c      	ldrh	r4, [r3, #0]

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    1990:	6830      	ldr	r0, [r6, #0]
// http://forum.pjrc.com/threads/23877-WS2812B-compatible-with-OctoWS2811-library?p=38190&viewfull=1#post38190

void OctoWS2811::begin(void)
{
	uint32_t bufsize, frequency;
	bufsize = stripLen*24;
    1992:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1996:	00e4      	lsls	r4, r4, #3

	// set up the buffers
	memset(frameBuffer, 0, bufsize);
    1998:	4622      	mov	r2, r4
    199a:	2100      	movs	r1, #0
    199c:	f006 fa1a 	bl	7dd4 <memset>
	if (drawBuffer) {
    19a0:	4b9e      	ldr	r3, [pc, #632]	; (1c1c <OctoWS2811::begin()+0x294>)
    19a2:	6818      	ldr	r0, [r3, #0]
    19a4:	2800      	cmp	r0, #0
    19a6:	f000 8103 	beq.w	1bb0 <OctoWS2811::begin()+0x228>
		memset(drawBuffer, 0, bufsize);
    19aa:	4622      	mov	r2, r4
    19ac:	2100      	movs	r1, #0
    19ae:	f006 fa11 	bl	7dd4 <memset>
	} else {
		drawBuffer = frameBuffer;
	}

	// configure the 8 output pins
	GPIOD_PCOR = 0xFF;
    19b2:	4b9b      	ldr	r3, [pc, #620]	; (1c20 <OctoWS2811::begin()+0x298>)
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
    19b4:	4f9b      	ldr	r7, [pc, #620]	; (1c24 <OctoWS2811::begin()+0x29c>)
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
    19b6:	4d9c      	ldr	r5, [pc, #624]	; (1c28 <OctoWS2811::begin()+0x2a0>)
	} else {
		drawBuffer = frameBuffer;
	}

	// configure the 8 output pins
	GPIOD_PCOR = 0xFF;
    19b8:	22ff      	movs	r2, #255	; 0xff
    19ba:	601a      	str	r2, [r3, #0]
	pinMode(2, OUTPUT);	// strip #1
    19bc:	2101      	movs	r1, #1
    19be:	2002      	movs	r0, #2
    19c0:	f003 f870 	bl	4aa4 <pinMode>
	pinMode(14, OUTPUT);	// strip #2
    19c4:	2101      	movs	r1, #1
    19c6:	200e      	movs	r0, #14
    19c8:	f003 f86c 	bl	4aa4 <pinMode>
	pinMode(7, OUTPUT);	// strip #3
    19cc:	2101      	movs	r1, #1
    19ce:	2007      	movs	r0, #7
    19d0:	f003 f868 	bl	4aa4 <pinMode>
	pinMode(8, OUTPUT);	// strip #4
    19d4:	2101      	movs	r1, #1
    19d6:	2008      	movs	r0, #8
    19d8:	f003 f864 	bl	4aa4 <pinMode>
	pinMode(6, OUTPUT);	// strip #5
    19dc:	2101      	movs	r1, #1
    19de:	2006      	movs	r0, #6
    19e0:	f003 f860 	bl	4aa4 <pinMode>
	pinMode(20, OUTPUT);	// strip #6
    19e4:	2101      	movs	r1, #1
    19e6:	2014      	movs	r0, #20
    19e8:	f003 f85c 	bl	4aa4 <pinMode>
	pinMode(21, OUTPUT);	// strip #7
    19ec:	2101      	movs	r1, #1
    19ee:	2015      	movs	r0, #21
    19f0:	f003 f858 	bl	4aa4 <pinMode>
	pinMode(5, OUTPUT);	// strip #8
    19f4:	2005      	movs	r0, #5
    19f6:	2101      	movs	r1, #1
    19f8:	f003 f854 	bl	4aa4 <pinMode>

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    19fc:	4b8b      	ldr	r3, [pc, #556]	; (1c2c <OctoWS2811::begin()+0x2a4>)
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    19fe:	4a8c      	ldr	r2, [pc, #560]	; (1c30 <OctoWS2811::begin()+0x2a8>)
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1a00:	781b      	ldrb	r3, [r3, #0]

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
    1a02:	498c      	ldr	r1, [pc, #560]	; (1c34 <OctoWS2811::begin()+0x2ac>)
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
    1a04:	f8df c258 	ldr.w	ip, [pc, #600]	; 1c60 <OctoWS2811::begin()+0x2d8>
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1a0c:	2b10      	cmp	r3, #16
#elif defined(__MK20DX256__)
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1a0e:	f04f 0e08 	mov.w	lr, #8
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    1a12:	f04f 0300 	mov.w	r3, #0
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1a16:	bf0c      	ite	eq
    1a18:	2077      	moveq	r0, #119	; 0x77
    1a1a:	203b      	movne	r0, #59	; 0x3b
	// pin 16 triggers DMA(port B) on rising edge
	CORE_PIN16_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
	//CORE_PIN4_CONFIG = PORT_PCR_MUX(3); // testing only

#elif defined(__MK20DX256__)
	FTM2_SC = 0;
    1a1c:	6013      	str	r3, [r2, #0]
	FTM2_CNT = 0;
    1a1e:	603b      	str	r3, [r7, #0]
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
    1a20:	6008      	str	r0, [r1, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1a22:	f8c2 e000 	str.w	lr, [r2]
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    1a26:	f5a1 21db 	sub.w	r1, r1, #448512	; 0x6d800
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1a2a:	bf0c      	ite	eq
    1a2c:	f04f 0e1c 	moveq.w	lr, #28
    1a30:	f04f 0e0e 	movne.w	lr, #14
	FTM2_SC = 0;
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
    1a34:	f04f 0269 	mov.w	r2, #105	; 0x69
    1a38:	f8cc 2000 	str.w	r2, [ip]
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
    1a3c:	487e      	ldr	r0, [pc, #504]	; (1c38 <OctoWS2811::begin()+0x2b0>)
	FTM2_CNT = 0;
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
    1a3e:	602a      	str	r2, [r5, #0]
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    1a40:	f5a1 61f8 	sub.w	r1, r1, #1984	; 0x7c0
	uint32_t mod = (F_BUS + frequency / 2) / frequency;
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
    1a44:	f8c7 e00c 	str.w	lr, [r7, #12]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1a48:	f8df e208 	ldr.w	lr, [pc, #520]	; 1c54 <OctoWS2811::begin()+0x2cc>
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    1a4c:	4a7b      	ldr	r2, [pc, #492]	; (1c3c <OctoWS2811::begin()+0x2b4>)
	pinMode(20, OUTPUT);	// strip #6
	pinMode(21, OUTPUT);	// strip #7
	pinMode(5, OUTPUT);	// strip #8

	// create the two waveforms for WS2811 low and high bits
	switch (params & 0xF0) {
    1a4e:	bf0c      	ite	eq
    1a50:	2552      	moveq	r5, #82	; 0x52
    1a52:	2529      	movne	r5, #41	; 0x29
	FTM2_MOD = mod - 1;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x69;
	FTM2_C0V = (mod * WS2811_TIMING_T0H) >> 8;
	FTM2_C1V = (mod * WS2811_TIMING_T1H) >> 8;
    1a54:	6005      	str	r5, [r0, #0]
	// pin 32 is FTM2_CH0, PTB18, triggers DMA(port B) on rising edge
	// pin 25 is FTM2_CH1, PTB19
	CORE_PIN32_CONFIG = PORT_PCR_IRQC(1)|PORT_PCR_MUX(3);
    1a56:	600a      	str	r2, [r1, #0]
    1a58:	f8de 2000 	ldr.w	r2, [lr]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1a5c:	4d78      	ldr	r5, [pc, #480]	; (1c40 <OctoWS2811::begin()+0x2b8>)
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
    1a5e:	71d3      	strb	r3, [r2, #7]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    1a60:	2102      	movs	r1, #2
    1a62:	7191      	strb	r1, [r2, #6]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1a64:	4877      	ldr	r0, [pc, #476]	; (1c44 <OctoWS2811::begin()+0x2bc>)
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1a66:	88d1      	ldrh	r1, [r2, #6]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1a68:	6010      	str	r0, [r2, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1a6a:	6115      	str	r5, [r2, #16]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1a6c:	8bd5      	ldrh	r5, [r2, #30]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    1a6e:	8093      	strh	r3, [r2, #4]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1a70:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
    1a74:	f021 0107 	bic.w	r1, r1, #7
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->SLAST = 0;
    1a78:	60d3      	str	r3, [r2, #12]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1a7a:	8293      	strh	r3, [r2, #20]
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    1a7c:	6193      	str	r3, [r2, #24]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1a7e:	042f      	lsls	r7, r5, #16
			TCD->NBYTES = 2;
			if (TCD->SOFF != 0) TCD->SOFF = 2;
			if (TCD->DOFF != 0) TCD->DOFF = 2;
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
    1a80:	f04f 0301 	mov.w	r3, #1
    1a84:	6093      	str	r3, [r2, #8]
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1a86:	80d1      	strh	r1, [r2, #6]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1a88:	f100 8095 	bmi.w	1bb6 <OctoWS2811::begin()+0x22e>
			if (len > 32767) return;
    1a8c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    1a90:	b2a1      	uxth	r1, r4
    1a92:	f2c0 808a 	blt.w	1baa <OctoWS2811::begin()+0x222>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1a96:	8b95      	ldrh	r5, [r2, #28]
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1a98:	4f6b      	ldr	r7, [pc, #428]	; (1c48 <OctoWS2811::begin()+0x2c0>)
	dma1.transferSize(1);
	dma1.transferCount(bufsize);
	dma1.disableOnCompletion();

	// DMA channel #2 writes the pixel data at 23% of the cycle
	dma2.sourceBuffer((uint8_t *)frameBuffer, bufsize);
    1a9a:	f8d6 c000 	ldr.w	ip, [r6]
    1a9e:	683b      	ldr	r3, [r7, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1aa0:	4e6a      	ldr	r6, [pc, #424]	; (1c4c <OctoWS2811::begin()+0x2c4>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1aa2:	b2ad      	uxth	r5, r5
    1aa4:	f045 0508 	orr.w	r5, r5, #8
    1aa8:	8395      	strh	r5, [r2, #28]
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    1aaa:	2500      	movs	r5, #0
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    1aac:	2202      	movs	r2, #2
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
    1aae:	71dd      	strb	r5, [r3, #7]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    1ab0:	719a      	strb	r2, [r3, #6]
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1ab2:	f8c3 c000 	str.w	ip, [r3]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1ab6:	88da      	ldrh	r2, [r3, #6]
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
		TCD->BITER = len;
    1ab8:	83d9      	strh	r1, [r3, #30]
		TCD->CITER = len;
    1aba:	82d9      	strh	r1, [r3, #22]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1abc:	611e      	str	r6, [r3, #16]
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
		TCD->SLAST = -len;
    1abe:	4266      	negs	r6, r4
    1ac0:	60de      	str	r6, [r3, #12]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1ac2:	8bde      	ldrh	r6, [r3, #30]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1ac4:	829d      	strh	r5, [r3, #20]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    1aca:	619d      	str	r5, [r3, #24]
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    1acc:	2501      	movs	r5, #1
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1ace:	f022 0207 	bic.w	r2, r2, #7
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
		TCD->SOFF = 1;
    1ad2:	809d      	strh	r5, [r3, #4]
		TCD->ATTR_SRC = 0;
		TCD->NBYTES = 1;
    1ad4:	609d      	str	r5, [r3, #8]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1ad6:	0435      	lsls	r5, r6, #16
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1ad8:	80da      	strh	r2, [r3, #6]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1ada:	f100 8089 	bmi.w	1bf0 <OctoWS2811::begin()+0x268>
			if (len > 32767) return;
    1ade:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    1ae2:	db5f      	blt.n	1ba4 <OctoWS2811::begin()+0x21c>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1ae4:	8b9a      	ldrh	r2, [r3, #28]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1ae6:	4d5a      	ldr	r5, [pc, #360]	; (1c50 <OctoWS2811::begin()+0x2c8>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1ae8:	b292      	uxth	r2, r2
    1aea:	f042 0208 	orr.w	r2, r2, #8
    1aee:	839a      	strh	r2, [r3, #28]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1af0:	682b      	ldr	r3, [r5, #0]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1af2:	4a4b      	ldr	r2, [pc, #300]	; (1c20 <OctoWS2811::begin()+0x298>)

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    1af4:	6018      	str	r0, [r3, #0]
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 2;
    1af6:	2002      	movs	r0, #2
    1af8:	7198      	strb	r0, [r3, #6]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    1afa:	2000      	movs	r0, #0
		TCD->ATTR_SRC = 0;
    1afc:	71d8      	strb	r0, [r3, #7]
	}
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
    1afe:	611a      	str	r2, [r3, #16]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1b00:	88da      	ldrh	r2, [r3, #6]
	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
    1b02:	8098      	strh	r0, [r3, #4]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1b04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    1b08:	f022 0207 	bic.w	r2, r2, #7
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
		TCD->SOFF = 0;
		TCD->ATTR_SRC = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
		TCD->SLAST = 0;
    1b0c:	60d8      	str	r0, [r3, #12]
	void destination(volatile signed int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned int &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile signed long &p) { destination(*(volatile uint32_t *)&p); }
	void destination(volatile unsigned long &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    1b0e:	8298      	strh	r0, [r3, #20]
		TCD->ATTR_DST = 2;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 4;
		TCD->DLASTSGA = 0;
    1b10:	6198      	str	r0, [r3, #24]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1b12:	8bd8      	ldrh	r0, [r3, #30]
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
			if (TCD->SOFF != 0) TCD->SOFF = 1;
			if (TCD->DOFF != 0) TCD->DOFF = 1;
			TCD->ATTR = TCD->ATTR & 0xF8F8;
    1b14:	80da      	strh	r2, [r3, #6]
			TCD->NBYTES = 2;
			if (TCD->SOFF != 0) TCD->SOFF = 2;
			if (TCD->DOFF != 0) TCD->DOFF = 2;
			TCD->ATTR = (TCD->ATTR & 0xF8F8) | 0x0101;
		} else {
			TCD->NBYTES = 1;
    1b16:	2201      	movs	r2, #1
    1b18:	609a      	str	r2, [r3, #8]
		}
	}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    1b1a:	0402      	lsls	r2, r0, #16
    1b1c:	d45a      	bmi.n	1bd4 <OctoWS2811::begin()+0x24c>
			if (len > 32767) return;
    1b1e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    1b22:	db3c      	blt.n	1b9e <OctoWS2811::begin()+0x216>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1b24:	8b9e      	ldrh	r6, [r3, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1b26:	f89e 4004 	ldrb.w	r4, [lr, #4]
#elif defined(__MK20DX256__)
	// route the edge detect interrupts to trigger the 3 channels
	dma1.triggerAtHardwareEvent(DMAMUX_SOURCE_PORTB);
	dma2.triggerAtHardwareEvent(DMAMUX_SOURCE_FTM2_CH0);
	dma3.triggerAtHardwareEvent(DMAMUX_SOURCE_FTM2_CH1);
	DMAPriorityOrder(dma3, dma2, dma1);
    1b2a:	4a4a      	ldr	r2, [pc, #296]	; (1c54 <OctoWS2811::begin()+0x2cc>)
    1b2c:	4946      	ldr	r1, [pc, #280]	; (1c48 <OctoWS2811::begin()+0x2c0>)
    1b2e:	4848      	ldr	r0, [pc, #288]	; (1c50 <OctoWS2811::begin()+0x2c8>)
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    1b30:	b2b6      	uxth	r6, r6
    1b32:	f046 0608 	orr.w	r6, r6, #8
    1b36:	839e      	strh	r6, [r3, #28]
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    1b38:	8b9e      	ldrh	r6, [r3, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1b3a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    1b3e:	b2b6      	uxth	r6, r6
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1b40:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
    1b44:	f046 0602 	orr.w	r6, r6, #2
    1b48:	839e      	strh	r6, [r3, #28]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1b4a:	2600      	movs	r6, #0
		*mux = (source & 63) | DMAMUX_ENABLE;
    1b4c:	23b2      	movs	r3, #178	; 0xb2

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1b4e:	7026      	strb	r6, [r4, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1b50:	7023      	strb	r3, [r4, #0]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1b52:	793b      	ldrb	r3, [r7, #4]
    1b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1b58:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    1b5c:	24a2      	movs	r4, #162	; 0xa2

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1b5e:	701e      	strb	r6, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1b60:	701c      	strb	r4, [r3, #0]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1b62:	792b      	ldrb	r3, [r5, #4]
    1b64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1b68:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    1b6c:	24a3      	movs	r4, #163	; 0xa3

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1b6e:	701e      	strb	r6, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1b70:	701c      	strb	r4, [r3, #0]
    1b72:	f004 fa99 	bl	60a8 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)>
    1b76:	792a      	ldrb	r2, [r5, #4]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1b78:	4837      	ldr	r0, [pc, #220]	; (1c58 <OctoWS2811::begin()+0x2d0>)
    1b7a:	4d38      	ldr	r5, [pc, #224]	; (1c5c <OctoWS2811::begin()+0x2d4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1b7c:	1153      	asrs	r3, r2, #5
    1b7e:	009b      	lsls	r3, r3, #2
    1b80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1b84:	f102 0410 	add.w	r4, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1b88:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1b8c:	f002 021f 	and.w	r2, r2, #31
    1b90:	2101      	movs	r1, #1
    1b92:	fa01 f202 	lsl.w	r2, r1, r2

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1b96:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1b9a:	601a      	str	r2, [r3, #0]
    1b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    1b9e:	83d9      	strh	r1, [r3, #30]
			TCD->CITER = len;
    1ba0:	82d9      	strh	r1, [r3, #22]
    1ba2:	e7bf      	b.n	1b24 <OctoWS2811::begin()+0x19c>

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    1ba4:	83d9      	strh	r1, [r3, #30]
			TCD->CITER = len;
    1ba6:	82d9      	strh	r1, [r3, #22]
    1ba8:	e79c      	b.n	1ae4 <OctoWS2811::begin()+0x15c>

	// Set the number of transfers (number of triggers until complete)
	void transferCount(unsigned int len) {
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
    1baa:	83d1      	strh	r1, [r2, #30]
			TCD->CITER = len;
    1bac:	82d1      	strh	r1, [r2, #22]
    1bae:	e772      	b.n	1a96 <OctoWS2811::begin()+0x10e>
	// set up the buffers
	memset(frameBuffer, 0, bufsize);
	if (drawBuffer) {
		memset(drawBuffer, 0, bufsize);
	} else {
		drawBuffer = frameBuffer;
    1bb0:	6832      	ldr	r2, [r6, #0]
    1bb2:	601a      	str	r2, [r3, #0]
    1bb4:	e6fd      	b.n	19b2 <OctoWS2811::begin()+0x2a>
		} else {
			if (len > 511) return;
    1bb6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1bba:	da28      	bge.n	1c0e <OctoWS2811::begin()+0x286>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1bbc:	8bd3      	ldrh	r3, [r2, #30]
    1bbe:	b2a1      	uxth	r1, r4
    1bc0:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    1bc4:	430b      	orrs	r3, r1
    1bc6:	83d3      	strh	r3, [r2, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1bc8:	8ad3      	ldrh	r3, [r2, #22]
    1bca:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    1bce:	430b      	orrs	r3, r1
    1bd0:	82d3      	strh	r3, [r2, #22]
    1bd2:	e760      	b.n	1a96 <OctoWS2811::begin()+0x10e>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    1bd4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1bd8:	daa4      	bge.n	1b24 <OctoWS2811::begin()+0x19c>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1bda:	8bda      	ldrh	r2, [r3, #30]
    1bdc:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1be0:	430a      	orrs	r2, r1
    1be2:	83da      	strh	r2, [r3, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1be4:	8ada      	ldrh	r2, [r3, #22]
    1be6:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1bea:	4311      	orrs	r1, r2
    1bec:	82d9      	strh	r1, [r3, #22]
    1bee:	e799      	b.n	1b24 <OctoWS2811::begin()+0x19c>
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
			if (len > 32767) return;
			TCD->BITER = len;
			TCD->CITER = len;
		} else {
			if (len > 511) return;
    1bf0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1bf4:	f6bf af76 	bge.w	1ae4 <OctoWS2811::begin()+0x15c>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    1bf8:	8bda      	ldrh	r2, [r3, #30]
    1bfa:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1bfe:	430a      	orrs	r2, r1
    1c00:	83da      	strh	r2, [r3, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    1c02:	8ada      	ldrh	r2, [r3, #22]
    1c04:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    1c08:	430a      	orrs	r2, r1
    1c0a:	82da      	strh	r2, [r3, #22]
    1c0c:	e76a      	b.n	1ae4 <OctoWS2811::begin()+0x15c>
    1c0e:	b2a1      	uxth	r1, r4
    1c10:	e741      	b.n	1a96 <OctoWS2811::begin()+0x10e>
    1c12:	bf00      	nop
    1c14:	1fff9848 	.word	0x1fff9848
    1c18:	1fff9844 	.word	0x1fff9844
    1c1c:	1fff9854 	.word	0x1fff9854
    1c20:	400ff0c8 	.word	0x400ff0c8
    1c24:	400b8004 	.word	0x400b8004
    1c28:	400b8014 	.word	0x400b8014
    1c2c:	1fff983c 	.word	0x1fff983c
    1c30:	400b8000 	.word	0x400b8000
    1c34:	400b8008 	.word	0x400b8008
    1c38:	400b8018 	.word	0x400b8018
    1c3c:	00010300 	.word	0x00010300
    1c40:	400ff0c4 	.word	0x400ff0c4
    1c44:	1fff8724 	.word	0x1fff8724
    1c48:	1fff9864 	.word	0x1fff9864
    1c4c:	400ff0c0 	.word	0x400ff0c0
    1c50:	1fff985c 	.word	0x1fff985c
    1c54:	1fff984c 	.word	0x1fff984c
    1c58:	1fff8200 	.word	0x1fff8200
    1c5c:	00001925 	.word	0x00001925
    1c60:	400b800c 	.word	0x400b800c

00001c64 <OctoWS2811::show()>:
	if (micros() - update_completed_at < 300) return 1;
	return 0;
}

void OctoWS2811::show(void)
{
    1c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c66:	4c2d      	ldr	r4, [pc, #180]	; (1d1c <OctoWS2811::show()+0xb8>)
	// wait for any prior DMA operation
	//Serial1.print("1");
	while (update_in_progress) ;
    1c68:	7823      	ldrb	r3, [r4, #0]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d1fc      	bne.n	1c68 <OctoWS2811::show()+0x4>
	//Serial1.print("2");
	// it's ok to copy the drawing buffer to the frame buffer
	// during the 50us WS2811 reset time
	if (drawBuffer != frameBuffer) {
    1c6e:	4a2c      	ldr	r2, [pc, #176]	; (1d20 <OctoWS2811::show()+0xbc>)
    1c70:	4b2c      	ldr	r3, [pc, #176]	; (1d24 <OctoWS2811::show()+0xc0>)
    1c72:	6811      	ldr	r1, [r2, #0]
    1c74:	6818      	ldr	r0, [r3, #0]
    1c76:	4281      	cmp	r1, r0
    1c78:	d006      	beq.n	1c88 <OctoWS2811::show()+0x24>
		// TODO: this could be faster with DMA, especially if the
		// buffers are 32 bit aligned... but does it matter?
		memcpy(frameBuffer, drawBuffer, stripLen * 24);
    1c7a:	4b2b      	ldr	r3, [pc, #172]	; (1d28 <OctoWS2811::show()+0xc4>)
    1c7c:	881a      	ldrh	r2, [r3, #0]
    1c7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1c82:	00d2      	lsls	r2, r2, #3
    1c84:	f002 fdd6 	bl	4834 <memcpy>
    1c88:	4d28      	ldr	r5, [pc, #160]	; (1d2c <OctoWS2811::show()+0xc8>)
	}
	// wait for WS2811 reset
	while (micros() - update_completed_at < 300) ;
    1c8a:	f002 ff11 	bl	4ab0 <micros>
    1c8e:	682b      	ldr	r3, [r5, #0]
    1c90:	1ac0      	subs	r0, r0, r3
    1c92:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
    1c96:	d3f8      	bcc.n	1c8a <OctoWS2811::show()+0x26>
	dma3.enable();
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM1 timer
	//digitalWriteFast(9, LOW);

#elif defined(__MK20DX256__)
	FTM2_C0SC = 0x28;
    1c98:	4925      	ldr	r1, [pc, #148]	; (1d30 <OctoWS2811::show()+0xcc>)
	FTM2_C1SC = 0x28;
    1c9a:	4a26      	ldr	r2, [pc, #152]	; (1d34 <OctoWS2811::show()+0xd0>)
	dma3.enable();
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM1 timer
	//digitalWriteFast(9, LOW);

#elif defined(__MK20DX256__)
	FTM2_C0SC = 0x28;
    1c9c:	2328      	movs	r3, #40	; 0x28
    1c9e:	600b      	str	r3, [r1, #0]
	FTM2_C1SC = 0x28;
	delay(1);
    1ca0:	2001      	movs	r0, #1
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM1 timer
	//digitalWriteFast(9, LOW);

#elif defined(__MK20DX256__)
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
    1ca2:	6013      	str	r3, [r2, #0]
	delay(1);
    1ca4:	f002 ff26 	bl	4af4 <delay>
	uint32_t cv = FTM2_C0V;
    1ca8:	4b23      	ldr	r3, [pc, #140]	; (1d38 <OctoWS2811::show()+0xd4>)
    1caa:	681b      	ldr	r3, [r3, #0]
	noInterrupts();
    1cac:	b672      	cpsid	i
	// CAUTION: this code is timing critical.
	while (FTM2_CNT <= cv) ;
    1cae:	4923      	ldr	r1, [pc, #140]	; (1d3c <OctoWS2811::show()+0xd8>)
    1cb0:	680a      	ldr	r2, [r1, #0]
    1cb2:	4293      	cmp	r3, r2
    1cb4:	d2fc      	bcs.n	1cb0 <OctoWS2811::show()+0x4c>
	while (FTM2_CNT > cv) ; // wait for beginning of an 800 kHz cycle
    1cb6:	4921      	ldr	r1, [pc, #132]	; (1d3c <OctoWS2811::show()+0xd8>)
    1cb8:	680a      	ldr	r2, [r1, #0]
    1cba:	4293      	cmp	r3, r2
    1cbc:	d3fc      	bcc.n	1cb8 <OctoWS2811::show()+0x54>
	while (FTM2_CNT < cv) ;
    1cbe:	481f      	ldr	r0, [pc, #124]	; (1d3c <OctoWS2811::show()+0xd8>)
    1cc0:	6802      	ldr	r2, [r0, #0]
    1cc2:	491e      	ldr	r1, [pc, #120]	; (1d3c <OctoWS2811::show()+0xd8>)
    1cc4:	4293      	cmp	r3, r2
    1cc6:	d8fb      	bhi.n	1cc0 <OctoWS2811::show()+0x5c>
    1cc8:	4e1d      	ldr	r6, [pc, #116]	; (1d40 <OctoWS2811::show()+0xdc>)
    1cca:	4d1e      	ldr	r5, [pc, #120]	; (1d44 <OctoWS2811::show()+0xe0>)
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
    1ccc:	481e      	ldr	r0, [pc, #120]	; (1d48 <OctoWS2811::show()+0xe4>)
    1cce:	7937      	ldrb	r7, [r6, #4]
    1cd0:	792e      	ldrb	r6, [r5, #4]
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1cd2:	4b17      	ldr	r3, [pc, #92]	; (1d30 <OctoWS2811::show()+0xcc>)
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
    1cd4:	f8df e078 	ldr.w	lr, [pc, #120]	; 1d50 <OctoWS2811::show()+0xec>
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x28;
    1cd8:	4a16      	ldr	r2, [pc, #88]	; (1d34 <OctoWS2811::show()+0xd0>)
	noInterrupts();
	// CAUTION: this code is timing critical.
	while (FTM2_CNT <= cv) ;
	while (FTM2_CNT > cv) ; // wait for beginning of an 800 kHz cycle
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
    1cda:	2500      	movs	r5, #0
    1cdc:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    1cde:	600d      	str	r5, [r1, #0]
	update_in_progress = 1;
    1ce0:	2101      	movs	r1, #1
    1ce2:	7021      	strb	r1, [r4, #0]
    1ce4:	4d19      	ldr	r5, [pc, #100]	; (1d4c <OctoWS2811::show()+0xe8>)
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1ce6:	2428      	movs	r4, #40	; 0x28
	while (FTM2_CNT < cv) ;
	FTM2_SC = 0;             // stop FTM2 timer (hopefully before it rolls over)
	FTM2_CNT = 0;
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
    1ce8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1cec:	f8ce 1000 	str.w	r1, [lr]
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
    1cf0:	601c      	str	r4, [r3, #0]
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
    1cf2:	2169      	movs	r1, #105	; 0x69
	update_in_progress = 1;
	//digitalWriteFast(9, HIGH); // oscilloscope trigger
	PORTB_ISFR = (1<<18);    // clear any prior rising edge
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
    1cf4:	f8d3 e000 	ldr.w	lr, [r3]
    1cf8:	792d      	ldrb	r5, [r5, #4]
	FTM2_C0SC = 0x69;
    1cfa:	6019      	str	r1, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1cfc:	f46f 6e7f 	mvn.w	lr, #4080	; 0xff0
    1d00:	f5a3 232f 	sub.w	r3, r3, #716800	; 0xaf000
    1d04:	4473      	add	r3, lr
	FTM2_C1SC = 0x28;
    1d06:	6014      	str	r4, [r2, #0]
	tmp = FTM2_C1SC;
	FTM2_C1SC = 0x69;
	dma1.enable();
	dma2.enable();           // enable all 3 DMA channels
	dma3.enable();
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM2 timer
    1d08:	2408      	movs	r4, #8
	uint32_t tmp __attribute__((unused));
	FTM2_C0SC = 0x28;
	tmp = FTM2_C0SC;         // clear any prior timer DMA triggers
	FTM2_C0SC = 0x69;
	FTM2_C1SC = 0x28;
	tmp = FTM2_C1SC;
    1d0a:	f8d2 e000 	ldr.w	lr, [r2]
	FTM2_C1SC = 0x69;
    1d0e:	6011      	str	r1, [r2, #0]
    1d10:	701f      	strb	r7, [r3, #0]
    1d12:	701e      	strb	r6, [r3, #0]
    1d14:	701d      	strb	r5, [r3, #0]
	dma1.enable();
	dma2.enable();           // enable all 3 DMA channels
	dma3.enable();
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0); // restart FTM2 timer
    1d16:	6004      	str	r4, [r0, #0]
	FTM2_CNT = 0; // writing any value resets counter
	FTM2_SC = FTM_SC_DMA | FTM_SC_CLKS(1) | FTM_SC_PS(0);
	//digitalWriteFast(9, LOW);
#endif
	//Serial1.print("3");
	interrupts();
    1d18:	b662      	cpsie	i
    1d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d1c:	1fff9858 	.word	0x1fff9858
    1d20:	1fff9854 	.word	0x1fff9854
    1d24:	1fff9844 	.word	0x1fff9844
    1d28:	1fff9848 	.word	0x1fff9848
    1d2c:	1fff9840 	.word	0x1fff9840
    1d30:	400b800c 	.word	0x400b800c
    1d34:	400b8014 	.word	0x400b8014
    1d38:	400b8010 	.word	0x400b8010
    1d3c:	400b8004 	.word	0x400b8004
    1d40:	1fff984c 	.word	0x1fff984c
    1d44:	1fff9864 	.word	0x1fff9864
    1d48:	400b8000 	.word	0x400b8000
    1d4c:	1fff985c 	.word	0x1fff985c
    1d50:	4004a0a0 	.word	0x4004a0a0

00001d54 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE>:
		break;
	  default:
		break;
	}
	return color;
}
    1d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1d58:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1db0 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x5c>

uint16_t OctoWS2811::stripLen;
void * OctoWS2811::frameBuffer;
void * OctoWS2811::drawBuffer;
uint8_t OctoWS2811::params;
DMAChannel OctoWS2811::dma1;
    1d5c:	4d10      	ldr	r5, [pc, #64]	; (1da0 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x4c>)
    1d5e:	4c11      	ldr	r4, [pc, #68]	; (1da4 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x50>)
    1d60:	4f11      	ldr	r7, [pc, #68]	; (1da8 <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x54>)
    1d62:	4e12      	ldr	r6, [pc, #72]	; (1dac <_GLOBAL__sub_I__ZN10OctoWS28118stripLenE+0x58>)
    1d64:	4640      	mov	r0, r8
    1d66:	2100      	movs	r1, #0
    1d68:	f004 f920 	bl	5fac <DMAChannel::begin(bool)>
    1d6c:	462a      	mov	r2, r5
    1d6e:	4621      	mov	r1, r4
    1d70:	4640      	mov	r0, r8
    1d72:	f005 fcab 	bl	76cc <__aeabi_atexit>
    1d76:	4638      	mov	r0, r7
    1d78:	2100      	movs	r1, #0
    1d7a:	f004 f917 	bl	5fac <DMAChannel::begin(bool)>
DMAChannel OctoWS2811::dma2;
    1d7e:	462a      	mov	r2, r5
    1d80:	4621      	mov	r1, r4
    1d82:	4638      	mov	r0, r7
    1d84:	f005 fca2 	bl	76cc <__aeabi_atexit>
    1d88:	4630      	mov	r0, r6
    1d8a:	2100      	movs	r1, #0
    1d8c:	f004 f90e 	bl	5fac <DMAChannel::begin(bool)>
DMAChannel OctoWS2811::dma3;
    1d90:	462a      	mov	r2, r5
    1d92:	4621      	mov	r1, r4
    1d94:	4630      	mov	r0, r6
		break;
	  default:
		break;
	}
	return color;
}
    1d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
void * OctoWS2811::frameBuffer;
void * OctoWS2811::drawBuffer;
uint8_t OctoWS2811::params;
DMAChannel OctoWS2811::dma1;
DMAChannel OctoWS2811::dma2;
DMAChannel OctoWS2811::dma3;
    1d9a:	f005 bc97 	b.w	76cc <__aeabi_atexit>
    1d9e:	bf00      	nop
    1da0:	1fff8720 	.word	0x1fff8720
    1da4:	00001951 	.word	0x00001951
    1da8:	1fff9864 	.word	0x1fff9864
    1dac:	1fff985c 	.word	0x1fff985c
    1db0:	1fff984c 	.word	0x1fff984c

00001db4 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    1db4:	b322      	cbz	r2, 1e00 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    1db6:	2aff      	cmp	r2, #255	; 0xff
    1db8:	d023      	beq.n	1e02 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    1dba:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1dbc:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1dbe:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1dc0:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1dc2:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    1dc4:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1dc6:	43d2      	mvns	r2, r2
    1dc8:	fb06 7605 	mla	r6, r6, r5, r7
    1dcc:	b2d2      	uxtb	r2, r2
    1dce:	fb04 6402 	mla	r4, r4, r2, r6
    1dd2:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1dd6:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1dd8:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1dda:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    1ddc:	191f      	adds	r7, r3, r4
    1dde:	fb04 7405 	mla	r4, r4, r5, r7
    1de2:	fb03 4302 	mla	r3, r3, r2, r4
    1de6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1dea:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1dec:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    1dee:	18f1      	adds	r1, r6, r3
    1df0:	fb03 1505 	mla	r5, r3, r5, r1
    1df4:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    1df8:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    1dfa:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1dfe:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    1e00:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1e02:	780b      	ldrb	r3, [r1, #0]
    1e04:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    1e06:	784b      	ldrb	r3, [r1, #1]
    1e08:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    1e0a:	788b      	ldrb	r3, [r1, #2]
    1e0c:	7083      	strb	r3, [r0, #2]
    1e0e:	4770      	bx	lr

00001e10 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    1e10:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1e12:	780d      	ldrb	r5, [r1, #0]
    1e14:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    1e16:	784d      	ldrb	r5, [r1, #1]
    1e18:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    1e1a:	7889      	ldrb	r1, [r1, #2]
    1e1c:	7081      	strb	r1, [r0, #2]
    1e1e:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    1e20:	4611      	mov	r1, r2
    1e22:	461a      	mov	r2, r3
    1e24:	f7ff ffc6 	bl	1db4 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    1e28:	4620      	mov	r0, r4
    1e2a:	bd38      	pop	{r3, r4, r5, pc}

00001e2c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    1e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    1e30:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    1e32:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    1e36:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    1e3a:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    1e3c:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    1e40:	d000      	beq.n	1e44 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    1e42:	b9e6      	cbnz	r6, 1e7e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    1e44:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    1e46:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    1e48:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    1e4a:	2bff      	cmp	r3, #255	; 0xff
    1e4c:	d012      	beq.n	1e74 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d043      	beq.n	1eda <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    1e52:	3301      	adds	r3, #1
    1e54:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    1e56:	b11c      	cbz	r4, 1e60 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    1e58:	fb03 4404 	mla	r4, r3, r4, r4
    1e5c:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    1e60:	b119      	cbz	r1, 1e6a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    1e62:	fb03 1101 	mla	r1, r3, r1, r1
    1e66:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    1e6a:	b11a      	cbz	r2, 1e74 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    1e6c:	fb03 2202 	mla	r2, r3, r2, r2
    1e70:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1e74:	7004      	strb	r4, [r0, #0]
    1e76:	7041      	strb	r1, [r0, #1]
    1e78:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    1e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    1e7e:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    1e80:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    1e82:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    1e86:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    1e88:	d000      	beq.n	1e8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    1e8a:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    1e8c:	0112      	lsls	r2, r2, #4
    1e8e:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    1e92:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1e94:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1e98:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1e9c:	f891 8002 	ldrb.w	r8, [r1, #2]
    1ea0:	fb04 f606 	mul.w	r6, r4, r6
    1ea4:	1c51      	adds	r1, r2, #1
    1ea6:	fb04 f509 	mul.w	r5, r4, r9
    1eaa:	fb04 f407 	mul.w	r4, r4, r7
    1eae:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1eb2:	f3c6 2707 	ubfx	r7, r6, #8, #8
    1eb6:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1eba:	fb01 f60c 	mul.w	r6, r1, ip
    1ebe:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1ec2:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1ec6:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1eca:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1ece:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1ed2:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1ed4:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1ed6:	b2d2      	uxtb	r2, r2
    1ed8:	e7b7      	b.n	1e4a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    1eda:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    1edc:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    1ede:	461c      	mov	r4, r3
    1ee0:	7004      	strb	r4, [r0, #0]
    1ee2:	7041      	strb	r1, [r0, #1]
    1ee4:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    1ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1eea:	bf00      	nop

00001eec <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    1eee:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1ef0:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    1ef2:	4604      	mov	r4, r0
    1ef4:	bfcc      	ite	gt
    1ef6:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    1efa:	2500      	movle	r5, #0
    1efc:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1efe:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1f00:	bfd8      	it	le
    1f02:	4616      	movle	r6, r2

	pLed->init();
    1f04:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    1f06:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1f08:	6823      	ldr	r3, [r4, #0]
    1f0a:	6062      	str	r2, [r4, #4]
    1f0c:	695b      	ldr	r3, [r3, #20]
    1f0e:	4a0a      	ldr	r2, [pc, #40]	; (1f38 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    1f10:	6166      	str	r6, [r4, #20]
    1f12:	4293      	cmp	r3, r2
    1f14:	d101      	bne.n	1f1a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    1f16:	4620      	mov	r0, r4
    1f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    1f1a:	4620      	mov	r0, r4
    1f1c:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1f1e:	2800      	cmp	r0, #0
    1f20:	d0f9      	beq.n	1f16 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1f22:	4a06      	ldr	r2, [pc, #24]	; (1f3c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    1f24:	4b06      	ldr	r3, [pc, #24]	; (1f40 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    1f26:	6851      	ldr	r1, [r2, #4]
    1f28:	fb93 f0f0 	sdiv	r0, r3, r0
    1f2c:	4288      	cmp	r0, r1
    1f2e:	bf38      	it	cc
    1f30:	4608      	movcc	r0, r1
    1f32:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1f34:	4620      	mov	r0, r4
    1f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f38:	0000046d 	.word	0x0000046d
    1f3c:	1fff986c 	.word	0x1fff986c
    1f40:	000f4240 	.word	0x000f4240

00001f44 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1f44:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1f46:	4c0f      	ldr	r4, [pc, #60]	; (1f84 <CFastLED::countFPS(int)+0x40>)
    1f48:	6822      	ldr	r2, [r4, #0]
    1f4a:	1c53      	adds	r3, r2, #1
    1f4c:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1f4e:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1f50:	6023      	str	r3, [r4, #0]
    1f52:	db13      	blt.n	1f7c <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f54:	4d0c      	ldr	r5, [pc, #48]	; (1f88 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    1f56:	4a0d      	ldr	r2, [pc, #52]	; (1f8c <CFastLED::countFPS(int)+0x48>)
    1f58:	6829      	ldr	r1, [r5, #0]
    1f5a:	9101      	str	r1, [sp, #4]
	return ret;
    1f5c:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f5e:	682d      	ldr	r5, [r5, #0]
    1f60:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    1f62:	6816      	ldr	r6, [r2, #0]
	return ret;
    1f64:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    1f66:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    1f6c:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1f6e:	1b89      	subs	r1, r1, r6
    1f70:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    1f74:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1f76:	fbb3 f3f1 	udiv	r3, r3, r1
    1f7a:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    1f7c:	b003      	add	sp, #12
    1f7e:	bc70      	pop	{r4, r5, r6}
    1f80:	4770      	bx	lr
    1f82:	bf00      	nop
    1f84:	1fff9880 	.word	0x1fff9880
    1f88:	1fff9b38 	.word	0x1fff9b38
    1f8c:	1fff9888 	.word	0x1fff9888

00001f90 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    1f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f94:	6843      	ldr	r3, [r0, #4]
    1f96:	4c2d      	ldr	r4, [pc, #180]	; (204c <CFastLED::show(unsigned char)+0xbc>)
    1f98:	b083      	sub	sp, #12
    1f9a:	4606      	mov	r6, r0
    1f9c:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d14b      	bne.n	203a <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    1fa2:	f002 fd85 	bl	4ab0 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1fa6:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1fa8:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1faa:	b11b      	cbz	r3, 1fb4 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1fac:	4648      	mov	r0, r9
    1fae:	68b1      	ldr	r1, [r6, #8]
    1fb0:	4798      	blx	r3
    1fb2:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1fb4:	4b26      	ldr	r3, [pc, #152]	; (2050 <CFastLED::show(unsigned char)+0xc0>)
    1fb6:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1fb8:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1fba:	2c00      	cmp	r4, #0
    1fbc:	d036      	beq.n	202c <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1fbe:	8873      	ldrh	r3, [r6, #2]
    1fc0:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1fc2:	6861      	ldr	r1, [r4, #4]
    1fc4:	6962      	ldr	r2, [r4, #20]
    1fc6:	2b63      	cmp	r3, #99	; 0x63
    1fc8:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1fca:	bf98      	it	ls
    1fcc:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1fce:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1fd2:	f88d 5004 	strb.w	r5, [sp, #4]
    1fd6:	f88d 5005 	strb.w	r5, [sp, #5]
    1fda:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1fde:	f1b9 0f00 	cmp.w	r9, #0
    1fe2:	d01c      	beq.n	201e <CFastLED::show(unsigned char)+0x8e>
    1fe4:	f104 030b 	add.w	r3, r4, #11
    1fe8:	f10d 0e04 	add.w	lr, sp, #4
    1fec:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1ff0:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1ff4:	f1bb 0f00 	cmp.w	fp, #0
    1ff8:	d00d      	beq.n	2016 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    1ffa:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1ffe:	f10a 0001 	add.w	r0, sl, #1
    2002:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    2006:	f1ba 0f00 	cmp.w	sl, #0
    200a:	d004      	beq.n	2016 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    200c:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    2010:	0c00      	lsrs	r0, r0, #16
    2012:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    2016:	4563      	cmp	r3, ip
    2018:	f10e 0e01 	add.w	lr, lr, #1
    201c:	d1e8      	bne.n	1ff0 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    201e:	4620      	mov	r0, r4
    2020:	ab01      	add	r3, sp, #4
    2022:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    2024:	74a7      	strb	r7, [r4, #18]
    2026:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    2028:	2c00      	cmp	r4, #0
    202a:	d1c8      	bne.n	1fbe <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    202c:	4630      	mov	r0, r6
    202e:	2119      	movs	r1, #25
    2030:	f7ff ff88 	bl	1f44 <CFastLED::countFPS(int)>
}
    2034:	b003      	add	sp, #12
    2036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    203a:	f002 fd39 	bl	4ab0 <micros>
    203e:	6822      	ldr	r2, [r4, #0]
    2040:	6873      	ldr	r3, [r6, #4]
    2042:	1a80      	subs	r0, r0, r2
    2044:	4298      	cmp	r0, r3
    2046:	d3aa      	bcc.n	1f9e <CFastLED::show(unsigned char)+0xe>
    2048:	e7ab      	b.n	1fa2 <CFastLED::show(unsigned char)+0x12>
    204a:	bf00      	nop
    204c:	1fff9884 	.word	0x1fff9884
    2050:	1fff987c 	.word	0x1fff987c

00002054 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    2054:	2000      	movs	r0, #0
    2056:	4770      	bx	lr

00002058 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    2058:	4b04      	ldr	r3, [pc, #16]	; (206c <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    205a:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    205c:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    205e:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    2062:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    2064:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    2066:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    2068:	60da      	str	r2, [r3, #12]
    206a:	4770      	bx	lr
    206c:	1fff986c 	.word	0x1fff986c

00002070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    2070:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    2072:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    2074:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    2076:	7882      	ldrb	r2, [r0, #2]
    2078:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    207a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    207e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2082:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    2086:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    2088:	0625      	lsls	r5, r4, #24
    208a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    208e:	d45f      	bmi.n	2150 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    2090:	f004 0540 	and.w	r5, r4, #64	; 0x40
    2094:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    2098:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    209c:	2d00      	cmp	r5, #0
    209e:	d146      	bne.n	212e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    20a0:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    20a4:	2c00      	cmp	r4, #0
    20a6:	d06c      	beq.n	2182 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    20a8:	3355      	adds	r3, #85	; 0x55
    20aa:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    20ac:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    20ae:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    20b0:	2eff      	cmp	r6, #255	; 0xff
    20b2:	d01c      	beq.n	20ee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    20b4:	2e00      	cmp	r6, #0
    20b6:	d079      	beq.n	21ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    20b8:	b11c      	cbz	r4, 20c2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    20ba:	fb06 4404 	mla	r4, r6, r4, r4
    20be:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    20c2:	b11d      	cbz	r5, 20cc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    20c4:	fb06 5505 	mla	r5, r6, r5, r5
    20c8:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    20cc:	b11b      	cbz	r3, 20d6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    20ce:	fb06 3303 	mla	r3, r6, r3, r3
    20d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    20d6:	43f0      	mvns	r0, r6
    20d8:	b2c0      	uxtb	r0, r0
    20da:	fb00 0000 	mla	r0, r0, r0, r0
    20de:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    20e2:	4404      	add	r4, r0
            g += brightness_floor;
    20e4:	4405      	add	r5, r0
            b += brightness_floor;
    20e6:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    20e8:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    20ea:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    20ec:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    20ee:	2aff      	cmp	r2, #255	; 0xff
    20f0:	d018      	beq.n	2124 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    20f2:	fb12 f002 	smulbb	r0, r2, r2
    20f6:	3200      	adds	r2, #0
    20f8:	bf18      	it	ne
    20fa:	2201      	movne	r2, #1
    20fc:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    2100:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    2104:	d056      	beq.n	21b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    2106:	b11c      	cbz	r4, 2110 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    2108:	fb02 4404 	mla	r4, r2, r4, r4
    210c:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    2110:	b11d      	cbz	r5, 211a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    2112:	fb02 5505 	mla	r5, r2, r5, r5
    2116:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    211a:	b11b      	cbz	r3, 2124 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    211c:	fb02 3303 	mla	r3, r2, r3, r3
    2120:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    2124:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    2126:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    2128:	708b      	strb	r3, [r1, #2]
}
    212a:	bcf0      	pop	{r4, r5, r6, r7}
    212c:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    212e:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    2132:	bb5c      	cbnz	r4, 218c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    2134:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    2138:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    213c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    2140:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    2142:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    2144:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    2148:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    214a:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    214c:	463b      	mov	r3, r7
    214e:	e7af      	b.n	20b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    2150:	f004 0740 	and.w	r7, r4, #64	; 0x40
    2154:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    2158:	b9e7      	cbnz	r7, 2194 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    215a:	f004 0720 	and.w	r7, r4, #32
    215e:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    2162:	2f00      	cmp	r7, #0
    2164:	d136      	bne.n	21d4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    2166:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    216a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    216e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    2172:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    2176:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    217a:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    217c:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    217e:	b2c3      	uxtb	r3, r0
    2180:	e796      	b.n	20b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    2182:	43dc      	mvns	r4, r3
    2184:	b2e4      	uxtb	r4, r4
                g = third;
    2186:	461d      	mov	r5, r3
                b = 0;
    2188:	4603      	mov	r3, r0
    218a:	e791      	b.n	20b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    218c:	2400      	movs	r4, #0
                g = K255 - third;
    218e:	43dd      	mvns	r5, r3
    2190:	b2ed      	uxtb	r5, r5
    2192:	e78d      	b.n	20b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    2194:	f004 0420 	and.w	r4, r4, #32
    2198:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    219c:	b994      	cbnz	r4, 21c4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    219e:	f103 0455 	add.w	r4, r3, #85	; 0x55
    21a2:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    21a4:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    21a8:	b2db      	uxtb	r3, r3
    21aa:	e781      	b.n	20b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    21ac:	23ff      	movs	r3, #255	; 0xff
    21ae:	461d      	mov	r5, r3
    21b0:	461c      	mov	r4, r3
    21b2:	e79c      	b.n	20ee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    21b4:	4615      	mov	r5, r2
    21b6:	4614      	mov	r4, r2
    21b8:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    21ba:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    21bc:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    21be:	708b      	strb	r3, [r1, #2]
}
    21c0:	bcf0      	pop	{r4, r5, r6, r7}
    21c2:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    21c4:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    21c8:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    21ca:	2500      	movs	r5, #0
                b = K85 - third;
    21cc:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    21d0:	b2db      	uxtb	r3, r3
    21d2:	e76d      	b.n	20b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    21d4:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    21d6:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    21d8:	b2c3      	uxtb	r3, r0
    21da:	e769      	b.n	20b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

000021dc <Meltdown::CMeltdownLED::NullEffect(CRGB*, unsigned short*, int)>:
			  return SetEffectNumber(gCurrentEffectNumber + 1);
		  }

		  void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }

		  void NullEffect(CRGB leds[], uint16_t indexes[], int numLeds) { }
    21dc:	4770      	bx	lr
    21de:	bf00      	nop

000021e0 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)>:
				  hue++;
				  break;
			  }
		  }

		  void RainbowFull(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    21e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21e4:	b082      	sub	sp, #8
    21e6:	9f08      	ldr	r7, [sp, #32]
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    21e8:	2f00      	cmp	r7, #0
    21ea:	db22      	blt.n	2232 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x52>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    21ec:	6805      	ldr	r5, [r0, #0]
    21ee:	4c2c      	ldr	r4, [pc, #176]	; (22a0 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xc0>)
		  void RainbowFull(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  static int hue = 1;

			  // Modes
			  switch (GetModeNumber(modeOffset))
    21f0:	6886      	ldr	r6, [r0, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    21f2:	fba4 e405 	umull	lr, r4, r4, r5
    21f6:	08e4      	lsrs	r4, r4, #3
    21f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    21fc:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    2200:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2204:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		  void RainbowFull(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  static int hue = 1;

			  // Modes
			  switch (GetModeNumber(modeOffset))
    2208:	443e      	add	r6, r7
    220a:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
    220c:	3401      	adds	r4, #1
    220e:	fb96 f7f4 	sdiv	r7, r6, r4
    2212:	fb04 6617 	mls	r6, r4, r7, r6
    2216:	2e02      	cmp	r6, #2
    2218:	d017      	beq.n	224a <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x6a>
    221a:	2e03      	cmp	r6, #3
    221c:	d035      	beq.n	228a <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xaa>
    221e:	2e01      	cmp	r6, #1
    2220:	d107      	bne.n	2232 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x52>

		  void SetFrame() { gFrame = MeltdownSerial.GetValue(); }

		  long GetFrame()
		  {
			  if (gFrame < 1)
    2222:	6a84      	ldr	r4, [r0, #40]	; 0x28
    2224:	2c00      	cmp	r4, #0
    2226:	dd35      	ble.n	2294 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xb4>

			  // Modes
			  switch (GetModeNumber(modeOffset))
			  {
			  case 1:
				  if (GetFrame() % 2 == 0) hue++;
    2228:	07e0      	lsls	r0, r4, #31
    222a:	d50e      	bpl.n	224a <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x6a>
    222c:	481d      	ldr	r0, [pc, #116]	; (22a4 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xc4>)
    222e:	6805      	ldr	r5, [r0, #0]
    2230:	e00f      	b.n	2252 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x72>

		  void SetFrame() { gFrame = MeltdownSerial.GetValue(); }

		  long GetFrame()
		  {
			  if (gFrame < 1)
    2232:	6a84      	ldr	r4, [r0, #40]	; 0x28
    2234:	2c00      	cmp	r4, #0
    2236:	dd2d      	ble.n	2294 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xb4>
				  break;
			  case 3:
				  hue += 2;
				  break;
			  default:
				  if (GetFrame() % 3 == 0) hue++;
    2238:	481b      	ldr	r0, [pc, #108]	; (22a8 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xc8>)
    223a:	fb80 5004 	smull	r5, r0, r0, r4
    223e:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
    2242:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2246:	4284      	cmp	r4, r0
    2248:	d1f0      	bne.n	222c <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x4c>
			  {
			  case 1:
				  if (GetFrame() % 2 == 0) hue++;
				  break;
			  case 2:
				  hue++;
    224a:	4816      	ldr	r0, [pc, #88]	; (22a4 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xc4>)
    224c:	6805      	ldr	r5, [r0, #0]
    224e:	3501      	adds	r5, #1
    2250:	6005      	str	r5, [r0, #0]
			  }
		  }

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, int hue)
		  {
			  for (int i = 0; i < numLeds; i++)
    2252:	2b00      	cmp	r3, #0
    2254:	dd16      	ble.n	2284 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xa4>
    2256:	fa5f f885 	uxtb.w	r8, r5
    225a:	460f      	mov	r7, r1
    225c:	4614      	mov	r4, r2
    225e:	eb02 0643 	add.w	r6, r2, r3, lsl #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2262:	25ff      	movs	r5, #255	; 0xff
			  {
				  leds[indexes[i]] = CHSV(hue, 255, 255);
    2264:	f834 1b02 	ldrh.w	r1, [r4], #2
    2268:	f88d 8004 	strb.w	r8, [sp, #4]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    226c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2270:	4439      	add	r1, r7
    2272:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2274:	f88d 5005 	strb.w	r5, [sp, #5]
    2278:	f88d 5006 	strb.w	r5, [sp, #6]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    227c:	f7ff fef8 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			  }
		  }

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, int hue)
		  {
			  for (int i = 0; i < numLeds; i++)
    2280:	42a6      	cmp	r6, r4
    2282:	d1ef      	bne.n	2264 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x84>
				  if (GetFrame() % 3 == 0) hue++;
				  break;
			  }

			  SetAllColor(leds, indexes, numLeds, hue);
		  }
    2284:	b002      	add	sp, #8
    2286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				  break;
			  case 2:
				  hue++;
				  break;
			  case 3:
				  hue += 2;
    228a:	4806      	ldr	r0, [pc, #24]	; (22a4 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xc4>)
    228c:	6805      	ldr	r5, [r0, #0]
    228e:	3502      	adds	r5, #2
    2290:	6005      	str	r5, [r0, #0]
				  break;
    2292:	e7de      	b.n	2252 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x72>
    2294:	4d03      	ldr	r5, [pc, #12]	; (22a4 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0xc4>)

		  long GetFrame()
		  {
			  if (gFrame < 1)
			  {
				  gFrame = 1;
    2296:	2401      	movs	r4, #1
    2298:	682d      	ldr	r5, [r5, #0]
    229a:	6284      	str	r4, [r0, #40]	; 0x28
    229c:	e7d9      	b.n	2252 <Meltdown::CMeltdownLED::RainbowFull(CRGB*, unsigned short*, int, int)+0x72>
    229e:	bf00      	nop
    22a0:	cccccccd 	.word	0xcccccccd
    22a4:	1fff8728 	.word	0x1fff8728
    22a8:	55555556 	.word	0x55555556

000022ac <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)>:

				  FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
			  }
		  }

		  void SolidColors(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    22ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ae:	9e05      	ldr	r6, [sp, #20]
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    22b0:	2e00      	cmp	r6, #0
    22b2:	db1e      	blt.n	22f2 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x46>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    22b4:	6805      	ldr	r5, [r0, #0]
    22b6:	4c76      	ldr	r4, [pc, #472]	; (2490 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1e4>)
		  }

		  void SolidColors(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  // Modes
			  switch (GetModeNumber(modeOffset))
    22b8:	6887      	ldr	r7, [r0, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    22ba:	fba4 e405 	umull	lr, r4, r4, r5
    22be:	08e4      	lsrs	r4, r4, #3
    22c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    22c4:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    22c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    22cc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		  }

		  void SolidColors(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  // Modes
			  switch (GetModeNumber(modeOffset))
    22d0:	443e      	add	r6, r7
    22d2:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
    22d4:	3401      	adds	r4, #1
    22d6:	fb96 f0f4 	sdiv	r0, r6, r4
    22da:	fb04 6610 	mls	r6, r4, r0, r6
    22de:	3e01      	subs	r6, #1
    22e0:	2e09      	cmp	r6, #9
    22e2:	d806      	bhi.n	22f2 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x46>
    22e4:	e8df f006 	tbb	[pc, r6]
    22e8:	4f3d2a17 	.word	0x4f3d2a17
    22ec:	94837261 	.word	0x94837261
    22f0:	b7a6      	.short	0xb7a6

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    22f2:	2b00      	cmp	r3, #0
    22f4:	f340 80c0 	ble.w	2478 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1cc>
    22f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    22fc:	26ff      	movs	r6, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
    22fe:	2500      	movs	r5, #0
			  {
				  leds[indexes[i]] = color;
    2300:	f832 0b02 	ldrh.w	r0, [r2], #2
    2304:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2308:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    230a:	4293      	cmp	r3, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    230c:	540e      	strb	r6, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    230e:	7065      	strb	r5, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    2310:	70a5      	strb	r5, [r4, #2]
    2312:	d1f5      	bne.n	2300 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x54>
    2314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2316:	2b00      	cmp	r3, #0
    2318:	f340 80b8 	ble.w	248c <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1e0>
    231c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2320:	27ff      	movs	r7, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
    2322:	2645      	movs	r6, #69	; 0x45
        b = (colorcode >>  0) & 0xFF;
    2324:	2500      	movs	r5, #0
			  {
				  leds[indexes[i]] = color;
    2326:	f832 0b02 	ldrh.w	r0, [r2], #2
    232a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    232e:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    2330:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2332:	540f      	strb	r7, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    2334:	7066      	strb	r6, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    2336:	70a5      	strb	r5, [r4, #2]
    2338:	d1f5      	bne.n	2326 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x7a>
    233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    233c:	2b00      	cmp	r3, #0
    233e:	f340 80a4 	ble.w	248a <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1de>
    2342:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2346:	27ff      	movs	r7, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
    2348:	26a5      	movs	r6, #165	; 0xa5
        b = (colorcode >>  0) & 0xFF;
    234a:	2500      	movs	r5, #0
			  {
				  leds[indexes[i]] = color;
    234c:	f832 0b02 	ldrh.w	r0, [r2], #2
    2350:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2354:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    2356:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2358:	540f      	strb	r7, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    235a:	7066      	strb	r6, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    235c:	70a5      	strb	r5, [r4, #2]
    235e:	d1f5      	bne.n	234c <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0xa0>
    2360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2362:	2b00      	cmp	r3, #0
    2364:	f340 8090 	ble.w	2488 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1dc>
    2368:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    236c:	25ff      	movs	r5, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    236e:	2600      	movs	r6, #0
			  {
				  leds[indexes[i]] = color;
    2370:	f832 0b02 	ldrh.w	r0, [r2], #2
    2374:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2378:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    237a:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    237c:	540d      	strb	r5, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    237e:	7065      	strb	r5, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    2380:	70a6      	strb	r6, [r4, #2]
    2382:	d1f5      	bne.n	2370 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0xc4>
    2384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2386:	2b00      	cmp	r3, #0
    2388:	dd7d      	ble.n	2486 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1da>
    238a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    238e:	27ad      	movs	r7, #173	; 0xad
        g = (colorcode >>  8) & 0xFF;
    2390:	26ff      	movs	r6, #255	; 0xff
        b = (colorcode >>  0) & 0xFF;
    2392:	252f      	movs	r5, #47	; 0x2f
			  {
				  leds[indexes[i]] = color;
    2394:	f832 0b02 	ldrh.w	r0, [r2], #2
    2398:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    239c:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    239e:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23a0:	540f      	strb	r7, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    23a2:	7066      	strb	r6, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    23a4:	70a5      	strb	r5, [r4, #2]
    23a6:	d1f5      	bne.n	2394 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0xe8>
    23a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23aa:	2b00      	cmp	r3, #0
    23ac:	dd6a      	ble.n	2484 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1d8>
    23ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23b2:	2500      	movs	r5, #0
        g = (colorcode >>  8) & 0xFF;
    23b4:	2680      	movs	r6, #128	; 0x80
			  {
				  leds[indexes[i]] = color;
    23b6:	f832 0b02 	ldrh.w	r0, [r2], #2
    23ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23be:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    23c0:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23c2:	540d      	strb	r5, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    23c4:	7066      	strb	r6, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    23c6:	70a5      	strb	r5, [r4, #2]
    23c8:	d1f5      	bne.n	23b6 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x10a>
    23ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23cc:	2b00      	cmp	r3, #0
    23ce:	dd58      	ble.n	2482 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1d6>
    23d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23d4:	2600      	movs	r6, #0
        g = (colorcode >>  8) & 0xFF;
    23d6:	2580      	movs	r5, #128	; 0x80
			  {
				  leds[indexes[i]] = color;
    23d8:	f832 0b02 	ldrh.w	r0, [r2], #2
    23dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23e0:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    23e2:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23e4:	540e      	strb	r6, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    23e6:	7065      	strb	r5, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    23e8:	70a5      	strb	r5, [r4, #2]
    23ea:	d1f5      	bne.n	23d8 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x12c>
    23ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ee:	2b00      	cmp	r3, #0
    23f0:	dd46      	ble.n	2480 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1d4>
    23f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    23f6:	2500      	movs	r5, #0
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    23f8:	26ff      	movs	r6, #255	; 0xff
			  {
				  leds[indexes[i]] = color;
    23fa:	f832 0b02 	ldrh.w	r0, [r2], #2
    23fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2402:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    2404:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2406:	540d      	strb	r5, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    2408:	7065      	strb	r5, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    240a:	70a6      	strb	r6, [r4, #2]
    240c:	d1f5      	bne.n	23fa <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x14e>
    240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2410:	2b00      	cmp	r3, #0
    2412:	dd34      	ble.n	247e <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1d2>
    2414:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2418:	274b      	movs	r7, #75	; 0x4b
        g = (colorcode >>  8) & 0xFF;
    241a:	2600      	movs	r6, #0
        b = (colorcode >>  0) & 0xFF;
    241c:	2582      	movs	r5, #130	; 0x82
			  {
				  leds[indexes[i]] = color;
    241e:	f832 0b02 	ldrh.w	r0, [r2], #2
    2422:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2426:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    2428:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    242a:	540f      	strb	r7, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    242c:	7066      	strb	r6, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    242e:	70a5      	strb	r5, [r4, #2]
    2430:	d1f5      	bne.n	241e <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x172>
    2432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2434:	2b00      	cmp	r3, #0
    2436:	dd21      	ble.n	247c <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1d0>
    2438:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    243c:	25ee      	movs	r5, #238	; 0xee
        g = (colorcode >>  8) & 0xFF;
    243e:	2682      	movs	r6, #130	; 0x82
			  {
				  leds[indexes[i]] = color;
    2440:	f832 0b02 	ldrh.w	r0, [r2], #2
    2444:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2448:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    244a:	429a      	cmp	r2, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    244c:	540d      	strb	r5, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    244e:	7066      	strb	r6, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    2450:	70a5      	strb	r5, [r4, #2]
    2452:	d1f5      	bne.n	2440 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x194>
    2454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2456:	2b00      	cmp	r3, #0
    2458:	dd0f      	ble.n	247a <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1ce>
    245a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    245e:	25ff      	movs	r5, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
    2460:	2600      	movs	r6, #0
			  {
				  leds[indexes[i]] = color;
    2462:	f832 0b02 	ldrh.w	r0, [r2], #2
    2466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    246a:	180c      	adds	r4, r1, r0

#pragma region UTILITY

		  void SetAllColor(CRGB leds[], uint16_t indexes[], int numLeds, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numLeds; i++)
    246c:	4293      	cmp	r3, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    246e:	540d      	strb	r5, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
    2470:	7066      	strb	r6, [r4, #1]
        b = (colorcode >>  0) & 0xFF;
    2472:	70a5      	strb	r5, [r4, #2]
    2474:	d1f5      	bne.n	2462 <Meltdown::CMeltdownLED::SolidColors(CRGB*, unsigned short*, int, int)+0x1b6>
    2476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    248e:	bf00      	nop
    2490:	cccccccd 	.word	0xcccccccd

00002494 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)>:
			  default:
				  SetAllColor(leds, indexes, numLeds, CRGB::Red);
			  }
		  }

		  void Rainbow(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2498:	4681      	mov	r9, r0
    249a:	b083      	sub	sp, #12
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    249c:	6980      	ldr	r0, [r0, #24]
		  void Rainbow(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  static int hue = 1;

			  int deltaHue = GetAnalogPattern(1, 15);
			  FillRainbow(leds, indexes, numLeds, gHue + gPos + hue, deltaHue);
    249e:	f8df a144 	ldr.w	sl, [pc, #324]	; 25e4 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x150>
			  default:
				  SetAllColor(leds, indexes, numLeds, CRGB::Red);
			  }
		  }

		  void Rainbow(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    24a2:	4698      	mov	r8, r3
    24a4:	4615      	mov	r5, r2
    24a6:	460c      	mov	r4, r1
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    24a8:	f004 feb0 	bl	720c <__aeabi_i2f>
    24ac:	494a      	ldr	r1, [pc, #296]	; (25d8 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x144>)
    24ae:	f004 ff01 	bl	72b4 <__aeabi_fmul>
    24b2:	494a      	ldr	r1, [pc, #296]	; (25dc <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x148>)
    24b4:	f004 ffb2 	bl	741c <__aeabi_fdiv>
    24b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    24bc:	f004 fdf2 	bl	70a4 <__addsf3>
    24c0:	f005 f8be 	bl	7640 <__aeabi_f2iz>
		  }

		  void FillRainbow(CRGB leds[], uint16_t indexes[], int numLeds, int initialHue, int deltaHue)
		  {
			  CHSV hsv;
			  hsv.hue = initialHue;
    24c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
    24c8:	f8d9 2020 	ldr.w	r2, [r9, #32]
    24cc:	f8da 3000 	ldr.w	r3, [sl]
    24d0:	440a      	add	r2, r1
    24d2:	4413      	add	r3, r2
    24d4:	f88d 3004 	strb.w	r3, [sp, #4]
			  hsv.val = 255;
    24d8:	22ff      	movs	r2, #255	; 0xff
			  hsv.sat = 240;
    24da:	23f0      	movs	r3, #240	; 0xf0
			  for (int i = 0; i < numLeds; i++)
    24dc:	f1b8 0f00 	cmp.w	r8, #0

		  void FillRainbow(CRGB leds[], uint16_t indexes[], int numLeds, int initialHue, int deltaHue)
		  {
			  CHSV hsv;
			  hsv.hue = initialHue;
			  hsv.val = 255;
    24e0:	f88d 2006 	strb.w	r2, [sp, #6]
			  hsv.sat = 240;
    24e4:	f88d 3005 	strb.w	r3, [sp, #5]
			  for (int i = 0; i < numLeds; i++)
    24e8:	dd12      	ble.n	2510 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x7c>
    24ea:	b2c6      	uxtb	r6, r0
    24ec:	46ab      	mov	fp, r5
    24ee:	eb05 0748 	add.w	r7, r5, r8, lsl #1
			  {
				  leds[indexes[i]] = hsv;
    24f2:	f83b 1b02 	ldrh.w	r1, [fp], #2
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    24f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24fa:	4421      	add	r1, r4
    24fc:	a801      	add	r0, sp, #4
    24fe:	f7ff fdb7 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				  hsv.hue += deltaHue;
    2502:	f89d 2004 	ldrb.w	r2, [sp, #4]
		  {
			  CHSV hsv;
			  hsv.hue = initialHue;
			  hsv.val = 255;
			  hsv.sat = 240;
			  for (int i = 0; i < numLeds; i++)
    2506:	45bb      	cmp	fp, r7
			  {
				  leds[indexes[i]] = hsv;
				  hsv.hue += deltaHue;
    2508:	4432      	add	r2, r6
    250a:	f88d 2004 	strb.w	r2, [sp, #4]
		  {
			  CHSV hsv;
			  hsv.hue = initialHue;
			  hsv.val = 255;
			  hsv.sat = 240;
			  for (int i = 0; i < numLeds; i++)
    250e:	d1f0      	bne.n	24f2 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x5e>
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    2510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2512:	2b00      	cmp	r3, #0
    2514:	db27      	blt.n	2566 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd2>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    2516:	f8d9 2000 	ldr.w	r2, [r9]
    251a:	4b31      	ldr	r3, [pc, #196]	; (25e0 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x14c>)

			  int deltaHue = GetAnalogPattern(1, 15);
			  FillRainbow(leds, indexes, numLeds, gHue + gPos + hue, deltaHue);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    251c:	f8d9 1008 	ldr.w	r1, [r9, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    2520:	fba3 0302 	umull	r0, r3, r3, r2
    2524:	08db      	lsrs	r3, r3, #3
    2526:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    252a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    252e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2532:	eb09 0983 	add.w	r9, r9, r3, lsl #2

			  int deltaHue = GetAnalogPattern(1, 15);
			  FillRainbow(leds, indexes, numLeds, gHue + gPos + hue, deltaHue);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    2536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2538:	eb03 0b01 	add.w	fp, r3, r1
    253c:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
    2540:	3301      	adds	r3, #1
    2542:	fb9b f1f3 	sdiv	r1, fp, r3
    2546:	fb03 bb11 	mls	fp, r3, r1, fp
    254a:	f1bb 0f02 	cmp.w	fp, #2
    254e:	d00d      	beq.n	256c <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd8>
    2550:	f1bb 0f03 	cmp.w	fp, #3
    2554:	d023      	beq.n	259e <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x10a>
    2556:	f1bb 0f01 	cmp.w	fp, #1
    255a:	d104      	bne.n	2566 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd2>
			  {
			  case 1:
				  // Increment the hue.
				  hue++;
    255c:	f8da 3000 	ldr.w	r3, [sl]
    2560:	3301      	adds	r3, #1
    2562:	f8ca 3000 	str.w	r3, [sl]
				  // Invert rainbox colors and increment the hue.
				  Invert(leds, indexes, numLeds);
				  hue++;
				  break;
			  }
		  }
    2566:	b003      	add	sp, #12
    2568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

		  int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

		  void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
		  {
			  for (int i = 0; i < numLeds; i++)
    256c:	f1b8 0f00 	cmp.w	r8, #0
    2570:	bfc8      	it	gt
    2572:	eb05 0848 	addgt.w	r8, r5, r8, lsl #1
    2576:	ddf6      	ble.n	2566 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd2>
			  {
				  leds[indexes[i]] = -leds[indexes[i]];
    2578:	f835 3b02 	ldrh.w	r3, [r5], #2
    257c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2580:	18e2      	adds	r2, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2582:	5ce6      	ldrb	r6, [r4, r3]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    2584:	7850      	ldrb	r0, [r2, #1]
        retval.b = 255 - b;
    2586:	7891      	ldrb	r1, [r2, #2]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    2588:	43c0      	mvns	r0, r0
        retval.b = 255 - b;
    258a:	43c9      	mvns	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    258c:	43f6      	mvns	r6, r6

		  int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

		  void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
		  {
			  for (int i = 0; i < numLeds; i++)
    258e:	45a8      	cmp	r8, r5
    2590:	54e6      	strb	r6, [r4, r3]
        g = rhs.g;
    2592:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    2594:	7091      	strb	r1, [r2, #2]
    2596:	d1ef      	bne.n	2578 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xe4>
				  // Invert rainbox colors and increment the hue.
				  Invert(leds, indexes, numLeds);
				  hue++;
				  break;
			  }
		  }
    2598:	b003      	add	sp, #12
    259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

		  int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

		  void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
		  {
			  for (int i = 0; i < numLeds; i++)
    259e:	f1b8 0f00 	cmp.w	r8, #0
    25a2:	bfc8      	it	gt
    25a4:	eb05 0848 	addgt.w	r8, r5, r8, lsl #1
    25a8:	ddd8      	ble.n	255c <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xc8>
			  {
				  leds[indexes[i]] = -leds[indexes[i]];
    25aa:	f835 3b02 	ldrh.w	r3, [r5], #2
    25ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    25b2:	18e2      	adds	r2, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    25b4:	5ce6      	ldrb	r6, [r4, r3]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    25b6:	7850      	ldrb	r0, [r2, #1]
        retval.b = 255 - b;
    25b8:	7891      	ldrb	r1, [r2, #2]
    /// invert each channel
    inline CRGB operator- ()
    {
        CRGB retval;
        retval.r = 255 - r;
        retval.g = 255 - g;
    25ba:	43c0      	mvns	r0, r0
        retval.b = 255 - b;
    25bc:	43c9      	mvns	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    25be:	43f6      	mvns	r6, r6

		  int IncrementModeNumber() { return SetModeNumber(gCurrentModeNumber + 1); }

		  void Invert(CRGB leds[], uint16_t indexes[], int numLeds)
		  {
			  for (int i = 0; i < numLeds; i++)
    25c0:	4545      	cmp	r5, r8
    25c2:	54e6      	strb	r6, [r4, r3]
        g = rhs.g;
    25c4:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    25c6:	7091      	strb	r1, [r2, #2]
    25c8:	d1ef      	bne.n	25aa <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0x116>
			  // Modes
			  switch (GetModeNumber(modeOffset))
			  {
			  case 1:
				  // Increment the hue.
				  hue++;
    25ca:	f8da 3000 	ldr.w	r3, [sl]
    25ce:	3301      	adds	r3, #1
    25d0:	f8ca 3000 	str.w	r3, [sl]
    25d4:	e7c7      	b.n	2566 <Meltdown::CMeltdownLED::Rainbow(CRGB*, unsigned short*, int, int)+0xd2>
    25d6:	bf00      	nop
    25d8:	41600000 	.word	0x41600000
    25dc:	447fc000 	.word	0x447fc000
    25e0:	cccccccd 	.word	0xcccccccd
    25e4:	1fff872c 	.word	0x1fff872c

000025e8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)>:
			  EVERY_N_SECONDS(interval) {
				  heatIndex++;
			  }
		  }

		  void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    25e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25ec:	b093      	sub	sp, #76	; 0x4c
    25ee:	4607      	mov	r7, r0
    25f0:	981c      	ldr	r0, [sp, #112]	; 0x70
    25f2:	9203      	str	r2, [sp, #12]
		  int SetFrameStep(int val)
		  {
			  if (val < -1) val = -1;
			  if (val == 0) val = 1;

			  gFrameStep = val;
    25f4:	f04f 35ff 	mov.w	r5, #4294967295
			  const boolean meteorRandomDecay = true;

			  // Medium meteor.
			  int meteorSize = 25;
			  int frameMultiplier = 1;
			  gDelay = 15;
    25f8:	240f      	movs	r4, #15
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    25fa:	2800      	cmp	r0, #0
			  EVERY_N_SECONDS(interval) {
				  heatIndex++;
			  }
		  }

		  void MeteorRain(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    25fc:	4688      	mov	r8, r1
    25fe:	469b      	mov	fp, r3
		  int SetFrameStep(int val)
		  {
			  if (val < -1) val = -1;
			  if (val == 0) val = 1;

			  gFrameStep = val;
    2600:	62fd      	str	r5, [r7, #44]	; 0x2c
			  const boolean meteorRandomDecay = true;

			  // Medium meteor.
			  int meteorSize = 25;
			  int frameMultiplier = 1;
			  gDelay = 15;
    2602:	617c      	str	r4, [r7, #20]
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    2604:	f2c0 80fd 	blt.w	2802 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x21a>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    2608:	683a      	ldr	r2, [r7, #0]
    260a:	4b8c      	ldr	r3, [pc, #560]	; (283c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x254>)
			  int meteorSize = 25;
			  int frameMultiplier = 1;
			  gDelay = 15;

			  // Modes
			  switch (GetModeNumber(modeOffset))
    260c:	68b9      	ldr	r1, [r7, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    260e:	fba3 4302 	umull	r4, r3, r3, r2
    2612:	08db      	lsrs	r3, r3, #3
    2614:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2618:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    261c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2620:	eb07 0383 	add.w	r3, r7, r3, lsl #2
			  int meteorSize = 25;
			  int frameMultiplier = 1;
			  gDelay = 15;

			  // Modes
			  switch (GetModeNumber(modeOffset))
    2624:	4401      	add	r1, r0
    2626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2628:	3301      	adds	r3, #1
    262a:	fb91 f2f3 	sdiv	r2, r1, r3
    262e:	fb03 1112 	mls	r1, r3, r2, r1
    2632:	2901      	cmp	r1, #1
    2634:	f000 80a8 	beq.w	2788 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1a0>
    2638:	2902      	cmp	r1, #2
    263a:	f040 80e2 	bne.w	2802 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x21a>
			  // Large meteor.
			  case 2:
			  {
				  meteorSize = 50;
				  frameMultiplier = 1;
				  gDelay = 20;
    263e:	2314      	movs	r3, #20
    2640:	617b      	str	r3, [r7, #20]
				  break;
			  }
			  // Large meteor.
			  case 2:
			  {
				  meteorSize = 50;
    2642:	f04f 0a32 	mov.w	sl, #50	; 0x32
				  break;
			  }
			  }

			  // Fade brightness all LEDs one step.
			  for (int i = 0; i < numLeds; i++)
    2646:	f1bb 0f00 	cmp.w	fp, #0
    264a:	dd34      	ble.n	26b6 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xce>
    264c:	9b03      	ldr	r3, [sp, #12]
    264e:	461d      	mov	r5, r3
    2650:	eb03 044b 	add.w	r4, r3, fp, lsl #1
			  {
				  if (!meteorRandomDecay || random(10) > 5)
    2654:	200a      	movs	r0, #10
    2656:	f003 ff71 	bl	653c <random(unsigned long)>
    265a:	2805      	cmp	r0, #5
    265c:	d928      	bls.n	26b0 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xc8>
				  {
					  int meteorTrailDecay = GetAnalogPattern(32, 96);

					  (leds[indexes[i]]).fadeToBlackBy(meteorTrailDecay);
    265e:	882b      	ldrh	r3, [r5, #0]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2660:	69b8      	ldr	r0, [r7, #24]
    2662:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    2666:	f004 fdd1 	bl	720c <__aeabi_i2f>
    266a:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
    266e:	f004 fe21 	bl	72b4 <__aeabi_fmul>
    2672:	4973      	ldr	r1, [pc, #460]	; (2840 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x258>)
    2674:	f004 fed2 	bl	741c <__aeabi_fdiv>
    2678:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    267c:	f004 fd12 	bl	70a4 <__addsf3>
    2680:	f004 ffde 	bl	7640 <__aeabi_f2iz>
    2684:	43c0      	mvns	r0, r0
    2686:	f818 3006 	ldrb.w	r3, [r8, r6]
    268a:	b2c0      	uxtb	r0, r0
    268c:	3001      	adds	r0, #1
    268e:	fb00 f303 	mul.w	r3, r0, r3
    2692:	121b      	asrs	r3, r3, #8
    2694:	f808 3006 	strb.w	r3, [r8, r6]
    2698:	eb08 0306 	add.w	r3, r8, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    269c:	785a      	ldrb	r2, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    269e:	7899      	ldrb	r1, [r3, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    26a0:	fb00 f202 	mul.w	r2, r0, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    26a4:	fb00 f001 	mul.w	r0, r0, r1
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    26a8:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    26aa:	1200      	asrs	r0, r0, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    26ac:	705a      	strb	r2, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    26ae:	7098      	strb	r0, [r3, #2]
    26b0:	3502      	adds	r5, #2
				  break;
			  }
			  }

			  // Fade brightness all LEDs one step.
			  for (int i = 0; i < numLeds; i++)
    26b2:	42a5      	cmp	r5, r4
    26b4:	d1ce      	bne.n	2654 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x6c>
    26b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    26b8:	f8cd 8008 	str.w	r8, [sp, #8]
    26bc:	fb93 f5fb 	sdiv	r5, r3, fp
				  }
			  }

			  // Draw meteor.
			  long frame = GetFrame(numLeds * frameMultiplier);
			  for (int i = 0; i < meteorSize; i++)
    26c0:	2600      	movs	r6, #0
    26c2:	fb0b 3515 	mls	r5, fp, r5, r3
    26c6:	ac12      	add	r4, sp, #72	; 0x48
			  {
				  if ((frame - i < numLeds) && (frame - i >= 0))
    26c8:	45ab      	cmp	fp, r5
    26ca:	dd55      	ble.n	2778 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x190>
    26cc:	2d00      	cmp	r5, #0
    26ce:	db53      	blt.n	2778 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x190>
				  {
					  // Set the colors of the meteor using a reversed HeatColors gradient, so the meteor's tail is white hot trailing off to red.
					  uint16_t index = indexes[frame - i];
					  leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
    26d0:	9b03      	ldr	r3, [sp, #12]
    26d2:	495c      	ldr	r1, [pc, #368]	; (2844 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x25c>)
    26d4:	f833 8015 	ldrh.w	r8, [r3, r5, lsl #1]
    26d8:	9b02      	ldr	r3, [sp, #8]
    26da:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    26de:	eb03 0908 	add.w	r9, r3, r8
    26e2:	ab06      	add	r3, sp, #24
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    26e4:	f851 2f04 	ldr.w	r2, [r1, #4]!
    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    26e8:	709a      	strb	r2, [r3, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    26ea:	0c10      	lsrs	r0, r2, #16
        g = (colorcode >>  8) & 0xFF;
    26ec:	0a12      	lsrs	r2, r2, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    26ee:	7018      	strb	r0, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
    26f0:	705a      	strb	r2, [r3, #1]
    26f2:	3303      	adds	r3, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    26f4:	429c      	cmp	r4, r3
    26f6:	d1f5      	bne.n	26e4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xfc>

			  // Get the appropriate color from the palette, mapped to the number of LEDs.
			  int mappedPos = numPaletteColors / numLeds * pos;
			  if (isReverse)
			  {
				  return ColorFromPalette(palette, (numPaletteColors - mappedPos));
    26f8:	45b2      	cmp	sl, r6
    26fa:	4652      	mov	r2, sl
    26fc:	bfa8      	it	ge
    26fe:	4632      	movge	r2, r6
    2700:	23ff      	movs	r3, #255	; 0xff
    2702:	fb93 f1fa 	sdiv	r1, r3, sl
    2706:	fb02 f201 	mul.w	r2, r2, r1
    270a:	43d2      	mvns	r2, r2
    270c:	2101      	movs	r1, #1
    270e:	b2d2      	uxtb	r2, r2
    2710:	9100      	str	r1, [sp, #0]
    2712:	a805      	add	r0, sp, #20
    2714:	a906      	add	r1, sp, #24
    2716:	f7ff fb89 	bl	1e2c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    271a:	9a02      	ldr	r2, [sp, #8]
    271c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2720:	f802 3008 	strb.w	r3, [r2, r8]
        g = rhs.g;
    2724:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    2728:	f89d 3016 	ldrb.w	r3, [sp, #22]
    272c:	f889 3002 	strb.w	r3, [r9, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2730:	f889 2001 	strb.w	r2, [r9, #1]
    2734:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    2738:	f897 e031 	ldrb.w	lr, [r7, #49]	; 0x31
    273c:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
    2740:	f897 0033 	ldrb.w	r0, [r7, #51]	; 0x33
    2744:	f897 c034 	ldrb.w	ip, [r7, #52]	; 0x34
		  }

		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
    2748:	4613      	mov	r3, r2
			  if (gHue1) val++;
			  if (gHue2) val++;
    274a:	f1be 0f00 	cmp.w	lr, #0
    274e:	d000      	beq.n	2752 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16a>
    2750:	1c53      	adds	r3, r2, #1
			  if (gHue3) val++;
    2752:	b101      	cbz	r1, 2756 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x16e>
    2754:	3301      	adds	r3, #1
			  if (gHue4) val++;
    2756:	b150      	cbz	r0, 276e <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x186>

		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
    2758:	2a00      	cmp	r2, #0
    275a:	d13b      	bne.n	27d4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1ec>
			  if (gHue2) val++;
    275c:	f1be 0f00 	cmp.w	lr, #0
    2760:	d017      	beq.n	2792 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1aa>
    2762:	2301      	movs	r3, #1
			  if (gHue3) val++;
    2764:	b101      	cbz	r1, 2768 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x180>
    2766:	3301      	adds	r3, #1
			  if (gHue4) val++;
    2768:	b1c0      	cbz	r0, 279c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1b4>
    276a:	3301      	adds	r3, #1
    276c:	e016      	b.n	279c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1b4>
			  if (gHue5) val++;
    276e:	f1bc 0f00 	cmp.w	ip, #0
    2772:	d1f1      	bne.n	2758 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x170>
				  {
					  // Set the colors of the meteor using a reversed HeatColors gradient, so the meteor's tail is white hot trailing off to red.
					  uint16_t index = indexes[frame - i];
					  leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
					  // Apply a blend from the hue, if toggled. We'll be using a designated arbitrary RGB color.
					  if (HasToggledHues())
    2774:	2b00      	cmp	r3, #0
    2776:	d1ef      	bne.n	2758 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x170>
				  }
			  }

			  // Draw meteor.
			  long frame = GetFrame(numLeds * frameMultiplier);
			  for (int i = 0; i < meteorSize; i++)
    2778:	3601      	adds	r6, #1
    277a:	45b2      	cmp	sl, r6
    277c:	f105 35ff 	add.w	r5, r5, #4294967295
    2780:	d1a2      	bne.n	26c8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0xe0>
					  {
						  nblend(leds[index], GetRgbFromHue(), 127);
					  }
				  }
			  }
		  }
    2782:	b013      	add	sp, #76	; 0x4c
    2784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  // Small meteors.
			  case 1:
			  {
				  meteorSize = 5;
				  frameMultiplier = 1.5;
				  gDelay = 7;
    2788:	2307      	movs	r3, #7
    278a:	617b      	str	r3, [r7, #20]
			  switch (GetModeNumber(modeOffset))
			  {
				  // Small meteors.
			  case 1:
			  {
				  meteorSize = 5;
    278c:	f04f 0a05 	mov.w	sl, #5
				  frameMultiplier = 1.5;
				  gDelay = 7;
				  break;
    2790:	e759      	b.n	2646 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x5e>
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
			  if (gHue3) val++;
    2792:	b109      	cbz	r1, 2798 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1b0>
    2794:	2301      	movs	r3, #1
    2796:	e7e7      	b.n	2768 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x180>
			  if (gHue4) val++;
    2798:	b158      	cbz	r0, 27b2 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1ca>
    279a:	2301      	movs	r3, #1
			  if (gHue5) val++;
    279c:	f1bc 0f00 	cmp.w	ip, #0
    27a0:	d000      	beq.n	27a4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1bc>
    27a2:	3301      	adds	r3, #1

		  /// Return an arbitrary RGB color for a given number of toggled hue buttons. 
		  /// This will be to add color to CRGBs, since they cannot have hue applied to them.
		  CRGB GetRgbFromHue()
		  {
			  switch (GetToggledHueCount())
    27a4:	3b01      	subs	r3, #1
    27a6:	2b03      	cmp	r3, #3
    27a8:	d82e      	bhi.n	2808 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x220>
    27aa:	e8df f003 	tbb	[pc, r3]
    27ae:	2105      	.short	0x2105
    27b0:	3e35      	.short	0x3e35
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
			  if (gHue3) val++;
			  if (gHue4) val++;
			  if (gHue5) val++;
    27b2:	f1bc 0f00 	cmp.w	ip, #0
    27b6:	d027      	beq.n	2808 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x220>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    27b8:	2380      	movs	r3, #128	; 0x80
    27ba:	2200      	movs	r2, #0
    27bc:	f88d 3018 	strb.w	r3, [sp, #24]
    27c0:	f88d 301a 	strb.w	r3, [sp, #26]
    27c4:	f88d 2019 	strb.w	r2, [sp, #25]
					  uint16_t index = indexes[frame - i];
					  leds[index] = ColorGradientFromPalette(HeatColors_p, meteorSize, i, true);
					  // Apply a blend from the hue, if toggled. We'll be using a designated arbitrary RGB color.
					  if (HasToggledHues())
					  {
						  nblend(leds[index], GetRgbFromHue(), 127);
    27c8:	4648      	mov	r0, r9
    27ca:	227f      	movs	r2, #127	; 0x7f
    27cc:	a906      	add	r1, sp, #24
    27ce:	f7ff faf1 	bl	1db4 <nblend(CRGB&, CRGB const&, unsigned char)>
    27d2:	e7d1      	b.n	2778 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x190>
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
    27d4:	f1be 0f00 	cmp.w	lr, #0
    27d8:	d001      	beq.n	27de <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1f6>
    27da:	2302      	movs	r3, #2
    27dc:	e7c2      	b.n	2764 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x17c>
			  if (gHue3) val++;
    27de:	b109      	cbz	r1, 27e4 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1fc>
    27e0:	2302      	movs	r3, #2
    27e2:	e7c1      	b.n	2768 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x180>
			  if (gHue4) val++;
    27e4:	b108      	cbz	r0, 27ea <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x202>
    27e6:	2302      	movs	r3, #2
    27e8:	e7d8      	b.n	279c <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1b4>
			  if (gHue5) val++;
    27ea:	f1bc 0f00 	cmp.w	ip, #0
    27ee:	d0e3      	beq.n	27b8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1d0>
    27f0:	2300      	movs	r3, #0
    27f2:	2280      	movs	r2, #128	; 0x80
    27f4:	f88d 3018 	strb.w	r3, [sp, #24]
    27f8:	f88d 301a 	strb.w	r3, [sp, #26]
    27fc:	f88d 2019 	strb.w	r2, [sp, #25]
    2800:	e7e2      	b.n	27c8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1e0>
			  SetFrameStep(-1);

			  const boolean meteorRandomDecay = true;

			  // Medium meteor.
			  int meteorSize = 25;
    2802:	f04f 0a19 	mov.w	sl, #25
    2806:	e71e      	b.n	2646 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x5e>
    2808:	2300      	movs	r3, #0
    280a:	f88d 3018 	strb.w	r3, [sp, #24]
    280e:	f88d 3019 	strb.w	r3, [sp, #25]
    2812:	f88d 301a 	strb.w	r3, [sp, #26]
    2816:	e7d7      	b.n	27c8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1e0>
    2818:	2300      	movs	r3, #0
    281a:	22ff      	movs	r2, #255	; 0xff
    281c:	f88d 3018 	strb.w	r3, [sp, #24]
    2820:	f88d 3019 	strb.w	r3, [sp, #25]
    2824:	f88d 201a 	strb.w	r2, [sp, #26]
    2828:	e7ce      	b.n	27c8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1e0>
    282a:	2300      	movs	r3, #0
    282c:	22ff      	movs	r2, #255	; 0xff
    282e:	f88d 2018 	strb.w	r2, [sp, #24]
    2832:	f88d 3019 	strb.w	r3, [sp, #25]
    2836:	f88d 301a 	strb.w	r3, [sp, #26]
    283a:	e7c5      	b.n	27c8 <Meltdown::CMeltdownLED::MeteorRain(CRGB*, unsigned short*, int, int)+0x1e0>
    283c:	cccccccd 	.word	0xcccccccd
    2840:	447fc000 	.word	0x447fc000
    2844:	00008f4c 	.word	0x00008f4c

00002848 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)>:

		  void ExecuteEffect(CRGB leds[], uint16_t indexes[], int numLeds, int offset = 0) { (this->*(gEffects[GetEffectNumber(offset)]))(leds, indexes, numLeds); }

		  void NullEffect(CRGB leds[], uint16_t indexes[], int numLeds) { }

		  void GlitterEffect(CRGB leds[], uint16_t indexes[], int numLeds)
    2848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    284c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 291c <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0xd4>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    2850:	69c6      	ldr	r6, [r0, #28]
    2852:	f8bb 4000 	ldrh.w	r4, [fp]
    2856:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    285a:	fb00 f606 	mul.w	r6, r0, r6
    285e:	eb04 2044 	add.w	r0, r4, r4, lsl #9
    2862:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    2866:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    286a:	2e00      	cmp	r6, #0
    286c:	f104 0419 	add.w	r4, r4, #25
    2870:	bfb8      	it	lt
    2872:	f206 36ff 	addwlt	r6, r6, #1023	; 0x3ff
    2876:	b2a4      	uxth	r4, r4
    2878:	12b6      	asrs	r6, r6, #10
		  {
			  int chanceOfGlitter = GetAnalogEffect(25, 500);
			  if (random8() < chanceOfGlitter)
    287a:	eb04 2e14 	add.w	lr, r4, r4, lsr #8
    287e:	3619      	adds	r6, #25
    2880:	fa5f fe8e 	uxtb.w	lr, lr
    2884:	45b6      	cmp	lr, r6
    2886:	f8ab 4000 	strh.w	r4, [fp]
    288a:	db01      	blt.n	2890 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x48>
    288c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2890:	4618      	mov	r0, r3
    2892:	461d      	mov	r5, r3
    2894:	4691      	mov	r9, r2
    2896:	460f      	mov	r7, r1
    2898:	f004 fcb8 	bl	720c <__aeabi_i2f>
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    289c:	b2ad      	uxth	r5, r5
    289e:	4680      	mov	r8, r0
		  void NullEffect(CRGB leds[], uint16_t indexes[], int numLeds) { }

		  void GlitterEffect(CRGB leds[], uint16_t indexes[], int numLeds)
		  {
			  int chanceOfGlitter = GetAnalogEffect(25, 500);
			  if (random8() < chanceOfGlitter)
    28a0:	f04f 0a03 	mov.w	sl, #3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    28a4:	26ff      	movs	r6, #255	; 0xff
    28a6:	e006      	b.n	28b6 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x6e>
    28a8:	f8ab 4000 	strh.w	r4, [fp]
		  }

		  /// Add a specific color in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numPositions; i++)
    28ac:	f1ba 0a01 	subs.w	sl, sl, #1
    28b0:	d0ec      	beq.n	288c <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x44>
    28b2:	f8bb 4000 	ldrh.w	r4, [fp]
    28b6:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    28ba:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    28be:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    28c2:	3419      	adds	r4, #25
    28c4:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    28c6:	eb04 2014 	add.w	r0, r4, r4, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    28ca:	b2c0      	uxtb	r0, r0
    28cc:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    28d0:	11c0      	asrs	r0, r0, #7
    28d2:	3001      	adds	r0, #1
    28d4:	b2c0      	uxtb	r0, r0
    28d6:	f004 fc99 	bl	720c <__aeabi_i2f>
    28da:	4601      	mov	r1, r0
    28dc:	4640      	mov	r0, r8
    28de:	f004 fd9d 	bl	741c <__aeabi_fdiv>
    28e2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    28e6:	f004 fea1 	bl	762c <__aeabi_fcmpgt>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    28ea:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    28ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    28f2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    28f6:	3319      	adds	r3, #25
    28f8:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    28fa:	fb03 f205 	mul.w	r2, r3, r5
    28fe:	0c12      	lsrs	r2, r2, #16
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, CRGB::HTMLColorCode color)
		  {
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    2900:	2800      	cmp	r0, #0
    2902:	d0d1      	beq.n	28a8 <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x60>
    2904:	f8ab 3000 	strh.w	r3, [fp]
				  {
					  uint16_t index = indexes[random16(numLeds)];
					  leds[index] = color;
    2908:	f839 3012 	ldrh.w	r3, [r9, r2, lsl #1]
    290c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2910:	18fa      	adds	r2, r7, r3
    2912:	54fe      	strb	r6, [r7, r3]
        g = (colorcode >>  8) & 0xFF;
    2914:	7056      	strb	r6, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    2916:	7096      	strb	r6, [r2, #2]
    2918:	e7c8      	b.n	28ac <Meltdown::CMeltdownLED::GlitterEffect(CRGB*, unsigned short*, int)+0x64>
    291a:	bf00      	nop
    291c:	1fff8726 	.word	0x1fff8726

00002920 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)>:
				  GenerateSinelons(leds, indexes, numLeds, 5, index);
				  break;
			  }
		  }

		  void Bpm(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2924:	4d76      	ldr	r5, [pc, #472]	; (2b00 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1e0>)
    2926:	4c77      	ldr	r4, [pc, #476]	; (2b04 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1e4>)
    2928:	682f      	ldr	r7, [r5, #0]
    292a:	b0cd      	sub	sp, #308	; 0x134
    292c:	4605      	mov	r5, r0
    292e:	9703      	str	r7, [sp, #12]
	return ret;
    2930:	9803      	ldr	r0, [sp, #12]
    2932:	9e56      	ldr	r6, [sp, #344]	; 0x158
    2934:	fb04 f000 	mul.w	r0, r4, r0
    2938:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    293a:	b2c4      	uxtb	r4, r0
    293c:	4689      	mov	r9, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    293e:	0661      	lsls	r1, r4, #25
    2940:	4617      	mov	r7, r2
    2942:	469a      	mov	sl, r3
    2944:	f140 80d4 	bpl.w	2af0 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1d0>
        offset = (uint8_t)255 - offset;
    2948:	43e2      	mvns	r2, r4
    294a:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    294c:	f002 040f 	and.w	r4, r2, #15
    if( theta & 0x40) secoffset++;
    2950:	3401      	adds	r4, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2952:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2956:	4b6c      	ldr	r3, [pc, #432]	; (2b08 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1e8>)
    2958:	1112      	asrs	r2, r2, #4
    295a:	0052      	lsls	r2, r2, #1
    295c:	1899      	adds	r1, r3, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    295e:	5c9a      	ldrb	r2, [r3, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    2960:	784b      	ldrb	r3, [r1, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2962:	fb13 f304 	smulbb	r3, r3, r4
    2966:	eb02 1323 	add.w	r3, r2, r3, asr #4
    296a:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    296c:	0602      	lsls	r2, r0, #24
    296e:	bf48      	it	mi
    2970:	425b      	negmi	r3, r3
    2972:	b25b      	sxtb	r3, r3

    y += 128;
    2974:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    2976:	b2db      	uxtb	r3, r3
    2978:	eb03 0443 	add.w	r4, r3, r3, lsl #1
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    297c:	69a8      	ldr	r0, [r5, #24]
    297e:	eb03 1484 	add.w	r4, r3, r4, lsl #6
    2982:	f004 fc43 	bl	720c <__aeabi_i2f>
    2986:	4961      	ldr	r1, [pc, #388]	; (2b0c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1ec>)
    2988:	f004 fc94 	bl	72b4 <__aeabi_fmul>
    298c:	4960      	ldr	r1, [pc, #384]	; (2b10 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1f0>)
    298e:	f004 fd45 	bl	741c <__aeabi_fdiv>
    2992:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2996:	f004 fb85 	bl	70a4 <__addsf3>
    299a:	f004 fe51 	bl	7640 <__aeabi_f2iz>
    299e:	1224      	asrs	r4, r4, #8
    29a0:	343f      	adds	r4, #63	; 0x3f
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    29a2:	2e00      	cmp	r6, #0
    29a4:	b2e4      	uxtb	r4, r4
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    29a6:	4683      	mov	fp, r0
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    29a8:	f2c0 80a7 	blt.w	2afa <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1da>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    29ac:	682a      	ldr	r2, [r5, #0]
    29ae:	4859      	ldr	r0, [pc, #356]	; (2b14 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1f4>)
    29b0:	68a9      	ldr	r1, [r5, #8]
    29b2:	fba0 e302 	umull	lr, r3, r0, r2
    29b6:	08db      	lsrs	r3, r3, #3
    29b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29bc:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    29c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    29c4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    29c8:	4431      	add	r1, r6
    29ca:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    29cc:	3201      	adds	r2, #1
    29ce:	fb91 f3f2 	sdiv	r3, r1, r2
    29d2:	fb02 1113 	mls	r1, r2, r3, r1
    29d6:	fba0 3001 	umull	r3, r0, r0, r1
    29da:	0880      	lsrs	r0, r0, #2
    29dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    29e0:	1a08      	subs	r0, r1, r0
    29e2:	ab10      	add	r3, sp, #64	; 0x40
    29e4:	4e4c      	ldr	r6, [pc, #304]	; (2b18 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1f8>)
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    29e6:	461a      	mov	r2, r3
    29e8:	a91c      	add	r1, sp, #112	; 0x70
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    29ea:	f856 5f04 	ldr.w	r5, [r6, #4]!
    29ee:	7095      	strb	r5, [r2, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    29f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
        g = (colorcode >>  8) & 0xFF;
    29f4:	0a2d      	lsrs	r5, r5, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    29f6:	f882 e000 	strb.w	lr, [r2]
        g = (colorcode >>  8) & 0xFF;
    29fa:	7055      	strb	r5, [r2, #1]
    29fc:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    29fe:	428a      	cmp	r2, r1
    2a00:	d1f3      	bne.n	29ea <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xca>
    2a02:	4e46      	ldr	r6, [pc, #280]	; (2b1c <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1fc>)
    2a04:	aa10      	add	r2, sp, #64	; 0x40
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2a06:	f856 5f04 	ldr.w	r5, [r6, #4]!
        b = (colorcode >>  0) & 0xFF;
    2a0a:	f882 5032 	strb.w	r5, [r2, #50]	; 0x32
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2a12:	0a2d      	lsrs	r5, r5, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a14:	f882 e030 	strb.w	lr, [r2, #48]	; 0x30
        g = (colorcode >>  8) & 0xFF;
    2a18:	f882 5031 	strb.w	r5, [r2, #49]	; 0x31
    2a1c:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2a1e:	428a      	cmp	r2, r1
    2a20:	d1f1      	bne.n	2a06 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xe6>
    2a22:	4e3f      	ldr	r6, [pc, #252]	; (2b20 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x200>)
    2a24:	aa10      	add	r2, sp, #64	; 0x40
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2a26:	f856 5f04 	ldr.w	r5, [r6, #4]!
        b = (colorcode >>  0) & 0xFF;
    2a2a:	f882 5062 	strb.w	r5, [r2, #98]	; 0x62
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2a32:	0a2d      	lsrs	r5, r5, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a34:	f882 e060 	strb.w	lr, [r2, #96]	; 0x60
        g = (colorcode >>  8) & 0xFF;
    2a38:	f882 5061 	strb.w	r5, [r2, #97]	; 0x61
    2a3c:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2a3e:	428a      	cmp	r2, r1
    2a40:	d1f1      	bne.n	2a26 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x106>
    2a42:	4e38      	ldr	r6, [pc, #224]	; (2b24 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x204>)
    2a44:	aa10      	add	r2, sp, #64	; 0x40
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2a46:	f856 5f04 	ldr.w	r5, [r6, #4]!
        b = (colorcode >>  0) & 0xFF;
    2a4a:	f882 5092 	strb.w	r5, [r2, #146]	; 0x92
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
        g = (colorcode >>  8) & 0xFF;
    2a52:	0a2d      	lsrs	r5, r5, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a54:	f882 e090 	strb.w	lr, [r2, #144]	; 0x90
        g = (colorcode >>  8) & 0xFF;
    2a58:	f882 5091 	strb.w	r5, [r2, #145]	; 0x91
    2a5c:	3203      	adds	r2, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2a5e:	428a      	cmp	r2, r1
    2a60:	d1f1      	bne.n	2a46 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x126>
    2a62:	4d31      	ldr	r5, [pc, #196]	; (2b28 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x208>)
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
    2a64:	f855 2f04 	ldr.w	r2, [r5, #4]!
        b = (colorcode >>  0) & 0xFF;
    2a68:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a6c:	0c16      	lsrs	r6, r2, #16
        g = (colorcode >>  8) & 0xFF;
    2a6e:	0a12      	lsrs	r2, r2, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2a70:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
        g = (colorcode >>  8) & 0xFF;
    2a74:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    2a78:	3303      	adds	r3, #3
        return *this;
    }

    CRGBPalette16( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
    2a7a:	428b      	cmp	r3, r1
    2a7c:	d1f2      	bne.n	2a64 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x144>
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    2a7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a82:	ab10      	add	r3, sp, #64	; 0x40
    2a84:	eb03 1500 	add.w	r5, r3, r0, lsl #4
    2a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a8a:	ae04      	add	r6, sp, #16
    2a8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2a92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
		  {
			  int bpm = 60;
			  int beat = beatsin8(bpm, 63, 255);
			  int multiplier = GetAnalogPattern(2, 12);
			  CRGBPalette16 palette = GetPalette(GetModeNumber(modeOffset));
			  for (int i = 0; i < numLeds; i++)
    2a96:	f1ba 0f00 	cmp.w	sl, #0
    2a9a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    2a9e:	dd24      	ble.n	2aea <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x1ca>
    2aa0:	eb07 0a4a 	add.w	sl, r7, sl, lsl #1
    2aa4:	fa5f fb8b 	uxtb.w	fp, fp
    2aa8:	2600      	movs	r6, #0
			  {
				  leds[indexes[i]] = ColorFromPalette(palette, i * multiplier, beat - (i * 10));
    2aaa:	f837 5b02 	ldrh.w	r5, [r7], #2
    2aae:	2301      	movs	r3, #1
    2ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2ab4:	4632      	mov	r2, r6
    2ab6:	9300      	str	r3, [sp, #0]
    2ab8:	a904      	add	r1, sp, #16
    2aba:	4623      	mov	r3, r4
    2abc:	eb09 0805 	add.w	r8, r9, r5
    2ac0:	a810      	add	r0, sp, #64	; 0x40
    2ac2:	f7ff f9b3 	bl	1e2c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2ac6:	445e      	add	r6, fp
    2ac8:	3c0a      	subs	r4, #10
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2aca:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
        g = rhs.g;
    2ace:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
        b = rhs.b;
    2ad2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ad6:	f809 1005 	strb.w	r1, [r9, r5]
		  {
			  int bpm = 60;
			  int beat = beatsin8(bpm, 63, 255);
			  int multiplier = GetAnalogPattern(2, 12);
			  CRGBPalette16 palette = GetPalette(GetModeNumber(modeOffset));
			  for (int i = 0; i < numLeds; i++)
    2ada:	45ba      	cmp	sl, r7
    2adc:	b2f6      	uxtb	r6, r6
    2ade:	b2e4      	uxtb	r4, r4
        g = rhs.g;
    2ae0:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    2ae4:	f888 3002 	strb.w	r3, [r8, #2]
    2ae8:	d1df      	bne.n	2aaa <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x18a>
			  {
				  leds[indexes[i]] = ColorFromPalette(palette, i * multiplier, beat - (i * 10));
			  }
		  }
    2aea:	b04d      	add	sp, #308	; 0x134
    2aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2af0:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2af4:	f004 040f 	and.w	r4, r4, #15
    2af8:	e72d      	b.n	2956 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0x36>
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    2afa:	2000      	movs	r0, #0
    2afc:	e771      	b.n	29e2 <Meltdown::CMeltdownLED::Bpm(CRGB*, unsigned short*, int, int)+0xc2>
    2afe:	bf00      	nop
    2b00:	1fff9b38 	.word	0x1fff9b38
    2b04:	0041a000 	.word	0x0041a000
    2b08:	00009068 	.word	0x00009068
    2b0c:	41200000 	.word	0x41200000
    2b10:	447fc000 	.word	0x447fc000
    2b14:	cccccccd 	.word	0xcccccccd
    2b18:	00008ecc 	.word	0x00008ecc
    2b1c:	00008f8c 	.word	0x00008f8c
    2b20:	00008f0c 	.word	0x00008f0c
    2b24:	00008f4c 	.word	0x00008f4c
    2b28:	00008e8c 	.word	0x00008e8c

00002b2c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)>:
					  leds[indexes[i]] = CRGB::Black;
				  }
			  }
		  }

		  void RunningLights(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b30:	4682      	mov	sl, r0
    2b32:	b087      	sub	sp, #28
		  int SetFrameStep(int val)
		  {
			  if (val < -1) val = -1;
			  if (val == 0) val = 1;

			  gFrameStep = val;
    2b34:	2003      	movs	r0, #3
    2b36:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2b3a:	f8da 0018 	ldr.w	r0, [sl, #24]
					  leds[indexes[i]] = CRGB::Black;
				  }
			  }
		  }

		  void RunningLights(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2b3e:	9102      	str	r1, [sp, #8]
    2b40:	461d      	mov	r5, r3
    2b42:	4614      	mov	r4, r2
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2b44:	f004 fb62 	bl	720c <__aeabi_i2f>
    2b48:	49c4      	ldr	r1, [pc, #784]	; (2e5c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x330>)
    2b4a:	f004 fbb3 	bl	72b4 <__aeabi_fmul>
    2b4e:	49c4      	ldr	r1, [pc, #784]	; (2e60 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x334>)
    2b50:	f004 fc64 	bl	741c <__aeabi_fdiv>
    2b54:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
    2b58:	f004 faa4 	bl	70a4 <__addsf3>
    2b5c:	f004 fd70 	bl	7640 <__aeabi_f2iz>
		  {
			  SetFrameStep(3);

			  int length = GetAnalogPattern(4, 40);

			  for (int i = 0; i < numLeds; i++)
    2b60:	2d00      	cmp	r5, #0
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2b62:	9001      	str	r0, [sp, #4]
		  {
			  SetFrameStep(3);

			  int length = GetAnalogPattern(4, 40);

			  for (int i = 0; i < numLeds; i++)
    2b64:	f340 80cb 	ble.w	2cfe <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x1d2>
    2b68:	46a1      	mov	r9, r4
    2b6a:	eb09 0345 	add.w	r3, r9, r5, lsl #1
    2b6e:	4cbd      	ldr	r4, [pc, #756]	; (2e64 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x338>)
    2b70:	9303      	str	r3, [sp, #12]
    2b72:	f04f 0800 	mov.w	r8, #0
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    2b76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b78:	2b00      	cmp	r3, #0
    2b7a:	f2c0 8179 	blt.w	2e70 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x344>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    2b7e:	f8da 2000 	ldr.w	r2, [sl]
    2b82:	4bb9      	ldr	r3, [pc, #740]	; (2e68 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x33c>)
				  double redSin;
				  double greenSin;
				  double blueSin;

				  // Modes
				  switch (GetModeNumber(modeOffset))
    2b84:	f8da 1008 	ldr.w	r1, [sl, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    2b88:	fba3 0302 	umull	r0, r3, r3, r2
    2b8c:	08db      	lsrs	r3, r3, #3
    2b8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2b92:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    2b96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2b9a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
				  double redSin;
				  double greenSin;
				  double blueSin;

				  // Modes
				  switch (GetModeNumber(modeOffset))
    2b9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2ba0:	4411      	add	r1, r2
    2ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    2ba4:	3201      	adds	r2, #1
    2ba6:	fb91 f3f2 	sdiv	r3, r1, r2
    2baa:	fb02 1113 	mls	r1, r2, r3, r1
    2bae:	3901      	subs	r1, #1
    2bb0:	2903      	cmp	r1, #3
    2bb2:	f200 815d 	bhi.w	2e70 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x344>
    2bb6:	e8df f011 	tbh	[pc, r1, lsl #1]
    2bba:	010d      	.short	0x010d
    2bbc:	00a500e2 	.word	0x00a500e2
    2bc0:	0004      	.short	0x0004
					  blueSin = (i * length) + (float)GetFrame() / 2;
					  break;
				  }
				  case 4:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2bc2:	4640      	mov	r0, r8
    2bc4:	f004 fb22 	bl	720c <__aeabi_i2f>
    2bc8:	4606      	mov	r6, r0

		  void SetFrame() { gFrame = MeltdownSerial.GetValue(); }

		  long GetFrame()
		  {
			  if (gFrame < 1)
    2bca:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    2bce:	2800      	cmp	r0, #0
    2bd0:	f340 816d 	ble.w	2eae <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x382>
    2bd4:	f004 fb1a 	bl	720c <__aeabi_i2f>
    2bd8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    2bdc:	4607      	mov	r7, r0
    2bde:	f004 fb69 	bl	72b4 <__aeabi_fmul>
    2be2:	4605      	mov	r5, r0
					  blueSin = (i * length) + (float)GetFrame() / 2;
					  break;
				  }
				  case 4:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2be4:	4639      	mov	r1, r7
    2be6:	4630      	mov	r0, r6
    2be8:	f004 fa5c 	bl	70a4 <__addsf3>
    2bec:	f004 f9e0 	bl	6fb0 <__aeabi_f2d>
    2bf0:	4602      	mov	r2, r0
					  greenSin = 0;
					  blueSin = (i * length / 2) + (float)GetFrame() / 2;
    2bf2:	eb08 70d8 	add.w	r0, r8, r8, lsr #31
					  blueSin = (i * length) + (float)GetFrame() / 2;
					  break;
				  }
				  case 4:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2bf6:	460b      	mov	r3, r1
					  greenSin = 0;
					  blueSin = (i * length / 2) + (float)GetFrame() / 2;
    2bf8:	1040      	asrs	r0, r0, #1
					  blueSin = (i * length) + (float)GetFrame() / 2;
					  break;
				  }
				  case 4:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
					  greenSin = 0;
					  blueSin = (i * length / 2) + (float)GetFrame() / 2;
    2bfe:	f004 fb05 	bl	720c <__aeabi_i2f>
    2c02:	4629      	mov	r1, r5
    2c04:	f004 fa4e 	bl	70a4 <__addsf3>
					  break;
    2c08:	2300      	movs	r3, #0
    2c0a:	461d      	mov	r5, r3
    2c0c:	9300      	str	r3, [sp, #0]
				  }
				  case 4:
				  {
					  redSin = (i * length) + (float)GetFrame();
					  greenSin = 0;
					  blueSin = (i * length / 2) + (float)GetFrame() / 2;
    2c0e:	f004 f9cf 	bl	6fb0 <__aeabi_f2d>
					  break;
    2c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
				  }
				  case 4:
				  {
					  redSin = (i * length) + (float)GetFrame();
					  greenSin = 0;
					  blueSin = (i * length / 2) + (float)GetFrame() / 2;
    2c16:	4606      	mov	r6, r0
    2c18:	460f      	mov	r7, r1
					  break;
    2c1a:	46ab      	mov	fp, r5
					  blueSin = (i * length) + (float)GetFrame();
					  break;
				  }
				  }

				  byte redMult = sin8(redSin);
    2c1c:	4610      	mov	r0, r2
    2c1e:	4619      	mov	r1, r3
    2c20:	f004 fa1a 	bl	7058 <__aeabi_d2uiz>
    2c24:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2c26:	065a      	lsls	r2, r3, #25
    2c28:	f140 80fe 	bpl.w	2e28 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2fc>
        offset = (uint8_t)255 - offset;
    2c2c:	43da      	mvns	r2, r3
    2c2e:	b2d2      	uxtb	r2, r2
    2c30:	f3c2 1001 	ubfx	r0, r2, #4, #2
    2c34:	0040      	lsls	r0, r0, #1
    2c36:	eb04 0e00 	add.w	lr, r4, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2c3a:	f002 010f 	and.w	r1, r2, #15
    2c3e:	f89e 2001 	ldrb.w	r2, [lr, #1]
    2c42:	f814 e000 	ldrb.w	lr, [r4, r0]
    2c46:	fb01 2202 	mla	r2, r1, r2, r2
    2c4a:	eb0e 1222 	add.w	r2, lr, r2, asr #4
    2c4e:	4639      	mov	r1, r7
    2c50:	4630      	mov	r0, r6
    2c52:	b2d7      	uxtb	r7, r2
    2c54:	b25e      	sxtb	r6, r3
    2c56:	f004 f9ff 	bl	7058 <__aeabi_d2uiz>
    2c5a:	b2c0      	uxtb	r0, r0
    2c5c:	f000 0240 	and.w	r2, r0, #64	; 0x40
    2c60:	b27b      	sxtb	r3, r7
    2c62:	b2d2      	uxtb	r2, r2
    2c64:	b241      	sxtb	r1, r0
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    if( theta & 0x80 ) y = -y;
    2c66:	2e00      	cmp	r6, #0
    2c68:	bfbc      	itt	lt
    2c6a:	427f      	neglt	r7, r7
    2c6c:	b27b      	sxtblt	r3, r7

    y += 128;
    2c6e:	f1a3 0780 	sub.w	r7, r3, #128	; 0x80
    2c72:	b2ff      	uxtb	r7, r7
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2c74:	2d00      	cmp	r5, #0
    2c76:	f000 80d2 	beq.w	2e1e <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2f2>
        offset = (uint8_t)255 - offset;
    2c7a:	ea6f 030b 	mvn.w	r3, fp
    2c7e:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2c80:	f003 050f 	and.w	r5, r3, #15
    if( theta & 0x40) secoffset++;
    2c84:	3501      	adds	r5, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2c8a:	111b      	asrs	r3, r3, #4
    2c8c:	005b      	lsls	r3, r3, #1
    2c8e:	18e6      	adds	r6, r4, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2c90:	5ce3      	ldrb	r3, [r4, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    2c92:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2c94:	fb16 f505 	smulbb	r5, r6, r5
    2c98:	eb03 1325 	add.w	r3, r3, r5, asr #4
    if( theta & 0x80 ) y = -y;
    2c9c:	9d00      	ldr	r5, [sp, #0]
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2c9e:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    2ca0:	2d00      	cmp	r5, #0
    2ca2:	bfb8      	it	lt
    2ca4:	425b      	neglt	r3, r3
    2ca6:	b25b      	sxtb	r3, r3

    y += 128;
    2ca8:	3b80      	subs	r3, #128	; 0x80
    2caa:	b2db      	uxtb	r3, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2cac:	2a00      	cmp	r2, #0
    2cae:	f000 80b1 	beq.w	2e14 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2e8>
        offset = (uint8_t)255 - offset;
    2cb2:	43c5      	mvns	r5, r0
    2cb4:	b2ed      	uxtb	r5, r5
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2cb6:	f005 000f 	and.w	r0, r5, #15
    if( theta & 0x40) secoffset++;
    2cba:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2cbc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2cc0:	112d      	asrs	r5, r5, #4
    2cc2:	006d      	lsls	r5, r5, #1
    2cc4:	1962      	adds	r2, r4, r5
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2cc6:	5d65      	ldrb	r5, [r4, r5]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    2cc8:	7852      	ldrb	r2, [r2, #1]
    2cca:	9e01      	ldr	r6, [sp, #4]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2ccc:	fb12 f000 	smulbb	r0, r2, r0
    2cd0:	eb05 1020 	add.w	r0, r5, r0, asr #4
    if( theta & 0x80 ) y = -y;
    2cd4:	2900      	cmp	r1, #0
				  byte greenMult = sin8(greenSin);
				  byte blueMult = sin8(blueSin);

				  leds[indexes[i]] = CRGB(redMult, greenMult, blueMult);
    2cd6:	9d02      	ldr	r5, [sp, #8]
    2cd8:	f839 1b02 	ldrh.w	r1, [r9], #2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2cdc:	b2c2      	uxtb	r2, r0
    2cde:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2ce2:	4628      	mov	r0, r5
    2ce4:	4408      	add	r0, r1
    if( theta & 0x80 ) y = -y;
    2ce6:	bfb8      	it	lt
    2ce8:	4252      	neglt	r2, r2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2cea:	546f      	strb	r7, [r5, r1]
        g = rhs.g;
    2cec:	7043      	strb	r3, [r0, #1]
		  {
			  SetFrameStep(3);

			  int length = GetAnalogPattern(4, 40);

			  for (int i = 0; i < numLeds; i++)
    2cee:	9b03      	ldr	r3, [sp, #12]
    2cf0:	b252      	sxtb	r2, r2
        b = rhs.b;
    2cf2:	3a80      	subs	r2, #128	; 0x80
    2cf4:	454b      	cmp	r3, r9
    2cf6:	44b0      	add	r8, r6
    2cf8:	7082      	strb	r2, [r0, #2]
    2cfa:	f47f af3c 	bne.w	2b76 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x4a>
				  byte greenMult = sin8(greenSin);
				  byte blueMult = sin8(blueSin);

				  leds[indexes[i]] = CRGB(redMult, greenMult, blueMult);
			  }
		  }
    2cfe:	b007      	add	sp, #28
    2d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					  blueSin = (i * length) + (float)GetFrame() / 1.5;
					  break;
				  }
				  case 3:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2d04:	4640      	mov	r0, r8
    2d06:	f004 fa81 	bl	720c <__aeabi_i2f>
    2d0a:	4606      	mov	r6, r0

		  void SetFrame() { gFrame = MeltdownSerial.GetValue(); }

		  long GetFrame()
		  {
			  if (gFrame < 1)
    2d0c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    2d10:	2800      	cmp	r0, #0
    2d12:	f340 80d4 	ble.w	2ebe <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x392>
    2d16:	f004 fa79 	bl	720c <__aeabi_i2f>
    2d1a:	4605      	mov	r5, r0
					  blueSin = (i * length) + (float)GetFrame() / 1.5;
					  break;
				  }
				  case 3:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2d1c:	4629      	mov	r1, r5
    2d1e:	4630      	mov	r0, r6
    2d20:	f004 f9c0 	bl	70a4 <__addsf3>
    2d24:	f004 f944 	bl	6fb0 <__aeabi_f2d>
					  greenSin = (i * length / 4) - (float)GetFrame();
    2d28:	f1b8 0f00 	cmp.w	r8, #0
					  blueSin = (i * length) + (float)GetFrame() / 1.5;
					  break;
				  }
				  case 3:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2d2c:	4602      	mov	r2, r0
					  greenSin = (i * length / 4) - (float)GetFrame();
    2d2e:	4640      	mov	r0, r8
    2d30:	bfb8      	it	lt
    2d32:	f108 0003 	addlt.w	r0, r8, #3
					  blueSin = (i * length) + (float)GetFrame() / 1.5;
					  break;
				  }
				  case 3:
				  {
					  redSin = (i * length) + (float)GetFrame();
    2d36:	460b      	mov	r3, r1
					  greenSin = (i * length / 4) - (float)GetFrame();
    2d38:	1080      	asrs	r0, r0, #2
    2d3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2d3e:	f004 fa65 	bl	720c <__aeabi_i2f>
    2d42:	4629      	mov	r1, r5
    2d44:	f004 f9ac 	bl	70a0 <__aeabi_fsub>
					  blueSin = (i * length) + (float)GetFrame() / 2;
    2d48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
					  break;
				  }
				  case 3:
				  {
					  redSin = (i * length) + (float)GetFrame();
					  greenSin = (i * length / 4) - (float)GetFrame();
    2d4c:	4683      	mov	fp, r0
					  blueSin = (i * length) + (float)GetFrame() / 2;
    2d4e:	4628      	mov	r0, r5
    2d50:	f004 fab0 	bl	72b4 <__aeabi_fmul>
    2d54:	4631      	mov	r1, r6
				  }
				  case 2:
				  {
					  redSin = (i * length) + (float)GetFrame() * 1.5;
					  greenSin = (i * length) + (float)GetFrame() * 3;
					  blueSin = (i * length) + (float)GetFrame() / 1.5;
    2d56:	f004 f9a5 	bl	70a4 <__addsf3>
    2d5a:	f004 f929 	bl	6fb0 <__aeabi_f2d>
    2d5e:	4606      	mov	r6, r0
    2d60:	4658      	mov	r0, fp
    2d62:	460f      	mov	r7, r1
    2d64:	f004 fc92 	bl	768c <__aeabi_f2uiz>
    2d68:	fa5f fb80 	uxtb.w	fp, r0
    2d6c:	fa4f f38b 	sxtb.w	r3, fp
    2d70:	f00b 0540 	and.w	r5, fp, #64	; 0x40
    2d74:	9300      	str	r3, [sp, #0]
    2d76:	b2ed      	uxtb	r5, r5
					  break;
    2d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2d7c:	e74e      	b.n	2c1c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xf0>
					  blueSin = (i * length) + (float)GetFrame() / 3;
					  break;
				  }
				  case 2:
				  {
					  redSin = (i * length) + (float)GetFrame() * 1.5;
    2d7e:	4640      	mov	r0, r8
    2d80:	f004 fa44 	bl	720c <__aeabi_i2f>
    2d84:	4605      	mov	r5, r0

		  void SetFrame() { gFrame = MeltdownSerial.GetValue(); }

		  long GetFrame()
		  {
			  if (gFrame < 1)
    2d86:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    2d8a:	2800      	cmp	r0, #0
    2d8c:	f340 809d 	ble.w	2eca <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x39e>
    2d90:	f004 fa3c 	bl	720c <__aeabi_i2f>
    2d94:	4935      	ldr	r1, [pc, #212]	; (2e6c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x340>)
    2d96:	4606      	mov	r6, r0
    2d98:	f004 fa8c 	bl	72b4 <__aeabi_fmul>
    2d9c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    2da0:	4607      	mov	r7, r0
    2da2:	4630      	mov	r0, r6
    2da4:	f004 fa86 	bl	72b4 <__aeabi_fmul>
    2da8:	4601      	mov	r1, r0
					  blueSin = (i * length) + (float)GetFrame() / 3;
					  break;
				  }
				  case 2:
				  {
					  redSin = (i * length) + (float)GetFrame() * 1.5;
    2daa:	4628      	mov	r0, r5
    2dac:	f004 f97a 	bl	70a4 <__addsf3>
    2db0:	f004 f8fe 	bl	6fb0 <__aeabi_f2d>
    2db4:	4602      	mov	r2, r0
    2db6:	460b      	mov	r3, r1
					  greenSin = (i * length) + (float)GetFrame() * 3;
    2db8:	4628      	mov	r0, r5
    2dba:	4639      	mov	r1, r7
					  blueSin = (i * length) + (float)GetFrame() / 3;
					  break;
				  }
				  case 2:
				  {
					  redSin = (i * length) + (float)GetFrame() * 1.5;
    2dbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
					  greenSin = (i * length) + (float)GetFrame() * 3;
    2dc0:	f004 f970 	bl	70a4 <__addsf3>
					  blueSin = (i * length) + (float)GetFrame() / 1.5;
    2dc4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
					  break;
				  }
				  case 2:
				  {
					  redSin = (i * length) + (float)GetFrame() * 1.5;
					  greenSin = (i * length) + (float)GetFrame() * 3;
    2dc8:	4683      	mov	fp, r0
					  blueSin = (i * length) + (float)GetFrame() / 1.5;
    2dca:	4630      	mov	r0, r6
    2dcc:	f004 fb26 	bl	741c <__aeabi_fdiv>
    2dd0:	4629      	mov	r1, r5
    2dd2:	e7c0      	b.n	2d56 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x22a>
				  // Modes
				  switch (GetModeNumber(modeOffset))
				  {
				  case 1:
				  {
					  redSin = (i * length) + (float)GetFrame() / 1.5;
    2dd4:	4640      	mov	r0, r8
    2dd6:	f004 fa19 	bl	720c <__aeabi_i2f>
    2dda:	4605      	mov	r5, r0

		  void SetFrame() { gFrame = MeltdownSerial.GetValue(); }

		  long GetFrame()
		  {
			  if (gFrame < 1)
    2ddc:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    2de0:	2800      	cmp	r0, #0
    2de2:	dd7b      	ble.n	2edc <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3b0>
    2de4:	f004 fa12 	bl	720c <__aeabi_i2f>
    2de8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    2dec:	4606      	mov	r6, r0
    2dee:	f004 fb15 	bl	741c <__aeabi_fdiv>
    2df2:	4601      	mov	r1, r0
				  // Modes
				  switch (GetModeNumber(modeOffset))
				  {
				  case 1:
				  {
					  redSin = (i * length) + (float)GetFrame() / 1.5;
    2df4:	4628      	mov	r0, r5
    2df6:	f004 f955 	bl	70a4 <__addsf3>
    2dfa:	f004 f8d9 	bl	6fb0 <__aeabi_f2d>
    2dfe:	4602      	mov	r2, r0
    2e00:	460b      	mov	r3, r1
					  greenSin = (i * length) + (float)GetFrame();
    2e02:	4628      	mov	r0, r5
    2e04:	4631      	mov	r1, r6
				  // Modes
				  switch (GetModeNumber(modeOffset))
				  {
				  case 1:
				  {
					  redSin = (i * length) + (float)GetFrame() / 1.5;
    2e06:	e9cd 2304 	strd	r2, r3, [sp, #16]
					  greenSin = (i * length) + (float)GetFrame();
    2e0a:	f004 f94b 	bl	70a4 <__addsf3>
					  blueSin = (i * length) + (float)GetFrame() / 3;
    2e0e:	4917      	ldr	r1, [pc, #92]	; (2e6c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x340>)
				  switch (GetModeNumber(modeOffset))
				  {
				  case 1:
				  {
					  redSin = (i * length) + (float)GetFrame() / 1.5;
					  greenSin = (i * length) + (float)GetFrame();
    2e10:	4683      	mov	fp, r0
    2e12:	e7da      	b.n	2dca <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x29e>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2e14:	f000 053f 	and.w	r5, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2e18:	f000 000f 	and.w	r0, r0, #15
    2e1c:	e750      	b.n	2cc0 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x194>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2e1e:	f00b 033f 	and.w	r3, fp, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2e22:	f00b 050f 	and.w	r5, fp, #15
    2e26:	e730      	b.n	2c8a <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x15e>
    2e28:	f3c3 1201 	ubfx	r2, r3, #4, #2
    2e2c:	0052      	lsls	r2, r2, #1
    2e2e:	18a1      	adds	r1, r4, r2
    2e30:	5ca2      	ldrb	r2, [r4, r2]
    2e32:	f891 e001 	ldrb.w	lr, [r1, #1]
    2e36:	f003 010f 	and.w	r1, r3, #15
    2e3a:	fb1e fe01 	smulbb	lr, lr, r1
    2e3e:	4630      	mov	r0, r6
    2e40:	4639      	mov	r1, r7
    2e42:	b25e      	sxtb	r6, r3
    2e44:	eb02 171e 	add.w	r7, r2, lr, lsr #4
    2e48:	f004 f906 	bl	7058 <__aeabi_d2uiz>
    2e4c:	b2c0      	uxtb	r0, r0
    2e4e:	b2ff      	uxtb	r7, r7
    2e50:	f000 0240 	and.w	r2, r0, #64	; 0x40
    2e54:	b27b      	sxtb	r3, r7
    2e56:	b2d2      	uxtb	r2, r2
    2e58:	b241      	sxtb	r1, r0
    2e5a:	e704      	b.n	2c66 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x13a>
    2e5c:	42100000 	.word	0x42100000
    2e60:	447fc000 	.word	0x447fc000
    2e64:	00009068 	.word	0x00009068
    2e68:	cccccccd 	.word	0xcccccccd
    2e6c:	40400000 	.word	0x40400000
					  break;
				  }
				  default:
				  {
					  redSin = 0;
					  greenSin = (i * length) + (float)GetFrame();
    2e70:	4640      	mov	r0, r8
    2e72:	f004 f9cb 	bl	720c <__aeabi_i2f>
    2e76:	4605      	mov	r5, r0

		  void SetFrame() { gFrame = MeltdownSerial.GetValue(); }

		  long GetFrame()
		  {
			  if (gFrame < 1)
    2e78:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
    2e7c:	2800      	cmp	r0, #0
    2e7e:	dd34      	ble.n	2eea <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3be>
    2e80:	f004 f9c4 	bl	720c <__aeabi_i2f>
    2e84:	4601      	mov	r1, r0
					  break;
				  }
				  default:
				  {
					  redSin = 0;
					  greenSin = (i * length) + (float)GetFrame();
    2e86:	4628      	mov	r0, r5
    2e88:	f004 f90c 	bl	70a4 <__addsf3>
    2e8c:	f004 fbfe 	bl	768c <__aeabi_f2uiz>
    2e90:	fa5f fb80 	uxtb.w	fp, r0
    2e94:	f00b 0540 	and.w	r5, fp, #64	; 0x40
    2e98:	fa4f f38b 	sxtb.w	r3, fp
    2e9c:	2600      	movs	r6, #0
    2e9e:	b2ed      	uxtb	r5, r5
    2ea0:	9300      	str	r3, [sp, #0]
    2ea2:	4619      	mov	r1, r3
    2ea4:	462a      	mov	r2, r5
    2ea6:	4658      	mov	r0, fp
    2ea8:	4633      	mov	r3, r6
    2eaa:	4637      	mov	r7, r6
    2eac:	e6db      	b.n	2c66 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x13a>

		  long GetFrame()
		  {
			  if (gFrame < 1)
			  {
				  gFrame = 1;
    2eae:	2301      	movs	r3, #1
    2eb0:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2eb4:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    2eb8:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
    2ebc:	e692      	b.n	2be4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0xb8>
    2ebe:	2301      	movs	r3, #1
    2ec0:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2ec4:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    2ec8:	e728      	b.n	2d1c <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x1f0>
    2eca:	2301      	movs	r3, #1
    2ecc:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2ed0:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    2ed4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    2ed8:	4f07      	ldr	r7, [pc, #28]	; (2ef8 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3cc>)
    2eda:	e766      	b.n	2daa <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x27e>
    2edc:	2301      	movs	r3, #1
    2ede:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2ee2:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    2ee6:	4905      	ldr	r1, [pc, #20]	; (2efc <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x3d0>)
    2ee8:	e784      	b.n	2df4 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x2c8>
    2eea:	2301      	movs	r3, #1
    2eec:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2ef0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    2ef4:	e7c7      	b.n	2e86 <Meltdown::CMeltdownLED::RunningLights(CRGB*, unsigned short*, int, int)+0x35a>
    2ef6:	bf00      	nop
    2ef8:	40400000 	.word	0x40400000
    2efc:	3f2aaaab 	.word	0x3f2aaaab

00002f00 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)>:
			  {
				  leds[indexes[i]] = ColorFromPalette(palette, i * multiplier, beat - (i * 10));
			  }
		  }

		  void Juggle(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f04:	4606      	mov	r6, r0
    2f06:	b085      	sub	sp, #20
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2f08:	6980      	ldr	r0, [r0, #24]
			  {
				  leds[indexes[i]] = ColorFromPalette(palette, i * multiplier, beat - (i * 10));
			  }
		  }

		  void Juggle(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    2f0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2f0c:	4699      	mov	r9, r3
    2f0e:	4617      	mov	r7, r2
    2f10:	460c      	mov	r4, r1
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    2f12:	f004 f97b 	bl	720c <__aeabi_i2f>
    2f16:	495b      	ldr	r1, [pc, #364]	; (3084 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x184>)
    2f18:	f004 f9cc 	bl	72b4 <__aeabi_fmul>
    2f1c:	495a      	ldr	r1, [pc, #360]	; (3088 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x188>)
    2f1e:	f004 fa7d 	bl	741c <__aeabi_fdiv>
    2f22:	495a      	ldr	r1, [pc, #360]	; (308c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x18c>)
    2f24:	f004 f8be 	bl	70a4 <__addsf3>
    2f28:	f004 fb8a 	bl	7640 <__aeabi_f2iz>
			  }
		  }

		  void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
		  {
			  for (int i = 0; i < numLeds; i++)
    2f2c:	f1b9 0f00 	cmp.w	r9, #0
    2f30:	dd21      	ble.n	2f76 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x76>
    2f32:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    2f36:	b2c9      	uxtb	r1, r1
    2f38:	3101      	adds	r1, #1
    2f3a:	4638      	mov	r0, r7
    2f3c:	eb07 0e49 	add.w	lr, r7, r9, lsl #1
			  {
				  int scale = 255 - fade;
				  (leds[indexes[i]]).nscale8(scale);
    2f40:	f830 3b02 	ldrh.w	r3, [r0], #2
    2f44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2f48:	eb04 0c03 	add.w	ip, r4, r3
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    2f4c:	5ce2      	ldrb	r2, [r4, r3]
    2f4e:	fb01 f202 	mul.w	r2, r1, r2
    2f52:	1212      	asrs	r2, r2, #8
    2f54:	54e2      	strb	r2, [r4, r3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f56:	f89c 2001 	ldrb.w	r2, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f5a:	f89c 3002 	ldrb.w	r3, [ip, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f5e:	fb01 f202 	mul.w	r2, r1, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f62:	fb01 f303 	mul.w	r3, r1, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f66:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f68:	121b      	asrs	r3, r3, #8
			  }
		  }

		  void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
		  {
			  for (int i = 0; i < numLeds; i++)
    2f6a:	4570      	cmp	r0, lr
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    2f6c:	f88c 2001 	strb.w	r2, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    2f70:	f88c 3002 	strb.w	r3, [ip, #2]
    2f74:	d1e4      	bne.n	2f40 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x40>
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    2f76:	2d00      	cmp	r5, #0
    2f78:	db21      	blt.n	2fbe <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xbe>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    2f7a:	6832      	ldr	r2, [r6, #0]
    2f7c:	4b44      	ldr	r3, [pc, #272]	; (3090 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x190>)
    2f7e:	68b1      	ldr	r1, [r6, #8]
    2f80:	fba3 0302 	umull	r0, r3, r3, r2
    2f84:	08db      	lsrs	r3, r3, #3
    2f86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f8a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    2f8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2f92:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2f96:	4429      	add	r1, r5
    2f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    2f9a:	3201      	adds	r2, #1
    2f9c:	fb91 f3f2 	sdiv	r3, r1, r2
    2fa0:	fb02 1113 	mls	r1, r2, r3, r1
    2fa4:	3901      	subs	r1, #1
    2fa6:	2902      	cmp	r1, #2
    2fa8:	d809      	bhi.n	2fbe <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xbe>
    2faa:	4b3a      	ldr	r3, [pc, #232]	; (3094 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x194>)
    2fac:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
			  case 3:
				  numBalls = 9;
				  break;
			  }

			  for (int i = 0; i < numBalls; i++)
    2fb0:	f1b8 0f00 	cmp.w	r8, #0
    2fb4:	dd63      	ble.n	307e <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x17e>
    2fb6:	23ff      	movs	r3, #255	; 0xff
    2fb8:	fb93 f3f8 	sdiv	r3, r3, r8
    2fbc:	e002      	b.n	2fc4 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xc4>
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  int numBalls = 3;

			  // Modes
			  switch (GetModeNumber(modeOffset))
    2fbe:	2355      	movs	r3, #85	; 0x55
    2fc0:	f04f 0803 	mov.w	r8, #3
    2fc4:	f109 35ff 	add.w	r5, r9, #4294967295
    2fc8:	b2ad      	uxth	r5, r5
    2fca:	b2db      	uxtb	r3, r3
    2fcc:	1c6a      	adds	r2, r5, #1
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    2fce:	f04f 0900 	mov.w	r9, #0
    2fd2:	9300      	str	r3, [sp, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2fd4:	4623      	mov	r3, r4
    2fd6:	4635      	mov	r5, r6
    2fd8:	9201      	str	r2, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2fda:	f44f 7b8c 	mov.w	fp, #280	; 0x118
    2fde:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
    2fe2:	464c      	mov	r4, r9
    2fe4:	461e      	mov	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2fe6:	4b2c      	ldr	r3, [pc, #176]	; (3098 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x198>)
    2fe8:	1de1      	adds	r1, r4, #7
    2fea:	6818      	ldr	r0, [r3, #0]
    2fec:	9003      	str	r0, [sp, #12]
    2fee:	b289      	uxth	r1, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2ff0:	29ff      	cmp	r1, #255	; 0xff
	return ret;
    2ff2:	9803      	ldr	r0, [sp, #12]
    2ff4:	bf9c      	itt	ls
    2ff6:	0209      	lslls	r1, r1, #8
    2ff8:	b289      	uxthls	r1, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2ffa:	fb0b f000 	mul.w	r0, fp, r0
    2ffe:	fb01 f100 	mul.w	r1, r1, r0
    3002:	ea4f 4e11 	mov.w	lr, r1, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3006:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    300a:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    300e:	d003      	beq.n	3018 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x118>
    3010:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    3014:	3007      	adds	r0, #7
    3016:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3018:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    301c:	4b1f      	ldr	r3, [pc, #124]	; (309c <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x19c>)
    301e:	f88d a009 	strb.w	sl, [sp, #9]
    3022:	f813 100c 	ldrb.w	r1, [r3, ip]
    3026:	4b1e      	ldr	r3, [pc, #120]	; (30a0 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0x1a0>)
    3028:	f833 c01c 	ldrh.w	ip, [r3, ip, lsl #1]
			  }

			  for (int i = 0; i < numBalls; i++)
			  {
				  int dotHue = i * (255 / numBalls);
				  uint16_t index = indexes[beatsin16(i + 7, 0, numLeds - 1)];
    302c:	9b01      	ldr	r3, [sp, #4]
    302e:	f3c0 0046 	ubfx	r0, r0, #1, #7
    3032:	fb01 c100 	mla	r1, r1, r0, ip

    if( theta & 0x8000 ) y = -y;
    3036:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    303a:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    303c:	bf18      	it	ne
    303e:	4249      	negne	r1, r1
    3040:	b209      	sxth	r1, r1
    3042:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    3046:	b289      	uxth	r1, r1
    3048:	fb03 f101 	mul.w	r1, r3, r1
    304c:	0c09      	lsrs	r1, r1, #16
    304e:	6928      	ldr	r0, [r5, #16]
				  leds[index] = CHSV(dotHue + gHue, 200, 255);
    3050:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3054:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3058:	eb09 0e00 	add.w	lr, r9, r0
    305c:	f04f 33ff 	mov.w	r3, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3060:	4431      	add	r1, r6
    3062:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3064:	f88d 300a 	strb.w	r3, [sp, #10]
    3068:	f88d e008 	strb.w	lr, [sp, #8]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    306c:	f7ff f800 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    3070:	9b00      	ldr	r3, [sp, #0]
			  case 3:
				  numBalls = 9;
				  break;
			  }

			  for (int i = 0; i < numBalls; i++)
    3072:	3401      	adds	r4, #1
    3074:	4499      	add	r9, r3
    3076:	4544      	cmp	r4, r8
    3078:	fa5f f989 	uxtb.w	r9, r9
    307c:	dbb3      	blt.n	2fe6 <Meltdown::CMeltdownLED::Juggle(CRGB*, unsigned short*, int, int)+0xe6>
			  {
				  int dotHue = i * (255 / numBalls);
				  uint16_t index = indexes[beatsin16(i + 7, 0, numLeds - 1)];
				  leds[index] = CHSV(dotHue + gHue, 200, 255);
			  }
		  }
    307e:	b005      	add	sp, #20
    3080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3084:	42c20000 	.word	0x42c20000
    3088:	447fc000 	.word	0x447fc000
    308c:	40400000 	.word	0x40400000
    3090:	cccccccd 	.word	0xcccccccd
    3094:	00009078 	.word	0x00009078
    3098:	1fff9b38 	.word	0x1fff9b38
    309c:	00009070 	.word	0x00009070
    30a0:	00009058 	.word	0x00009058

000030a4 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)>:
			  MeltdownPattern pattern = gPatterns[GetPatternNumber(patternOffset)];

			  (this->*(pattern.patternFunc))(leds, indexes, numLeds, modeOffset);
		  }

		  void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    30a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30a8:	b08d      	sub	sp, #52	; 0x34
    30aa:	4692      	mov	sl, r2
    30ac:	9002      	str	r0, [sp, #8]
		  {
			  int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);
    30ae:	6980      	ldr	r0, [r0, #24]
			  MeltdownPattern pattern = gPatterns[GetPatternNumber(patternOffset)];

			  (this->*(pattern.patternFunc))(leds, indexes, numLeds, modeOffset);
		  }

		  void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    30b0:	9e16      	ldr	r6, [sp, #88]	; 0x58
    30b2:	461c      	mov	r4, r3
    30b4:	460d      	mov	r5, r1
		  {
			  int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);
    30b6:	f004 f8a9 	bl	720c <__aeabi_i2f>
    30ba:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    30be:	f004 f8f9 	bl	72b4 <__aeabi_fmul>
    30c2:	499e      	ldr	r1, [pc, #632]	; (333c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x298>)
    30c4:	f004 f9aa 	bl	741c <__aeabi_fdiv>
    30c8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
    30cc:	f003 ffea 	bl	70a4 <__addsf3>
    30d0:	f004 fab6 	bl	7640 <__aeabi_f2iz>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30d4:	4b9a      	ldr	r3, [pc, #616]	; (3340 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x29c>)
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	930b      	str	r3, [sp, #44]	; 0x2c
    30da:	b280      	uxth	r0, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    30dc:	28ff      	cmp	r0, #255	; 0xff
	return ret;
    30de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    30e0:	bf98      	it	ls
    30e2:	0200      	lslls	r0, r0, #8
    30e4:	f44f 738c 	mov.w	r3, #280	; 0x118
    30e8:	bf98      	it	ls
    30ea:	b280      	uxthls	r0, r0
    30ec:	fb03 f101 	mul.w	r1, r3, r1
    30f0:	fb00 f101 	mul.w	r1, r0, r1
    30f4:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    30f6:	b2ca      	uxtb	r2, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    30f8:	0650      	lsls	r0, r2, #25
    30fa:	f140 821a 	bpl.w	3532 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x48e>
        offset = (uint8_t)255 - offset;
    30fe:	43d3      	mvns	r3, r2
    3100:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3102:	f003 020f 	and.w	r2, r3, #15
    if( theta & 0x40) secoffset++;
    3106:	3201      	adds	r2, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    310c:	488d      	ldr	r0, [pc, #564]	; (3344 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a0>)
    310e:	111b      	asrs	r3, r3, #4
    3110:	005b      	lsls	r3, r3, #1
    3112:	18c7      	adds	r7, r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3114:	5cc3      	ldrb	r3, [r0, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    3116:	7878      	ldrb	r0, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    3118:	fb10 f202 	smulbb	r2, r0, r2
    311c:	eb03 1222 	add.w	r2, r3, r2, asr #4
    3120:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    3122:	060b      	lsls	r3, r1, #24
    3124:	bf48      	it	mi
    3126:	4252      	negmi	r2, r2
    3128:	b252      	sxtb	r2, r2
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    312a:	3a80      	subs	r2, #128	; 0x80
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    312c:	2e00      	cmp	r6, #0
    312e:	b2d2      	uxtb	r2, r2
    3130:	f2c0 8204 	blt.w	353c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x498>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    3134:	9f02      	ldr	r7, [sp, #8]
    3136:	4b84      	ldr	r3, [pc, #528]	; (3348 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2a4>)
    3138:	6838      	ldr	r0, [r7, #0]
		  void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

			  // Modes
			  FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
    313a:	68b9      	ldr	r1, [r7, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    313c:	fba3 e300 	umull	lr, r3, r3, r0
    3140:	08db      	lsrs	r3, r3, #3
    3142:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3146:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    314a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    314e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
		  void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

			  // Modes
			  FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
    3152:	4431      	add	r1, r6
    3154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3156:	3301      	adds	r3, #1
    3158:	fb91 f0f3 	sdiv	r0, r1, r3
    315c:	fb03 1110 	mls	r1, r3, r0, r1
    3160:	1c4b      	adds	r3, r1, #1
		  }

		  void FillGradients(CRGB leds[], uint16_t indexes[], int numLeds, int numGradients, int speed)
		  {
			  if (numGradients < 1) numGradients = 1;
    3162:	2b01      	cmp	r3, #1
    3164:	bfb8      	it	lt
    3166:	2301      	movlt	r3, #1
    3168:	9301      	str	r3, [sp, #4]
    316a:	b2d3      	uxtb	r3, r2
    316c:	9303      	str	r3, [sp, #12]

			  for (int i = 0; i < numGradients; i++)
    316e:	f04f 0b00 	mov.w	fp, #0
    3172:	9b01      	ldr	r3, [sp, #4]
    3174:	fb94 f3f3 	sdiv	r3, r4, r3
    3178:	9304      	str	r3, [sp, #16]
    317a:	9a02      	ldr	r2, [sp, #8]
    317c:	f892 6031 	ldrb.w	r6, [r2, #49]	; 0x31
    3180:	f892 4032 	ldrb.w	r4, [r2, #50]	; 0x32
    3184:	f892 0033 	ldrb.w	r0, [r2, #51]	; 0x33
    3188:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
		  }

		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
    318c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
			  if (gHue1) val++;
			  if (gHue2) val++;
    3190:	2e00      	cmp	r6, #0
    3192:	f000 81a5 	beq.w	34e0 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x43c>
    3196:	1c5a      	adds	r2, r3, #1
			  if (gHue3) val++;
    3198:	b104      	cbz	r4, 319c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xf8>
    319a:	3201      	adds	r2, #1
			  if (gHue4) val++;
    319c:	b100      	cbz	r0, 31a0 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xfc>
    319e:	3201      	adds	r2, #1
			  if (gHue5) val++;
    31a0:	b101      	cbz	r1, 31a4 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x100>
    31a2:	3201      	adds	r2, #1
			  }
		  }

		  CRGB GetRainbowColor(int index = 0)
		  {
			  switch (index % 8)
    31a4:	445a      	add	r2, fp
    31a6:	f002 0207 	and.w	r2, r2, #7
    31aa:	3a01      	subs	r2, #1
    31ac:	2a06      	cmp	r2, #6
    31ae:	d85e      	bhi.n	326e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ca>
    31b0:	e8df f012 	tbh	[pc, r2, lsl #1]
    31b4:	00480052 	.word	0x00480052
    31b8:	0035003f 	.word	0x0035003f
    31bc:	00070028 	.word	0x00070028
    31c0:	0198      	.short	0x0198
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    31c2:	22ee      	movs	r2, #238	; 0xee
    31c4:	2782      	movs	r7, #130	; 0x82
    31c6:	f88d 2018 	strb.w	r2, [sp, #24]
    31ca:	f88d 201a 	strb.w	r2, [sp, #26]
    31ce:	f88d 7019 	strb.w	r7, [sp, #25]
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
    31d2:	b316      	cbz	r6, 321a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x176>
    31d4:	1c5a      	adds	r2, r3, #1
			  if (gHue3) val++;
    31d6:	b104      	cbz	r4, 31da <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x136>
    31d8:	3201      	adds	r2, #1
			  if (gHue4) val++;
    31da:	b100      	cbz	r0, 31de <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x13a>
    31dc:	3201      	adds	r2, #1
			  if (gHue5) val++;
    31de:	b101      	cbz	r1, 31e2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x13e>
    31e0:	3201      	adds	r2, #1
			  }
		  }

		  CRGB GetRainbowColor(int index = 0)
		  {
			  switch (index % 8)
    31e2:	445a      	add	r2, fp
    31e4:	3201      	adds	r2, #1
    31e6:	f002 0207 	and.w	r2, r2, #7
    31ea:	3a01      	subs	r2, #1
    31ec:	2a06      	cmp	r2, #6
    31ee:	f200 809b 	bhi.w	3328 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x284>
    31f2:	e8df f012 	tbh	[pc, r2, lsl #1]
    31f6:	008e      	.short	0x008e
    31f8:	007b0084 	.word	0x007b0084
    31fc:	00670071 	.word	0x00670071
    3200:	01910046 	.word	0x01910046
    3204:	224b      	movs	r2, #75	; 0x4b
    3206:	2700      	movs	r7, #0
    3208:	f88d 2018 	strb.w	r2, [sp, #24]
    320c:	2282      	movs	r2, #130	; 0x82
    320e:	f88d 7019 	strb.w	r7, [sp, #25]
    3212:	f88d 201a 	strb.w	r2, [sp, #26]
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
    3216:	2e00      	cmp	r6, #0
    3218:	d1dc      	bne.n	31d4 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x130>
    321a:	461a      	mov	r2, r3
    321c:	e7db      	b.n	31d6 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x132>
    321e:	2200      	movs	r2, #0
    3220:	f04f 37ff 	mov.w	r7, #4294967295
    3224:	f88d 701a 	strb.w	r7, [sp, #26]
    3228:	f88d 2018 	strb.w	r2, [sp, #24]
    322c:	f88d 2019 	strb.w	r2, [sp, #25]
    3230:	e7cf      	b.n	31d2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    3232:	2200      	movs	r2, #0
    3234:	2780      	movs	r7, #128	; 0x80
    3236:	f88d 2018 	strb.w	r2, [sp, #24]
    323a:	f88d 201a 	strb.w	r2, [sp, #26]
    323e:	f88d 7019 	strb.w	r7, [sp, #25]
    3242:	e7c6      	b.n	31d2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    3244:	f04f 37ff 	mov.w	r7, #4294967295
    3248:	2200      	movs	r2, #0
    324a:	f88d 7018 	strb.w	r7, [sp, #24]
    324e:	f88d 7019 	strb.w	r7, [sp, #25]
    3252:	f88d 201a 	strb.w	r2, [sp, #26]
    3256:	e7bc      	b.n	31d2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    3258:	27a5      	movs	r7, #165	; 0xa5
    325a:	2200      	movs	r2, #0
    325c:	f04f 3eff 	mov.w	lr, #4294967295
    3260:	f88d e018 	strb.w	lr, [sp, #24]
    3264:	f88d 7019 	strb.w	r7, [sp, #25]
    3268:	f88d 201a 	strb.w	r2, [sp, #26]
    326c:	e7b1      	b.n	31d2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    326e:	2200      	movs	r2, #0
    3270:	f04f 37ff 	mov.w	r7, #4294967295
    3274:	f88d 7018 	strb.w	r7, [sp, #24]
    3278:	f88d 2019 	strb.w	r2, [sp, #25]
    327c:	f88d 201a 	strb.w	r2, [sp, #26]
    3280:	e7a7      	b.n	31d2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    3282:	22ee      	movs	r2, #238	; 0xee
    3284:	2782      	movs	r7, #130	; 0x82
    3286:	f88d 201c 	strb.w	r2, [sp, #28]
    328a:	f88d 201e 	strb.w	r2, [sp, #30]
    328e:	f88d 701d 	strb.w	r7, [sp, #29]
    3292:	b106      	cbz	r6, 3296 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1f2>
    3294:	3301      	adds	r3, #1
			  if (gHue3) val++;
    3296:	b104      	cbz	r4, 329a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1f6>
    3298:	3301      	adds	r3, #1
			  if (gHue4) val++;
    329a:	b100      	cbz	r0, 329e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1fa>
    329c:	3301      	adds	r3, #1
			  if (gHue5) val++;
    329e:	b101      	cbz	r1, 32a2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1fe>
    32a0:	3301      	adds	r3, #1
			  }
		  }

		  CRGB GetRainbowColor(int index = 0)
		  {
			  switch (index % 8)
    32a2:	445b      	add	r3, fp
    32a4:	3302      	adds	r3, #2
    32a6:	f003 0307 	and.w	r3, r3, #7
    32aa:	3b01      	subs	r3, #1
    32ac:	2b06      	cmp	r3, #6
    32ae:	f200 810b 	bhi.w	34c8 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x424>
    32b2:	e8df f013 	tbh	[pc, r3, lsl #1]
    32b6:	00fe      	.short	0x00fe
    32b8:	00e100ea 	.word	0x00e100ea
    32bc:	00d700f4 	.word	0x00d700f4
    32c0:	0124004b 	.word	0x0124004b
    32c4:	224b      	movs	r2, #75	; 0x4b
    32c6:	2700      	movs	r7, #0
    32c8:	f88d 201c 	strb.w	r2, [sp, #28]
    32cc:	2282      	movs	r2, #130	; 0x82
    32ce:	f88d 701d 	strb.w	r7, [sp, #29]
    32d2:	f88d 201e 	strb.w	r2, [sp, #30]
    32d6:	e7dc      	b.n	3292 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    32d8:	2200      	movs	r2, #0
    32da:	f04f 37ff 	mov.w	r7, #4294967295
    32de:	f88d 701e 	strb.w	r7, [sp, #30]
    32e2:	f88d 201c 	strb.w	r2, [sp, #28]
    32e6:	f88d 201d 	strb.w	r2, [sp, #29]
    32ea:	e7d2      	b.n	3292 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    32ec:	2200      	movs	r2, #0
    32ee:	2780      	movs	r7, #128	; 0x80
    32f0:	f88d 201c 	strb.w	r2, [sp, #28]
    32f4:	f88d 201e 	strb.w	r2, [sp, #30]
    32f8:	f88d 701d 	strb.w	r7, [sp, #29]
    32fc:	e7c9      	b.n	3292 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    32fe:	f04f 37ff 	mov.w	r7, #4294967295
    3302:	2200      	movs	r2, #0
    3304:	f88d 701c 	strb.w	r7, [sp, #28]
    3308:	f88d 701d 	strb.w	r7, [sp, #29]
    330c:	f88d 201e 	strb.w	r2, [sp, #30]
    3310:	e7bf      	b.n	3292 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    3312:	27a5      	movs	r7, #165	; 0xa5
    3314:	2200      	movs	r2, #0
    3316:	f04f 3eff 	mov.w	lr, #4294967295
    331a:	f88d e01c 	strb.w	lr, [sp, #28]
    331e:	f88d 701d 	strb.w	r7, [sp, #29]
    3322:	f88d 201e 	strb.w	r2, [sp, #30]
    3326:	e7b4      	b.n	3292 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    3328:	2200      	movs	r2, #0
    332a:	f04f 37ff 	mov.w	r7, #4294967295
    332e:	f88d 701c 	strb.w	r7, [sp, #28]
    3332:	f88d 201d 	strb.w	r2, [sp, #29]
    3336:	f88d 201e 	strb.w	r2, [sp, #30]
    333a:	e7aa      	b.n	3292 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
    333c:	447fc000 	.word	0x447fc000
    3340:	1fff9b38 	.word	0x1fff9b38
    3344:	00009068 	.word	0x00009068
    3348:	cccccccd 	.word	0xcccccccd
    334c:	23ee      	movs	r3, #238	; 0xee
    334e:	2282      	movs	r2, #130	; 0x82
    3350:	f88d 3020 	strb.w	r3, [sp, #32]
    3354:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    3358:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
				  CRGB color1 = GetRainbowColor(GetToggledHueCount() + i);
				  CRGB color2 = GetRainbowColor(GetToggledHueCount() + i + 1);
				  CRGB color3 = GetRainbowColor(GetToggledHueCount() + i + 2);

				  // Blend between two different colors over time.
				  CRGB blend1 = blend(color1, color2, speed);
    335c:	9c03      	ldr	r4, [sp, #12]
    335e:	aa07      	add	r2, sp, #28
    3360:	4623      	mov	r3, r4
    3362:	a906      	add	r1, sp, #24
    3364:	a809      	add	r0, sp, #36	; 0x24
    3366:	f7fe fd53 	bl	1e10 <blend(CRGB const&, CRGB const&, unsigned char)>
				  CRGB blend2 = blend(color2, color3, speed);
    336a:	4623      	mov	r3, r4
    336c:	aa08      	add	r2, sp, #32
    336e:	a907      	add	r1, sp, #28
    3370:	a80a      	add	r0, sp, #40	; 0x28
    3372:	f7fe fd4d 	bl	1e10 <blend(CRGB const&, CRGB const&, unsigned char)>

				  int startPos = (numLeds / numGradients) * i;
    3376:	9a04      	ldr	r2, [sp, #16]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3378:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
        g = rhs.g;
    337c:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3380:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    3384:	f89d 6029 	ldrb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    3388:	f89d 402a 	ldrb.w	r4, [sp, #42]	; 0x2a
    338c:	fb0b f302 	mul.w	r3, fp, r2
				  if (startPos < 0) startPos = 0;
				  int endPos = ((numLeds / numGradients) * (i + 1)) - 1;
    3390:	eb02 0903 	add.w	r9, r2, r3
    3394:	f109 39ff 	add.w	r9, r9, #4294967295
				  if (endPos < 1) endPos = 1;
    3398:	f1b9 0f00 	cmp.w	r9, #0
    339c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    33a0:	bfcc      	ite	gt
    33a2:	fa1f f989 	uxthgt.w	r9, r9
    33a6:	f04f 0901 	movle.w	r9, #1

				  FillGradientRgb(leds, indexes, numLeds, startPos, blend1, endPos, blend2);
    33aa:	b29b      	uxth	r3, r3
		  void FillGradientRgb(CRGB leds[], uint16_t indexes[], int numLeds,
			  uint16_t startpos, CRGB startcolor,
			  uint16_t endpos, CRGB endcolor)
		  {
			  // if the points are in the wrong order, straighten them
			  if (endpos < startpos)
    33ac:	454b      	cmp	r3, r9
				  CRGB blend1 = blend(color1, color2, speed);
				  CRGB blend2 = blend(color2, color3, speed);

				  int startPos = (numLeds / numGradients) * i;
				  if (startPos < 0) startPos = 0;
				  int endPos = ((numLeds / numGradients) * (i + 1)) - 1;
    33ae:	f10b 0b01 	add.w	fp, fp, #1
    33b2:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
		  void FillGradientRgb(CRGB leds[], uint16_t indexes[], int numLeds,
			  uint16_t startpos, CRGB startcolor,
			  uint16_t endpos, CRGB endcolor)
		  {
			  // if the points are in the wrong order, straighten them
			  if (endpos < startpos)
    33b6:	d90b      	bls.n	33d0 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x32c>
    33b8:	9405      	str	r4, [sp, #20]
    33ba:	46b0      	mov	r8, r6
    33bc:	46bc      	mov	ip, r7
    33be:	469e      	mov	lr, r3
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    33c0:	4614      	mov	r4, r2
    33c2:	9a05      	ldr	r2, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    33c4:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33c6:	4607      	mov	r7, r0
    33c8:	464b      	mov	r3, r9
        g = rhs.g;
    33ca:	4641      	mov	r1, r8
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33cc:	4660      	mov	r0, ip
    33ce:	46f1      	mov	r9, lr

			  rdistance87 = (endcolor.r - startcolor.r) << 7;
			  gdistance87 = (endcolor.g - startcolor.g) << 7;
			  bdistance87 = (endcolor.b - startcolor.b) << 7;

			  uint16_t pixeldistance = endpos - startpos;
    33d0:	ebc3 0e09 	rsb	lr, r3, r9
			  saccum87 gdistance87;
			  saccum87 bdistance87;

			  rdistance87 = (endcolor.r - startcolor.r) << 7;
			  gdistance87 = (endcolor.g - startcolor.g) << 7;
			  bdistance87 = (endcolor.b - startcolor.b) << 7;
    33d4:	ebc2 0c04 	rsb	ip, r2, r4

			  saccum87 rdistance87;
			  saccum87 gdistance87;
			  saccum87 bdistance87;

			  rdistance87 = (endcolor.r - startcolor.r) << 7;
    33d8:	1a3f      	subs	r7, r7, r0
			  gdistance87 = (endcolor.g - startcolor.g) << 7;
    33da:	1a76      	subs	r6, r6, r1
			  bdistance87 = (endcolor.b - startcolor.b) << 7;

			  uint16_t pixeldistance = endpos - startpos;
    33dc:	fa1f f48e 	uxth.w	r4, lr

			  saccum87 rdistance87;
			  saccum87 gdistance87;
			  saccum87 bdistance87;

			  rdistance87 = (endcolor.r - startcolor.r) << 7;
    33e0:	01ff      	lsls	r7, r7, #7
			  gdistance87 = (endcolor.g - startcolor.g) << 7;
    33e2:	01f6      	lsls	r6, r6, #7
			  bdistance87 = (endcolor.b - startcolor.b) << 7;
    33e4:	ea4f 1ccc 	mov.w	ip, ip, lsl #7

			  uint16_t pixeldistance = endpos - startpos;
			  int16_t divisor = pixeldistance ? pixeldistance : 1;
    33e8:	2c00      	cmp	r4, #0
    33ea:	d077      	beq.n	34dc <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x438>
    33ec:	b224      	sxth	r4, r4

			  saccum87 rdelta87 = rdistance87 / divisor;
			  saccum87 gdelta87 = gdistance87 / divisor;
			  saccum87 bdelta87 = bdistance87 / divisor;

			  rdelta87 *= 2;
    33ee:	fb97 f7f4 	sdiv	r7, r7, r4
			  gdelta87 *= 2;
    33f2:	fb96 f6f4 	sdiv	r6, r6, r4

			  saccum87 rdelta87 = rdistance87 / divisor;
			  saccum87 gdelta87 = gdistance87 / divisor;
			  saccum87 bdelta87 = bdistance87 / divisor;

			  rdelta87 *= 2;
    33f6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
			  bdelta87 *= 2;

			  accum88 r88 = startcolor.r << 8;
			  accum88 g88 = startcolor.g << 8;
			  accum88 b88 = startcolor.b << 8;
			  for (uint16_t i = startpos; i <= endpos; i++)
    33fa:	4599      	cmp	r9, r3
			  saccum87 rdelta87 = rdistance87 / divisor;
			  saccum87 gdelta87 = gdistance87 / divisor;
			  saccum87 bdelta87 = bdistance87 / divisor;

			  rdelta87 *= 2;
			  gdelta87 *= 2;
    33fc:	ea4f 0746 	mov.w	r7, r6, lsl #1
			  bdelta87 *= 2;
    3400:	fb9c f6f4 	sdiv	r6, ip, r4
    3404:	ea4f 0646 	mov.w	r6, r6, lsl #1

			  saccum87 rdelta87 = rdistance87 / divisor;
			  saccum87 gdelta87 = gdistance87 / divisor;
			  saccum87 bdelta87 = bdistance87 / divisor;

			  rdelta87 *= 2;
    3408:	fa1f fe8e 	uxth.w	lr, lr
			  gdelta87 *= 2;
    340c:	b2bf      	uxth	r7, r7
			  bdelta87 *= 2;
    340e:	b2b6      	uxth	r6, r6

			  accum88 r88 = startcolor.r << 8;
    3410:	ea4f 2000 	mov.w	r0, r0, lsl #8
			  accum88 g88 = startcolor.g << 8;
    3414:	ea4f 2101 	mov.w	r1, r1, lsl #8
			  accum88 b88 = startcolor.b << 8;
    3418:	ea4f 2202 	mov.w	r2, r2, lsl #8
			  for (uint16_t i = startpos; i <= endpos; i++)
    341c:	d31b      	bcc.n	3456 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x3b2>
			  {
				  leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
    341e:	f83a c013 	ldrh.w	ip, [sl, r3, lsl #1]
			  bdelta87 *= 2;

			  accum88 r88 = startcolor.r << 8;
			  accum88 g88 = startcolor.g << 8;
			  accum88 b88 = startcolor.b << 8;
			  for (uint16_t i = startpos; i <= endpos; i++)
    3422:	3301      	adds	r3, #1
			  {
				  leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
    3424:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    3428:	eb05 040c 	add.w	r4, r5, ip
    342c:	ea4f 2820 	mov.w	r8, r0, asr #8
			  bdelta87 *= 2;

			  accum88 r88 = startcolor.r << 8;
			  accum88 g88 = startcolor.g << 8;
			  accum88 b88 = startcolor.b << 8;
			  for (uint16_t i = startpos; i <= endpos; i++)
    3430:	b29b      	uxth	r3, r3
    3432:	f805 800c 	strb.w	r8, [r5, ip]
			  {
				  leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
				  r88 += rdelta87;
    3436:	4470      	add	r0, lr
        g = rhs.g;
    3438:	ea4f 2821 	mov.w	r8, r1, asr #8
        b = rhs.b;
    343c:	ea4f 2c22 	mov.w	ip, r2, asr #8
				  g88 += gdelta87;
    3440:	4439      	add	r1, r7
				  b88 += bdelta87;
    3442:	4432      	add	r2, r6
			  bdelta87 *= 2;

			  accum88 r88 = startcolor.r << 8;
			  accum88 g88 = startcolor.g << 8;
			  accum88 b88 = startcolor.b << 8;
			  for (uint16_t i = startpos; i <= endpos; i++)
    3444:	4599      	cmp	r9, r3
			  {
				  leds[indexes[i]] = CRGB(r88 >> 8, g88 >> 8, b88 >> 8);
				  r88 += rdelta87;
    3446:	b280      	uxth	r0, r0

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3448:	f884 8001 	strb.w	r8, [r4, #1]
				  g88 += gdelta87;
    344c:	b289      	uxth	r1, r1
        b = rhs.b;
    344e:	f884 c002 	strb.w	ip, [r4, #2]
				  b88 += bdelta87;
    3452:	b292      	uxth	r2, r2
			  bdelta87 *= 2;

			  accum88 r88 = startcolor.r << 8;
			  accum88 g88 = startcolor.g << 8;
			  accum88 b88 = startcolor.b << 8;
			  for (uint16_t i = startpos; i <= endpos; i++)
    3454:	d2e3      	bcs.n	341e <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x37a>

		  void FillGradients(CRGB leds[], uint16_t indexes[], int numLeds, int numGradients, int speed)
		  {
			  if (numGradients < 1) numGradients = 1;

			  for (int i = 0; i < numGradients; i++)
    3456:	9b01      	ldr	r3, [sp, #4]
    3458:	455b      	cmp	r3, fp
    345a:	f47f ae8e 	bne.w	317a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xd6>
		  {
			  int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

			  // Modes
			  FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
		  }
    345e:	b00d      	add	sp, #52	; 0x34
    3460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3464:	234b      	movs	r3, #75	; 0x4b
    3466:	2200      	movs	r2, #0
    3468:	f88d 3020 	strb.w	r3, [sp, #32]
    346c:	2382      	movs	r3, #130	; 0x82
    346e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    3472:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    3476:	e771      	b.n	335c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2b8>
    3478:	2300      	movs	r3, #0
    347a:	2280      	movs	r2, #128	; 0x80
    347c:	f88d 3020 	strb.w	r3, [sp, #32]
    3480:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    3484:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    3488:	e768      	b.n	335c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2b8>
    348a:	f04f 32ff 	mov.w	r2, #4294967295
    348e:	2300      	movs	r3, #0
    3490:	f88d 2020 	strb.w	r2, [sp, #32]
    3494:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    3498:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    349c:	e75e      	b.n	335c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2b8>
    349e:	2300      	movs	r3, #0
    34a0:	f04f 32ff 	mov.w	r2, #4294967295
    34a4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    34a8:	f88d 3020 	strb.w	r3, [sp, #32]
    34ac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    34b0:	e754      	b.n	335c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2b8>
    34b2:	22a5      	movs	r2, #165	; 0xa5
    34b4:	2300      	movs	r3, #0
    34b6:	f04f 31ff 	mov.w	r1, #4294967295
    34ba:	f88d 1020 	strb.w	r1, [sp, #32]
    34be:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    34c2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    34c6:	e749      	b.n	335c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2b8>
    34c8:	2300      	movs	r3, #0
    34ca:	f04f 32ff 	mov.w	r2, #4294967295
    34ce:	f88d 2020 	strb.w	r2, [sp, #32]
    34d2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    34d6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    34da:	e73f      	b.n	335c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2b8>
			  rdistance87 = (endcolor.r - startcolor.r) << 7;
			  gdistance87 = (endcolor.g - startcolor.g) << 7;
			  bdistance87 = (endcolor.b - startcolor.b) << 7;

			  uint16_t pixeldistance = endpos - startpos;
			  int16_t divisor = pixeldistance ? pixeldistance : 1;
    34dc:	2401      	movs	r4, #1
    34de:	e786      	b.n	33ee <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x34a>
		  /// Count and return the number of currently toggled hue values;
		  int GetToggledHueCount()
		  {
			  int val = 0;
			  if (gHue1) val++;
			  if (gHue2) val++;
    34e0:	461a      	mov	r2, r3
    34e2:	e659      	b.n	3198 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xf4>
    34e4:	f04f 32ff 	mov.w	r2, #4294967295
    34e8:	f88d 2018 	strb.w	r2, [sp, #24]
    34ec:	f06f 023f 	mvn.w	r2, #63	; 0x3f
    34f0:	f88d 2019 	strb.w	r2, [sp, #25]
    34f4:	f06f 0234 	mvn.w	r2, #52	; 0x34
    34f8:	f88d 201a 	strb.w	r2, [sp, #26]
    34fc:	e669      	b.n	31d2 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x12e>
    34fe:	f04f 33ff 	mov.w	r3, #4294967295
    3502:	f88d 3020 	strb.w	r3, [sp, #32]
    3506:	f06f 033f 	mvn.w	r3, #63	; 0x3f
    350a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    350e:	f06f 0334 	mvn.w	r3, #52	; 0x34
    3512:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    3516:	e721      	b.n	335c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x2b8>
    3518:	f04f 32ff 	mov.w	r2, #4294967295
    351c:	f88d 201c 	strb.w	r2, [sp, #28]
    3520:	f06f 023f 	mvn.w	r2, #63	; 0x3f
    3524:	f88d 201d 	strb.w	r2, [sp, #29]
    3528:	f06f 0234 	mvn.w	r2, #52	; 0x34
    352c:	f88d 201e 	strb.w	r2, [sp, #30]
    3530:	e6af      	b.n	3292 <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x1ee>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    3532:	f002 033f 	and.w	r3, r2, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    3536:	f002 020f 	and.w	r2, r2, #15
    353a:	e5e7      	b.n	310c <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0x68>
		  void BlendColor(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
		  {
			  int speed = beatsin8(GetAnalogPattern(16, 48), 0, 255);

			  // Modes
			  FillGradients(leds, indexes, numLeds, GetModeNumber(modeOffset) + 1, speed);
    353c:	2301      	movs	r3, #1
    353e:	9301      	str	r3, [sp, #4]
    3540:	e613      	b.n	316a <Meltdown::CMeltdownLED::BlendColor(CRGB*, unsigned short*, int, int)+0xc6>
    3542:	bf00      	nop

00003544 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)>:
				  SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
				  break;
			  }
		  }

		  void Sinelon(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    3544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3548:	4607      	mov	r7, r0
    354a:	b087      	sub	sp, #28
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    354c:	6980      	ldr	r0, [r0, #24]
				  SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
				  break;
			  }
		  }

		  void Sinelon(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    354e:	461e      	mov	r6, r3
    3550:	4690      	mov	r8, r2
    3552:	460c      	mov	r4, r1
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    3554:	f003 fe5a 	bl	720c <__aeabi_i2f>
    3558:	49a7      	ldr	r1, [pc, #668]	; (37f8 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2b4>)
    355a:	f003 feab 	bl	72b4 <__aeabi_fmul>
    355e:	49a7      	ldr	r1, [pc, #668]	; (37fc <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2b8>)
    3560:	f003 ff5c 	bl	741c <__aeabi_fdiv>
    3564:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3568:	f003 fd9c 	bl	70a4 <__addsf3>
    356c:	f004 f868 	bl	7640 <__aeabi_f2iz>
			  }
		  }

		  void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
		  {
			  for (int i = 0; i < numLeds; i++)
    3570:	2e00      	cmp	r6, #0
    3572:	dd21      	ble.n	35b8 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x74>
    3574:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    3578:	b2c9      	uxtb	r1, r1
    357a:	3101      	adds	r1, #1
    357c:	4640      	mov	r0, r8
    357e:	eb08 0546 	add.w	r5, r8, r6, lsl #1
			  {
				  int scale = 255 - fade;
				  (leds[indexes[i]]).nscale8(scale);
    3582:	f830 3b02 	ldrh.w	r3, [r0], #2
    3586:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    358a:	eb04 0e03 	add.w	lr, r4, r3
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    358e:	5ce2      	ldrb	r2, [r4, r3]
    3590:	fb01 f202 	mul.w	r2, r1, r2
    3594:	1212      	asrs	r2, r2, #8
    3596:	54e2      	strb	r2, [r4, r3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3598:	f89e 2001 	ldrb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    359c:	f89e 3002 	ldrb.w	r3, [lr, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    35a0:	fb01 f202 	mul.w	r2, r1, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    35a4:	fb01 f303 	mul.w	r3, r1, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    35a8:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    35aa:	121b      	asrs	r3, r3, #8
			  }
		  }

		  void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
		  {
			  for (int i = 0; i < numLeds; i++)
    35ac:	42a8      	cmp	r0, r5
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    35ae:	f88e 2001 	strb.w	r2, [lr, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    35b2:	f88e 3002 	strb.w	r3, [lr, #2]
    35b6:	d1e4      	bne.n	3582 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35b8:	4a91      	ldr	r2, [pc, #580]	; (3800 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2bc>)
    35ba:	6813      	ldr	r3, [r2, #0]
    35bc:	9304      	str	r3, [sp, #16]
	return ret;
    35be:	9804      	ldr	r0, [sp, #16]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    35c0:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    35c4:	fb03 f000 	mul.w	r0, r3, r0
    35c8:	0c00      	lsrs	r0, r0, #16
		  {
			  // Display a dot moving back and forth in a sin wave pattern.
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  uint16_t index = indexes[beatsin16(8, 0, numLeds - 1)];
    35ca:	f106 3aff 	add.w	sl, r6, #4294967295
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    35ce:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    35d0:	f3c0 01ca 	ubfx	r1, r0, #3, #11
    35d4:	fa1f f98a 	uxth.w	r9, sl
    if( theta & 0x4000 ) offset = 2047 - offset;
    35d8:	d503      	bpl.n	35e2 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x9e>
    35da:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    35de:	3107      	adds	r1, #7
    35e0:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    uint8_t  m   = slope[section];
    35e2:	4b88      	ldr	r3, [pc, #544]	; (3804 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2c0>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    35e4:	f8df b22c 	ldr.w	fp, [pc, #556]	; 3814 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2d0>
    35e8:	9300      	str	r3, [sp, #0]
    35ea:	0a0d      	lsrs	r5, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    35ec:	f3c1 0146 	ubfx	r1, r1, #1, #7
    35f0:	f813 e005 	ldrb.w	lr, [r3, r5]
    35f4:	f83b 5015 	ldrh.w	r5, [fp, r5, lsl #1]
    35f8:	9201      	str	r2, [sp, #4]
    35fa:	fb0e 5101 	mla	r1, lr, r1, r5

    if( theta & 0x8000 ) y = -y;
    35fe:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3600:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3602:	bf48      	it	mi
    3604:	4249      	negmi	r1, r1
    3606:	b209      	sxth	r1, r1
    3608:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    360c:	b289      	uxth	r1, r1
LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )
{
  #if SCALE16_C == 1
    uint16_t result;
#if FASTLED_SCALE8_FIXED == 1
    result = ((uint32_t)(i) * (1+(uint32_t)(scale))) / 65536;
    360e:	f109 0901 	add.w	r9, r9, #1
    3612:	fb09 f101 	mul.w	r1, r9, r1
    3616:	0c09      	lsrs	r1, r1, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3618:	6938      	ldr	r0, [r7, #16]
    361a:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    361e:	f100 0e40 	add.w	lr, r0, #64	; 0x40
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3622:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3626:	f04f 0cff 	mov.w	ip, #255	; 0xff
    362a:	f88d e014 	strb.w	lr, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    362e:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3630:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3634:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3636:	f88d c015 	strb.w	ip, [sp, #21]
    363a:	f88d e016 	strb.w	lr, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    363e:	f7fe fd17 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    3642:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3644:	2b00      	cmp	r3, #0
    3646:	db57      	blt.n	36f8 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x1b4>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    3648:	6839      	ldr	r1, [r7, #0]
    364a:	486f      	ldr	r0, [pc, #444]	; (3808 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2c4>)

			  uint16_t index = indexes[beatsin16(8, 0, numLeds - 1)];
			  leds[index] = CHSV(gHue + 64, 255, 192);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    364c:	68ba      	ldr	r2, [r7, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    364e:	fba0 3e01 	umull	r3, lr, r0, r1
    3652:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    3656:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
    365a:	eba1 014e 	sub.w	r1, r1, lr, lsl #1
    365e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3662:	eb07 0181 	add.w	r1, r7, r1, lsl #2

			  uint16_t index = indexes[beatsin16(8, 0, numLeds - 1)];
			  leds[index] = CHSV(gHue + 64, 255, 192);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    3666:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3668:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    366a:	1898      	adds	r0, r3, r2
    366c:	f101 0e01 	add.w	lr, r1, #1
    3670:	fb90 f1fe 	sdiv	r1, r0, lr
    3674:	fb0e 0011 	mls	r0, lr, r1, r0
    3678:	3801      	subs	r0, #1
    367a:	9b00      	ldr	r3, [sp, #0]
    367c:	9a01      	ldr	r2, [sp, #4]
    367e:	2803      	cmp	r0, #3
    3680:	d83a      	bhi.n	36f8 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x1b4>
    3682:	e8df f000 	tbb	[pc, r0]
    3686:	9002      	.short	0x9002
    3688:	3c67      	.short	0x3c67
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    368a:	6812      	ldr	r2, [r2, #0]
    368c:	9205      	str	r2, [sp, #20]
	return ret;
    368e:	9805      	ldr	r0, [sp, #20]
    3690:	f44f 220c 	mov.w	r2, #573440	; 0x8c000
    3694:	fb02 f000 	mul.w	r0, r2, r0
    3698:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    369a:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    369c:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    36a0:	d503      	bpl.n	36aa <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x166>
    36a2:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    36a6:	3207      	adds	r2, #7
    36a8:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    36aa:	0a15      	lsrs	r5, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36ac:	f3c2 0146 	ubfx	r1, r2, #1, #7
    36b0:	5d5a      	ldrb	r2, [r3, r5]
    36b2:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
    36b6:	fb02 3201 	mla	r2, r2, r1, r3
    36ba:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    36bc:	0403      	lsls	r3, r0, #16
    36be:	bf4a      	itet	mi
    36c0:	4253      	negmi	r3, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36c2:	b213      	sxthpl	r3, r2

    if( theta & 0x8000 ) y = -y;
    36c4:	b21b      	sxthmi	r3, r3
			  {
			  case 1:
			  {
				  // Add a second, opposite dot moving in the opposite direction.
				  uint16_t oppositeIndex = indexes[(numLeds - 1) - (beatsin16(8, 0, numLeds - 1))];
    36c6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    36ca:	b29b      	uxth	r3, r3
    36cc:	fb09 f903 	mul.w	r9, r9, r3
    36d0:	ebaa 4a19 	sub.w	sl, sl, r9, lsr #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    36d4:	693b      	ldr	r3, [r7, #16]
				  leds[oppositeIndex] = CHSV(gHue + 128, 255, 192);
    36d6:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
    36da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    36de:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    36e0:	3b80      	subs	r3, #128	; 0x80
    36e2:	24ff      	movs	r4, #255	; 0xff
    36e4:	22c0      	movs	r2, #192	; 0xc0
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    36e6:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    36e8:	f88d 300c 	strb.w	r3, [sp, #12]
    36ec:	f88d 400d 	strb.w	r4, [sp, #13]
    36f0:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    36f4:	f7fe fcbc 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
				  break;
			  case 4:
				  GenerateSinelons(leds, indexes, numLeds, 5, index);
				  break;
			  }
		  }
    36f8:	b007      	add	sp, #28
    36fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36fe:	4b43      	ldr	r3, [pc, #268]	; (380c <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2c8>)
    3700:	ea4f 7ae6 	mov.w	sl, r6, asr #31
    3704:	fb83 2306 	smull	r2, r3, r3, r6
    3708:	ebca 0a63 	rsb	sl, sl, r3, asr #1
    370c:	4455      	add	r5, sl
				  break;
			  case 3:
				  GenerateSinelons(leds, indexes, numLeds, 3, index);
				  break;
			  case 4:
				  GenerateSinelons(leds, indexes, numLeds, 5, index);
    370e:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3712:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
		  {
			  for (int i = 0; i < numSinelons; i++)
			  {
				  int hue = gHue + (int)((255 / numSinelons) * i);

				  uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    3716:	fb95 f2f6 	sdiv	r2, r5, r6
    371a:	fb06 5212 	mls	r2, r6, r2, r5
    371e:	693b      	ldr	r3, [r7, #16]
				  leds[index] = CHSV(hue, 255, 192);
    3720:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    3724:	f88d b016 	strb.w	fp, [sp, #22]
    3728:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    372c:	444b      	add	r3, r9
    372e:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3732:	4421      	add	r1, r4
    3734:	f109 0933 	add.w	r9, r9, #51	; 0x33
    3738:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    373a:	f88d 2015 	strb.w	r2, [sp, #21]
    373e:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3742:	f7fe fc95 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			  }
		  }

		  void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
		  {
			  for (int i = 0; i < numSinelons; i++)
    3746:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    374a:	4455      	add	r5, sl
    374c:	d1e3      	bne.n	3716 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x1d2>
				  break;
			  case 4:
				  GenerateSinelons(leds, indexes, numLeds, 5, index);
				  break;
			  }
		  }
    374e:	b007      	add	sp, #28
    3750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3754:	4b2e      	ldr	r3, [pc, #184]	; (3810 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x2cc>)
    3756:	fb83 3a06 	smull	r3, sl, r3, r6
    375a:	ebaa 7ae6 	sub.w	sl, sl, r6, asr #31
    375e:	4455      	add	r5, sl
			  }
			  case 2:
				  GenerateSinelons(leds, indexes, numLeds, 2, index);
				  break;
			  case 3:
				  GenerateSinelons(leds, indexes, numLeds, 3, index);
    3760:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3764:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
		  {
			  for (int i = 0; i < numSinelons; i++)
			  {
				  int hue = gHue + (int)((255 / numSinelons) * i);

				  uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    3768:	fb95 f2f6 	sdiv	r2, r5, r6
    376c:	fb06 5212 	mls	r2, r6, r2, r5
    3770:	693b      	ldr	r3, [r7, #16]
				  leds[index] = CHSV(hue, 255, 192);
    3772:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    3776:	f88d b016 	strb.w	fp, [sp, #22]
    377a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    377e:	444b      	add	r3, r9
    3780:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3784:	4421      	add	r1, r4
    3786:	f109 0955 	add.w	r9, r9, #85	; 0x55
    378a:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    378c:	f88d 2015 	strb.w	r2, [sp, #21]
    3790:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3794:	f7fe fc6c 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			  }
		  }

		  void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
		  {
			  for (int i = 0; i < numSinelons; i++)
    3798:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    379c:	4455      	add	r5, sl
    379e:	d1e3      	bne.n	3768 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x224>
				  break;
			  case 4:
				  GenerateSinelons(leds, indexes, numLeds, 5, index);
				  break;
			  }
		  }
    37a0:	b007      	add	sp, #28
    37a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37a6:	eb06 7ad6 	add.w	sl, r6, r6, lsr #31
    37aa:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    37ae:	4455      	add	r5, sl
				  uint16_t oppositeIndex = indexes[(numLeds - 1) - (beatsin16(8, 0, numLeds - 1))];
				  leds[oppositeIndex] = CHSV(gHue + 128, 255, 192);
				  break;
			  }
			  case 2:
				  GenerateSinelons(leds, indexes, numLeds, 2, index);
    37b0:	f04f 0900 	mov.w	r9, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    37b4:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
		  {
			  for (int i = 0; i < numSinelons; i++)
			  {
				  int hue = gHue + (int)((255 / numSinelons) * i);

				  uint16_t index = indexes[(pos + (int)(numLeds / numSinelons) * (i + 1)) % numLeds];
    37b8:	fb95 f2f6 	sdiv	r2, r5, r6
    37bc:	fb06 5212 	mls	r2, r6, r2, r5
    37c0:	693b      	ldr	r3, [r7, #16]
				  leds[index] = CHSV(hue, 255, 192);
    37c2:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    37c6:	f88d b016 	strb.w	fp, [sp, #22]
    37ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    37ce:	444b      	add	r3, r9
    37d0:	f04f 32ff 	mov.w	r2, #4294967295
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    37d4:	4421      	add	r1, r4
    37d6:	f109 097f 	add.w	r9, r9, #127	; 0x7f
    37da:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    37dc:	f88d 2015 	strb.w	r2, [sp, #21]
    37e0:	f88d 3014 	strb.w	r3, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    37e4:	f7fe fc44 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
			  }
		  }

		  void GenerateSinelons(CRGB leds[], uint16_t indexes[], int numLeds, int numSinelons, int pos)
		  {
			  for (int i = 0; i < numSinelons; i++)
    37e8:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
    37ec:	4455      	add	r5, sl
    37ee:	d1e3      	bne.n	37b8 <Meltdown::CMeltdownLED::Sinelon(CRGB*, unsigned short*, int, int)+0x274>
				  break;
			  case 4:
				  GenerateSinelons(leds, indexes, numLeds, 5, index);
				  break;
			  }
		  }
    37f0:	b007      	add	sp, #28
    37f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37f6:	bf00      	nop
    37f8:	41e00000 	.word	0x41e00000
    37fc:	447fc000 	.word	0x447fc000
    3800:	1fff9b38 	.word	0x1fff9b38
    3804:	00009070 	.word	0x00009070
    3808:	cccccccd 	.word	0xcccccccd
    380c:	66666667 	.word	0x66666667
    3810:	55555556 	.word	0x55555556
    3814:	00009058 	.word	0x00009058

00003818 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)>:
			  }

			  SetAllColor(leds, indexes, numLeds, hue);
		  }

		  void Confetti(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    3818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    381c:	4606      	mov	r6, r0
    381e:	b085      	sub	sp, #20
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    3820:	6980      	ldr	r0, [r0, #24]
			  }

			  SetAllColor(leds, indexes, numLeds, hue);
		  }

		  void Confetti(CRGB leds[], uint16_t indexes[], int numLeds, int modeOffset = 0)
    3822:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3824:	461f      	mov	r7, r3
    3826:	4690      	mov	r8, r2
    3828:	460d      	mov	r5, r1
			  gAnalogPattern = MeltdownSerial.GetAnalogValue(pin, gAnalogPattern);
			  return gAnalogPattern;
		  }
		  int GetAnalogPattern() { return gAnalogPattern; }

		  int GetAnalogPattern(int minVal, int maxVal) { return mapFloat(gAnalogPattern, 0, 1023, minVal, maxVal); }
    382a:	f003 fcef 	bl	720c <__aeabi_i2f>
    382e:	49bc      	ldr	r1, [pc, #752]	; (3b20 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x308>)
    3830:	f003 fd40 	bl	72b4 <__aeabi_fmul>
    3834:	49bb      	ldr	r1, [pc, #748]	; (3b24 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x30c>)
    3836:	f003 fdf1 	bl	741c <__aeabi_fdiv>
    383a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    383e:	f003 fc31 	bl	70a4 <__addsf3>
    3842:	f003 fefd 	bl	7640 <__aeabi_f2iz>
			  }
		  }

		  void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
		  {
			  for (int i = 0; i < numLeds; i++)
    3846:	2f00      	cmp	r7, #0
    3848:	dd21      	ble.n	388e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x76>
    384a:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
    384e:	b2c9      	uxtb	r1, r1
    3850:	3101      	adds	r1, #1
    3852:	4640      	mov	r0, r8
    3854:	eb08 0e47 	add.w	lr, r8, r7, lsl #1
			  {
				  int scale = 255 - fade;
				  (leds[indexes[i]]).nscale8(scale);
    3858:	f830 3b02 	ldrh.w	r3, [r0], #2
    385c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3860:	eb05 0c03 	add.w	ip, r5, r3
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    3864:	5cea      	ldrb	r2, [r5, r3]
    3866:	fb01 f202 	mul.w	r2, r1, r2
    386a:	1212      	asrs	r2, r2, #8
    386c:	54ea      	strb	r2, [r5, r3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    386e:	f89c 2001 	ldrb.w	r2, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3872:	f89c 3002 	ldrb.w	r3, [ip, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3876:	fb01 f202 	mul.w	r2, r1, r2
    b = (((uint16_t)b) * scale_fixed) >> 8;
    387a:	fb01 f303 	mul.w	r3, r1, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    387e:	1212      	asrs	r2, r2, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3880:	121b      	asrs	r3, r3, #8
			  }
		  }

		  void FadeSetsToBlackBy(CRGB leds[], uint16_t indexes[], int numLeds, int fade)
		  {
			  for (int i = 0; i < numLeds; i++)
    3882:	4586      	cmp	lr, r0
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3884:	f88c 2001 	strb.w	r2, [ip, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3888:	f88c 3002 	strb.w	r3, [ip, #2]
    388c:	d1e4      	bne.n	3858 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x40>
		  int GetModeNumber() { return gCurrentModeNumber; }

		  int GetModeNumber(int offset)
		  {
			  // A value less than zero indicates we want the base mode.
			  if (offset < 0) return 0;
    388e:	2c00      	cmp	r4, #0
    3890:	db1e      	blt.n	38d0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xb8>

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    3892:	6832      	ldr	r2, [r6, #0]
    3894:	4ba4      	ldr	r3, [pc, #656]	; (3b28 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x310>)
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    3896:	68b1      	ldr	r1, [r6, #8]

		  MeltdownPattern GetPattern(int offset = 0)
		  {
			  int patternNumber = GetPatternNumber(offset);

			  return gPatterns[patternNumber];
    3898:	fba3 0302 	umull	r0, r3, r3, r2
    389c:	08db      	lsrs	r3, r3, #3
    389e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38a2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    38a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    38ae:	4421      	add	r1, r4
    38b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    38b2:	3201      	adds	r2, #1
    38b4:	fb91 f3f2 	sdiv	r3, r1, r2
    38b8:	fb02 1113 	mls	r1, r2, r3, r1
    38bc:	3901      	subs	r1, #1
    38be:	2904      	cmp	r1, #4
    38c0:	d806      	bhi.n	38d0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xb8>
    38c2:	e8df f011 	tbh	[pc, r1, lsl #1]
    38c6:	00c8      	.short	0x00c8
    38c8:	018102e9 	.word	0x018102e9
    38cc:	006703f6 	.word	0x006703f6
    38d0:	4638      	mov	r0, r7
    38d2:	f003 fc9b 	bl	720c <__aeabi_i2f>
    38d6:	4c95      	ldr	r4, [pc, #596]	; (3b2c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x314>)
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    38d8:	b2bb      	uxth	r3, r7
    38da:	4683      	mov	fp, r0
    38dc:	9301      	str	r3, [sp, #4]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38de:	46a2      	mov	sl, r4
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    38e0:	f04f 0906 	mov.w	r9, #6
    38e4:	e004      	b.n	38f0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xd8>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    38e6:	f1b9 0901 	subs.w	r9, r9, #1
    38ea:	f8aa 7000 	strh.w	r7, [sl]
    38ee:	d04e      	beq.n	398e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x176>
    38f0:	8823      	ldrh	r3, [r4, #0]
    38f2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    38f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    38fa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    38fe:	3319      	adds	r3, #25
    3900:	b29f      	uxth	r7, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3902:	eb07 2017 	add.w	r0, r7, r7, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3906:	b2c0      	uxtb	r0, r0
    3908:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    390c:	11c0      	asrs	r0, r0, #7
    390e:	3001      	adds	r0, #1
    3910:	b2c0      	uxtb	r0, r0
    3912:	f003 fc7b 	bl	720c <__aeabi_i2f>
    3916:	4601      	mov	r1, r0
    3918:	4658      	mov	r0, fp
    391a:	f003 fd7f 	bl	741c <__aeabi_fdiv>
    391e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3922:	f003 fe83 	bl	762c <__aeabi_fcmpgt>
    3926:	2800      	cmp	r0, #0
    3928:	d0dd      	beq.n	38e6 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xce>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    392a:	eb07 2247 	add.w	r2, r7, r7, lsl #9
    392e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    3932:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3936:	3319      	adds	r3, #25
    3938:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    393a:	9901      	ldr	r1, [sp, #4]
    393c:	f8aa 3000 	strh.w	r3, [sl]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3940:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3944:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3948:	fb03 f101 	mul.w	r1, r3, r1
    394c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3950:	0c09      	lsrs	r1, r1, #16
    3952:	3219      	adds	r2, #25
    3954:	b293      	uxth	r3, r2
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3956:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    395a:	7c32      	ldrb	r2, [r6, #16]
    395c:	f8aa 3000 	strh.w	r3, [sl]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3960:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3964:	f3c3 0385 	ubfx	r3, r3, #2, #6
    3968:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    396c:	4413      	add	r3, r2
    396e:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
    3972:	22ff      	movs	r2, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3974:	4429      	add	r1, r5
    3976:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3978:	f88d 300c 	strb.w	r3, [sp, #12]
    397c:	f88d e00d 	strb.w	lr, [sp, #13]
    3980:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3984:	f7fe fb74 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3988:	f1b9 0901 	subs.w	r9, r9, #1
    398c:	d1b0      	bne.n	38f0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xd8>
				  break;
			  default:
				  SetRandomColor(leds, indexes, numLeds, 6, 64);		// Orange
				  break;
			  }
		  }
    398e:	b005      	add	sp, #20
    3990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3994:	4638      	mov	r0, r7
    3996:	f003 fc39 	bl	720c <__aeabi_i2f>
    399a:	4c64      	ldr	r4, [pc, #400]	; (3b2c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x314>)
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    399c:	b2bb      	uxth	r3, r7
    399e:	4683      	mov	fp, r0
    39a0:	9301      	str	r3, [sp, #4]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39a2:	46a2      	mov	sl, r4
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    39a4:	f04f 0906 	mov.w	r9, #6
    39a8:	e004      	b.n	39b4 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x19c>
    39aa:	f8aa 7000 	strh.w	r7, [sl]
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    39ae:	f1b9 0901 	subs.w	r9, r9, #1
    39b2:	d0ec      	beq.n	398e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x176>
    39b4:	8823      	ldrh	r3, [r4, #0]
    39b6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    39ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    39be:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39c2:	3319      	adds	r3, #25
    39c4:	b29f      	uxth	r7, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    39c6:	eb07 2017 	add.w	r0, r7, r7, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    39ca:	b2c0      	uxtb	r0, r0
    39cc:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    39d0:	11c0      	asrs	r0, r0, #7
    39d2:	3001      	adds	r0, #1
    39d4:	b2c0      	uxtb	r0, r0
    39d6:	f003 fc19 	bl	720c <__aeabi_i2f>
    39da:	4601      	mov	r1, r0
    39dc:	4658      	mov	r0, fp
    39de:	f003 fd1d 	bl	741c <__aeabi_fdiv>
    39e2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    39e6:	f003 fe21 	bl	762c <__aeabi_fcmpgt>
    39ea:	2800      	cmp	r0, #0
    39ec:	d0dd      	beq.n	39aa <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x192>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39ee:	eb07 2247 	add.w	r2, r7, r7, lsl #9
    39f2:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    39f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39fa:	3319      	adds	r3, #25
    39fc:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39fe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3a02:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3a06:	9901      	ldr	r1, [sp, #4]
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a08:	f8aa 3000 	strh.w	r3, [sl]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a0c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a10:	fb03 f101 	mul.w	r1, r3, r1
    3a14:	3219      	adds	r2, #25
    3a16:	b292      	uxth	r2, r2
    3a18:	0c09      	lsrs	r1, r1, #16
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a1a:	eb02 2312 	add.w	r3, r2, r2, lsr #8
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3a1e:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a22:	f8aa 2000 	strh.w	r2, [sl]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a26:	b2db      	uxtb	r3, r3
    3a28:	7c32      	ldrb	r2, [r6, #16]
    3a2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3a2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3a32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3a36:	eb02 13a3 	add.w	r3, r2, r3, asr #6
    3a3a:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
    3a3e:	22ff      	movs	r2, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a40:	4429      	add	r1, r5
    3a42:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a44:	f88d 300c 	strb.w	r3, [sp, #12]
    3a48:	f88d e00d 	strb.w	lr, [sp, #13]
    3a4c:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3a50:	f7fe fb0e 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    3a54:	e7ab      	b.n	39ae <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x196>
    3a56:	4638      	mov	r0, r7
    3a58:	f003 fbd8 	bl	720c <__aeabi_i2f>
    3a5c:	4c33      	ldr	r4, [pc, #204]	; (3b2c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x314>)
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3a5e:	b2bb      	uxth	r3, r7
    3a60:	4682      	mov	sl, r0
    3a62:	f8b4 b000 	ldrh.w	fp, [r4]
    3a66:	9301      	str	r3, [sp, #4]
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    3a68:	f04f 0904 	mov.w	r9, #4
    3a6c:	e004      	b.n	3a78 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x260>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3a6e:	f1b9 0901 	subs.w	r9, r9, #1
    3a72:	f8a4 b000 	strh.w	fp, [r4]
    3a76:	d04f      	beq.n	3b18 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x300>
    3a78:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3a7c:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3a80:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a84:	3319      	adds	r3, #25
    3a86:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a8a:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3a8e:	b2c0      	uxtb	r0, r0
    3a90:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3a94:	11c0      	asrs	r0, r0, #7
    3a96:	3001      	adds	r0, #1
    3a98:	b2c0      	uxtb	r0, r0
    3a9a:	f003 fbb7 	bl	720c <__aeabi_i2f>
    3a9e:	4601      	mov	r1, r0
    3aa0:	4650      	mov	r0, sl
    3aa2:	f003 fcbb 	bl	741c <__aeabi_fdiv>
    3aa6:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3aaa:	f003 fdbf 	bl	762c <__aeabi_fcmpgt>
    3aae:	2800      	cmp	r0, #0
    3ab0:	d0dd      	beq.n	3a6e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x256>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ab2:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3ab6:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3aba:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3abe:	3319      	adds	r3, #25
    3ac0:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3ac2:	9901      	ldr	r1, [sp, #4]
    3ac4:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ac6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3aca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3ace:	fb03 f101 	mul.w	r1, r3, r1
    3ad2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3ad6:	0c09      	lsrs	r1, r1, #16
    3ad8:	3219      	adds	r2, #25
    3ada:	b293      	uxth	r3, r2
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3adc:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    3ae0:	7c30      	ldrb	r0, [r6, #16]
    3ae2:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3ae4:	f06f 0237 	mvn.w	r2, #55	; 0x37
    3ae8:	f88d 200d 	strb.w	r2, [sp, #13]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3aec:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    3af0:	f3c2 0285 	ubfx	r2, r2, #2, #6
    3af4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3af8:	4402      	add	r2, r0
    3afa:	f04f 0eff 	mov.w	lr, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3afe:	4429      	add	r1, r5
    3b00:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b02:	f88d 200c 	strb.w	r2, [sp, #12]
    3b06:	f88d e00e 	strb.w	lr, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b0a:	f7fe fab1 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3b0e:	f1b9 0901 	subs.w	r9, r9, #1
    3b12:	f8b4 b000 	ldrh.w	fp, [r4]
    3b16:	d1af      	bne.n	3a78 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x260>
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3b18:	b2bf      	uxth	r7, r7
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3b1a:	f04f 0904 	mov.w	r9, #4
    3b1e:	e00f      	b.n	3b40 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x328>
    3b20:	41e00000 	.word	0x41e00000
    3b24:	447fc000 	.word	0x447fc000
    3b28:	cccccccd 	.word	0xcccccccd
    3b2c:	1fff8726 	.word	0x1fff8726
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b30:	f8a4 b000 	strh.w	fp, [r4]
    3b34:	f1b9 0901 	subs.w	r9, r9, #1
    3b38:	f43f af29 	beq.w	398e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x176>
    3b3c:	f8b4 b000 	ldrh.w	fp, [r4]
    3b40:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3b44:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3b48:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b4c:	3319      	adds	r3, #25
    3b4e:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b52:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3b56:	b2c0      	uxtb	r0, r0
    3b58:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3b5c:	11c0      	asrs	r0, r0, #7
    3b5e:	3001      	adds	r0, #1
    3b60:	b2c0      	uxtb	r0, r0
    3b62:	f003 fb53 	bl	720c <__aeabi_i2f>
    3b66:	4601      	mov	r1, r0
    3b68:	4650      	mov	r0, sl
    3b6a:	f003 fc57 	bl	741c <__aeabi_fdiv>
    3b6e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3b72:	f003 fd5b 	bl	762c <__aeabi_fcmpgt>
    3b76:	2800      	cmp	r0, #0
    3b78:	d0da      	beq.n	3b30 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x318>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b7a:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3b7e:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3b82:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b86:	3319      	adds	r3, #25
    3b88:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3b8a:	fb03 f207 	mul.w	r2, r3, r7
    3b8e:	0c12      	lsrs	r2, r2, #16
    3b90:	8023      	strh	r3, [r4, #0]
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3b92:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b96:	f06f 0237 	mvn.w	r2, #55	; 0x37
    3b9a:	f88d 200d 	strb.w	r2, [sp, #13]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b9e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3ba2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3ba6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3baa:	3319      	adds	r3, #25
    3bac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3bb0:	7c32      	ldrb	r2, [r6, #16]
    3bb2:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3bb4:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3bb6:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3bb8:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3bba:	f88d 200c 	strb.w	r2, [sp, #12]
    3bbe:	f88d 300e 	strb.w	r3, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3bc2:	f7fe fa55 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    3bc6:	e7b5      	b.n	3b34 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x31c>
    3bc8:	4638      	mov	r0, r7
    3bca:	f003 fb1f 	bl	720c <__aeabi_i2f>
    3bce:	4cb8      	ldr	r4, [pc, #736]	; (3eb0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x698>)
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3bd0:	b2bb      	uxth	r3, r7
    3bd2:	4681      	mov	r9, r0
    3bd4:	f8b4 b000 	ldrh.w	fp, [r4]
    3bd8:	9301      	str	r3, [sp, #4]
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    3bda:	f04f 0a02 	mov.w	sl, #2
    3bde:	e004      	b.n	3bea <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x3d2>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3be0:	f1ba 0a01 	subs.w	sl, sl, #1
    3be4:	f8a4 b000 	strh.w	fp, [r4]
    3be8:	d04f      	beq.n	3c8a <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x472>
    3bea:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3bee:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3bf2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3bf6:	3319      	adds	r3, #25
    3bf8:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3bfc:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3c00:	b2c0      	uxtb	r0, r0
    3c02:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3c06:	11c0      	asrs	r0, r0, #7
    3c08:	3001      	adds	r0, #1
    3c0a:	b2c0      	uxtb	r0, r0
    3c0c:	f003 fafe 	bl	720c <__aeabi_i2f>
    3c10:	4601      	mov	r1, r0
    3c12:	4648      	mov	r0, r9
    3c14:	f003 fc02 	bl	741c <__aeabi_fdiv>
    3c18:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3c1c:	f003 fd06 	bl	762c <__aeabi_fcmpgt>
    3c20:	2800      	cmp	r0, #0
    3c22:	d0dd      	beq.n	3be0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x3c8>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c24:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3c28:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3c2c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c30:	3319      	adds	r3, #25
    3c32:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3c34:	9901      	ldr	r1, [sp, #4]
    3c36:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c38:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3c3c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3c40:	fb03 f101 	mul.w	r1, r3, r1
    3c44:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c48:	0c09      	lsrs	r1, r1, #16
    3c4a:	3219      	adds	r2, #25
    3c4c:	b293      	uxth	r3, r2
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3c4e:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    3c52:	7c30      	ldrb	r0, [r6, #16]
    3c54:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3c56:	f06f 0237 	mvn.w	r2, #55	; 0x37
    3c5a:	f88d 200d 	strb.w	r2, [sp, #13]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c5e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    3c62:	f3c2 0285 	ubfx	r2, r2, #2, #6
    3c66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3c6a:	4402      	add	r2, r0
    3c6c:	f04f 0eff 	mov.w	lr, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3c70:	4429      	add	r1, r5
    3c72:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3c74:	f88d 200c 	strb.w	r2, [sp, #12]
    3c78:	f88d e00e 	strb.w	lr, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3c7c:	f7fe f9f8 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3c80:	f1ba 0a01 	subs.w	sl, sl, #1
    3c84:	f8b4 b000 	ldrh.w	fp, [r4]
    3c88:	d1af      	bne.n	3bea <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x3d2>
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3c8a:	b2bb      	uxth	r3, r7
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3c8c:	f04f 0a02 	mov.w	sl, #2
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3c90:	9301      	str	r3, [sp, #4]
    3c92:	e004      	b.n	3c9e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x486>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3c94:	f1ba 0a01 	subs.w	sl, sl, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c98:	f8a4 b000 	strh.w	fp, [r4]
    3c9c:	d048      	beq.n	3d30 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x518>
    3c9e:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3ca2:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3ca6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3caa:	3319      	adds	r3, #25
    3cac:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cb0:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3cb4:	b2c0      	uxtb	r0, r0
    3cb6:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3cba:	11c0      	asrs	r0, r0, #7
    3cbc:	3001      	adds	r0, #1
    3cbe:	b2c0      	uxtb	r0, r0
    3cc0:	f003 faa4 	bl	720c <__aeabi_i2f>
    3cc4:	4601      	mov	r1, r0
    3cc6:	4648      	mov	r0, r9
    3cc8:	f003 fba8 	bl	741c <__aeabi_fdiv>
    3ccc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3cd0:	f003 fcac 	bl	762c <__aeabi_fcmpgt>
    3cd4:	2800      	cmp	r0, #0
    3cd6:	d0dd      	beq.n	3c94 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x47c>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cd8:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3cdc:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3ce0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3ce4:	9a01      	ldr	r2, [sp, #4]
    3ce6:	3319      	adds	r3, #25
    3ce8:	b29b      	uxth	r3, r3
    3cea:	fb03 f202 	mul.w	r2, r3, r2
    3cee:	0c12      	lsrs	r2, r2, #16
    3cf0:	8023      	strh	r3, [r4, #0]
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3cf2:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3cf6:	f06f 0237 	mvn.w	r2, #55	; 0x37
    3cfa:	f88d 200d 	strb.w	r2, [sp, #13]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cfe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3d02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3d06:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d0a:	3319      	adds	r3, #25
    3d0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3d10:	7c32      	ldrb	r2, [r6, #16]
    3d12:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3d14:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3d16:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3d18:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3d1a:	f88d 200c 	strb.w	r2, [sp, #12]
    3d1e:	f88d 300e 	strb.w	r3, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3d22:	f7fe f9a5 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3d26:	f1ba 0a01 	subs.w	sl, sl, #1
    3d2a:	f8b4 b000 	ldrh.w	fp, [r4]
    3d2e:	d1b6      	bne.n	3c9e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x486>
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3d30:	b2bb      	uxth	r3, r7
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3d32:	f04f 0a05 	mov.w	sl, #5
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3d36:	9301      	str	r3, [sp, #4]
    3d38:	e004      	b.n	3d44 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x52c>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3d3a:	f1ba 0a01 	subs.w	sl, sl, #1
    3d3e:	f8a4 b000 	strh.w	fp, [r4]
    3d42:	d04f      	beq.n	3de4 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x5cc>
    3d44:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3d48:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3d4c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d50:	3319      	adds	r3, #25
    3d52:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d56:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3d5a:	b2c0      	uxtb	r0, r0
    3d5c:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3d60:	11c0      	asrs	r0, r0, #7
    3d62:	3001      	adds	r0, #1
    3d64:	b2c0      	uxtb	r0, r0
    3d66:	f003 fa51 	bl	720c <__aeabi_i2f>
    3d6a:	4601      	mov	r1, r0
    3d6c:	4648      	mov	r0, r9
    3d6e:	f003 fb55 	bl	741c <__aeabi_fdiv>
    3d72:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3d76:	f003 fc59 	bl	762c <__aeabi_fcmpgt>
    3d7a:	2800      	cmp	r0, #0
    3d7c:	d0dd      	beq.n	3d3a <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x522>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d7e:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3d82:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3d86:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d8a:	3319      	adds	r3, #25
    3d8c:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3d8e:	9901      	ldr	r1, [sp, #4]
    3d90:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d92:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3d96:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3d9a:	fb03 f101 	mul.w	r1, r3, r1
    3d9e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3da2:	0c09      	lsrs	r1, r1, #16
    3da4:	3219      	adds	r2, #25
    3da6:	b293      	uxth	r3, r2
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3da8:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    3dac:	7c30      	ldrb	r0, [r6, #16]
    3dae:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3db0:	f06f 0237 	mvn.w	r2, #55	; 0x37
    3db4:	f88d 200d 	strb.w	r2, [sp, #13]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3db8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    3dbc:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3dc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3dc4:	4402      	add	r2, r0
    3dc6:	f04f 0eff 	mov.w	lr, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3dca:	4429      	add	r1, r5
    3dcc:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3dce:	f88d 200c 	strb.w	r2, [sp, #12]
    3dd2:	f88d e00e 	strb.w	lr, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3dd6:	f7fe f94b 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3dda:	f1ba 0a01 	subs.w	sl, sl, #1
    3dde:	f8b4 b000 	ldrh.w	fp, [r4]
    3de2:	d1af      	bne.n	3d44 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x52c>
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3de4:	b2bf      	uxth	r7, r7
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3de6:	f04f 0a05 	mov.w	sl, #5
    3dea:	e007      	b.n	3dfc <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x5e4>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3dec:	f8a4 b000 	strh.w	fp, [r4]
    3df0:	f1ba 0a01 	subs.w	sl, sl, #1
    3df4:	f43f adcb 	beq.w	398e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x176>
    3df8:	f8b4 b000 	ldrh.w	fp, [r4]
    3dfc:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3e00:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3e04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3e08:	3319      	adds	r3, #25
    3e0a:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e0e:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3e12:	b2c0      	uxtb	r0, r0
    3e14:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3e18:	11c0      	asrs	r0, r0, #7
    3e1a:	3001      	adds	r0, #1
    3e1c:	b2c0      	uxtb	r0, r0
    3e1e:	f003 f9f5 	bl	720c <__aeabi_i2f>
    3e22:	4601      	mov	r1, r0
    3e24:	4648      	mov	r0, r9
    3e26:	f003 faf9 	bl	741c <__aeabi_fdiv>
    3e2a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3e2e:	f003 fbfd 	bl	762c <__aeabi_fcmpgt>
    3e32:	2800      	cmp	r0, #0
    3e34:	d0da      	beq.n	3dec <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x5d4>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e36:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3e3a:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3e3e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3e42:	3319      	adds	r3, #25
    3e44:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e46:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3e4a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3e4e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3e52:	fb03 f107 	mul.w	r1, r3, r7
    3e56:	3219      	adds	r2, #25
    3e58:	b292      	uxth	r2, r2
    3e5a:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e5c:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e5e:	eb02 2312 	add.w	r3, r2, r2, lsr #8
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3e62:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e66:	8022      	strh	r2, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3e68:	f06f 0037 	mvn.w	r0, #55	; 0x37
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	f88d 000d 	strb.w	r0, [sp, #13]
    3e72:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3e76:	7c30      	ldrb	r0, [r6, #16]
    3e78:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    3e7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3e80:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    3e84:	22ff      	movs	r2, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3e86:	4429      	add	r1, r5
    3e88:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3e8a:	f88d 300c 	strb.w	r3, [sp, #12]
    3e8e:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3e92:	f7fe f8ed 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    3e96:	e7ab      	b.n	3df0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x5d8>
    3e98:	4638      	mov	r0, r7
    3e9a:	f003 f9b7 	bl	720c <__aeabi_i2f>
    3e9e:	4c04      	ldr	r4, [pc, #16]	; (3eb0 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x698>)
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3ea0:	b2bb      	uxth	r3, r7
    3ea2:	4682      	mov	sl, r0
    3ea4:	f8b4 b000 	ldrh.w	fp, [r4]
    3ea8:	9301      	str	r3, [sp, #4]
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    3eaa:	f04f 0903 	mov.w	r9, #3
    3eae:	e006      	b.n	3ebe <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x6a6>
    3eb0:	1fff8726 	.word	0x1fff8726
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3eb4:	f1b9 0901 	subs.w	r9, r9, #1
    3eb8:	f8a4 b000 	strh.w	fp, [r4]
    3ebc:	d04f      	beq.n	3f5e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x746>
    3ebe:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3ec2:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3ec6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3eca:	3319      	adds	r3, #25
    3ecc:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ed0:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3ed4:	b2c0      	uxtb	r0, r0
    3ed6:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3eda:	11c0      	asrs	r0, r0, #7
    3edc:	3001      	adds	r0, #1
    3ede:	b2c0      	uxtb	r0, r0
    3ee0:	f003 f994 	bl	720c <__aeabi_i2f>
    3ee4:	4601      	mov	r1, r0
    3ee6:	4650      	mov	r0, sl
    3ee8:	f003 fa98 	bl	741c <__aeabi_fdiv>
    3eec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3ef0:	f003 fb9c 	bl	762c <__aeabi_fcmpgt>
    3ef4:	2800      	cmp	r0, #0
    3ef6:	d0dd      	beq.n	3eb4 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x69c>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ef8:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3efc:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3f00:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f04:	3319      	adds	r3, #25
    3f06:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3f08:	9901      	ldr	r1, [sp, #4]
    3f0a:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f0c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3f10:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3f14:	fb03 f101 	mul.w	r1, r3, r1
    3f18:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f1c:	0c09      	lsrs	r1, r1, #16
    3f1e:	3219      	adds	r2, #25
    3f20:	b293      	uxth	r3, r2
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3f22:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    3f26:	7c30      	ldrb	r0, [r6, #16]
    3f28:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3f2a:	f06f 0237 	mvn.w	r2, #55	; 0x37
    3f2e:	f88d 200d 	strb.w	r2, [sp, #13]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f32:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    3f36:	f3c2 0285 	ubfx	r2, r2, #2, #6
    3f3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3f3e:	4402      	add	r2, r0
    3f40:	f04f 0eff 	mov.w	lr, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3f44:	4429      	add	r1, r5
    3f46:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3f48:	f88d 200c 	strb.w	r2, [sp, #12]
    3f4c:	f88d e00e 	strb.w	lr, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3f50:	f7fe f88e 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3f54:	f1b9 0901 	subs.w	r9, r9, #1
    3f58:	f8b4 b000 	ldrh.w	fp, [r4]
    3f5c:	d1af      	bne.n	3ebe <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x6a6>
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3f5e:	b2bb      	uxth	r3, r7
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3f60:	f04f 0903 	mov.w	r9, #3
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3f64:	9301      	str	r3, [sp, #4]
    3f66:	e004      	b.n	3f72 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x75a>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3f68:	f1b9 0901 	subs.w	r9, r9, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f6c:	f8a4 b000 	strh.w	fp, [r4]
    3f70:	d048      	beq.n	4004 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x7ec>
    3f72:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3f76:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3f7a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f7e:	3319      	adds	r3, #25
    3f80:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f84:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    3f88:	b2c0      	uxtb	r0, r0
    3f8a:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    3f8e:	11c0      	asrs	r0, r0, #7
    3f90:	3001      	adds	r0, #1
    3f92:	b2c0      	uxtb	r0, r0
    3f94:	f003 f93a 	bl	720c <__aeabi_i2f>
    3f98:	4601      	mov	r1, r0
    3f9a:	4650      	mov	r0, sl
    3f9c:	f003 fa3e 	bl	741c <__aeabi_fdiv>
    3fa0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    3fa4:	f003 fb42 	bl	762c <__aeabi_fcmpgt>
    3fa8:	2800      	cmp	r0, #0
    3faa:	d0dd      	beq.n	3f68 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x750>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3fac:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    3fb0:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    3fb4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
				  {
					  uint16_t index = indexes[random16(numLeds)];
    3fb8:	9a01      	ldr	r2, [sp, #4]
    3fba:	3319      	adds	r3, #25
    3fbc:	b29b      	uxth	r3, r3
    3fbe:	fb03 f202 	mul.w	r2, r3, r2
    3fc2:	0c12      	lsrs	r2, r2, #16
    3fc4:	8023      	strh	r3, [r4, #0]
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    3fc6:	f838 1012 	ldrh.w	r1, [r8, r2, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3fca:	f06f 0237 	mvn.w	r2, #55	; 0x37
    3fce:	f88d 200d 	strb.w	r2, [sp, #13]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3fd2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3fd6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3fda:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3fde:	3319      	adds	r3, #25
    3fe0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3fe4:	7c32      	ldrb	r2, [r6, #16]
    3fe6:	8023      	strh	r3, [r4, #0]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3fe8:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3fea:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3fec:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3fee:	f88d 200c 	strb.w	r2, [sp, #12]
    3ff2:	f88d 300e 	strb.w	r3, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3ff6:	f7fe f83b 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    3ffa:	f1b9 0901 	subs.w	r9, r9, #1
    3ffe:	f8b4 b000 	ldrh.w	fp, [r4]
    4002:	d1b6      	bne.n	3f72 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x75a>
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    4004:	b2bf      	uxth	r7, r7
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    4006:	f04f 0906 	mov.w	r9, #6
    400a:	e007      	b.n	401c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x804>
    400c:	f8a4 b000 	strh.w	fp, [r4]
    4010:	f1b9 0901 	subs.w	r9, r9, #1
    4014:	f43f acbb 	beq.w	398e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x176>
    4018:	f8b4 b000 	ldrh.w	fp, [r4]
    401c:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    4020:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    4024:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4028:	3319      	adds	r3, #25
    402a:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    402e:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    4032:	b2c0      	uxtb	r0, r0
    4034:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    4038:	11c0      	asrs	r0, r0, #7
    403a:	3001      	adds	r0, #1
    403c:	b2c0      	uxtb	r0, r0
    403e:	f003 f8e5 	bl	720c <__aeabi_i2f>
    4042:	4601      	mov	r1, r0
    4044:	4650      	mov	r0, sl
    4046:	f003 f9e9 	bl	741c <__aeabi_fdiv>
    404a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    404e:	f003 faed 	bl	762c <__aeabi_fcmpgt>
    4052:	2800      	cmp	r0, #0
    4054:	d0da      	beq.n	400c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x7f4>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4056:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    405a:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    405e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4062:	3319      	adds	r3, #25
    4064:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4066:	eb03 2243 	add.w	r2, r3, r3, lsl #9
				  {
					  uint16_t index = indexes[random16(numLeds)];
    406a:	fb03 f107 	mul.w	r1, r3, r7
    406e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4072:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4076:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4078:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    407a:	3219      	adds	r2, #25
    407c:	b293      	uxth	r3, r2
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    407e:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    4082:	7c30      	ldrb	r0, [r6, #16]
    4084:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4086:	f06f 0237 	mvn.w	r2, #55	; 0x37
    408a:	f88d 200d 	strb.w	r2, [sp, #13]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    408e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4092:	f3c2 0246 	ubfx	r2, r2, #1, #7
    4096:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    409a:	4402      	add	r2, r0
    409c:	f04f 0eff 	mov.w	lr, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    40a0:	4429      	add	r1, r5
    40a2:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    40a4:	f88d 200c 	strb.w	r2, [sp, #12]
    40a8:	f88d e00e 	strb.w	lr, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    40ac:	f7fd ffe0 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    40b0:	e7ae      	b.n	4010 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x7f8>
    40b2:	4638      	mov	r0, r7
    40b4:	f003 f8aa 	bl	720c <__aeabi_i2f>
    40b8:	4c5b      	ldr	r4, [pc, #364]	; (4228 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0xa10>)
			  for (int i = 0; i < numPositions; i++)
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    40ba:	b2bb      	uxth	r3, r7
    40bc:	4682      	mov	sl, r0
    40be:	f8b4 b000 	ldrh.w	fp, [r4]
    40c2:	9301      	str	r3, [sp, #4]
		  {
			  int fade = GetAnalogPattern(2, 30);
			  FadeSetsToBlackBy(leds, indexes, numLeds, fade);

			  // Modes
			  switch (GetModeNumber(modeOffset))
    40c4:	f04f 0904 	mov.w	r9, #4
    40c8:	e004      	b.n	40d4 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x8bc>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    40ca:	f1b9 0901 	subs.w	r9, r9, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40ce:	f8a4 b000 	strh.w	fp, [r4]
    40d2:	d04f      	beq.n	4174 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x95c>
    40d4:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    40d8:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    40dc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    40e0:	3319      	adds	r3, #25
    40e2:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    40e6:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    40ea:	b2c0      	uxtb	r0, r0
    40ec:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    40f0:	11c0      	asrs	r0, r0, #7
    40f2:	3001      	adds	r0, #1
    40f4:	b2c0      	uxtb	r0, r0
    40f6:	f003 f889 	bl	720c <__aeabi_i2f>
    40fa:	4601      	mov	r1, r0
    40fc:	4650      	mov	r0, sl
    40fe:	f003 f98d 	bl	741c <__aeabi_fdiv>
    4102:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    4106:	f003 fa91 	bl	762c <__aeabi_fcmpgt>
    410a:	2800      	cmp	r0, #0
    410c:	d0dd      	beq.n	40ca <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x8b2>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    410e:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    4112:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    4116:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    411a:	3319      	adds	r3, #25
    411c:	b29b      	uxth	r3, r3
				  {
					  uint16_t index = indexes[random16(numLeds)];
    411e:	9901      	ldr	r1, [sp, #4]
    4120:	8023      	strh	r3, [r4, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4122:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4126:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    412a:	fb03 f101 	mul.w	r1, r3, r1
    412e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4132:	0c09      	lsrs	r1, r1, #16
    4134:	3219      	adds	r2, #25
    4136:	b293      	uxth	r3, r2
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    4138:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
    413c:	7c30      	ldrb	r0, [r6, #16]
    413e:	8023      	strh	r3, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4140:	f06f 0237 	mvn.w	r2, #55	; 0x37
    4144:	f88d 200d 	strb.w	r2, [sp, #13]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4148:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    414c:	f3c2 0246 	ubfx	r2, r2, #1, #7
    4150:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4154:	4402      	add	r2, r0
    4156:	f04f 0eff 	mov.w	lr, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    415a:	4429      	add	r1, r5
    415c:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    415e:	f88d 200c 	strb.w	r2, [sp, #12]
    4162:	f88d e00e 	strb.w	lr, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4166:	f7fd ff83 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    416a:	f1b9 0901 	subs.w	r9, r9, #1
    416e:	f8b4 b000 	ldrh.w	fp, [r4]
    4172:	d1af      	bne.n	40d4 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x8bc>
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
				  {
					  uint16_t index = indexes[random16(numLeds)];
    4174:	b2bf      	uxth	r7, r7
		  }

		  /// Generate random colors (withing a confinement of hue) in random locations.
		  void SetRandomColor(CRGB leds[], uint16_t indexes[], int numLeds, int numPositions, int hueOffset = 0)
		  {
			  for (int i = 0; i < numPositions; i++)
    4176:	f04f 0904 	mov.w	r9, #4
    417a:	e007      	b.n	418c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x974>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    417c:	f8a4 b000 	strh.w	fp, [r4]
    4180:	f1b9 0901 	subs.w	r9, r9, #1
    4184:	f43f ac03 	beq.w	398e <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x176>
    4188:	f8b4 b000 	ldrh.w	fp, [r4]
    418c:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    4190:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    4194:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4198:	3319      	adds	r3, #25
    419a:	fa1f fb83 	uxth.w	fp, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    419e:	eb0b 201b 	add.w	r0, fp, fp, lsr #8
			  {
				  uint8_t random = random8(1, 255);
				  if ((float)numLeds / random > 1.5)
    41a2:	b2c0      	uxtb	r0, r0
    41a4:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    41a8:	11c0      	asrs	r0, r0, #7
    41aa:	3001      	adds	r0, #1
    41ac:	b2c0      	uxtb	r0, r0
    41ae:	f003 f82d 	bl	720c <__aeabi_i2f>
    41b2:	4601      	mov	r1, r0
    41b4:	4650      	mov	r0, sl
    41b6:	f003 f931 	bl	741c <__aeabi_fdiv>
    41ba:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
    41be:	f003 fa35 	bl	762c <__aeabi_fcmpgt>
    41c2:	2800      	cmp	r0, #0
    41c4:	d0da      	beq.n	417c <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x964>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41c6:	eb0b 224b 	add.w	r2, fp, fp, lsl #9
    41ca:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    41ce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    41d2:	3319      	adds	r3, #25
    41d4:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41d6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    41da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    41de:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
				  {
					  uint16_t index = indexes[random16(numLeds)];
    41e2:	fb03 f107 	mul.w	r1, r3, r7
    41e6:	3219      	adds	r2, #25
    41e8:	b292      	uxth	r2, r2
    41ea:	0c09      	lsrs	r1, r1, #16
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41ec:	8023      	strh	r3, [r4, #0]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41ee:	eb02 2312 	add.w	r3, r2, r2, lsr #8
					  leds[index] = CHSV(gHue + random8(hueOffset), 200, 255);
    41f2:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41f6:	8022      	strh	r2, [r4, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    41f8:	f06f 0037 	mvn.w	r0, #55	; 0x37
    41fc:	b2db      	uxtb	r3, r3
    41fe:	f88d 000d 	strb.w	r0, [sp, #13]
    4202:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4206:	7c30      	ldrb	r0, [r6, #16]
    4208:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    420c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4210:	eb00 13a3 	add.w	r3, r0, r3, asr #6
    4214:	22ff      	movs	r2, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4216:	4429      	add	r1, r5
    4218:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    421a:	f88d 300c 	strb.w	r3, [sp, #12]
    421e:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4222:	f7fd ff25 	bl	2070 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    4226:	e7ab      	b.n	4180 <Meltdown::CMeltdownLED::Confetti(CRGB*, unsigned short*, int, int)+0x968>
    4228:	1fff8726 	.word	0x1fff8726

0000422c <Meltdown::CMeltdownLED::CMeltdownLED()>:

namespace Meltdown
{
	CMeltdownLED MeltdownLED;

	CMeltdownLED::CMeltdownLED()
    422c:	b538      	push	{r3, r4, r5, lr}
    422e:	4604      	mov	r4, r0
    4230:	4d1e      	ldr	r5, [pc, #120]	; (42ac <Meltdown::CMeltdownLED::CMeltdownLED()+0x80>)
    4232:	4b1f      	ldr	r3, [pc, #124]	; (42b0 <Meltdown::CMeltdownLED::CMeltdownLED()+0x84>)
    4234:	6483      	str	r3, [r0, #72]	; 0x48
    4236:	2201      	movs	r2, #1
    4238:	2300      	movs	r3, #0
    423a:	2030      	movs	r0, #48	; 0x30
    423c:	2114      	movs	r1, #20
    423e:	60e0      	str	r0, [r4, #12]
    4240:	6261      	str	r1, [r4, #36]	; 0x24
    4242:	6023      	str	r3, [r4, #0]
    4244:	6063      	str	r3, [r4, #4]
    4246:	60a3      	str	r3, [r4, #8]
    4248:	6123      	str	r3, [r4, #16]
    424a:	6163      	str	r3, [r4, #20]
    424c:	61a3      	str	r3, [r4, #24]
    424e:	61e3      	str	r3, [r4, #28]
    4250:	6223      	str	r3, [r4, #32]
    4252:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    4256:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    425a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    425e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    4262:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    4266:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    426a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    426e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
    4272:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    4276:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    427a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    427e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    4282:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    4286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    428a:	62a2      	str	r2, [r4, #40]	; 0x28
    428c:	62e2      	str	r2, [r4, #44]	; 0x2c
    428e:	4629      	mov	r1, r5
    4290:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    4294:	2278      	movs	r2, #120	; 0x78
    4296:	f000 facd 	bl	4834 <memcpy>
    429a:	f105 0178 	add.w	r1, r5, #120	; 0x78
    429e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
    42a0:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    42a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	{
	}
    42a8:	4620      	mov	r0, r4
    42aa:	bd38      	pop	{r3, r4, r5, pc}
    42ac:	00008fd0 	.word	0x00008fd0
    42b0:	001b7740 	.word	0x001b7740

000042b4 <_GLOBAL__sub_I__ZN8Meltdown11MeltdownLEDE>:
#include "MeltdownLED.h"

namespace Meltdown
{
	CMeltdownLED MeltdownLED;
    42b4:	4801      	ldr	r0, [pc, #4]	; (42bc <_GLOBAL__sub_I__ZN8Meltdown11MeltdownLEDE+0x8>)
    42b6:	f7ff bfb9 	b.w	422c <Meltdown::CMeltdownLED::CMeltdownLED()>
    42ba:	bf00      	nop
    42bc:	1fff9890 	.word	0x1fff9890

000042c0 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownLoggerE>:

namespace Meltdown
{
	CMeltdownLogger MeltdownLogger;

	CMeltdownLogger::CMeltdownLogger() {}
    42c0:	4b01      	ldr	r3, [pc, #4]	; (42c8 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownLoggerE+0x8>)
    42c2:	2200      	movs	r2, #0
    42c4:	701a      	strb	r2, [r3, #0]
    42c6:	4770      	bx	lr
    42c8:	1fff9964 	.word	0x1fff9964

000042cc <Meltdown::CMeltdownSerial::~CMeltdownSerial()>:
{

#ifndef MELTDOWN_SERIAL
#define MELTDOWN_SERIAL

	class CMeltdownSerial
    42cc:	b510      	push	{r4, lr}
    42ce:	4604      	mov	r4, r0
    42d0:	f500 70bc 	add.w	r0, r0, #376	; 0x178
    42d4:	f002 f936 	bl	6544 <String::~String()>
    42d8:	f504 70b4 	add.w	r0, r4, #360	; 0x168
    42dc:	f002 f932 	bl	6544 <String::~String()>
    42e0:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    42e4:	f002 f92e 	bl	6544 <String::~String()>
    42e8:	f504 70a4 	add.w	r0, r4, #328	; 0x148
    42ec:	f002 f92a 	bl	6544 <String::~String()>
    42f0:	f504 709c 	add.w	r0, r4, #312	; 0x138
    42f4:	f002 f926 	bl	6544 <String::~String()>
    42f8:	f504 7094 	add.w	r0, r4, #296	; 0x128
    42fc:	f002 f922 	bl	6544 <String::~String()>
    4300:	f504 708c 	add.w	r0, r4, #280	; 0x118
    4304:	f002 f91e 	bl	6544 <String::~String()>
    4308:	f504 7084 	add.w	r0, r4, #264	; 0x108
    430c:	f002 f91a 	bl	6544 <String::~String()>
    4310:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    4314:	f002 f916 	bl	6544 <String::~String()>
    4318:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    431c:	f002 f912 	bl	6544 <String::~String()>
    4320:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    4324:	f002 f90e 	bl	6544 <String::~String()>
    4328:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    432c:	f002 f90a 	bl	6544 <String::~String()>
    4330:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    4334:	f002 f906 	bl	6544 <String::~String()>
    4338:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    433c:	f002 f902 	bl	6544 <String::~String()>
    4340:	f104 0098 	add.w	r0, r4, #152	; 0x98
    4344:	f002 f8fe 	bl	6544 <String::~String()>
    4348:	f104 0088 	add.w	r0, r4, #136	; 0x88
    434c:	f002 f8fa 	bl	6544 <String::~String()>
    4350:	f104 0078 	add.w	r0, r4, #120	; 0x78
    4354:	f002 f8f6 	bl	6544 <String::~String()>
    4358:	f104 0068 	add.w	r0, r4, #104	; 0x68
    435c:	f002 f8f2 	bl	6544 <String::~String()>
    4360:	f104 0058 	add.w	r0, r4, #88	; 0x58
    4364:	f002 f8ee 	bl	6544 <String::~String()>
    4368:	f104 0048 	add.w	r0, r4, #72	; 0x48
    436c:	f002 f8ea 	bl	6544 <String::~String()>
    4370:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4374:	f002 f8e6 	bl	6544 <String::~String()>
    4378:	f104 0028 	add.w	r0, r4, #40	; 0x28
    437c:	f002 f8e2 	bl	6544 <String::~String()>
    4380:	f104 0018 	add.w	r0, r4, #24
    4384:	f002 f8de 	bl	6544 <String::~String()>
    4388:	1d20      	adds	r0, r4, #4
    438a:	f002 f8db 	bl	6544 <String::~String()>
    438e:	4620      	mov	r0, r4
    4390:	bd10      	pop	{r4, pc}
    4392:	bf00      	nop

00004394 <Meltdown::CMeltdownSerial::CMeltdownSerial()>:

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;

	CMeltdownSerial::CMeltdownSerial()
    4394:	b538      	push	{r3, r4, r5, lr}
    4396:	1d05      	adds	r5, r0, #4
    4398:	4604      	mov	r4, r0
    439a:	2100      	movs	r1, #0
    439c:	4628      	mov	r0, r5
    439e:	f002 f911 	bl	65c4 <String::String(char const*)>
    43a2:	f104 0018 	add.w	r0, r4, #24
    43a6:	493c      	ldr	r1, [pc, #240]	; (4498 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x104>)
    43a8:	f002 f90c 	bl	65c4 <String::String(char const*)>
    43ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
    43b0:	493a      	ldr	r1, [pc, #232]	; (449c <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x108>)
    43b2:	f002 f907 	bl	65c4 <String::String(char const*)>
    43b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
    43ba:	4939      	ldr	r1, [pc, #228]	; (44a0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x10c>)
    43bc:	f002 f902 	bl	65c4 <String::String(char const*)>
    43c0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    43c4:	4937      	ldr	r1, [pc, #220]	; (44a4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x110>)
    43c6:	f002 f8fd 	bl	65c4 <String::String(char const*)>
    43ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
    43ce:	4936      	ldr	r1, [pc, #216]	; (44a8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x114>)
    43d0:	f002 f8f8 	bl	65c4 <String::String(char const*)>
    43d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
    43d8:	4934      	ldr	r1, [pc, #208]	; (44ac <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x118>)
    43da:	f002 f8f3 	bl	65c4 <String::String(char const*)>
    43de:	f104 0078 	add.w	r0, r4, #120	; 0x78
    43e2:	4933      	ldr	r1, [pc, #204]	; (44b0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x11c>)
    43e4:	f002 f8ee 	bl	65c4 <String::String(char const*)>
    43e8:	f104 0088 	add.w	r0, r4, #136	; 0x88
    43ec:	4931      	ldr	r1, [pc, #196]	; (44b4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x120>)
    43ee:	f002 f8e9 	bl	65c4 <String::String(char const*)>
    43f2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    43f6:	4930      	ldr	r1, [pc, #192]	; (44b8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x124>)
    43f8:	f002 f8e4 	bl	65c4 <String::String(char const*)>
    43fc:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    4400:	492e      	ldr	r1, [pc, #184]	; (44bc <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x128>)
    4402:	f002 f8df 	bl	65c4 <String::String(char const*)>
    4406:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    440a:	492d      	ldr	r1, [pc, #180]	; (44c0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x12c>)
    440c:	f002 f8da 	bl	65c4 <String::String(char const*)>
    4410:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    4414:	492b      	ldr	r1, [pc, #172]	; (44c4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x130>)
    4416:	f002 f8d5 	bl	65c4 <String::String(char const*)>
    441a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    441e:	492a      	ldr	r1, [pc, #168]	; (44c8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x134>)
    4420:	f002 f8d0 	bl	65c4 <String::String(char const*)>
    4424:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    4428:	4928      	ldr	r1, [pc, #160]	; (44cc <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x138>)
    442a:	f002 f8cb 	bl	65c4 <String::String(char const*)>
    442e:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    4432:	4927      	ldr	r1, [pc, #156]	; (44d0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x13c>)
    4434:	f002 f8c6 	bl	65c4 <String::String(char const*)>
    4438:	f504 7084 	add.w	r0, r4, #264	; 0x108
    443c:	4925      	ldr	r1, [pc, #148]	; (44d4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x140>)
    443e:	f002 f8c1 	bl	65c4 <String::String(char const*)>
    4442:	f504 708c 	add.w	r0, r4, #280	; 0x118
    4446:	4924      	ldr	r1, [pc, #144]	; (44d8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x144>)
    4448:	f002 f8bc 	bl	65c4 <String::String(char const*)>
    444c:	f504 7094 	add.w	r0, r4, #296	; 0x128
    4450:	4922      	ldr	r1, [pc, #136]	; (44dc <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x148>)
    4452:	f002 f8b7 	bl	65c4 <String::String(char const*)>
    4456:	f504 709c 	add.w	r0, r4, #312	; 0x138
    445a:	4921      	ldr	r1, [pc, #132]	; (44e0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x14c>)
    445c:	f002 f8b2 	bl	65c4 <String::String(char const*)>
    4460:	f504 70a4 	add.w	r0, r4, #328	; 0x148
    4464:	491f      	ldr	r1, [pc, #124]	; (44e4 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x150>)
    4466:	f002 f8ad 	bl	65c4 <String::String(char const*)>
    446a:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    446e:	491e      	ldr	r1, [pc, #120]	; (44e8 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x154>)
    4470:	f002 f8a8 	bl	65c4 <String::String(char const*)>
    4474:	f504 70b4 	add.w	r0, r4, #360	; 0x168
    4478:	491c      	ldr	r1, [pc, #112]	; (44ec <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x158>)
    447a:	f002 f8a3 	bl	65c4 <String::String(char const*)>
    447e:	f504 70bc 	add.w	r0, r4, #376	; 0x178
    4482:	491b      	ldr	r1, [pc, #108]	; (44f0 <Meltdown::CMeltdownSerial::CMeltdownSerial()+0x15c>)
    4484:	f002 f89e 	bl	65c4 <String::String(char const*)>
	{
		m_analogTolerance = 15;
    4488:	230f      	movs	r3, #15
		m_inputString.reserve(100);
    448a:	4628      	mov	r0, r5
{
	CMeltdownSerial MeltdownSerial;

	CMeltdownSerial::CMeltdownSerial()
	{
		m_analogTolerance = 15;
    448c:	6023      	str	r3, [r4, #0]
		m_inputString.reserve(100);
    448e:	2164      	movs	r1, #100	; 0x64
    4490:	f002 f860 	bl	6554 <String::reserve(unsigned int)>
	}
    4494:	4620      	mov	r0, r4
    4496:	bd38      	pop	{r3, r4, r5, pc}
    4498:	00009084 	.word	0x00009084
    449c:	0000908c 	.word	0x0000908c
    44a0:	00009094 	.word	0x00009094
    44a4:	0000909c 	.word	0x0000909c
    44a8:	000090a4 	.word	0x000090a4
    44ac:	000090ac 	.word	0x000090ac
    44b0:	000090b4 	.word	0x000090b4
    44b4:	000090bc 	.word	0x000090bc
    44b8:	000090c4 	.word	0x000090c4
    44bc:	000090cc 	.word	0x000090cc
    44c0:	000090d4 	.word	0x000090d4
    44c4:	000090dc 	.word	0x000090dc
    44c8:	000090e4 	.word	0x000090e4
    44cc:	000090ec 	.word	0x000090ec
    44d0:	000090f4 	.word	0x000090f4
    44d4:	000090fc 	.word	0x000090fc
    44d8:	00009104 	.word	0x00009104
    44dc:	0000910c 	.word	0x0000910c
    44e0:	00009114 	.word	0x00009114
    44e4:	0000911c 	.word	0x0000911c
    44e8:	00009124 	.word	0x00009124
    44ec:	0000912c 	.word	0x0000912c
    44f0:	00009134 	.word	0x00009134

000044f4 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE>:
    44f4:	b510      	push	{r4, lr}
#include "MeltdownSerial.h"

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;
    44f6:	4c05      	ldr	r4, [pc, #20]	; (450c <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x18>)
    44f8:	4620      	mov	r0, r4
    44fa:	f7ff ff4b 	bl	4394 <Meltdown::CMeltdownSerial::CMeltdownSerial()>
    44fe:	4620      	mov	r0, r4
    4500:	4a03      	ldr	r2, [pc, #12]	; (4510 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x1c>)
    4502:	4904      	ldr	r1, [pc, #16]	; (4514 <_GLOBAL__sub_I__ZN8Meltdown14MeltdownSerialE+0x20>)
	CMeltdownSerial::CMeltdownSerial()
	{
		m_analogTolerance = 15;
		m_inputString.reserve(100);
	}
    4504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "MeltdownSerial.h"

namespace Meltdown
{
	CMeltdownSerial MeltdownSerial;
    4508:	f003 b8e0 	b.w	76cc <__aeabi_atexit>
    450c:	1fff9968 	.word	0x1fff9968
    4510:	1fff8720 	.word	0x1fff8720
    4514:	000042cd 	.word	0x000042cd

00004518 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4518:	4807      	ldr	r0, [pc, #28]	; (4538 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    451a:	b082      	sub	sp, #8
    451c:	6803      	ldr	r3, [r0, #0]
    451e:	9301      	str	r3, [sp, #4]
	return ret;
    4520:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4522:	4411      	add	r1, r2
    4524:	e001      	b.n	452a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4526:	4299      	cmp	r1, r3
    4528:	d304      	bcc.n	4534 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    452a:	6803      	ldr	r3, [r0, #0]
    452c:	9300      	str	r3, [sp, #0]
	return ret;
    452e:	9b00      	ldr	r3, [sp, #0]
    4530:	429a      	cmp	r2, r3
    4532:	d9f8      	bls.n	4526 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    4534:	b002      	add	sp, #8
    4536:	4770      	bx	lr
    4538:	1fff9b38 	.word	0x1fff9b38

0000453c <VisualMicroDebug::DBG_Millis()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    453c:	4b03      	ldr	r3, [pc, #12]	; (454c <VisualMicroDebug::DBG_Millis()+0x10>)
{
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
    453e:	b082      	sub	sp, #8
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	9301      	str	r3, [sp, #4]
	return ret;
    4544:	9801      	ldr	r0, [sp, #4]
	return millis();
}
    4546:	b002      	add	sp, #8
    4548:	4770      	bx	lr
    454a:	bf00      	nop
    454c:	1fff9b38 	.word	0x1fff9b38

00004550 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    4550:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4552:	4b07      	ldr	r3, [pc, #28]	; (4570 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x20>)
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    4554:	6882      	ldr	r2, [r0, #8]
    4556:	681b      	ldr	r3, [r3, #0]

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    4558:	6101      	str	r1, [r0, #16]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    455a:	b083      	sub	sp, #12
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    455c:	2400      	movs	r4, #0
    455e:	9301      	str	r3, [sp, #4]
	return ret;
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
    4564:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
    4566:	6083      	str	r3, [r0, #8]
}
    4568:	b003      	add	sp, #12
    456a:	bc10      	pop	{r4}
    456c:	4770      	bx	lr
    456e:	bf00      	nop
    4570:	1fff9b38 	.word	0x1fff9b38

00004574 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    4574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4578:	4b1b      	ldr	r3, [pc, #108]	; (45e8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    457a:	4c1c      	ldr	r4, [pc, #112]	; (45ec <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	4e1c      	ldr	r6, [pc, #112]	; (45f0 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    4580:	b082      	sub	sp, #8
    4582:	4605      	mov	r5, r0
    4584:	9301      	str	r3, [sp, #4]
    4586:	4688      	mov	r8, r1
    4588:	481a      	ldr	r0, [pc, #104]	; (45f4 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x80>)
	return ret;
    458a:	9f01      	ldr	r7, [sp, #4]
    458c:	2106      	movs	r1, #6
    458e:	f001 fc09 	bl	5da4 <usb_serial_write>
    4592:	4641      	mov	r1, r8
    4594:	2300      	movs	r3, #0
    4596:	220a      	movs	r2, #10
    4598:	4620      	mov	r0, r4
    459a:	f001 ff39 	bl	6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    459e:	2103      	movs	r1, #3
    45a0:	4815      	ldr	r0, [pc, #84]	; (45f8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x84>)
    45a2:	f001 fbff 	bl	5da4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    45a6:	4639      	mov	r1, r7
    45a8:	2300      	movs	r3, #0
    45aa:	220a      	movs	r2, #10
    45ac:	4620      	mov	r0, r4
    45ae:	f001 ff2f 	bl	6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    45b2:	4630      	mov	r0, r6
    45b4:	2101      	movs	r1, #1
    45b6:	f001 fbf5 	bl	5da4 <usb_serial_write>
    45ba:	68a9      	ldr	r1, [r5, #8]
    45bc:	2300      	movs	r3, #0
    45be:	1a79      	subs	r1, r7, r1
    45c0:	220a      	movs	r2, #10
    45c2:	4620      	mov	r0, r4
    45c4:	f001 ff24 	bl	6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    45c8:	4630      	mov	r0, r6
    45ca:	2101      	movs	r1, #1
    45cc:	f001 fbea 	bl	5da4 <usb_serial_write>
    45d0:	68eb      	ldr	r3, [r5, #12]
    45d2:	68a9      	ldr	r1, [r5, #8]
    45d4:	4620      	mov	r0, r4
    45d6:	1ac9      	subs	r1, r1, r3
    45d8:	220a      	movs	r2, #10
    45da:	2300      	movs	r3, #0
    45dc:	f001 ff18 	bl	6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    45e0:	b002      	add	sp, #8
    45e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45e6:	bf00      	nop
    45e8:	1fff9b38 	.word	0x1fff9b38
    45ec:	1fff873c 	.word	0x1fff873c
    45f0:	00009148 	.word	0x00009148
    45f4:	0000913c 	.word	0x0000913c
    45f8:	00009144 	.word	0x00009144

000045fc <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    45fc:	b508      	push	{r3, lr}
    45fe:	2106      	movs	r1, #6
    4600:	4803      	ldr	r0, [pc, #12]	; (4610 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    4602:	f001 fbcf 	bl	5da4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    4606:	4803      	ldr	r0, [pc, #12]	; (4614 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_SOFTWARESERIAL)
	transport->println("_VMDPE");
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif
}
    4608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    460c:	f001 bef0 	b.w	63f0 <Print::println()>
    4610:	0000914c 	.word	0x0000914c
    4614:	1fff873c 	.word	0x1fff873c

00004618 <VisualMicroDebug::OnBreakPointEnd()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4618:	4b03      	ldr	r3, [pc, #12]	; (4628 <VisualMicroDebug::OnBreakPointEnd()+0x10>)

void VisualMicroDebug::OnBreakPointEnd()
{
    461a:	b082      	sub	sp, #8
    461c:	681b      	ldr	r3, [r3, #0]
    461e:	9301      	str	r3, [sp, #4]
	return ret;
    4620:	9b01      	ldr	r3, [sp, #4]
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    4622:	6083      	str	r3, [r0, #8]
}
    4624:	b002      	add	sp, #8
    4626:	4770      	bx	lr
    4628:	1fff9b38 	.word	0x1fff9b38

0000462c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    462c:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    462e:	4a10      	ldr	r2, [pc, #64]	; (4670 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    4630:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    4632:	b9a1      	cbnz	r1, 465e <VisualMicroDebug::outPacketStart(bool)+0x32>
    4634:	6813      	ldr	r3, [r2, #0]
    4636:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    4638:	6841      	ldr	r1, [r0, #4]
	return ret;
    463a:	9b00      	ldr	r3, [sp, #0]
    463c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    463e:	2920      	cmp	r1, #32
    4640:	d80d      	bhi.n	465e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4642:	6813      	ldr	r3, [r2, #0]
    4644:	9302      	str	r3, [sp, #8]
	return ret;
    4646:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4648:	f104 0321 	add.w	r3, r4, #33	; 0x21
    464c:	1a59      	subs	r1, r3, r1
    464e:	e001      	b.n	4654 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4650:	4299      	cmp	r1, r3
    4652:	d304      	bcc.n	465e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4654:	6813      	ldr	r3, [r2, #0]
    4656:	9301      	str	r3, [sp, #4]
	return ret;
    4658:	9b01      	ldr	r3, [sp, #4]
    465a:	429c      	cmp	r4, r3
    465c:	d9f8      	bls.n	4650 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    465e:	6813      	ldr	r3, [r2, #0]
    4660:	9303      	str	r3, [sp, #12]
	return ret;
    4662:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    4664:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    4666:	2001      	movs	r0, #1
    4668:	b005      	add	sp, #20
    466a:	bc10      	pop	{r4}
    466c:	4770      	bx	lr
    466e:	bf00      	nop
    4670:	1fff9b38 	.word	0x1fff9b38

00004674 <VisualMicroDebug::outPacketEnd()>:
    4674:	4770      	bx	lr
    4676:	bf00      	nop

00004678 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    4678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    467c:	f000 ba3a 	b.w	4af4 <delay>

00004680 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    4680:	2300      	movs	r3, #0
    4682:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    4684:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    4686:	b171      	cbz	r1, 46a6 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4688:	4807      	ldr	r0, [pc, #28]	; (46a8 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    468a:	b082      	sub	sp, #8
    468c:	6803      	ldr	r3, [r0, #0]
    468e:	9301      	str	r3, [sp, #4]
	return ret;
    4690:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4692:	4411      	add	r1, r2
    4694:	e001      	b.n	469a <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4696:	4299      	cmp	r1, r3
    4698:	d304      	bcc.n	46a4 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    469a:	6803      	ldr	r3, [r0, #0]
    469c:	9300      	str	r3, [sp, #0]
	return ret;
    469e:	9b00      	ldr	r3, [sp, #0]
    46a0:	429a      	cmp	r2, r3
    46a2:	d9f8      	bls.n	4696 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    46a4:	b002      	add	sp, #8
    46a6:	4770      	bx	lr
    46a8:	1fff9b38 	.word	0x1fff9b38

000046ac <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    46ac:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    46ae:	4c13      	ldr	r4, [pc, #76]	; (46fc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    46b0:	b085      	sub	sp, #20
    46b2:	6823      	ldr	r3, [r4, #0]
    46b4:	9303      	str	r3, [sp, #12]
	return ret;
    46b6:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    46b8:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    46ba:	460d      	mov	r5, r1
    46bc:	4810      	ldr	r0, [pc, #64]	; (4700 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    46be:	2106      	movs	r1, #6
    46c0:	f001 fb70 	bl	5da4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    46c4:	2300      	movs	r3, #0
    46c6:	220a      	movs	r2, #10
    46c8:	4629      	mov	r1, r5
    46ca:	480e      	ldr	r0, [pc, #56]	; (4704 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    46cc:	f001 fea0 	bl	6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    46d0:	2106      	movs	r1, #6
    46d2:	480d      	ldr	r0, [pc, #52]	; (4708 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    46d4:	f001 fb66 	bl	5da4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    46d8:	480a      	ldr	r0, [pc, #40]	; (4704 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    46da:	f001 fe89 	bl	63f0 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    46de:	6823      	ldr	r3, [r4, #0]
    46e0:	9302      	str	r3, [sp, #8]
	return ret;
    46e2:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    46e4:	f102 0132 	add.w	r1, r2, #50	; 0x32
    46e8:	e001      	b.n	46ee <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    46ea:	4299      	cmp	r1, r3
    46ec:	d304      	bcc.n	46f8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    46ee:	6823      	ldr	r3, [r4, #0]
    46f0:	9301      	str	r3, [sp, #4]
	return ret;
    46f2:	9b01      	ldr	r3, [sp, #4]
    46f4:	429a      	cmp	r2, r3
    46f6:	d9f8      	bls.n	46ea <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    46f8:	b005      	add	sp, #20
    46fa:	bd30      	pop	{r4, r5, pc}
    46fc:	1fff9b38 	.word	0x1fff9b38
    4700:	00009154 	.word	0x00009154
    4704:	1fff873c 	.word	0x1fff873c
    4708:	0000915c 	.word	0x0000915c

0000470c <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    470c:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    470e:	7e03      	ldrb	r3, [r0, #24]
    4710:	b90b      	cbnz	r3, 4716 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    4712:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    4714:	bd38      	pop	{r3, r4, r5, pc}
    4716:	460d      	mov	r5, r1
    4718:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    471a:	f001 fb19 	bl	5d50 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    471e:	f010 0fff 	tst.w	r0, #255	; 0xff
    4722:	d101      	bne.n	4728 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    4724:	2065      	movs	r0, #101	; 0x65
    4726:	bd38      	pop	{r3, r4, r5, pc}
    4728:	f001 fb12 	bl	5d50 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    472c:	f010 0fff 	tst.w	r0, #255	; 0xff
    4730:	d0f8      	beq.n	4724 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    4732:	f001 fad1 	bl	5cd8 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    4736:	b2c0      	uxtb	r0, r0
    4738:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    473c:	2b1e      	cmp	r3, #30
    473e:	d8f3      	bhi.n	4728 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    4740:	a201      	add	r2, pc, #4	; (adr r2, 4748 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    4742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4746:	bf00      	nop
    4748:	000047d1 	.word	0x000047d1
    474c:	00004729 	.word	0x00004729
    4750:	00004729 	.word	0x00004729
    4754:	00004729 	.word	0x00004729
    4758:	00004729 	.word	0x00004729
    475c:	00004729 	.word	0x00004729
    4760:	00004729 	.word	0x00004729
    4764:	00004729 	.word	0x00004729
    4768:	00004729 	.word	0x00004729
    476c:	00004729 	.word	0x00004729
    4770:	00004729 	.word	0x00004729
    4774:	000047c5 	.word	0x000047c5
    4778:	00004729 	.word	0x00004729
    477c:	00004729 	.word	0x00004729
    4780:	00004729 	.word	0x00004729
    4784:	00004729 	.word	0x00004729
    4788:	00004713 	.word	0x00004713
    478c:	00004729 	.word	0x00004729
    4790:	00004729 	.word	0x00004729
    4794:	00004729 	.word	0x00004729
    4798:	00004729 	.word	0x00004729
    479c:	00004729 	.word	0x00004729
    47a0:	00004729 	.word	0x00004729
    47a4:	00004729 	.word	0x00004729
    47a8:	00004729 	.word	0x00004729
    47ac:	00004713 	.word	0x00004713
    47b0:	00004729 	.word	0x00004729
    47b4:	00004729 	.word	0x00004729
    47b8:	00004729 	.word	0x00004729
    47bc:	00004729 	.word	0x00004729
    47c0:	00004715 	.word	0x00004715
		{

		case 'c':
			sendContinuedACK(breakPointId);
    47c4:	4620      	mov	r0, r4
    47c6:	4629      	mov	r1, r5
    47c8:	f7ff ff70 	bl	46ac <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    47cc:	2063      	movs	r0, #99	; 0x63
    47ce:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    47d0:	2300      	movs	r3, #0
    47d2:	7623      	strb	r3, [r4, #24]
			return 'c';
    47d4:	2063      	movs	r0, #99	; 0x63
    47d6:	bd38      	pop	{r3, r4, r5, pc}

000047d8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    47d8:	b570      	push	{r4, r5, r6, lr}
    47da:	4605      	mov	r5, r0
    47dc:	b082      	sub	sp, #8
    47de:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    47e0:	b1c9      	cbz	r1, 4816 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    47e2:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47e4:	4c0d      	ldr	r4, [pc, #52]	; (481c <VisualMicroDebug::start(bool, bool)+0x44>)
    47e6:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    47e8:	2100      	movs	r1, #0
    47ea:	4628      	mov	r0, r5
    47ec:	f7ff ff8e 	bl	470c <VisualMicroDebug::breakWait(unsigned char)>
    47f0:	2863      	cmp	r0, #99	; 0x63
    47f2:	d010      	beq.n	4816 <VisualMicroDebug::start(bool, bool)+0x3e>
    47f4:	6823      	ldr	r3, [r4, #0]
    47f6:	9301      	str	r3, [sp, #4]
	return ret;
    47f8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    47fa:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47fc:	6823      	ldr	r3, [r4, #0]
    47fe:	9300      	str	r3, [sp, #0]
	return ret;
    4800:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4802:	429a      	cmp	r2, r3
    4804:	d8f0      	bhi.n	47e8 <VisualMicroDebug::start(bool, bool)+0x10>
    4806:	4299      	cmp	r1, r3
    4808:	d2f8      	bcs.n	47fc <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    480a:	2100      	movs	r1, #0
    480c:	4628      	mov	r0, r5
    480e:	f7ff ff7d 	bl	470c <VisualMicroDebug::breakWait(unsigned char)>
    4812:	2863      	cmp	r0, #99	; 0x63
    4814:	d1ee      	bne.n	47f4 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    4816:	762e      	strb	r6, [r5, #24]
#endif

}
    4818:	b002      	add	sp, #8
    481a:	bd70      	pop	{r4, r5, r6, pc}
    481c:	1fff9b38 	.word	0x1fff9b38

00004820 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    4820:	4b03      	ldr	r3, [pc, #12]	; (4830 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    4822:	2200      	movs	r2, #0
    4824:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    4826:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    4828:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    482a:	615a      	str	r2, [r3, #20]
    482c:	4770      	bx	lr
    482e:	bf00      	nop
    4830:	1fff9af0 	.word	0x1fff9af0

00004834 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4834:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4836:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    483a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    483e:	d16d      	bne.n	491c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4840:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    4842:	d341      	bcc.n	48c8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4844:	f851 3b04 	ldr.w	r3, [r1], #4
    4848:	f840 3b04 	str.w	r3, [r0], #4
    484c:	f851 3b04 	ldr.w	r3, [r1], #4
    4850:	f840 3b04 	str.w	r3, [r0], #4
    4854:	f851 3b04 	ldr.w	r3, [r1], #4
    4858:	f840 3b04 	str.w	r3, [r0], #4
    485c:	f851 3b04 	ldr.w	r3, [r1], #4
    4860:	f840 3b04 	str.w	r3, [r0], #4
    4864:	f851 3b04 	ldr.w	r3, [r1], #4
    4868:	f840 3b04 	str.w	r3, [r0], #4
    486c:	f851 3b04 	ldr.w	r3, [r1], #4
    4870:	f840 3b04 	str.w	r3, [r0], #4
    4874:	f851 3b04 	ldr.w	r3, [r1], #4
    4878:	f840 3b04 	str.w	r3, [r0], #4
    487c:	f851 3b04 	ldr.w	r3, [r1], #4
    4880:	f840 3b04 	str.w	r3, [r0], #4
    4884:	f851 3b04 	ldr.w	r3, [r1], #4
    4888:	f840 3b04 	str.w	r3, [r0], #4
    488c:	f851 3b04 	ldr.w	r3, [r1], #4
    4890:	f840 3b04 	str.w	r3, [r0], #4
    4894:	f851 3b04 	ldr.w	r3, [r1], #4
    4898:	f840 3b04 	str.w	r3, [r0], #4
    489c:	f851 3b04 	ldr.w	r3, [r1], #4
    48a0:	f840 3b04 	str.w	r3, [r0], #4
    48a4:	f851 3b04 	ldr.w	r3, [r1], #4
    48a8:	f840 3b04 	str.w	r3, [r0], #4
    48ac:	f851 3b04 	ldr.w	r3, [r1], #4
    48b0:	f840 3b04 	str.w	r3, [r0], #4
    48b4:	f851 3b04 	ldr.w	r3, [r1], #4
    48b8:	f840 3b04 	str.w	r3, [r0], #4
    48bc:	f851 3b04 	ldr.w	r3, [r1], #4
    48c0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    48c4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    48c6:	d2bd      	bcs.n	4844 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    48c8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    48ca:	d311      	bcc.n	48f0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    48cc:	f851 3b04 	ldr.w	r3, [r1], #4
    48d0:	f840 3b04 	str.w	r3, [r0], #4
    48d4:	f851 3b04 	ldr.w	r3, [r1], #4
    48d8:	f840 3b04 	str.w	r3, [r0], #4
    48dc:	f851 3b04 	ldr.w	r3, [r1], #4
    48e0:	f840 3b04 	str.w	r3, [r0], #4
    48e4:	f851 3b04 	ldr.w	r3, [r1], #4
    48e8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    48ec:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    48ee:	d2ed      	bcs.n	48cc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    48f0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    48f2:	d305      	bcc.n	4900 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    48f4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    48f8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    48fc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    48fe:	d2f9      	bcs.n	48f4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    4900:	3204      	adds	r2, #4
	beq	.Ldone
    4902:	d008      	beq.n	4916 <memcpy+0xe2>

	lsls	r2, r2, #31
    4904:	07d2      	lsls	r2, r2, #31
	itt ne
    4906:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4908:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    490c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    4910:	d301      	bcc.n	4916 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    4912:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4914:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4916:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4918:	4770      	bx	lr
    491a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    491c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    491e:	d313      	bcc.n	4948 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    4920:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    4922:	d08d      	beq.n	4840 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4924:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4928:	d08a      	beq.n	4840 <memcpy+0xc>

	rsb	r3, #4
    492a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    492e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4930:	07db      	lsls	r3, r3, #31
	itt ne
    4932:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4934:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4938:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    493c:	d380      	bcc.n	4840 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    493e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    4942:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4946:	e77b      	b.n	4840 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4948:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    494a:	d3d9      	bcc.n	4900 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    494c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    494e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4952:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4956:	d2f9      	bcs.n	494c <memcpy+0x118>

	ldrb	r3, [r1]
    4958:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    495a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    495c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    495e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    4960:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4962:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4964:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4966:	4770      	bx	lr

00004968 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4968:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    496a:	4c10      	ldr	r4, [pc, #64]	; (49ac <fault_isr+0x44>)
    496c:	e008      	b.n	4980 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    496e:	6823      	ldr	r3, [r4, #0]
    4970:	0559      	lsls	r1, r3, #21
    4972:	d40d      	bmi.n	4990 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4974:	6823      	ldr	r3, [r4, #0]
    4976:	051a      	lsls	r2, r3, #20
    4978:	d40f      	bmi.n	499a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    497a:	6823      	ldr	r3, [r4, #0]
    497c:	04db      	lsls	r3, r3, #19
    497e:	d411      	bmi.n	49a4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4980:	6823      	ldr	r3, [r4, #0]
    4982:	0358      	lsls	r0, r3, #13
    4984:	d5f3      	bpl.n	496e <fault_isr+0x6>
    4986:	f000 fb8d 	bl	50a4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    498a:	6823      	ldr	r3, [r4, #0]
    498c:	0559      	lsls	r1, r3, #21
    498e:	d5f1      	bpl.n	4974 <fault_isr+0xc>
    4990:	f000 fa28 	bl	4de4 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4994:	6823      	ldr	r3, [r4, #0]
    4996:	051a      	lsls	r2, r3, #20
    4998:	d5ef      	bpl.n	497a <fault_isr+0x12>
    499a:	f002 f85d 	bl	6a58 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    499e:	6823      	ldr	r3, [r4, #0]
    49a0:	04db      	lsls	r3, r3, #19
    49a2:	d5ed      	bpl.n	4980 <fault_isr+0x18>
    49a4:	f002 f8ee 	bl	6b84 <uart2_status_isr>
    49a8:	e7ea      	b.n	4980 <fault_isr+0x18>
    49aa:	bf00      	nop
    49ac:	40048034 	.word	0x40048034

000049b0 <unused_isr>:
	}
}

void unused_isr(void)
{
    49b0:	b508      	push	{r3, lr}
	fault_isr();
    49b2:	f7ff ffd9 	bl	4968 <fault_isr>
    49b6:	bf00      	nop

000049b8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    49b8:	4b01      	ldr	r3, [pc, #4]	; (49c0 <startup_early_hook+0x8>)
    49ba:	2210      	movs	r2, #16
    49bc:	801a      	strh	r2, [r3, #0]
    49be:	4770      	bx	lr
    49c0:	40052000 	.word	0x40052000

000049c4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    49c4:	4770      	bx	lr
    49c6:	bf00      	nop

000049c8 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    49c8:	4909      	ldr	r1, [pc, #36]	; (49f0 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    49ca:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    49cc:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    49ce:	b130      	cbz	r0, 49de <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    49d0:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    49d2:	4418      	add	r0, r3
    49d4:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
    49d8:	4290      	cmp	r0, r2
    49da:	d202      	bcs.n	49e2 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    49dc:	6008      	str	r0, [r1, #0]
	}
	return prev;
    49de:	4618      	mov	r0, r3
}
    49e0:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    49e2:	f002 fe83 	bl	76ec <__errno>
    49e6:	230c      	movs	r3, #12
    49e8:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    49ea:	f04f 30ff 	mov.w	r0, #4294967295
    49ee:	bd08      	pop	{r3, pc}
    49f0:	1fff8730 	.word	0x1fff8730

000049f4 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    49f4:	7800      	ldrb	r0, [r0, #0]
}
    49f6:	fab0 f080 	clz	r0, r0
    49fa:	0940      	lsrs	r0, r0, #5
    49fc:	4770      	bx	lr
    49fe:	bf00      	nop

00004a00 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    4a00:	2301      	movs	r3, #1
    4a02:	7003      	strb	r3, [r0, #0]
    4a04:	4770      	bx	lr
    4a06:	bf00      	nop

00004a08 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4a08:	4a1c      	ldr	r2, [pc, #112]	; (4a7c <pinMode.part.2+0x74>)
    4a0a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4a0e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4a10:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4a12:	d011      	beq.n	4a38 <pinMode.part.2+0x30>
    4a14:	2904      	cmp	r1, #4
    4a16:	d01b      	beq.n	4a50 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    4a18:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    4a1c:	2200      	movs	r2, #0
    4a1e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    4a22:	b129      	cbz	r1, 4a30 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    4a24:	2902      	cmp	r1, #2
    4a26:	d020      	beq.n	4a6a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    4a28:	2903      	cmp	r1, #3
    4a2a:	d022      	beq.n	4a72 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4a2c:	601a      	str	r2, [r3, #0]
    4a2e:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    4a30:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a34:	601a      	str	r2, [r3, #0]
    4a36:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4a38:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4a3c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4a40:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4a44:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4a46:	681a      	ldr	r2, [r3, #0]
    4a48:	f022 0220 	bic.w	r2, r2, #32
    4a4c:	601a      	str	r2, [r3, #0]
    4a4e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4a50:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4a54:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4a58:	2001      	movs	r0, #1
    4a5a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4a5e:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    4a60:	681a      	ldr	r2, [r3, #0]
    4a62:	f042 0220 	orr.w	r2, r2, #32
    4a66:	601a      	str	r2, [r3, #0]
    4a68:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    4a6a:	f240 1203 	movw	r2, #259	; 0x103
    4a6e:	601a      	str	r2, [r3, #0]
    4a70:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    4a72:	f44f 7281 	mov.w	r2, #258	; 0x102
    4a76:	601a      	str	r2, [r3, #0]
    4a78:	4770      	bx	lr
    4a7a:	bf00      	nop
    4a7c:	000091ac 	.word	0x000091ac

00004a80 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    4a80:	b430      	push	{r4, r5}
	RTC_SR = 0;
    4a82:	4b05      	ldr	r3, [pc, #20]	; (4a98 <rtc_set+0x18>)
	RTC_TPR = 0;
    4a84:	4d05      	ldr	r5, [pc, #20]	; (4a9c <rtc_set+0x1c>)
	RTC_TSR = t;
    4a86:	4c06      	ldr	r4, [pc, #24]	; (4aa0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4a88:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    4a8a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4a8c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    4a8e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    4a90:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    4a92:	6019      	str	r1, [r3, #0]
}
    4a94:	bc30      	pop	{r4, r5}
    4a96:	4770      	bx	lr
    4a98:	4003d014 	.word	0x4003d014
    4a9c:	4003d004 	.word	0x4003d004
    4aa0:	4003d000 	.word	0x4003d000

00004aa4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    4aa4:	2821      	cmp	r0, #33	; 0x21
    4aa6:	d801      	bhi.n	4aac <pinMode+0x8>
    4aa8:	f7ff bfae 	b.w	4a08 <pinMode.part.2>
    4aac:	4770      	bx	lr
    4aae:	bf00      	nop

00004ab0 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4ab0:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4ab2:	490c      	ldr	r1, [pc, #48]	; (4ae4 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4ab4:	4b0c      	ldr	r3, [pc, #48]	; (4ae8 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4ab6:	4a0d      	ldr	r2, [pc, #52]	; (4aec <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4ab8:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4aba:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4abc:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4abe:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4ac0:	0152      	lsls	r2, r2, #5
    4ac2:	d502      	bpl.n	4aca <micros+0x1a>
    4ac4:	2b32      	cmp	r3, #50	; 0x32
    4ac6:	bf88      	it	hi
    4ac8:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4aca:	4909      	ldr	r1, [pc, #36]	; (4af0 <micros+0x40>)
    4acc:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4ad4:	33ff      	adds	r3, #255	; 0xff
    4ad6:	fba1 1303 	umull	r1, r3, r1, r3
    4ada:	fb02 f000 	mul.w	r0, r2, r0
}
    4ade:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    4ae2:	4770      	bx	lr
    4ae4:	1fff9b38 	.word	0x1fff9b38
    4ae8:	e000e018 	.word	0xe000e018
    4aec:	e000ed04 	.word	0xe000ed04
    4af0:	aaaaaaab 	.word	0xaaaaaaab

00004af4 <delay>:

void delay(uint32_t ms)
{
    4af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4af8:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4afa:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4afc:	4f20      	ldr	r7, [pc, #128]	; (4b80 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4afe:	4b21      	ldr	r3, [pc, #132]	; (4b84 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4b00:	4a21      	ldr	r2, [pc, #132]	; (4b88 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4b02:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4b04:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4b06:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4b08:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4b0a:	0152      	lsls	r2, r2, #5
    4b0c:	d502      	bpl.n	4b14 <delay+0x20>
    4b0e:	2b32      	cmp	r3, #50	; 0x32
    4b10:	bf88      	it	hi
    4b12:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    4b14:	b395      	cbz	r5, 4b7c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4b16:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4b1a:	4e1c      	ldr	r6, [pc, #112]	; (4b8c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4b1c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4b84 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4b20:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4b88 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4b24:	33ff      	adds	r3, #255	; 0xff
    4b26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b2a:	fba6 1303 	umull	r1, r3, r6, r3
    4b2e:	fb02 f404 	mul.w	r4, r2, r4
    4b32:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4b36:	b672      	cpsid	i
	current = SYST_CVR;
    4b38:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    4b3c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4b3e:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    4b42:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4b44:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    4b48:	33ff      	adds	r3, #255	; 0xff
    4b4a:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4b4e:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4b52:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    4b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4b5a:	d002      	beq.n	4b62 <delay+0x6e>
    4b5c:	2932      	cmp	r1, #50	; 0x32
    4b5e:	bf88      	it	hi
    4b60:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4b62:	fb00 3302 	mla	r3, r0, r2, r3
    4b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4b6a:	d304      	bcc.n	4b76 <delay+0x82>
				ms--;
				if (ms == 0) return;
    4b6c:	3d01      	subs	r5, #1
    4b6e:	d005      	beq.n	4b7c <delay+0x88>
				start += 1000;
    4b70:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    4b74:	e7df      	b.n	4b36 <delay+0x42>
			}
			yield();
    4b76:	f001 fe69 	bl	684c <yield>
		}
    4b7a:	e7dc      	b.n	4b36 <delay+0x42>
    4b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b80:	1fff9b38 	.word	0x1fff9b38
    4b84:	e000e018 	.word	0xe000e018
    4b88:	e000ed04 	.word	0xe000ed04
    4b8c:	aaaaaaab 	.word	0xaaaaaaab

00004b90 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    4b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4b92:	4b2d      	ldr	r3, [pc, #180]	; (4c48 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4b94:	492d      	ldr	r1, [pc, #180]	; (4c4c <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4b96:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 4c68 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4b9a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 4c6c <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    4b9e:	4e2c      	ldr	r6, [pc, #176]	; (4c50 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    4ba0:	4d2c      	ldr	r5, [pc, #176]	; (4c54 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    4ba2:	4c2d      	ldr	r4, [pc, #180]	; (4c58 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    4ba4:	4a2d      	ldr	r2, [pc, #180]	; (4c5c <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    4ba6:	4f2e      	ldr	r7, [pc, #184]	; (4c60 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4ba8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    4bac:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    4bae:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4bb2:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    4bb4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    4bb8:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    4bba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    4bbe:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    4bc0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    4bc4:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4bc6:	2000      	movs	r0, #0
    4bc8:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4bca:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4bcc:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    4bd0:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4bd4:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    4bd8:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    4bda:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    4bdc:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    4bde:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    4be0:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    4be2:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    4be4:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4be6:	2209      	movs	r2, #9
    4be8:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    4bec:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    4bf0:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    4bf4:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4bf8:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    4bfc:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    4c00:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    4c04:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4c06:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4c0a:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4c0e:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    4c12:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4c16:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    4c18:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4c1c:	4811      	ldr	r0, [pc, #68]	; (4c64 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4c1e:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    4c20:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    4c24:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4c28:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    4c2a:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4c2c:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    4c2e:	f001 fe5b 	bl	68e8 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    4c32:	2019      	movs	r0, #25
    4c34:	f7ff ff5e 	bl	4af4 <delay>
	usb_init();
    4c38:	f000 ff9c 	bl	5b74 <usb_init>
	delay(275);
    4c3c:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    4c40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    4c44:	f7ff bf56 	b.w	4af4 <delay>
    4c48:	e000e108 	.word	0xe000e108
    4c4c:	40038004 	.word	0x40038004
    4c50:	40038014 	.word	0x40038014
    4c54:	40038024 	.word	0x40038024
    4c58:	4003802c 	.word	0x4003802c
    4c5c:	4003801c 	.word	0x4003801c
    4c60:	40038034 	.word	0x40038034
    4c64:	400b8000 	.word	0x400b8000
    4c68:	4003800c 	.word	0x4003800c
    4c6c:	40038008 	.word	0x40038008

00004c70 <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    4c70:	4a2b      	ldr	r2, [pc, #172]	; (4d20 <serial_begin+0xb0>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    4c72:	492c      	ldr	r1, [pc, #176]	; (4d24 <serial_begin+0xb4>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    4c74:	6813      	ldr	r3, [r2, #0]
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
    4c76:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    4c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4c7c:	6013      	str	r3, [r2, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    4c7e:	780a      	ldrb	r2, [r1, #0]
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    4c80:	4f29      	ldr	r7, [pc, #164]	; (4d28 <serial_begin+0xb8>)
	rx_buffer_tail = 0;
    4c82:	4e2a      	ldr	r6, [pc, #168]	; (4d2c <serial_begin+0xbc>)
	tx_buffer_head = 0;
    4c84:	4d2a      	ldr	r5, [pc, #168]	; (4d30 <serial_begin+0xc0>)
	tx_buffer_tail = 0;
    4c86:	4c2b      	ldr	r4, [pc, #172]	; (4d34 <serial_begin+0xc4>)
	transmitting = 0;
    4c88:	492b      	ldr	r1, [pc, #172]	; (4d38 <serial_begin+0xc8>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    4c8a:	2300      	movs	r3, #0
    4c8c:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    4c8e:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    4c90:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    4c92:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    4c94:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    4c96:	2a00      	cmp	r2, #0
    4c98:	d03d      	beq.n	4d16 <serial_begin+0xa6>
    4c9a:	2a15      	cmp	r2, #21
    4c9c:	d021      	beq.n	4ce2 <serial_begin+0x72>
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    4c9e:	4b27      	ldr	r3, [pc, #156]	; (4d3c <serial_begin+0xcc>)
    4ca0:	781b      	ldrb	r3, [r3, #0]
    4ca2:	2b01      	cmp	r3, #1
    4ca4:	d025      	beq.n	4cf2 <serial_begin+0x82>
    4ca6:	2b05      	cmp	r3, #5
    4ca8:	d030      	beq.n	4d0c <serial_begin+0x9c>
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    4caa:	281f      	cmp	r0, #31
    4cac:	d827      	bhi.n	4cfe <serial_begin+0x8e>
    4cae:	2000      	movs	r0, #0
    4cb0:	4602      	mov	r2, r0
    4cb2:	2501      	movs	r5, #1
	UART0_BDH = (divisor >> 13) & 0x1F;
    4cb4:	4b22      	ldr	r3, [pc, #136]	; (4d40 <serial_begin+0xd0>)
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    4cb6:	4c23      	ldr	r4, [pc, #140]	; (4d44 <serial_begin+0xd4>)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
    4cb8:	701a      	strb	r2, [r3, #0]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    4cba:	4923      	ldr	r1, [pc, #140]	; (4d48 <serial_begin+0xd8>)
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
    4cbc:	705d      	strb	r5, [r3, #1]
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    4cbe:	2204      	movs	r2, #4
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    4cc0:	f04f 0e02 	mov.w	lr, #2
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    4cc4:	2788      	movs	r7, #136	; 0x88
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    4cc6:	263c      	movs	r6, #60	; 0x3c
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    4cc8:	2540      	movs	r5, #64	; 0x40
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    4cca:	7298      	strb	r0, [r3, #10]
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    4ccc:	709a      	strb	r2, [r3, #2]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    4cce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    4cd2:	f883 e013 	strb.w	lr, [r3, #19]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    4cd6:	755a      	strb	r2, [r3, #21]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    4cd8:	741f      	strb	r7, [r3, #16]
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    4cda:	70de      	strb	r6, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    4cdc:	7025      	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    4cde:	6008      	str	r0, [r1, #0]
    4ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    4ce2:	4b1a      	ldr	r3, [pc, #104]	; (4d4c <serial_begin+0xdc>)
    4ce4:	f240 3213 	movw	r2, #787	; 0x313
    4ce8:	601a      	str	r2, [r3, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    4cea:	4b14      	ldr	r3, [pc, #80]	; (4d3c <serial_begin+0xcc>)
    4cec:	781b      	ldrb	r3, [r3, #0]
    4cee:	2b01      	cmp	r3, #1
    4cf0:	d1d9      	bne.n	4ca6 <serial_begin+0x36>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    4cf2:	4b17      	ldr	r3, [pc, #92]	; (4d50 <serial_begin+0xe0>)
    4cf4:	f44f 7251 	mov.w	r2, #836	; 0x344
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    4cf8:	281f      	cmp	r0, #31
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    4cfa:	601a      	str	r2, [r3, #0]
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    4cfc:	d9d7      	bls.n	4cae <serial_begin+0x3e>
    4cfe:	f3c0 3244 	ubfx	r2, r0, #13, #5
    4d02:	f3c0 1547 	ubfx	r5, r0, #5, #8
    4d06:	f000 001f 	and.w	r0, r0, #31
    4d0a:	e7d3      	b.n	4cb4 <serial_begin+0x44>
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    4d0c:	4b11      	ldr	r3, [pc, #68]	; (4d54 <serial_begin+0xe4>)
    4d0e:	f44f 7251 	mov.w	r2, #836	; 0x344
    4d12:	601a      	str	r2, [r3, #0]
    4d14:	e7c9      	b.n	4caa <serial_begin+0x3a>
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    4d16:	4b10      	ldr	r3, [pc, #64]	; (4d58 <serial_begin+0xe8>)
    4d18:	f240 3213 	movw	r2, #787	; 0x313
    4d1c:	601a      	str	r2, [r3, #0]
    4d1e:	e7be      	b.n	4c9e <serial_begin+0x2e>
    4d20:	40048034 	.word	0x40048034
    4d24:	1fff9b84 	.word	0x1fff9b84
    4d28:	1fff9b40 	.word	0x1fff9b40
    4d2c:	1fff9b41 	.word	0x1fff9b41
    4d30:	1fff9bd0 	.word	0x1fff9bd0
    4d34:	1fff9bc9 	.word	0x1fff9bc9
    4d38:	1fff9bc8 	.word	0x1fff9bc8
    4d3c:	1fff8734 	.word	0x1fff8734
    4d40:	4006a000 	.word	0x4006a000
    4d44:	e000e42d 	.word	0xe000e42d
    4d48:	e000e104 	.word	0xe000e104
    4d4c:	4004c018 	.word	0x4004c018
    4d50:	4004a044 	.word	0x4004a044
    4d54:	4004c01c 	.word	0x4004c01c
    4d58:	4004a040 	.word	0x4004a040

00004d5c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4d5c:	4a05      	ldr	r2, [pc, #20]	; (4d74 <serial_available+0x18>)
	tail = rx_buffer_tail;
    4d5e:	4b06      	ldr	r3, [pc, #24]	; (4d78 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4d60:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4d62:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4d64:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4d66:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4d68:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    4d6a:	bf38      	it	cc
    4d6c:	3040      	addcc	r0, #64	; 0x40
    4d6e:	1ac0      	subs	r0, r0, r3
}
    4d70:	4770      	bx	lr
    4d72:	bf00      	nop
    4d74:	1fff9b40 	.word	0x1fff9b40
    4d78:	1fff9b41 	.word	0x1fff9b41

00004d7c <serial_getchar>:

int serial_getchar(void)
{
    4d7c:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4d7e:	4b15      	ldr	r3, [pc, #84]	; (4dd4 <serial_getchar+0x58>)
	tail = rx_buffer_tail;
    4d80:	4c15      	ldr	r4, [pc, #84]	; (4dd8 <serial_getchar+0x5c>)
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4d82:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    4d84:	7823      	ldrb	r3, [r4, #0]
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4d86:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    4d88:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    4d8a:	429a      	cmp	r2, r3
    4d8c:	d01e      	beq.n	4dcc <serial_getchar+0x50>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    4d8e:	3301      	adds	r3, #1
    4d90:	2b3f      	cmp	r3, #63	; 0x3f
    4d92:	d90e      	bls.n	4db2 <serial_getchar+0x36>
	c = rx_buffer[tail];
    4d94:	4911      	ldr	r1, [pc, #68]	; (4ddc <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    4d96:	4b12      	ldr	r3, [pc, #72]	; (4de0 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4d98:	7808      	ldrb	r0, [r1, #0]
	rx_buffer_tail = tail;
	if (rts_pin) {
    4d9a:	6819      	ldr	r1, [r3, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    4d9c:	2300      	movs	r3, #0

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4d9e:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    4da0:	7023      	strb	r3, [r4, #0]
	if (rts_pin) {
    4da2:	b121      	cbz	r1, 4dae <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4da4:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    4da6:	2b1a      	cmp	r3, #26
    4da8:	dc01      	bgt.n	4dae <serial_getchar+0x32>
    4daa:	2300      	movs	r3, #0
    4dac:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    4dae:	bc30      	pop	{r4, r5}
    4db0:	4770      	bx	lr

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4db2:	480a      	ldr	r0, [pc, #40]	; (4ddc <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    4db4:	490a      	ldr	r1, [pc, #40]	; (4de0 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4db6:	5cc0      	ldrb	r0, [r0, r3]
	rx_buffer_tail = tail;
	if (rts_pin) {
    4db8:	6809      	ldr	r1, [r1, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    4dba:	b2dd      	uxtb	r5, r3

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4dbc:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    4dbe:	7025      	strb	r5, [r4, #0]
	if (rts_pin) {
    4dc0:	2900      	cmp	r1, #0
    4dc2:	d0f4      	beq.n	4dae <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
    4dc4:	429a      	cmp	r2, r3
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4dc6:	bf38      	it	cc
    4dc8:	3240      	addcc	r2, #64	; 0x40
    4dca:	e7eb      	b.n	4da4 <serial_getchar+0x28>
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4dcc:	f04f 30ff 	mov.w	r0, #4294967295
    4dd0:	e7ed      	b.n	4dae <serial_getchar+0x32>
    4dd2:	bf00      	nop
    4dd4:	1fff9b40 	.word	0x1fff9b40
    4dd8:	1fff9b41 	.word	0x1fff9b41
    4ddc:	1fff9b88 	.word	0x1fff9b88
    4de0:	1fff9b3c 	.word	0x1fff9b3c

00004de4 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4de4:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4de6:	4b38      	ldr	r3, [pc, #224]	; (4ec8 <uart0_status_isr+0xe4>)
    4de8:	791a      	ldrb	r2, [r3, #4]
    4dea:	f012 0f30 	tst.w	r2, #48	; 0x30
    4dee:	d02c      	beq.n	4e4a <uart0_status_isr+0x66>
		__disable_irq();
    4df0:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    4df2:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4df4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    4df8:	2900      	cmp	r1, #0
    4dfa:	d03d      	beq.n	4e78 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4dfc:	b662      	cpsie	i
			head = rx_buffer_head;
    4dfe:	4f33      	ldr	r7, [pc, #204]	; (4ecc <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4e00:	4933      	ldr	r1, [pc, #204]	; (4ed0 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4e02:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4e04:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4e06:	4e33      	ldr	r6, [pc, #204]	; (4ed4 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4e08:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4e0a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    4e0c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4e0e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4e10:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4e12:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4e14:	bf28      	it	cs
    4e16:	2300      	movcs	r3, #0
				if (newhead != tail) {
    4e18:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4e1a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4e1e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4e20:	bf1c      	itt	ne
    4e22:	54f1      	strbne	r1, [r6, r3]
    4e24:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    4e26:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4e2a:	d1f0      	bne.n	4e0e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4e2c:	4b2a      	ldr	r3, [pc, #168]	; (4ed8 <uart0_status_isr+0xf4>)
    4e2e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4e30:	b2c2      	uxtb	r2, r0
    4e32:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    4e34:	b14b      	cbz	r3, 4e4a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4e36:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4e38:	bf36      	itet	cc
    4e3a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4e3e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4e40:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4e42:	2827      	cmp	r0, #39	; 0x27
    4e44:	bfc4      	itt	gt
    4e46:	2201      	movgt	r2, #1
    4e48:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4e4a:	491f      	ldr	r1, [pc, #124]	; (4ec8 <uart0_status_isr+0xe4>)
    4e4c:	78ca      	ldrb	r2, [r1, #3]
    4e4e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4e50:	0615      	lsls	r5, r2, #24
    4e52:	d416      	bmi.n	4e82 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4e54:	0652      	lsls	r2, r2, #25
    4e56:	d50d      	bpl.n	4e74 <uart0_status_isr+0x90>
    4e58:	4b1b      	ldr	r3, [pc, #108]	; (4ec8 <uart0_status_isr+0xe4>)
    4e5a:	791b      	ldrb	r3, [r3, #4]
    4e5c:	065b      	lsls	r3, r3, #25
    4e5e:	d509      	bpl.n	4e74 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4e60:	4b1e      	ldr	r3, [pc, #120]	; (4edc <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4e62:	491f      	ldr	r1, [pc, #124]	; (4ee0 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4e64:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4e66:	2200      	movs	r2, #0
    4e68:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4e6a:	b103      	cbz	r3, 4e6e <uart0_status_isr+0x8a>
    4e6c:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    4e6e:	4b16      	ldr	r3, [pc, #88]	; (4ec8 <uart0_status_isr+0xe4>)
    4e70:	223c      	movs	r2, #60	; 0x3c
    4e72:	70da      	strb	r2, [r3, #3]
	}
}
    4e74:	bcf0      	pop	{r4, r5, r6, r7}
    4e76:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4e78:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    4e7a:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4e7c:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    4e7e:	b662      	cpsie	i
    4e80:	e7e3      	b.n	4e4a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4e82:	790b      	ldrb	r3, [r1, #4]
    4e84:	061c      	lsls	r4, r3, #24
    4e86:	d5e5      	bpl.n	4e54 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4e88:	4b16      	ldr	r3, [pc, #88]	; (4ee4 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    4e8a:	4e17      	ldr	r6, [pc, #92]	; (4ee8 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4e8c:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4e8e:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4e90:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    4e92:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    4e94:	429c      	cmp	r4, r3
    4e96:	d00e      	beq.n	4eb6 <uart0_status_isr+0xd2>
    4e98:	4d14      	ldr	r5, [pc, #80]	; (4eec <uart0_status_isr+0x108>)
    4e9a:	e001      	b.n	4ea0 <uart0_status_isr+0xbc>
    4e9c:	42a3      	cmp	r3, r4
    4e9e:	d00a      	beq.n	4eb6 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4ea0:	3301      	adds	r3, #1
    4ea2:	2b40      	cmp	r3, #64	; 0x40
    4ea4:	bf28      	it	cs
    4ea6:	2300      	movcs	r3, #0
			avail = UART0_S1;
    4ea8:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4eaa:	5ce8      	ldrb	r0, [r5, r3]
    4eac:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    4eae:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4eb0:	7d08      	ldrb	r0, [r1, #20]
    4eb2:	2807      	cmp	r0, #7
    4eb4:	d9f2      	bls.n	4e9c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4eb6:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4eb8:	4903      	ldr	r1, [pc, #12]	; (4ec8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    4eba:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4ebc:	790b      	ldrb	r3, [r1, #4]
    4ebe:	0618      	lsls	r0, r3, #24
    4ec0:	bf44      	itt	mi
    4ec2:	237c      	movmi	r3, #124	; 0x7c
    4ec4:	70cb      	strbmi	r3, [r1, #3]
    4ec6:	e7c5      	b.n	4e54 <uart0_status_isr+0x70>
    4ec8:	4006a000 	.word	0x4006a000
    4ecc:	1fff9b40 	.word	0x1fff9b40
    4ed0:	1fff9b41 	.word	0x1fff9b41
    4ed4:	1fff9b88 	.word	0x1fff9b88
    4ed8:	1fff9b3c 	.word	0x1fff9b3c
    4edc:	1fff9bcc 	.word	0x1fff9bcc
    4ee0:	1fff9bc8 	.word	0x1fff9bc8
    4ee4:	1fff9bd0 	.word	0x1fff9bd0
    4ee8:	1fff9bc9 	.word	0x1fff9bc9
    4eec:	1fff9b44 	.word	0x1fff9b44

00004ef0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    4ef0:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4ef2:	2b03      	cmp	r3, #3
    4ef4:	d814      	bhi.n	4f20 <usb_rx+0x30>
	__disable_irq();
    4ef6:	b672      	cpsid	i
	ret = rx_first[endpoint];
    4ef8:	490a      	ldr	r1, [pc, #40]	; (4f24 <usb_rx+0x34>)
    4efa:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    4efe:	b168      	cbz	r0, 4f1c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    4f00:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4f02:	4c09      	ldr	r4, [pc, #36]	; (4f28 <usb_rx+0x38>)
    4f04:	8805      	ldrh	r5, [r0, #0]
    4f06:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    4f0a:	6846      	ldr	r6, [r0, #4]
    4f0c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4f10:	1b52      	subs	r2, r2, r5
    4f12:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    4f16:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4f18:	bc70      	pop	{r4, r5, r6}
    4f1a:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    4f1c:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4f1e:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4f20:	2000      	movs	r0, #0
    4f22:	4770      	bx	lr
    4f24:	1fff9c2c 	.word	0x1fff9c2c
    4f28:	1fff9e20 	.word	0x1fff9e20

00004f2c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    4f2c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    4f2e:	2803      	cmp	r0, #3
    4f30:	d80b      	bhi.n	4f4a <usb_tx_packet_count+0x1e>
	__disable_irq();
    4f32:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    4f34:	4b07      	ldr	r3, [pc, #28]	; (4f54 <usb_tx_packet_count+0x28>)
    4f36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4f3a:	b143      	cbz	r3, 4f4e <usb_tx_packet_count+0x22>
    4f3c:	2000      	movs	r0, #0
    4f3e:	685b      	ldr	r3, [r3, #4]
    4f40:	3001      	adds	r0, #1
    4f42:	2b00      	cmp	r3, #0
    4f44:	d1fb      	bne.n	4f3e <usb_tx_packet_count+0x12>
	__enable_irq();
    4f46:	b662      	cpsie	i
	return count;
    4f48:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    4f4a:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    4f4c:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    4f4e:	4618      	mov	r0, r3
    4f50:	e7f9      	b.n	4f46 <usb_tx_packet_count+0x1a>
    4f52:	bf00      	nop
    4f54:	1fff9c80 	.word	0x1fff9c80

00004f58 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    4f58:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    4f5a:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4f5c:	4a2b      	ldr	r2, [pc, #172]	; (500c <usb_rx_memory+0xb4>)
    4f5e:	7813      	ldrb	r3, [r2, #0]
    4f60:	071d      	lsls	r5, r3, #28
    4f62:	d506      	bpl.n	4f72 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4f64:	4b2a      	ldr	r3, [pc, #168]	; (5010 <usb_rx_memory+0xb8>)
    4f66:	6a19      	ldr	r1, [r3, #32]
    4f68:	2900      	cmp	r1, #0
    4f6a:	d036      	beq.n	4fda <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4f6c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4f6e:	2900      	cmp	r1, #0
    4f70:	d041      	beq.n	4ff6 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4f72:	7853      	ldrb	r3, [r2, #1]
    4f74:	071c      	lsls	r4, r3, #28
    4f76:	d506      	bpl.n	4f86 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4f78:	4b25      	ldr	r3, [pc, #148]	; (5010 <usb_rx_memory+0xb8>)
    4f7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4f7c:	2900      	cmp	r1, #0
    4f7e:	d03e      	beq.n	4ffe <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4f80:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4f82:	2900      	cmp	r1, #0
    4f84:	d039      	beq.n	4ffa <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4f86:	7893      	ldrb	r3, [r2, #2]
    4f88:	0719      	lsls	r1, r3, #28
    4f8a:	d505      	bpl.n	4f98 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4f8c:	4b20      	ldr	r3, [pc, #128]	; (5010 <usb_rx_memory+0xb8>)
    4f8e:	6e19      	ldr	r1, [r3, #96]	; 0x60
    4f90:	2900      	cmp	r1, #0
    4f92:	d036      	beq.n	5002 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4f94:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4f96:	b189      	cbz	r1, 4fbc <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4f98:	78d3      	ldrb	r3, [r2, #3]
    4f9a:	071b      	lsls	r3, r3, #28
    4f9c:	d507      	bpl.n	4fae <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4f9e:	4b1c      	ldr	r3, [pc, #112]	; (5010 <usb_rx_memory+0xb8>)
    4fa0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4fa4:	b37a      	cbz	r2, 5006 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4fa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4faa:	2111      	movs	r1, #17
    4fac:	b13a      	cbz	r2, 4fbe <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    4fae:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4fb0:	4b18      	ldr	r3, [pc, #96]	; (5014 <usb_rx_memory+0xbc>)
    4fb2:	2200      	movs	r2, #0
    4fb4:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    4fb6:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    4fb8:	f000 be68 	b.w	5c8c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4fbc:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4fbe:	4c15      	ldr	r4, [pc, #84]	; (5014 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4fc0:	4d15      	ldr	r5, [pc, #84]	; (5018 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    4fc2:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4fc4:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4fc8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4fcc:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4fce:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4fd0:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4fd2:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4fd4:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    4fd6:	bc30      	pop	{r4, r5}
    4fd8:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    4fda:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4fdc:	4c0d      	ldr	r4, [pc, #52]	; (5014 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4fde:	4d0f      	ldr	r5, [pc, #60]	; (501c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    4fe0:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4fe2:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    4fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4fea:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4fec:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    4fee:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4ff0:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4ff2:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    4ff4:	e7ef      	b.n	4fd6 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4ff6:	2105      	movs	r1, #5
    4ff8:	e7e1      	b.n	4fbe <usb_rx_memory+0x66>
    4ffa:	2109      	movs	r1, #9
    4ffc:	e7df      	b.n	4fbe <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    4ffe:	2208      	movs	r2, #8
    5000:	e7ec      	b.n	4fdc <usb_rx_memory+0x84>
    5002:	220c      	movs	r2, #12
    5004:	e7ea      	b.n	4fdc <usb_rx_memory+0x84>
    5006:	2210      	movs	r2, #16
    5008:	e7e8      	b.n	4fdc <usb_rx_memory+0x84>
    500a:	bf00      	nop
    500c:	000092e8 	.word	0x000092e8
    5010:	1fff8000 	.word	0x1fff8000
    5014:	1fff9ca9 	.word	0x1fff9ca9
    5018:	004000c8 	.word	0x004000c8
    501c:	00400088 	.word	0x00400088

00005020 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    5020:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    5022:	2b03      	cmp	r3, #3
    5024:	d81d      	bhi.n	5062 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5026:	4a1b      	ldr	r2, [pc, #108]	; (5094 <usb_tx+0x74>)
    5028:	0140      	lsls	r0, r0, #5
    502a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    502e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5030:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    5032:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    5034:	4c18      	ldr	r4, [pc, #96]	; (5098 <usb_tx+0x78>)
    5036:	5ce2      	ldrb	r2, [r4, r3]
    5038:	2a03      	cmp	r2, #3
    503a:	d81b      	bhi.n	5074 <usb_tx+0x54>
    503c:	e8df f002 	tbb	[pc, r2]
    5040:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    5044:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5046:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    5048:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    504a:	f010 0f08 	tst.w	r0, #8
    504e:	bf14      	ite	ne
    5050:	23c8      	movne	r3, #200	; 0xc8
    5052:	2388      	moveq	r3, #136	; 0x88
    5054:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5058:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    505a:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    505c:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    505e:	b662      	cpsie	i
}
    5060:	bc30      	pop	{r4, r5}
    5062:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    5064:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    5066:	2202      	movs	r2, #2
		break;
    5068:	e7ed      	b.n	5046 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    506a:	2205      	movs	r2, #5
    506c:	e7eb      	b.n	5046 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    506e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    5070:	2204      	movs	r2, #4
		break;
    5072:	e7e8      	b.n	5046 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    5074:	4a09      	ldr	r2, [pc, #36]	; (509c <usb_tx+0x7c>)
    5076:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    507a:	b138      	cbz	r0, 508c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    507c:	4a08      	ldr	r2, [pc, #32]	; (50a0 <usb_tx+0x80>)
    507e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5082:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    5084:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    5088:	b662      	cpsie	i
		return;
    508a:	e7e9      	b.n	5060 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    508c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    5090:	4a03      	ldr	r2, [pc, #12]	; (50a0 <usb_tx+0x80>)
    5092:	e7f7      	b.n	5084 <usb_tx+0x64>
    5094:	1fff8000 	.word	0x1fff8000
    5098:	1fff9cb8 	.word	0x1fff9cb8
    509c:	1fff9c80 	.word	0x1fff9c80
    50a0:	1fff9c90 	.word	0x1fff9c90

000050a4 <usb_isr>:
}



void usb_isr(void)
{
    50a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    50a8:	f8df b30c 	ldr.w	fp, [pc, #780]	; 53b8 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    50ac:	f8df a30c 	ldr.w	sl, [pc, #780]	; 53bc <usb_isr+0x318>
}



void usb_isr(void)
{
    50b0:	b087      	sub	sp, #28
    50b2:	e044      	b.n	513e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    50b4:	4fab      	ldr	r7, [pc, #684]	; (5364 <usb_isr+0x2c0>)
    50b6:	ea4f 0893 	mov.w	r8, r3, lsr #2
    50ba:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    50be:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    50c0:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    50c4:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    50c8:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    50ca:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    50ce:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    50d2:	2b00      	cmp	r3, #0
    50d4:	f040 8102 	bne.w	52dc <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    50d8:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    50dc:	0c1b      	lsrs	r3, r3, #16
    50de:	b299      	uxth	r1, r3
    50e0:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    50e4:	2b00      	cmp	r3, #0
    50e6:	f000 80f0 	beq.w	52ca <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    50ea:	4b9f      	ldr	r3, [pc, #636]	; (5368 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    50ec:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    50f0:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    50f4:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    50f8:	2a00      	cmp	r2, #0
    50fa:	f000 82c5 	beq.w	5688 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    50fe:	4d9b      	ldr	r5, [pc, #620]	; (536c <usb_isr+0x2c8>)
    5100:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    5104:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    5106:	4c9a      	ldr	r4, [pc, #616]	; (5370 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    5108:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    510c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    5110:	4419      	add	r1, r3
    5112:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    5116:	f000 fd99 	bl	5c4c <usb_malloc>
					if (packet) {
    511a:	2800      	cmp	r0, #0
    511c:	f000 82ad 	beq.w	567a <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    5120:	4a94      	ldr	r2, [pc, #592]	; (5374 <usb_isr+0x2d0>)
    5122:	4b95      	ldr	r3, [pc, #596]	; (5378 <usb_isr+0x2d4>)
    5124:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    5128:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    512c:	bf18      	it	ne
    512e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    5130:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    5134:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    5138:	2308      	movs	r3, #8
    513a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    513e:	f89b 4000 	ldrb.w	r4, [fp]
    5142:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    5144:	0761      	lsls	r1, r4, #29
    5146:	d51a      	bpl.n	517e <usb_isr+0xda>
		if (usb_configuration) {
    5148:	4b8c      	ldr	r3, [pc, #560]	; (537c <usb_isr+0x2d8>)
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	b1a3      	cbz	r3, 5178 <usb_isr+0xd4>
			t = usb_reboot_timer;
    514e:	498c      	ldr	r1, [pc, #560]	; (5380 <usb_isr+0x2dc>)
    5150:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    5152:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5156:	b122      	cbz	r2, 5162 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    5158:	3b01      	subs	r3, #1
    515a:	b2db      	uxtb	r3, r3
    515c:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    515e:	b903      	cbnz	r3, 5162 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    5160:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    5162:	4988      	ldr	r1, [pc, #544]	; (5384 <usb_isr+0x2e0>)
    5164:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    5166:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    516a:	b12a      	cbz	r2, 5178 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    516c:	3b01      	subs	r3, #1
    516e:	b2db      	uxtb	r3, r3
    5170:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    5172:	2b00      	cmp	r3, #0
    5174:	f000 8257 	beq.w	5626 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    5178:	2304      	movs	r3, #4
    517a:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    517e:	f004 0308 	and.w	r3, r4, #8
    5182:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5186:	2b00      	cmp	r3, #0
    5188:	f000 80cc 	beq.w	5324 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    518c:	f89a 3000 	ldrb.w	r3, [sl]
    5190:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    5192:	091e      	lsrs	r6, r3, #4
    5194:	d18e      	bne.n	50b4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    5196:	089c      	lsrs	r4, r3, #2
    5198:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 5364 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    519c:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    51a0:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    51a4:	f3c2 0283 	ubfx	r2, r2, #2, #4
    51a8:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    51aa:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    51ac:	2a0c      	cmp	r2, #12
    51ae:	f200 8088 	bhi.w	52c2 <usb_isr+0x21e>
    51b2:	e8df f002 	tbb	[pc, r2]
    51b6:	7c7c      	.short	0x7c7c
    51b8:	86868686 	.word	0x86868686
    51bc:	86478686 	.word	0x86478686
    51c0:	8686      	.short	0x8686
    51c2:	07          	.byte	0x07
    51c3:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    51c4:	6808      	ldr	r0, [r1, #0]
    51c6:	4d70      	ldr	r5, [pc, #448]	; (5388 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    51c8:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    51ca:	4f70      	ldr	r7, [pc, #448]	; (538c <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    51cc:	4e70      	ldr	r6, [pc, #448]	; (5390 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    51ce:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    51d0:	b281      	uxth	r1, r0
    51d2:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    51d6:	4b67      	ldr	r3, [pc, #412]	; (5374 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    51d8:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    51da:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    51de:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    51e0:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    51e2:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    51e6:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    51e8:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    51ec:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    51f0:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    51f4:	4c5b      	ldr	r4, [pc, #364]	; (5364 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    51f6:	f200 80e3 	bhi.w	53c0 <usb_isr+0x31c>
    51fa:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    51fe:	f080 8346 	bcs.w	588e <usb_isr+0x7ea>
    5202:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    5206:	f000 82fc 	beq.w	5802 <usb_isr+0x75e>
    520a:	f200 828d 	bhi.w	5728 <usb_isr+0x684>
    520e:	2980      	cmp	r1, #128	; 0x80
    5210:	f000 8377 	beq.w	5902 <usb_isr+0x85e>
    5214:	2982      	cmp	r1, #130	; 0x82
    5216:	f040 82fa 	bne.w	580e <usb_isr+0x76a>
    521a:	88a9      	ldrh	r1, [r5, #4]
    521c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    5220:	2904      	cmp	r1, #4
    5222:	f200 82f4 	bhi.w	580e <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    5226:	485b      	ldr	r0, [pc, #364]	; (5394 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    5228:	4c5b      	ldr	r4, [pc, #364]	; (5398 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    522a:	0089      	lsls	r1, r1, #2
    522c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    522e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    5230:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    5232:	7802      	ldrb	r2, [r0, #0]
    5234:	0793      	lsls	r3, r2, #30
    5236:	f140 8458 	bpl.w	5aea <usb_isr+0xa46>
    523a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    523e:	f04f 0e02 	mov.w	lr, #2
    5242:	e342      	b.n	58ca <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    5244:	4f51      	ldr	r7, [pc, #324]	; (538c <usb_isr+0x2e8>)
    5246:	683a      	ldr	r2, [r7, #0]
		if (data) {
    5248:	b332      	cbz	r2, 5298 <usb_isr+0x1f4>
			size = ep0_tx_len;
    524a:	4b54      	ldr	r3, [pc, #336]	; (539c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    524c:	4e50      	ldr	r6, [pc, #320]	; (5390 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    524e:	4954      	ldr	r1, [pc, #336]	; (53a0 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    5250:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5252:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5254:	780d      	ldrb	r5, [r1, #0]
    5256:	2840      	cmp	r0, #64	; 0x40
    5258:	4686      	mov	lr, r0
    525a:	f045 0802 	orr.w	r8, r5, #2
    525e:	bf28      	it	cs
    5260:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5264:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    5266:	f084 0401 	eor.w	r4, r4, #1
    526a:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    526c:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5270:	bf0c      	ite	eq
    5272:	2488      	moveq	r4, #136	; 0x88
    5274:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5276:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    527a:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    527c:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5280:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5284:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    5286:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5288:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    528c:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    528e:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    5290:	2800      	cmp	r0, #0
    5292:	f000 8145 	beq.w	5520 <usb_isr+0x47c>
    5296:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    5298:	4b3b      	ldr	r3, [pc, #236]	; (5388 <usb_isr+0x2e4>)
    529a:	881a      	ldrh	r2, [r3, #0]
    529c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    52a0:	d10f      	bne.n	52c2 <usb_isr+0x21e>
			setup.bRequest = 0;
    52a2:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    52a4:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    52a6:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    52a8:	4b3e      	ldr	r3, [pc, #248]	; (53a4 <usb_isr+0x300>)
    52aa:	701a      	strb	r2, [r3, #0]
    52ac:	e009      	b.n	52c2 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    52ae:	4a36      	ldr	r2, [pc, #216]	; (5388 <usb_isr+0x2e4>)
    52b0:	8810      	ldrh	r0, [r2, #0]
    52b2:	f242 0221 	movw	r2, #8225	; 0x2021
    52b6:	4290      	cmp	r0, r2
    52b8:	f000 8137 	beq.w	552a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    52bc:	4a2d      	ldr	r2, [pc, #180]	; (5374 <usb_isr+0x2d0>)
    52be:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    52c2:	4a39      	ldr	r2, [pc, #228]	; (53a8 <usb_isr+0x304>)
    52c4:	2301      	movs	r3, #1
    52c6:	7013      	strb	r3, [r2, #0]
    52c8:	e736      	b.n	5138 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    52ca:	4a2a      	ldr	r2, [pc, #168]	; (5374 <usb_isr+0x2d0>)
    52cc:	4b2a      	ldr	r3, [pc, #168]	; (5378 <usb_isr+0x2d4>)
    52ce:	f019 0f08 	tst.w	r9, #8
    52d2:	bf18      	it	ne
    52d4:	4613      	movne	r3, r2
    52d6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    52da:	e72d      	b.n	5138 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    52dc:	f000 fcd6 	bl	5c8c <usb_free>
				packet = tx_first[endpoint];
    52e0:	4a32      	ldr	r2, [pc, #200]	; (53ac <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    52e2:	4933      	ldr	r1, [pc, #204]	; (53b0 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    52e4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    52e8:	2b00      	cmp	r3, #0
    52ea:	f000 81d1 	beq.w	5690 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    52ee:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    52f0:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    52f2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    52f6:	f103 0208 	add.w	r2, r3, #8
    52fa:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    52fe:	2c03      	cmp	r4, #3
    5300:	d805      	bhi.n	530e <usb_isr+0x26a>
    5302:	e8df f004 	tbb	[pc, r4]
    5306:	022c      	.short	0x022c
    5308:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    530a:	2202      	movs	r2, #2
    530c:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    530e:	881a      	ldrh	r2, [r3, #0]
    5310:	f019 0f08 	tst.w	r9, #8
    5314:	bf0c      	ite	eq
    5316:	2388      	moveq	r3, #136	; 0x88
    5318:	23c8      	movne	r3, #200	; 0xc8
    531a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    531e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    5322:	e709      	b.n	5138 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    5324:	07e0      	lsls	r0, r4, #31
    5326:	f100 8181 	bmi.w	562c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    532a:	0621      	lsls	r1, r4, #24
    532c:	f100 81f2 	bmi.w	5714 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5330:	07a2      	lsls	r2, r4, #30
    5332:	d506      	bpl.n	5342 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    5334:	4a1f      	ldr	r2, [pc, #124]	; (53b4 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5336:	4920      	ldr	r1, [pc, #128]	; (53b8 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    5338:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    533a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    533c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    533e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5340:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    5342:	06e3      	lsls	r3, r4, #27
    5344:	d502      	bpl.n	534c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    5346:	4b1c      	ldr	r3, [pc, #112]	; (53b8 <usb_isr+0x314>)
    5348:	2210      	movs	r2, #16
    534a:	701a      	strb	r2, [r3, #0]
	}

}
    534c:	b007      	add	sp, #28
    534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    5352:	2204      	movs	r2, #4
    5354:	558a      	strb	r2, [r1, r6]
						break;
    5356:	e7da      	b.n	530e <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    5358:	2205      	movs	r2, #5
    535a:	558a      	strb	r2, [r1, r6]
						break;
    535c:	e7d7      	b.n	530e <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    535e:	2203      	movs	r2, #3
    5360:	558a      	strb	r2, [r1, r6]
						break;
    5362:	e7d4      	b.n	530e <usb_isr+0x26a>
    5364:	1fff8000 	.word	0x1fff8000
    5368:	1fff9c2c 	.word	0x1fff9c2c
    536c:	1fff9bd8 	.word	0x1fff9bd8
    5370:	1fff9e20 	.word	0x1fff9e20
    5374:	004000c8 	.word	0x004000c8
    5378:	00400088 	.word	0x00400088
    537c:	1fff9cb4 	.word	0x1fff9cb4
    5380:	1fff9c3d 	.word	0x1fff9c3d
    5384:	1fff9cbc 	.word	0x1fff9cbc
    5388:	1fff9ca0 	.word	0x1fff9ca0
    538c:	1fff9bd4 	.word	0x1fff9bd4
    5390:	1fff9c3c 	.word	0x1fff9c3c
    5394:	400720c0 	.word	0x400720c0
    5398:	1fff9cac 	.word	0x1fff9cac
    539c:	1fff9be8 	.word	0x1fff9be8
    53a0:	1fff9ca8 	.word	0x1fff9ca8
    53a4:	40072098 	.word	0x40072098
    53a8:	40072094 	.word	0x40072094
    53ac:	1fff9c80 	.word	0x1fff9c80
    53b0:	1fff9cb8 	.word	0x1fff9cb8
    53b4:	40072088 	.word	0x40072088
    53b8:	40072080 	.word	0x40072080
    53bc:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    53c0:	f242 0021 	movw	r0, #8225	; 0x2021
    53c4:	4281      	cmp	r1, r0
    53c6:	f000 812a 	beq.w	561e <usb_isr+0x57a>
    53ca:	f200 80d8 	bhi.w	557e <usb_isr+0x4da>
    53ce:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    53d2:	f000 8276 	beq.w	58c2 <usb_isr+0x81e>
    53d6:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    53da:	f040 8218 	bne.w	580e <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    53de:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    53e0:	49b3      	ldr	r1, [pc, #716]	; (56b0 <usb_isr+0x60c>)
    53e2:	78a8      	ldrb	r0, [r5, #2]
    53e4:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    53e6:	0612      	lsls	r2, r2, #24
    53e8:	f100 833a 	bmi.w	5a60 <usb_isr+0x9bc>
    53ec:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    53f0:	49b0      	ldr	r1, [pc, #704]	; (56b4 <usb_isr+0x610>)
    53f2:	0613      	lsls	r3, r2, #24
    53f4:	f100 830c 	bmi.w	5a10 <usb_isr+0x96c>
    53f8:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    53fc:	49ad      	ldr	r1, [pc, #692]	; (56b4 <usb_isr+0x610>)
    53fe:	0615      	lsls	r5, r2, #24
    5400:	f100 8301 	bmi.w	5a06 <usb_isr+0x962>
    5404:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    5408:	49aa      	ldr	r1, [pc, #680]	; (56b4 <usb_isr+0x610>)
    540a:	0614      	lsls	r4, r2, #24
    540c:	f100 82f6 	bmi.w	59fc <usb_isr+0x958>
    5410:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    5414:	49a7      	ldr	r1, [pc, #668]	; (56b4 <usb_isr+0x610>)
    5416:	0610      	lsls	r0, r2, #24
    5418:	f100 834a 	bmi.w	5ab0 <usb_isr+0xa0c>
    541c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    5420:	49a4      	ldr	r1, [pc, #656]	; (56b4 <usb_isr+0x610>)
    5422:	0612      	lsls	r2, r2, #24
    5424:	f100 833f 	bmi.w	5aa6 <usb_isr+0xa02>
    5428:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    542c:	49a1      	ldr	r1, [pc, #644]	; (56b4 <usb_isr+0x610>)
    542e:	0613      	lsls	r3, r2, #24
    5430:	f100 8334 	bmi.w	5a9c <usb_isr+0x9f8>
    5434:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    5438:	499e      	ldr	r1, [pc, #632]	; (56b4 <usb_isr+0x610>)
    543a:	0615      	lsls	r5, r2, #24
    543c:	f100 8329 	bmi.w	5a92 <usb_isr+0x9ee>
    5440:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    5444:	499b      	ldr	r1, [pc, #620]	; (56b4 <usb_isr+0x610>)
    5446:	0614      	lsls	r4, r2, #24
    5448:	f100 831e 	bmi.w	5a88 <usb_isr+0x9e4>
    544c:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    5450:	4998      	ldr	r1, [pc, #608]	; (56b4 <usb_isr+0x610>)
    5452:	0610      	lsls	r0, r2, #24
    5454:	f100 8313 	bmi.w	5a7e <usb_isr+0x9da>
    5458:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    545c:	4995      	ldr	r1, [pc, #596]	; (56b4 <usb_isr+0x610>)
    545e:	0612      	lsls	r2, r2, #24
    5460:	f100 8308 	bmi.w	5a74 <usb_isr+0x9d0>
    5464:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    5468:	4992      	ldr	r1, [pc, #584]	; (56b4 <usb_isr+0x610>)
    546a:	0613      	lsls	r3, r2, #24
    546c:	f100 82fd 	bmi.w	5a6a <usb_isr+0x9c6>
    5470:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    5474:	498f      	ldr	r1, [pc, #572]	; (56b4 <usb_isr+0x610>)
    5476:	0615      	lsls	r5, r2, #24
    5478:	f100 8331 	bmi.w	5ade <usb_isr+0xa3a>
    547c:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    5480:	498c      	ldr	r1, [pc, #560]	; (56b4 <usb_isr+0x610>)
    5482:	0614      	lsls	r4, r2, #24
    5484:	f100 8325 	bmi.w	5ad2 <usb_isr+0xa2e>
    5488:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    548c:	4989      	ldr	r1, [pc, #548]	; (56b4 <usb_isr+0x610>)
    548e:	0610      	lsls	r0, r2, #24
    5490:	f100 8319 	bmi.w	5ac6 <usb_isr+0xa22>
    5494:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    5498:	4986      	ldr	r1, [pc, #536]	; (56b4 <usb_isr+0x610>)
    549a:	0612      	lsls	r2, r2, #24
    549c:	f100 830d 	bmi.w	5aba <usb_isr+0xa16>
    54a0:	4885      	ldr	r0, [pc, #532]	; (56b8 <usb_isr+0x614>)
    54a2:	4a86      	ldr	r2, [pc, #536]	; (56bc <usb_isr+0x618>)
    54a4:	4986      	ldr	r1, [pc, #536]	; (56c0 <usb_isr+0x61c>)
    54a6:	9001      	str	r0, [sp, #4]
    54a8:	4886      	ldr	r0, [pc, #536]	; (56c4 <usb_isr+0x620>)
    54aa:	4d87      	ldr	r5, [pc, #540]	; (56c8 <usb_isr+0x624>)
    54ac:	4c87      	ldr	r4, [pc, #540]	; (56cc <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    54ae:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    54b0:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    54b2:	9605      	str	r6, [sp, #20]
    54b4:	9502      	str	r5, [sp, #8]
    54b6:	4680      	mov	r8, r0
    54b8:	460f      	mov	r7, r1
    54ba:	4616      	mov	r6, r2
    54bc:	461d      	mov	r5, r3
    54be:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    54c0:	6830      	ldr	r0, [r6, #0]
			while (p) {
    54c2:	b128      	cbz	r0, 54d0 <usb_isr+0x42c>
				n = p->next;
    54c4:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    54c6:	f000 fbe1 	bl	5c8c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    54ca:	4620      	mov	r0, r4
    54cc:	2c00      	cmp	r4, #0
    54ce:	d1f9      	bne.n	54c4 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    54d0:	2300      	movs	r3, #0
    54d2:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    54d4:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    54d6:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    54d8:	461a      	mov	r2, r3
    54da:	2300      	movs	r3, #0
    54dc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    54e0:	b128      	cbz	r0, 54ee <usb_isr+0x44a>
				n = p->next;
    54e2:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    54e4:	f000 fbd2 	bl	5c8c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    54e8:	4620      	mov	r0, r4
    54ea:	2c00      	cmp	r4, #0
    54ec:	d1f9      	bne.n	54e2 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    54ee:	2200      	movs	r2, #0
    54f0:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    54f2:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    54f4:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    54f8:	4611      	mov	r1, r2
    54fa:	2200      	movs	r2, #0
    54fc:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    5500:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    5502:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    5504:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    5506:	f04f 0100 	mov.w	r1, #0
    550a:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    550e:	2b03      	cmp	r3, #3
    5510:	f200 812b 	bhi.w	576a <usb_isr+0x6c6>
    5514:	e8df f013 	tbh	[pc, r3, lsl #1]
    5518:	01250170 	.word	0x01250170
    551c:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    5520:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5524:	bf18      	it	ne
    5526:	2200      	movne	r2, #0
    5528:	e6b5      	b.n	5296 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    552a:	4a69      	ldr	r2, [pc, #420]	; (56d0 <usb_isr+0x62c>)
    552c:	780d      	ldrb	r5, [r1, #0]
    552e:	7848      	ldrb	r0, [r1, #1]
    5530:	7015      	strb	r5, [r2, #0]
    5532:	7050      	strb	r0, [r2, #1]
    5534:	788d      	ldrb	r5, [r1, #2]
    5536:	78c8      	ldrb	r0, [r1, #3]
    5538:	7095      	strb	r5, [r2, #2]
    553a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    553c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    553e:	790d      	ldrb	r5, [r1, #4]
    5540:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5542:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    5544:	794d      	ldrb	r5, [r1, #5]
    5546:	7989      	ldrb	r1, [r1, #6]
    5548:	7155      	strb	r5, [r2, #5]
    554a:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    554c:	f000 819b 	beq.w	5886 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5550:	4960      	ldr	r1, [pc, #384]	; (56d4 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5552:	4e61      	ldr	r6, [pc, #388]	; (56d8 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5554:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5556:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5558:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    555c:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    555e:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5562:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5564:	bf0c      	ite	eq
    5566:	2188      	moveq	r1, #136	; 0x88
    5568:	21c8      	movne	r1, #200	; 0xc8
    556a:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    556e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    5572:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5576:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    5578:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    557a:	6051      	str	r1, [r2, #4]
    557c:	e69e      	b.n	52bc <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    557e:	f242 2021 	movw	r0, #8737	; 0x2221
    5582:	4281      	cmp	r1, r0
    5584:	f040 81cb 	bne.w	591e <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    5588:	4b54      	ldr	r3, [pc, #336]	; (56dc <usb_isr+0x638>)
    558a:	4c55      	ldr	r4, [pc, #340]	; (56e0 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    558c:	4955      	ldr	r1, [pc, #340]	; (56e4 <usb_isr+0x640>)
    558e:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    5590:	681d      	ldr	r5, [r3, #0]
    5592:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    5594:	f8cd e004 	str.w	lr, [sp, #4]
    5598:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    559a:	2000      	movs	r0, #0
    559c:	9002      	str	r0, [sp, #8]
    559e:	4680      	mov	r8, r0
    55a0:	4684      	mov	ip, r0
    55a2:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    55a4:	494b      	ldr	r1, [pc, #300]	; (56d4 <usb_isr+0x630>)
    55a6:	780d      	ldrb	r5, [r1, #0]
    55a8:	f045 0e02 	orr.w	lr, r5, #2
    55ac:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    55b0:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55b2:	9b01      	ldr	r3, [sp, #4]
    55b4:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    55b6:	9b03      	ldr	r3, [sp, #12]
    55b8:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55ba:	bf0c      	ite	eq
    55bc:	2488      	moveq	r4, #136	; 0x88
    55be:	24c8      	movne	r4, #200	; 0xc8
    55c0:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    55c4:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55c8:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    55cc:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    55ce:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55d0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 56b4 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    55d4:	4b40      	ldr	r3, [pc, #256]	; (56d8 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    55d6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 56d4 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    55da:	2800      	cmp	r0, #0
    55dc:	f040 811e 	bne.w	581c <usb_isr+0x778>
    55e0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    55e4:	d11b      	bne.n	561e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    55e6:	f044 0c02 	orr.w	ip, r4, #2
    55ea:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    55ee:	9c02      	ldr	r4, [sp, #8]
    55f0:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 56b4 <usb_isr+0x610>
    55f4:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55f6:	2a00      	cmp	r2, #0
    55f8:	f040 8126 	bne.w	5848 <usb_isr+0x7a4>
    55fc:	0402      	lsls	r2, r0, #16
    55fe:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    5602:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5606:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    560a:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    560c:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    560e:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5610:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    5612:	2840      	cmp	r0, #64	; 0x40
    5614:	d103      	bne.n	561e <usb_isr+0x57a>
    5616:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    5618:	4a33      	ldr	r2, [pc, #204]	; (56e8 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    561a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    561c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    561e:	4a33      	ldr	r2, [pc, #204]	; (56ec <usb_isr+0x648>)
    5620:	2301      	movs	r3, #1
    5622:	7013      	strb	r3, [r2, #0]
    5624:	e64d      	b.n	52c2 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    5626:	f000 fc9d 	bl	5f64 <usb_serial_flush_callback>
    562a:	e5a5      	b.n	5178 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    562c:	4b21      	ldr	r3, [pc, #132]	; (56b4 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    562e:	482f      	ldr	r0, [pc, #188]	; (56ec <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    5630:	4928      	ldr	r1, [pc, #160]	; (56d4 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    5632:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5634:	f04f 0e02 	mov.w	lr, #2
    5638:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    563c:	4f2c      	ldr	r7, [pc, #176]	; (56f0 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    563e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5640:	492c      	ldr	r1, [pc, #176]	; (56f4 <usb_isr+0x650>)
    5642:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    5644:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5646:	4e2c      	ldr	r6, [pc, #176]	; (56f8 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    5648:	4d2c      	ldr	r5, [pc, #176]	; (56fc <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    564a:	4c2d      	ldr	r4, [pc, #180]	; (5700 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    564c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    564e:	210d      	movs	r1, #13
    5650:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5652:	21ff      	movs	r1, #255	; 0xff
    5654:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5656:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 5710 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    565a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    565c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    565e:	4d29      	ldr	r5, [pc, #164]	; (5704 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5660:	4a29      	ldr	r2, [pc, #164]	; (5708 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5662:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5666:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5668:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    566a:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    566e:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5670:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5672:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    5674:	b007      	add	sp, #28
    5676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    567a:	4a24      	ldr	r2, [pc, #144]	; (570c <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    567c:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    5680:	7813      	ldrb	r3, [r2, #0]
    5682:	3301      	adds	r3, #1
    5684:	7013      	strb	r3, [r2, #0]
    5686:	e557      	b.n	5138 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    5688:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    568c:	4d0e      	ldr	r5, [pc, #56]	; (56c8 <usb_isr+0x624>)
    568e:	e53a      	b.n	5106 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    5690:	5d8b      	ldrb	r3, [r1, r6]
    5692:	2b03      	cmp	r3, #3
    5694:	f200 80f0 	bhi.w	5878 <usb_isr+0x7d4>
    5698:	a201      	add	r2, pc, #4	; (adr r2, 56a0 <usb_isr+0x5fc>)
    569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    569e:	bf00      	nop
    56a0:	00005139 	.word	0x00005139
    56a4:	00005139 	.word	0x00005139
    56a8:	0000575d 	.word	0x0000575d
    56ac:	00005757 	.word	0x00005757
    56b0:	1fff9cb4 	.word	0x1fff9cb4
    56b4:	1fff8000 	.word	0x1fff8000
    56b8:	1fff9c90 	.word	0x1fff9c90
    56bc:	1fff9c2c 	.word	0x1fff9c2c
    56c0:	1fff9c80 	.word	0x1fff9c80
    56c4:	1fff9cb8 	.word	0x1fff9cb8
    56c8:	1fff9bd8 	.word	0x1fff9bd8
    56cc:	1fff9e20 	.word	0x1fff9e20
    56d0:	1fff9e28 	.word	0x1fff9e28
    56d4:	1fff9ca8 	.word	0x1fff9ca8
    56d8:	1fff9c3c 	.word	0x1fff9c3c
    56dc:	1fff9b38 	.word	0x1fff9b38
    56e0:	1fff9e30 	.word	0x1fff9e30
    56e4:	1fff9ccc 	.word	0x1fff9ccc
    56e8:	1fff9be8 	.word	0x1fff9be8
    56ec:	40072094 	.word	0x40072094
    56f0:	400720c0 	.word	0x400720c0
    56f4:	00400088 	.word	0x00400088
    56f8:	40072088 	.word	0x40072088
    56fc:	40072080 	.word	0x40072080
    5700:	40072098 	.word	0x40072098
    5704:	1fff9bec 	.word	0x1fff9bec
    5708:	1fff9c40 	.word	0x1fff9c40
    570c:	1fff9ca9 	.word	0x1fff9ca9
    5710:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5714:	49c1      	ldr	r1, [pc, #772]	; (5a1c <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    5716:	4bc2      	ldr	r3, [pc, #776]	; (5a20 <usb_isr+0x97c>)
    5718:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    571a:	200d      	movs	r0, #13
    571c:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    571e:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5720:	07a2      	lsls	r2, r4, #30
    5722:	f57f ae0e 	bpl.w	5342 <usb_isr+0x29e>
    5726:	e605      	b.n	5334 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5728:	f240 3202 	movw	r2, #770	; 0x302
    572c:	4291      	cmp	r1, r2
    572e:	f040 80ee 	bne.w	590e <usb_isr+0x86a>
    5732:	88a9      	ldrh	r1, [r5, #4]
    5734:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5738:	2904      	cmp	r1, #4
    573a:	d868      	bhi.n	580e <usb_isr+0x76a>
    573c:	886a      	ldrh	r2, [r5, #2]
    573e:	2a00      	cmp	r2, #0
    5740:	d165      	bne.n	580e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    5742:	48b6      	ldr	r0, [pc, #728]	; (5a1c <usb_isr+0x978>)
    5744:	f8cd e004 	str.w	lr, [sp, #4]
    5748:	0089      	lsls	r1, r1, #2
    574a:	4408      	add	r0, r1
    574c:	7801      	ldrb	r1, [r0, #0]
    574e:	f041 0102 	orr.w	r1, r1, #2
    5752:	7001      	strb	r1, [r0, #0]
    5754:	e721      	b.n	559a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5756:	2301      	movs	r3, #1
    5758:	558b      	strb	r3, [r1, r6]
						break;
    575a:	e4ed      	b.n	5138 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    575c:	2300      	movs	r3, #0
    575e:	558b      	strb	r3, [r1, r6]
						break;
    5760:	e4ea      	b.n	5138 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5762:	f04f 0301 	mov.w	r3, #1
    5766:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    576a:	3501      	adds	r5, #1
    576c:	2d04      	cmp	r5, #4
    576e:	f106 0604 	add.w	r6, r6, #4
    5772:	f107 0704 	add.w	r7, r7, #4
    5776:	f108 0801 	add.w	r8, r8, #1
    577a:	f47f aea1 	bne.w	54c0 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    577e:	4ca9      	ldr	r4, [pc, #676]	; (5a24 <usb_isr+0x980>)
			*reg = epconf;
    5780:	4ba9      	ldr	r3, [pc, #676]	; (5a28 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5782:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    5784:	4da9      	ldr	r5, [pc, #676]	; (5a2c <usb_isr+0x988>)
    5786:	9f04      	ldr	r7, [sp, #16]
    5788:	9e05      	ldr	r6, [sp, #20]
    578a:	2100      	movs	r1, #0
    578c:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    578e:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    5790:	0713      	lsls	r3, r2, #28
    5792:	f100 8105 	bmi.w	59a0 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5796:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    5798:	49a5      	ldr	r1, [pc, #660]	; (5a30 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    579a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 5a3c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    579e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57a0:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57a2:	f04f 0100 	mov.w	r1, #0
    57a6:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    57aa:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57ae:	f100 80e0 	bmi.w	5972 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    57b2:	49a0      	ldr	r1, [pc, #640]	; (5a34 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    57b4:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    57b6:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57b8:	2100      	movs	r1, #0
    57ba:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    57be:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57c2:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57c4:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5a3c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57c8:	f100 8101 	bmi.w	59ce <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    57cc:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    57ce:	499a      	ldr	r1, [pc, #616]	; (5a38 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57d0:	4c9a      	ldr	r4, [pc, #616]	; (5a3c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    57d2:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57d4:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57d6:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57d8:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    57dc:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57e0:	f100 80b0 	bmi.w	5944 <usb_isr+0x8a0>
    57e4:	7833      	ldrb	r3, [r6, #0]
    57e6:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57e8:	2100      	movs	r1, #0
    57ea:	f083 0201 	eor.w	r2, r3, #1
    57ee:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    57f2:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    57f6:	e6d0      	b.n	559a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    57f8:	f04f 0300 	mov.w	r3, #0
    57fc:	f888 3000 	strb.w	r3, [r8]
    5800:	e7b3      	b.n	576a <usb_isr+0x6c6>
    5802:	88a9      	ldrh	r1, [r5, #4]
    5804:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5808:	2904      	cmp	r1, #4
    580a:	f240 808d 	bls.w	5928 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    580e:	4a83      	ldr	r2, [pc, #524]	; (5a1c <usb_isr+0x978>)
    5810:	230f      	movs	r3, #15
    5812:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5814:	4a8a      	ldr	r2, [pc, #552]	; (5a40 <usb_isr+0x99c>)
    5816:	2301      	movs	r3, #1
    5818:	7013      	strb	r3, [r2, #0]
    581a:	e552      	b.n	52c2 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    581c:	2840      	cmp	r0, #64	; 0x40
    581e:	f67f aee2 	bls.w	55e6 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5822:	f044 0402 	orr.w	r4, r4, #2
    5826:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    582a:	9e02      	ldr	r6, [sp, #8]
    582c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    582e:	b1ba      	cbz	r2, 5860 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    5830:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5834:	4a83      	ldr	r2, [pc, #524]	; (5a44 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    5836:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5838:	4633      	mov	r3, r6
    583a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    583c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5840:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5842:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5846:	e6e7      	b.n	5618 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    5848:	f89d 3004 	ldrb.w	r3, [sp, #4]
    584c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    584e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5850:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5852:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5854:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5858:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    585a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    585e:	e6d8      	b.n	5612 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    5860:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5864:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5866:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5868:	4a77      	ldr	r2, [pc, #476]	; (5a48 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    586a:	f888 5000 	strb.w	r5, [r8]
    586e:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5870:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5872:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5876:	e6cf      	b.n	5618 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    5878:	f019 0f08 	tst.w	r9, #8
    587c:	bf0c      	ite	eq
    587e:	2302      	moveq	r3, #2
    5880:	2303      	movne	r3, #3
    5882:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    5884:	e458      	b.n	5138 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5886:	4a71      	ldr	r2, [pc, #452]	; (5a4c <usb_isr+0x9a8>)
    5888:	210f      	movs	r1, #15
    588a:	7011      	strb	r1, [r2, #0]
    588c:	e660      	b.n	5550 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    588e:	4a70      	ldr	r2, [pc, #448]	; (5a50 <usb_isr+0x9ac>)
    5890:	6854      	ldr	r4, [r2, #4]
    5892:	2c00      	cmp	r4, #0
    5894:	d0bb      	beq.n	580e <usb_isr+0x76a>
    5896:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5898:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    589c:	e003      	b.n	58a6 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    589e:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    58a0:	6854      	ldr	r4, [r2, #4]
    58a2:	2c00      	cmp	r4, #0
    58a4:	d0b3      	beq.n	580e <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    58a6:	8813      	ldrh	r3, [r2, #0]
    58a8:	4283      	cmp	r3, r0
    58aa:	d1f8      	bne.n	589e <usb_isr+0x7fa>
    58ac:	8853      	ldrh	r3, [r2, #2]
    58ae:	4573      	cmp	r3, lr
    58b0:	d1f5      	bne.n	589e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    58b2:	0a00      	lsrs	r0, r0, #8
    58b4:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    58b6:	bf0c      	ite	eq
    58b8:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    58bc:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    58c0:	e003      	b.n	58ca <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    58c2:	4a64      	ldr	r2, [pc, #400]	; (5a54 <usb_isr+0x9b0>)
    58c4:	4c64      	ldr	r4, [pc, #400]	; (5a58 <usb_isr+0x9b4>)
    58c6:	7812      	ldrb	r2, [r2, #0]
    58c8:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    58ca:	88e8      	ldrh	r0, [r5, #6]
    58cc:	4570      	cmp	r0, lr
    58ce:	f080 813f 	bcs.w	5b50 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    58d2:	4962      	ldr	r1, [pc, #392]	; (5a5c <usb_isr+0x9b8>)
    58d4:	780d      	ldrb	r5, [r1, #0]
    58d6:	2840      	cmp	r0, #64	; 0x40
    58d8:	4684      	mov	ip, r0
    58da:	f045 0e02 	orr.w	lr, r5, #2
    58de:	bf28      	it	cs
    58e0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    58e4:	eb04 030c 	add.w	r3, r4, ip
    58e8:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    58ec:	9302      	str	r3, [sp, #8]
    58ee:	2301      	movs	r3, #1
    58f0:	6054      	str	r4, [r2, #4]
    58f2:	ebcc 0000 	rsb	r0, ip, r0
    58f6:	ea4f 480c 	mov.w	r8, ip, lsl #16
    58fa:	2200      	movs	r2, #0
    58fc:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    58fe:	24c8      	movs	r4, #200	; 0xc8
    5900:	e65e      	b.n	55c0 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5902:	4c55      	ldr	r4, [pc, #340]	; (5a58 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    5904:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5908:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    590a:	7062      	strb	r2, [r4, #1]
    590c:	e7dd      	b.n	58ca <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    590e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    5912:	f47f af7c 	bne.w	580e <usb_isr+0x76a>
    5916:	2301      	movs	r3, #1
    5918:	2200      	movs	r2, #0
    591a:	9301      	str	r3, [sp, #4]
    591c:	e63d      	b.n	559a <usb_isr+0x4f6>
    591e:	f242 3221 	movw	r2, #8993	; 0x2321
    5922:	4291      	cmp	r1, r2
    5924:	d0f7      	beq.n	5916 <usb_isr+0x872>
    5926:	e772      	b.n	580e <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5928:	886a      	ldrh	r2, [r5, #2]
    592a:	2a00      	cmp	r2, #0
    592c:	f47f af6f 	bne.w	580e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5930:	483a      	ldr	r0, [pc, #232]	; (5a1c <usb_isr+0x978>)
    5932:	f8cd e004 	str.w	lr, [sp, #4]
    5936:	0089      	lsls	r1, r1, #2
    5938:	4408      	add	r0, r1
    593a:	7801      	ldrb	r1, [r0, #0]
    593c:	f021 0102 	bic.w	r1, r1, #2
    5940:	7001      	strb	r1, [r0, #0]
    5942:	e62a      	b.n	559a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5944:	f000 f982 	bl	5c4c <usb_malloc>
				if (p) {
    5948:	2800      	cmp	r0, #0
    594a:	f000 80ef 	beq.w	5b2c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    594e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5950:	4a3d      	ldr	r2, [pc, #244]	; (5a48 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5952:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5956:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    595a:	f000 f977 	bl	5c4c <usb_malloc>
				if (p) {
    595e:	2800      	cmp	r0, #0
    5960:	f000 80de 	beq.w	5b20 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    5964:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5966:	4a37      	ldr	r2, [pc, #220]	; (5a44 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5968:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    596c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    5970:	e738      	b.n	57e4 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5972:	f000 f96b 	bl	5c4c <usb_malloc>
				if (p) {
    5976:	2800      	cmp	r0, #0
    5978:	f000 80c0 	beq.w	5afc <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    597c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    597e:	4a32      	ldr	r2, [pc, #200]	; (5a48 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5980:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5984:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5988:	f000 f960 	bl	5c4c <usb_malloc>
				if (p) {
    598c:	2800      	cmp	r0, #0
    598e:	f000 80af 	beq.w	5af0 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    5992:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5994:	4a2b      	ldr	r2, [pc, #172]	; (5a44 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5996:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    599a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    599e:	e708      	b.n	57b2 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    59a0:	f000 f954 	bl	5c4c <usb_malloc>
				if (p) {
    59a4:	2800      	cmp	r0, #0
    59a6:	f000 80cd 	beq.w	5b44 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    59aa:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59ac:	4a26      	ldr	r2, [pc, #152]	; (5a48 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    59ae:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59b2:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    59b6:	f000 f949 	bl	5c4c <usb_malloc>
				if (p) {
    59ba:	2800      	cmp	r0, #0
    59bc:	f000 80bc 	beq.w	5b38 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    59c0:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59c2:	4a20      	ldr	r2, [pc, #128]	; (5a44 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    59c4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59c8:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    59cc:	e6e3      	b.n	5796 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    59ce:	f000 f93d 	bl	5c4c <usb_malloc>
				if (p) {
    59d2:	2800      	cmp	r0, #0
    59d4:	f000 809e 	beq.w	5b14 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    59d8:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59da:	4a1b      	ldr	r2, [pc, #108]	; (5a48 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    59dc:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59e0:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    59e4:	f000 f932 	bl	5c4c <usb_malloc>
				if (p) {
    59e8:	2800      	cmp	r0, #0
    59ea:	f000 808d 	beq.w	5b08 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    59ee:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59f0:	4a14      	ldr	r2, [pc, #80]	; (5a44 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    59f2:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59f6:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    59fa:	e6e7      	b.n	57cc <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    59fc:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    59fe:	3808      	subs	r0, #8
    5a00:	f000 f944 	bl	5c8c <usb_free>
    5a04:	e504      	b.n	5410 <usb_isr+0x36c>
    5a06:	6b48      	ldr	r0, [r1, #52]	; 0x34
    5a08:	3808      	subs	r0, #8
    5a0a:	f000 f93f 	bl	5c8c <usb_free>
    5a0e:	e4f9      	b.n	5404 <usb_isr+0x360>
    5a10:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    5a12:	3808      	subs	r0, #8
    5a14:	f000 f93a 	bl	5c8c <usb_free>
    5a18:	e4ee      	b.n	53f8 <usb_isr+0x354>
    5a1a:	bf00      	nop
    5a1c:	400720c0 	.word	0x400720c0
    5a20:	40072080 	.word	0x40072080
    5a24:	000092e8 	.word	0x000092e8
    5a28:	400720c4 	.word	0x400720c4
    5a2c:	1fff9ca9 	.word	0x1fff9ca9
    5a30:	400720c8 	.word	0x400720c8
    5a34:	400720cc 	.word	0x400720cc
    5a38:	400720d0 	.word	0x400720d0
    5a3c:	1fff8000 	.word	0x1fff8000
    5a40:	40072094 	.word	0x40072094
    5a44:	004000c8 	.word	0x004000c8
    5a48:	00400088 	.word	0x00400088
    5a4c:	1fff9c3d 	.word	0x1fff9c3d
    5a50:	000092ec 	.word	0x000092ec
    5a54:	1fff9cb4 	.word	0x1fff9cb4
    5a58:	1fff9cac 	.word	0x1fff9cac
    5a5c:	1fff9ca8 	.word	0x1fff9ca8
    5a60:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5a62:	3808      	subs	r0, #8
    5a64:	f000 f912 	bl	5c8c <usb_free>
    5a68:	e4c0      	b.n	53ec <usb_isr+0x348>
    5a6a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    5a6c:	3808      	subs	r0, #8
    5a6e:	f000 f90d 	bl	5c8c <usb_free>
    5a72:	e4fd      	b.n	5470 <usb_isr+0x3cc>
    5a74:	6f48      	ldr	r0, [r1, #116]	; 0x74
    5a76:	3808      	subs	r0, #8
    5a78:	f000 f908 	bl	5c8c <usb_free>
    5a7c:	e4f2      	b.n	5464 <usb_isr+0x3c0>
    5a7e:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    5a80:	3808      	subs	r0, #8
    5a82:	f000 f903 	bl	5c8c <usb_free>
    5a86:	e4e7      	b.n	5458 <usb_isr+0x3b4>
    5a88:	6e48      	ldr	r0, [r1, #100]	; 0x64
    5a8a:	3808      	subs	r0, #8
    5a8c:	f000 f8fe 	bl	5c8c <usb_free>
    5a90:	e4dc      	b.n	544c <usb_isr+0x3a8>
    5a92:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    5a94:	3808      	subs	r0, #8
    5a96:	f000 f8f9 	bl	5c8c <usb_free>
    5a9a:	e4d1      	b.n	5440 <usb_isr+0x39c>
    5a9c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    5a9e:	3808      	subs	r0, #8
    5aa0:	f000 f8f4 	bl	5c8c <usb_free>
    5aa4:	e4c6      	b.n	5434 <usb_isr+0x390>
    5aa6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    5aa8:	3808      	subs	r0, #8
    5aaa:	f000 f8ef 	bl	5c8c <usb_free>
    5aae:	e4bb      	b.n	5428 <usb_isr+0x384>
    5ab0:	6c48      	ldr	r0, [r1, #68]	; 0x44
    5ab2:	3808      	subs	r0, #8
    5ab4:	f000 f8ea 	bl	5c8c <usb_free>
    5ab8:	e4b0      	b.n	541c <usb_isr+0x378>
    5aba:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    5abe:	3808      	subs	r0, #8
    5ac0:	f000 f8e4 	bl	5c8c <usb_free>
    5ac4:	e4ec      	b.n	54a0 <usb_isr+0x3fc>
    5ac6:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    5aca:	3808      	subs	r0, #8
    5acc:	f000 f8de 	bl	5c8c <usb_free>
    5ad0:	e4e0      	b.n	5494 <usb_isr+0x3f0>
    5ad2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    5ad6:	3808      	subs	r0, #8
    5ad8:	f000 f8d8 	bl	5c8c <usb_free>
    5adc:	e4d4      	b.n	5488 <usb_isr+0x3e4>
    5ade:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    5ae2:	3808      	subs	r0, #8
    5ae4:	f000 f8d2 	bl	5c8c <usb_free>
    5ae8:	e4c8      	b.n	547c <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    5aea:	f04f 0e02 	mov.w	lr, #2
    5aee:	e6ec      	b.n	58ca <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5af0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5af2:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    5af6:	3201      	adds	r2, #1
    5af8:	702a      	strb	r2, [r5, #0]
    5afa:	e65a      	b.n	57b2 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5afc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5afe:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    5b02:	3201      	adds	r2, #1
    5b04:	702a      	strb	r2, [r5, #0]
    5b06:	e73f      	b.n	5988 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5b08:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5b0a:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    5b0e:	3201      	adds	r2, #1
    5b10:	702a      	strb	r2, [r5, #0]
    5b12:	e65b      	b.n	57cc <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5b14:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5b16:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    5b1a:	3201      	adds	r2, #1
    5b1c:	702a      	strb	r2, [r5, #0]
    5b1e:	e761      	b.n	59e4 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5b20:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5b22:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    5b26:	3201      	adds	r2, #1
    5b28:	702a      	strb	r2, [r5, #0]
    5b2a:	e65b      	b.n	57e4 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5b2c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5b2e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    5b32:	3201      	adds	r2, #1
    5b34:	702a      	strb	r2, [r5, #0]
    5b36:	e710      	b.n	595a <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5b38:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5b3a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    5b3e:	3201      	adds	r2, #1
    5b40:	702a      	strb	r2, [r5, #0]
    5b42:	e628      	b.n	5796 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5b44:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5b46:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    5b4a:	3201      	adds	r2, #1
    5b4c:	702a      	strb	r2, [r5, #0]
    5b4e:	e732      	b.n	59b6 <usb_isr+0x912>
    5b50:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5b54:	46f4      	mov	ip, lr
    5b56:	bf28      	it	cs
    5b58:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    5b5c:	eb04 030c 	add.w	r3, r4, ip
    5b60:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5b62:	2301      	movs	r3, #1
    5b64:	ebcc 000e 	rsb	r0, ip, lr
    5b68:	ea4f 480c 	mov.w	r8, ip, lsl #16
    5b6c:	2200      	movs	r2, #0
    5b6e:	9301      	str	r3, [sp, #4]
    5b70:	e518      	b.n	55a4 <usb_isr+0x500>
    5b72:	bf00      	nop

00005b74 <usb_init>:
}



void usb_init(void)
{
    5b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5b76:	f001 f871 	bl	6c5c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5b7a:	4b29      	ldr	r3, [pc, #164]	; (5c20 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5b7c:	4829      	ldr	r0, [pc, #164]	; (5c24 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5b7e:	4c2a      	ldr	r4, [pc, #168]	; (5c28 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5b80:	4f2a      	ldr	r7, [pc, #168]	; (5c2c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5b82:	4d2b      	ldr	r5, [pc, #172]	; (5c30 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5b84:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 5c44 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    5b88:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 5c48 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5b8c:	4e29      	ldr	r6, [pc, #164]	; (5c34 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5b8e:	2200      	movs	r2, #0
    5b90:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    5b92:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5b94:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    5b96:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5b98:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    5b9a:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5b9c:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    5b9e:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5ba0:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    5ba2:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5ba4:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    5ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5ba8:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    5baa:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bac:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    5bae:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bb0:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    5bb2:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bb4:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    5bb6:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bb8:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    5bba:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bbc:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    5bbe:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bc0:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    5bc2:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bc4:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    5bc6:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bc8:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    5bca:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bcc:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    5bce:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5bd4:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    5bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5bda:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    5bde:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5be0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    5be4:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5be6:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5bea:	4913      	ldr	r1, [pc, #76]	; (5c38 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5bec:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5bee:	0e1b      	lsrs	r3, r3, #24
    5bf0:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5bf2:	23ff      	movs	r3, #255	; 0xff
    5bf4:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5bf8:	4d10      	ldr	r5, [pc, #64]	; (5c3c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    5bfa:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5bfe:	4810      	ldr	r0, [pc, #64]	; (5c40 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5c00:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5c02:	2301      	movs	r3, #1
    5c04:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    5c06:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5c0a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5c0c:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5c10:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5c12:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5c16:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5c18:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5c1a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    5c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c20:	1fff8000 	.word	0x1fff8000
    5c24:	40048034 	.word	0x40048034
    5c28:	4007209c 	.word	0x4007209c
    5c2c:	400720b0 	.word	0x400720b0
    5c30:	400720b4 	.word	0x400720b4
    5c34:	40072094 	.word	0x40072094
    5c38:	40072010 	.word	0x40072010
    5c3c:	e000e449 	.word	0xe000e449
    5c40:	e000e108 	.word	0xe000e108
    5c44:	40072080 	.word	0x40072080
    5c48:	40072088 	.word	0x40072088

00005c4c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    5c4c:	b672      	cpsid	i
	avail = usb_buffer_available;
    5c4e:	480d      	ldr	r0, [pc, #52]	; (5c84 <usb_malloc+0x38>)
    5c50:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5c52:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    5c56:	2b0b      	cmp	r3, #11
    5c58:	dc10      	bgt.n	5c7c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    5c5a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5c5e:	40d9      	lsrs	r1, r3
    5c60:	ea22 0201 	bic.w	r2, r2, r1
    5c64:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5c66:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    5c68:	4807      	ldr	r0, [pc, #28]	; (5c88 <usb_malloc+0x3c>)
    5c6a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    5c6e:	00db      	lsls	r3, r3, #3
    5c70:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5c72:	2100      	movs	r1, #0
    5c74:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    5c76:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    5c78:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    5c7a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    5c7c:	b662      	cpsie	i
		return NULL;
    5c7e:	2000      	movs	r0, #0
    5c80:	4770      	bx	lr
    5c82:	bf00      	nop
    5c84:	1fff8738 	.word	0x1fff8738
    5c88:	1fff83bc 	.word	0x1fff83bc

00005c8c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5c8c:	4b0d      	ldr	r3, [pc, #52]	; (5cc4 <usb_free+0x38>)
    5c8e:	4a0e      	ldr	r2, [pc, #56]	; (5cc8 <usb_free+0x3c>)
    5c90:	1ac3      	subs	r3, r0, r3
    5c92:	fba2 2303 	umull	r2, r3, r2, r3
    5c96:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    5c98:	2b0b      	cmp	r3, #11
    5c9a:	d80c      	bhi.n	5cb6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5c9c:	4a0b      	ldr	r2, [pc, #44]	; (5ccc <usb_free+0x40>)
    5c9e:	7812      	ldrb	r2, [r2, #0]
    5ca0:	b952      	cbnz	r2, 5cb8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    5ca2:	b672      	cpsid	i
	usb_buffer_available |= mask;
    5ca4:	480a      	ldr	r0, [pc, #40]	; (5cd0 <usb_free+0x44>)
    5ca6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5caa:	6802      	ldr	r2, [r0, #0]
    5cac:	fa21 f303 	lsr.w	r3, r1, r3
    5cb0:	431a      	orrs	r2, r3
    5cb2:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5cb4:	b662      	cpsie	i
    5cb6:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5cb8:	4a06      	ldr	r2, [pc, #24]	; (5cd4 <usb_free+0x48>)
    5cba:	7812      	ldrb	r2, [r2, #0]
    5cbc:	2a00      	cmp	r2, #0
    5cbe:	d0f0      	beq.n	5ca2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    5cc0:	f7ff b94a 	b.w	4f58 <usb_rx_memory>
    5cc4:	1fff83bc 	.word	0x1fff83bc
    5cc8:	38e38e39 	.word	0x38e38e39
    5ccc:	1fff9ca9 	.word	0x1fff9ca9
    5cd0:	1fff8738 	.word	0x1fff8738
    5cd4:	1fff9cb4 	.word	0x1fff9cb4

00005cd8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    5cd8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    5cda:	4d0f      	ldr	r5, [pc, #60]	; (5d18 <usb_serial_getchar+0x40>)
    5cdc:	6828      	ldr	r0, [r5, #0]
    5cde:	b178      	cbz	r0, 5d00 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    5ce0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    5ce2:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5ce4:	18c1      	adds	r1, r0, r3
    5ce6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    5ce8:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5cea:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    5cec:	d202      	bcs.n	5cf4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    5cee:	8043      	strh	r3, [r0, #2]
	}
	return c;
    5cf0:	4620      	mov	r0, r4
}
    5cf2:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    5cf4:	f7ff ffca 	bl	5c8c <usb_free>
		rx_packet = NULL;
    5cf8:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    5cfa:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5cfc:	602b      	str	r3, [r5, #0]
    5cfe:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d00:	4b06      	ldr	r3, [pc, #24]	; (5d1c <usb_serial_getchar+0x44>)
    5d02:	781b      	ldrb	r3, [r3, #0]
    5d04:	b12b      	cbz	r3, 5d12 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5d06:	2003      	movs	r0, #3
    5d08:	f7ff f8f2 	bl	4ef0 <usb_rx>
    5d0c:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    5d0e:	2800      	cmp	r0, #0
    5d10:	d1e6      	bne.n	5ce0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d12:	f04f 30ff 	mov.w	r0, #4294967295
    5d16:	bd38      	pop	{r3, r4, r5, pc}
    5d18:	1fff9cc8 	.word	0x1fff9cc8
    5d1c:	1fff9cb4 	.word	0x1fff9cb4

00005d20 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5d20:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5d22:	4c09      	ldr	r4, [pc, #36]	; (5d48 <usb_serial_peekchar+0x28>)
    5d24:	6820      	ldr	r0, [r4, #0]
    5d26:	b118      	cbz	r0, 5d30 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5d28:	8843      	ldrh	r3, [r0, #2]
    5d2a:	4418      	add	r0, r3
    5d2c:	7a00      	ldrb	r0, [r0, #8]
}
    5d2e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d30:	4b06      	ldr	r3, [pc, #24]	; (5d4c <usb_serial_peekchar+0x2c>)
    5d32:	781b      	ldrb	r3, [r3, #0]
    5d34:	b12b      	cbz	r3, 5d42 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5d36:	2003      	movs	r0, #3
    5d38:	f7ff f8da 	bl	4ef0 <usb_rx>
    5d3c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5d3e:	2800      	cmp	r0, #0
    5d40:	d1f2      	bne.n	5d28 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d42:	f04f 30ff 	mov.w	r0, #4294967295
    5d46:	bd10      	pop	{r4, pc}
    5d48:	1fff9cc8 	.word	0x1fff9cc8
    5d4c:	1fff9cb4 	.word	0x1fff9cb4

00005d50 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5d50:	4b04      	ldr	r3, [pc, #16]	; (5d64 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5d52:	4a05      	ldr	r2, [pc, #20]	; (5d68 <usb_serial_available+0x18>)
    5d54:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    5d56:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5d58:	b11b      	cbz	r3, 5d62 <usb_serial_available+0x12>
    5d5a:	881a      	ldrh	r2, [r3, #0]
    5d5c:	885b      	ldrh	r3, [r3, #2]
    5d5e:	1ad3      	subs	r3, r2, r3
    5d60:	4418      	add	r0, r3
	return count;
}
    5d62:	4770      	bx	lr
    5d64:	1fff9cc8 	.word	0x1fff9cc8
    5d68:	1fff9e20 	.word	0x1fff9e20

00005d6c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    5d6c:	4b0b      	ldr	r3, [pc, #44]	; (5d9c <usb_serial_flush_input+0x30>)
    5d6e:	781b      	ldrb	r3, [r3, #0]
    5d70:	b19b      	cbz	r3, 5d9a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    5d72:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    5d74:	4c0a      	ldr	r4, [pc, #40]	; (5da0 <usb_serial_flush_input+0x34>)
    5d76:	6820      	ldr	r0, [r4, #0]
    5d78:	b148      	cbz	r0, 5d8e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    5d7a:	f7ff ff87 	bl	5c8c <usb_free>
		rx_packet = NULL;
    5d7e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5d80:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5d82:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5d84:	f7ff f8b4 	bl	4ef0 <usb_rx>
		if (!rx) break;
    5d88:	b130      	cbz	r0, 5d98 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    5d8a:	f7ff ff7f 	bl	5c8c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5d8e:	2003      	movs	r0, #3
    5d90:	f7ff f8ae 	bl	4ef0 <usb_rx>
		if (!rx) break;
    5d94:	2800      	cmp	r0, #0
    5d96:	d1f8      	bne.n	5d8a <usb_serial_flush_input+0x1e>
    5d98:	bd10      	pop	{r4, pc}
    5d9a:	4770      	bx	lr
    5d9c:	1fff9cb4 	.word	0x1fff9cb4
    5da0:	1fff9cc8 	.word	0x1fff9cc8

00005da4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5da8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 5ea4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5dac:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5dae:	2201      	movs	r2, #1
    5db0:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    5db4:	9101      	str	r1, [sp, #4]
    5db6:	b369      	cbz	r1, 5e14 <usb_serial_write+0x70>
    5db8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 5ea8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5dbc:	4f36      	ldr	r7, [pc, #216]	; (5e98 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5dbe:	9e01      	ldr	r6, [sp, #4]
    5dc0:	4683      	mov	fp, r0
		if (!tx_packet) {
    5dc2:	f8d8 0000 	ldr.w	r0, [r8]
    5dc6:	b3b0      	cbz	r0, 5e36 <usb_serial_write+0x92>
    5dc8:	4d34      	ldr	r5, [pc, #208]	; (5e9c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    5dca:	8844      	ldrh	r4, [r0, #2]
    5dcc:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    5dd0:	42b1      	cmp	r1, r6
    5dd2:	bf28      	it	cs
    5dd4:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5dd6:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5dda:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5ddc:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5de0:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    5de2:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5de4:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    5de8:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    5dec:	b151      	cbz	r1, 5e04 <usb_serial_write+0x60>
    5dee:	3c01      	subs	r4, #1
    5df0:	4422      	add	r2, r4
    5df2:	4459      	add	r1, fp
    5df4:	f81b 4b01 	ldrb.w	r4, [fp], #1
    5df8:	f802 4f01 	strb.w	r4, [r2, #1]!
    5dfc:	458b      	cmp	fp, r1
    5dfe:	d1f9      	bne.n	5df4 <usb_serial_write+0x50>
    5e00:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    5e04:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    5e08:	d80b      	bhi.n	5e22 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5e0a:	4a25      	ldr	r2, [pc, #148]	; (5ea0 <usb_serial_write+0xfc>)
    5e0c:	2105      	movs	r1, #5
    5e0e:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5e10:	2e00      	cmp	r6, #0
    5e12:	d1d6      	bne.n	5dc2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    5e14:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    5e16:	2300      	movs	r3, #0
    5e18:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    5e1c:	b003      	add	sp, #12
    5e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    5e22:	2240      	movs	r2, #64	; 0x40
    5e24:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5e26:	4601      	mov	r1, r0
    5e28:	2004      	movs	r0, #4
    5e2a:	f7ff f8f9 	bl	5020 <usb_tx>
			tx_packet = NULL;
    5e2e:	2200      	movs	r2, #0
    5e30:	f8c8 2000 	str.w	r2, [r8]
    5e34:	e7e9      	b.n	5e0a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5e36:	783a      	ldrb	r2, [r7, #0]
    5e38:	b32a      	cbz	r2, 5e86 <usb_serial_write+0xe2>
    5e3a:	4d18      	ldr	r5, [pc, #96]	; (5e9c <usb_serial_write+0xf8>)
    5e3c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    5e40:	f04f 0a01 	mov.w	sl, #1
    5e44:	e007      	b.n	5e56 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5e46:	3c01      	subs	r4, #1
    5e48:	d016      	beq.n	5e78 <usb_serial_write+0xd4>
    5e4a:	782a      	ldrb	r2, [r5, #0]
    5e4c:	b9a2      	cbnz	r2, 5e78 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    5e4e:	f000 fcfd 	bl	684c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5e52:	783a      	ldrb	r2, [r7, #0]
    5e54:	b1ba      	cbz	r2, 5e86 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    5e56:	2004      	movs	r0, #4
    5e58:	f7ff f868 	bl	4f2c <usb_tx_packet_count>
    5e5c:	2807      	cmp	r0, #7
    5e5e:	d8f2      	bhi.n	5e46 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    5e60:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    5e64:	f7ff fef2 	bl	5c4c <usb_malloc>
    5e68:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    5e6c:	2800      	cmp	r0, #0
    5e6e:	d1ac      	bne.n	5dca <usb_serial_write+0x26>
					tx_noautoflush = 0;
    5e70:	4b0c      	ldr	r3, [pc, #48]	; (5ea4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5e72:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    5e74:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5e76:	d1e8      	bne.n	5e4a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    5e78:	2301      	movs	r3, #1
					return -1;
    5e7a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    5e7e:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5e80:	b003      	add	sp, #12
    5e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5e86:	2300      	movs	r3, #0
					return -1;
    5e88:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5e8c:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5e90:	b003      	add	sp, #12
    5e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e96:	bf00      	nop
    5e98:	1fff9cb4 	.word	0x1fff9cb4
    5e9c:	1fff9cc4 	.word	0x1fff9cc4
    5ea0:	1fff9cbc 	.word	0x1fff9cbc
    5ea4:	1fff9cbd 	.word	0x1fff9cbd
    5ea8:	1fff9cc0 	.word	0x1fff9cc0

00005eac <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5eac:	b500      	push	{lr}
    5eae:	b083      	sub	sp, #12
    5eb0:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    5eb2:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5eb4:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    5eb8:	4618      	mov	r0, r3
    5eba:	f7ff ff73 	bl	5da4 <usb_serial_write>
}
    5ebe:	b003      	add	sp, #12
    5ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ec4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    5ec4:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    5ec6:	4d0e      	ldr	r5, [pc, #56]	; (5f00 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5ec8:	4c0e      	ldr	r4, [pc, #56]	; (5f04 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    5eca:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5ecc:	2301      	movs	r3, #1
    5ece:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    5ed0:	b128      	cbz	r0, 5ede <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5ed2:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    5ed4:	2300      	movs	r3, #0
    5ed6:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5ed8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    5edc:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5ede:	4b0a      	ldr	r3, [pc, #40]	; (5f08 <usb_serial_write_buffer_free+0x44>)
    5ee0:	781b      	ldrb	r3, [r3, #0]
    5ee2:	b913      	cbnz	r3, 5eea <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    5ee4:	2000      	movs	r0, #0
    5ee6:	7020      	strb	r0, [r4, #0]
			return 0;
    5ee8:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5eea:	2004      	movs	r0, #4
    5eec:	f7ff f81e 	bl	4f2c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5ef0:	2807      	cmp	r0, #7
    5ef2:	d8f7      	bhi.n	5ee4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    5ef4:	f7ff feaa 	bl	5c4c <usb_malloc>
    5ef8:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5efa:	2800      	cmp	r0, #0
    5efc:	d1e9      	bne.n	5ed2 <usb_serial_write_buffer_free+0xe>
    5efe:	e7f1      	b.n	5ee4 <usb_serial_write_buffer_free+0x20>
    5f00:	1fff9cc0 	.word	0x1fff9cc0
    5f04:	1fff9cbd 	.word	0x1fff9cbd
    5f08:	1fff9cb4 	.word	0x1fff9cb4

00005f0c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    5f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    5f0e:	4b11      	ldr	r3, [pc, #68]	; (5f54 <usb_serial_flush_output+0x48>)
    5f10:	781b      	ldrb	r3, [r3, #0]
    5f12:	b18b      	cbz	r3, 5f38 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    5f14:	4e10      	ldr	r6, [pc, #64]	; (5f58 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    5f16:	4d11      	ldr	r5, [pc, #68]	; (5f5c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    5f18:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    5f1a:	2701      	movs	r7, #1
    5f1c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    5f1e:	b164      	cbz	r4, 5f3a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    5f20:	4a0f      	ldr	r2, [pc, #60]	; (5f60 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    5f22:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    5f24:	2700      	movs	r7, #0
    5f26:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5f28:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    5f2a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5f2c:	2004      	movs	r0, #4
    5f2e:	f7ff f877 	bl	5020 <usb_tx>
		tx_packet = NULL;
    5f32:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    5f34:	2300      	movs	r3, #0
    5f36:	702b      	strb	r3, [r5, #0]
    5f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    5f3a:	f7ff fe87 	bl	5c4c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5f3e:	4b08      	ldr	r3, [pc, #32]	; (5f60 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    5f40:	b128      	cbz	r0, 5f4e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    5f42:	4601      	mov	r1, r0
    5f44:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5f46:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    5f48:	f7ff f86a 	bl	5020 <usb_tx>
    5f4c:	e7f2      	b.n	5f34 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5f4e:	701f      	strb	r7, [r3, #0]
    5f50:	e7f0      	b.n	5f34 <usb_serial_flush_output+0x28>
    5f52:	bf00      	nop
    5f54:	1fff9cb4 	.word	0x1fff9cb4
    5f58:	1fff9cc0 	.word	0x1fff9cc0
    5f5c:	1fff9cbd 	.word	0x1fff9cbd
    5f60:	1fff9cbc 	.word	0x1fff9cbc

00005f64 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    5f64:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    5f66:	4b0e      	ldr	r3, [pc, #56]	; (5fa0 <usb_serial_flush_callback+0x3c>)
    5f68:	781b      	ldrb	r3, [r3, #0]
    5f6a:	b973      	cbnz	r3, 5f8a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    5f6c:	4c0d      	ldr	r4, [pc, #52]	; (5fa4 <usb_serial_flush_callback+0x40>)
    5f6e:	6821      	ldr	r1, [r4, #0]
    5f70:	b161      	cbz	r1, 5f8c <usb_serial_flush_callback+0x28>
    5f72:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    5f76:	884b      	ldrh	r3, [r1, #2]
    5f78:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5f7a:	2004      	movs	r0, #4
    5f7c:	f7ff f850 	bl	5020 <usb_tx>
		tx_packet = NULL;
    5f80:	6025      	str	r5, [r4, #0]
    5f82:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5f84:	4b08      	ldr	r3, [pc, #32]	; (5fa8 <usb_serial_flush_callback+0x44>)
    5f86:	2201      	movs	r2, #1
    5f88:	701a      	strb	r2, [r3, #0]
    5f8a:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    5f8c:	f7ff fe5e 	bl	5c4c <usb_malloc>
		if (tx) {
    5f90:	2800      	cmp	r0, #0
    5f92:	d0f7      	beq.n	5f84 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    5f94:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    5f9a:	2004      	movs	r0, #4
    5f9c:	f7ff b840 	b.w	5020 <usb_tx>
    5fa0:	1fff9cbd 	.word	0x1fff9cbd
    5fa4:	1fff9cc0 	.word	0x1fff9cc0
    5fa8:	1fff9cbc 	.word	0x1fff9cbc

00005fac <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    5fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    5fae:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    5fb0:	b999      	cbnz	r1, 5fda <DMAChannel::begin(bool)+0x2e>
    5fb2:	6802      	ldr	r2, [r0, #0]
    5fb4:	b18a      	cbz	r2, 5fda <DMAChannel::begin(bool)+0x2e>
    5fb6:	7903      	ldrb	r3, [r0, #4]
    5fb8:	2b0f      	cmp	r3, #15
    5fba:	d80e      	bhi.n	5fda <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    5fbc:	4c27      	ldr	r4, [pc, #156]	; (605c <DMAChannel::begin(bool)+0xb0>)
    5fbe:	8821      	ldrh	r1, [r4, #0]
    5fc0:	fa41 f503 	asr.w	r5, r1, r3
    5fc4:	07ed      	lsls	r5, r5, #31
    5fc6:	d50a      	bpl.n	5fde <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    5fc8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    5fcc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    5fd0:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
    5fd4:	d103      	bne.n	5fde <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    5fd6:	b662      	cpsie	i
		return;
    5fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fda:	4c20      	ldr	r4, [pc, #128]	; (605c <DMAChannel::begin(bool)+0xb0>)
    5fdc:	8821      	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    5fde:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    5fe0:	fa41 f203 	asr.w	r2, r1, r3
    5fe4:	f012 0201 	ands.w	r2, r2, #1
    5fe8:	d007      	beq.n	5ffa <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    5fea:	3301      	adds	r3, #1
    5fec:	2b10      	cmp	r3, #16
    5fee:	d1f7      	bne.n	5fe0 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    5ff0:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    5ff2:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    5ff4:	7103      	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    5ff6:	6002      	str	r2, [r0, #0]
    5ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    5ffa:	2501      	movs	r5, #1
    5ffc:	409d      	lsls	r5, r3
    5ffe:	4329      	orrs	r1, r5
    6000:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    6002:	b662      	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    6004:	4e16      	ldr	r6, [pc, #88]	; (6060 <DMAChannel::begin(bool)+0xb4>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    6006:	4d17      	ldr	r5, [pc, #92]	; (6064 <DMAChannel::begin(bool)+0xb8>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    6008:	4f17      	ldr	r7, [pc, #92]	; (6068 <DMAChannel::begin(bool)+0xbc>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    600a:	f8df e064 	ldr.w	lr, [pc, #100]	; 6070 <DMAChannel::begin(bool)+0xc4>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    600e:	b2d9      	uxtb	r1, r3
    6010:	7101      	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    6012:	6834      	ldr	r4, [r6, #0]
    6014:	f044 0402 	orr.w	r4, r4, #2
    6018:	6034      	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    601a:	682c      	ldr	r4, [r5, #0]
    601c:	f044 0402 	orr.w	r4, r4, #2
    6020:	602c      	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    6022:	f5a6 2680 	sub.w	r6, r6, #262144	; 0x40000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    6026:	2482      	movs	r4, #130	; 0x82
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    6028:	f5a5 2580 	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    602c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    6030:	603c      	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    6032:	f503 6390 	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    6036:	3e22      	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    6038:	3d24      	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    603a:	4c0c      	ldr	r4, [pc, #48]	; (606c <DMAChannel::begin(bool)+0xc0>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    603c:	f88e 1000 	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    6040:	015b      	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    6042:	7031      	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    6044:	7029      	strb	r1, [r5, #0]
	DMA_CINT = ch;
    6046:	7021      	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    6048:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    604a:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    604c:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    604e:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    6050:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    6052:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    6054:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    6056:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    6058:	61da      	str	r2, [r3, #28]
    605a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    605c:	1fff9cce 	.word	0x1fff9cce
    6060:	40048040 	.word	0x40048040
    6064:	4004803c 	.word	0x4004803c
    6068:	40008000 	.word	0x40008000
    606c:	4000801f 	.word	0x4000801f
    6070:	4000801a 	.word	0x4000801a

00006074 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    6074:	7903      	ldrb	r3, [r0, #4]
    6076:	2b0f      	cmp	r3, #15
    6078:	d811      	bhi.n	609e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    607a:	4a09      	ldr	r2, [pc, #36]	; (60a0 <DMAChannel::release()+0x2c>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    607c:	b410      	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    607e:	7013      	strb	r3, [r2, #0]
	__disable_irq();
    6080:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    6082:	4908      	ldr	r1, [pc, #32]	; (60a4 <DMAChannel::release()+0x30>)
    6084:	7904      	ldrb	r4, [r0, #4]
    6086:	880a      	ldrh	r2, [r1, #0]
    6088:	2301      	movs	r3, #1
    608a:	40a3      	lsls	r3, r4
    608c:	ea22 0303 	bic.w	r3, r2, r3
    6090:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    6092:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    6094:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    6096:	2300      	movs	r3, #0
}
    6098:	bc10      	pop	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    609a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    609c:	6003      	str	r3, [r0, #0]
}
    609e:	4770      	bx	lr
    60a0:	4000801a 	.word	0x4000801a
    60a4:	1fff9cce 	.word	0x1fff9cce

000060a8 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)>:
{
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
    60a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    60aa:	790e      	ldrb	r6, [r1, #4]
    60ac:	f892 e004 	ldrb.w	lr, [r2, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    60b0:	f006 03fc 	and.w	r3, r6, #252	; 0xfc
    60b4:	f00e 04fc 	and.w	r4, lr, #252	; 0xfc
    60b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    60bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    60c0:	f503 4301 	add.w	r3, r3, #33024	; 0x8100
    60c4:	f504 4401 	add.w	r4, r4, #33024	; 0x8100
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	6824      	ldr	r4, [r4, #0]
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    60cc:	00f5      	lsls	r5, r6, #3
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    60ce:	ea4f 0cce 	mov.w	ip, lr, lsl #3

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    60d2:	ba1f      	rev	r7, r3
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    60d4:	f005 0318 	and.w	r3, r5, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    60d8:	ba25      	rev	r5, r4
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    60da:	f00c 0418 	and.w	r4, ip, #24
static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    60de:	fa27 f303 	lsr.w	r3, r7, r3
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    60e2:	fa25 f404 	lsr.w	r4, r5, r4
static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
	return (n >> ((c.channel & 0x03) << 3)) & 0x0F;
    60e6:	f003 030f 	and.w	r3, r3, #15
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    60ea:	f004 040f 	and.w	r4, r4, #15
    60ee:	429c      	cmp	r4, r3
    60f0:	d915      	bls.n	611e <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0x76>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    60f2:	f881 e004 	strb.w	lr, [r1, #4]
	c2.channel = c;
    60f6:	7116      	strb	r6, [r2, #4]
	t = c1.TCD;
    60f8:	680b      	ldr	r3, [r1, #0]
	c1.TCD = c2.TCD;
    60fa:	6814      	ldr	r4, [r2, #0]
    60fc:	600c      	str	r4, [r1, #0]
	c2.TCD = t;
    60fe:	6013      	str	r3, [r2, #0]
    6100:	790e      	ldrb	r6, [r1, #4]
    6102:	f006 04fc 	and.w	r4, r6, #252	; 0xfc
    6106:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    610a:	f504 4401 	add.w	r4, r4, #33024	; 0x8100
    610e:	00f3      	lsls	r3, r6, #3
    6110:	6824      	ldr	r4, [r4, #0]
    6112:	f003 0518 	and.w	r5, r3, #24
    6116:	ba23      	rev	r3, r4
    6118:	40eb      	lsrs	r3, r5
    611a:	f003 030f 	and.w	r3, r3, #15
    611e:	f890 e004 	ldrb.w	lr, [r0, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    6122:	f00e 05fc 	and.w	r5, lr, #252	; 0xfc
    6126:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    612a:	f505 4501 	add.w	r5, r5, #33024	; 0x8100
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    612e:	ea4f 04ce 	mov.w	r4, lr, lsl #3
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    6132:	682d      	ldr	r5, [r5, #0]
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    6134:	f004 0718 	and.w	r7, r4, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    6138:	ba2c      	rev	r4, r5
}

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
    613a:	40fc      	lsrs	r4, r7
    613c:	f004 040f 	and.w	r4, r4, #15
    6140:	429c      	cmp	r4, r3
    6142:	d215      	bcs.n	6170 <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0xc8>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    6144:	7106      	strb	r6, [r0, #4]
	c2.channel = c;
	t = c1.TCD;
	c1.TCD = c2.TCD;
    6146:	680c      	ldr	r4, [r1, #0]
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
	c2.channel = c;
    6148:	f881 e004 	strb.w	lr, [r1, #4]
	t = c1.TCD;
    614c:	6803      	ldr	r3, [r0, #0]
	c1.TCD = c2.TCD;
    614e:	6004      	str	r4, [r0, #0]
    6150:	790e      	ldrb	r6, [r1, #4]
	c2.TCD = t;
    6152:	600b      	str	r3, [r1, #0]
    6154:	f006 00fc 	and.w	r0, r6, #252	; 0xfc
    6158:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    615c:	f500 4001 	add.w	r0, r0, #33024	; 0x8100
    6160:	00f3      	lsls	r3, r6, #3
    6162:	6800      	ldr	r0, [r0, #0]
    6164:	f003 0418 	and.w	r4, r3, #24
    6168:	ba03      	rev	r3, r0
    616a:	40e3      	lsrs	r3, r4
    616c:	f003 030f 	and.w	r3, r3, #15
    6170:	7917      	ldrb	r7, [r2, #4]
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    6172:	f007 04fc 	and.w	r4, r7, #252	; 0xfc
    6176:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    617a:	f504 4401 	add.w	r4, r4, #33024	; 0x8100

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    617e:	00f8      	lsls	r0, r7, #3
}

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
    6180:	6824      	ldr	r4, [r4, #0]

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    6182:	f000 0518 	and.w	r5, r0, #24

static uint32_t priority(const DMAChannel &c)
{
	uint32_t n;
	n = *(uint32_t *)((uint32_t)&DMA_DCHPRI3 + (c.channel & 0xFC));
	n = __builtin_bswap32(n);
    6186:	ba20      	rev	r0, r4

void DMAPriorityOrder(DMAChannel &ch1, DMAChannel &ch2, DMAChannel &ch3)
{
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
    6188:	40e8      	lsrs	r0, r5
    618a:	f000 000f 	and.w	r0, r0, #15
    618e:	4298      	cmp	r0, r3
    6190:	d905      	bls.n	619e <DMAPriorityOrder(DMAChannel&, DMAChannel&, DMAChannel&)+0xf6>
{
	uint8_t c;
	DMABaseClass::TCD_t *t;

	c = c1.channel;
	c1.channel = c2.channel;
    6192:	710f      	strb	r7, [r1, #4]
	c2.channel = c;
    6194:	7116      	strb	r6, [r2, #4]
	t = c1.TCD;
    6196:	680b      	ldr	r3, [r1, #0]
	c1.TCD = c2.TCD;
    6198:	6810      	ldr	r0, [r2, #0]
    619a:	6008      	str	r0, [r1, #0]
	c2.TCD = t;
    619c:	6013      	str	r3, [r2, #0]
    619e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000061a0 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    61a0:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    61a2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    61a6:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    61a8:	7f43      	ldrb	r3, [r0, #29]
    61aa:	b933      	cbnz	r3, 61ba <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    61ac:	7f01      	ldrb	r1, [r0, #28]
    61ae:	2901      	cmp	r1, #1
    61b0:	d007      	beq.n	61c2 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    61b2:	2903      	cmp	r1, #3
    61b4:	d00f      	beq.n	61d6 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    61b6:	2301      	movs	r3, #1
    61b8:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    61ba:	b902      	cbnz	r2, 61be <EventResponder::triggerEventNotImmediate()+0x1e>
    61bc:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    61be:	bc10      	pop	{r4}
    61c0:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    61c2:	4c12      	ldr	r4, [pc, #72]	; (620c <EventResponder::triggerEventNotImmediate()+0x6c>)
    61c4:	6821      	ldr	r1, [r4, #0]
    61c6:	b1a1      	cbz	r1, 61f2 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    61c8:	4911      	ldr	r1, [pc, #68]	; (6210 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    61ca:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    61cc:	680b      	ldr	r3, [r1, #0]
    61ce:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    61d0:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    61d2:	6158      	str	r0, [r3, #20]
    61d4:	e7ef      	b.n	61b6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    61d6:	4c0f      	ldr	r4, [pc, #60]	; (6214 <EventResponder::triggerEventNotImmediate()+0x74>)
    61d8:	6821      	ldr	r1, [r4, #0]
    61da:	b181      	cbz	r1, 61fe <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    61dc:	490e      	ldr	r1, [pc, #56]	; (6218 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    61de:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    61e0:	680b      	ldr	r3, [r1, #0]
    61e2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    61e4:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    61e6:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    61e8:	4b0c      	ldr	r3, [pc, #48]	; (621c <EventResponder::triggerEventNotImmediate()+0x7c>)
    61ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    61ee:	6019      	str	r1, [r3, #0]
    61f0:	e7e1      	b.n	61b6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    61f2:	4b07      	ldr	r3, [pc, #28]	; (6210 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    61f4:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    61f6:	6181      	str	r1, [r0, #24]
				firstYield = this;
    61f8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    61fa:	6018      	str	r0, [r3, #0]
    61fc:	e7db      	b.n	61b6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    61fe:	4b06      	ldr	r3, [pc, #24]	; (6218 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    6200:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    6202:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    6204:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    6206:	6018      	str	r0, [r3, #0]
    6208:	e7ee      	b.n	61e8 <EventResponder::triggerEventNotImmediate()+0x48>
    620a:	bf00      	nop
    620c:	1fff9ce0 	.word	0x1fff9ce0
    6210:	1fff9cdc 	.word	0x1fff9cdc
    6214:	1fff9cd0 	.word	0x1fff9cd0
    6218:	1fff9cd4 	.word	0x1fff9cd4
    621c:	e000ed04 	.word	0xe000ed04

00006220 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    6220:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6222:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6224:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6226:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6228:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    622a:	d002      	beq.n	6232 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    622c:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    622e:	f7ff bfb7 	b.w	61a0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6232:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    6234:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6236:	4718      	bx	r3

00006238 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    6238:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    623a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    623e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    6240:	4c0c      	ldr	r4, [pc, #48]	; (6274 <EventResponder::runFromInterrupt()+0x3c>)
    6242:	6820      	ldr	r0, [r4, #0]
		if (first) {
    6244:	b180      	cbz	r0, 6268 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    6246:	4e0c      	ldr	r6, [pc, #48]	; (6278 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    6248:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    624a:	6943      	ldr	r3, [r0, #20]
    624c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    624e:	b173      	cbz	r3, 626e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    6250:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6252:	b902      	cbnz	r2, 6256 <EventResponder::runFromInterrupt()+0x1e>
    6254:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    6256:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    6258:	6883      	ldr	r3, [r0, #8]
    625a:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    625c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6260:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    6262:	6820      	ldr	r0, [r4, #0]
		if (first) {
    6264:	2800      	cmp	r0, #0
    6266:	d1f0      	bne.n	624a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6268:	b902      	cbnz	r2, 626c <EventResponder::runFromInterrupt()+0x34>
    626a:	b662      	cpsie	i
    626c:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    626e:	6033      	str	r3, [r6, #0]
    6270:	e7ef      	b.n	6252 <EventResponder::runFromInterrupt()+0x1a>
    6272:	bf00      	nop
    6274:	1fff9cd0 	.word	0x1fff9cd0
    6278:	1fff9cd4 	.word	0x1fff9cd4

0000627c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    627c:	f7ff bfdc 	b.w	6238 <EventResponder::runFromInterrupt()>

00006280 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    6280:	4a18      	ldr	r2, [pc, #96]	; (62e4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    6282:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    6284:	6814      	ldr	r4, [r2, #0]
    6286:	2c00      	cmp	r4, #0
    6288:	d027      	beq.n	62da <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    628a:	6803      	ldr	r3, [r0, #0]
    628c:	6821      	ldr	r1, [r4, #0]
    628e:	428b      	cmp	r3, r1
    6290:	d20e      	bcs.n	62b0 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    6292:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    6294:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    6296:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    6298:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    629a:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    629c:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    629e:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    62a0:	2302      	movs	r3, #2
    62a2:	7503      	strb	r3, [r0, #20]
}
    62a4:	bc30      	pop	{r4, r5}
    62a6:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    62a8:	6811      	ldr	r1, [r2, #0]
    62aa:	428b      	cmp	r3, r1
    62ac:	4614      	mov	r4, r2
    62ae:	d308      	bcc.n	62c2 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    62b0:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    62b2:	1a5b      	subs	r3, r3, r1
    62b4:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    62b6:	2a00      	cmp	r2, #0
    62b8:	d1f6      	bne.n	62a8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    62ba:	6082      	str	r2, [r0, #8]
		_prev = timer;
    62bc:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    62be:	60a0      	str	r0, [r4, #8]
    62c0:	e7ee      	b.n	62a0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    62c2:	68d2      	ldr	r2, [r2, #12]
    62c4:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    62c6:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    62c8:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    62ca:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    62cc:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    62ce:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    62d0:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    62d2:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    62d4:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    62d6:	bc30      	pop	{r4, r5}
    62d8:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    62da:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    62dc:	60c4      	str	r4, [r0, #12]
		listActive = this;
    62de:	6010      	str	r0, [r2, #0]
    62e0:	e7de      	b.n	62a0 <MillisTimer::addToActiveList()+0x20>
    62e2:	bf00      	nop
    62e4:	1fff9cd8 	.word	0x1fff9cd8

000062e8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    62e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    62ea:	4e22      	ldr	r6, [pc, #136]	; (6374 <MillisTimer::runFromTimer()+0x8c>)
    62ec:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    62ee:	b32c      	cbz	r4, 633c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    62f0:	6823      	ldr	r3, [r4, #0]
    62f2:	2b00      	cmp	r3, #0
    62f4:	d13a      	bne.n	636c <MillisTimer::runFromTimer()+0x84>
    62f6:	4f20      	ldr	r7, [pc, #128]	; (6378 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    62f8:	461d      	mov	r5, r3
    62fa:	e004      	b.n	6306 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    62fc:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    62fe:	b1ec      	cbz	r4, 633c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    6300:	6823      	ldr	r3, [r4, #0]
    6302:	2b00      	cmp	r3, #0
    6304:	d132      	bne.n	636c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    6306:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    6308:	b103      	cbz	r3, 630c <MillisTimer::runFromTimer()+0x24>
    630a:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    630c:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    630e:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    6310:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    6312:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	42bb      	cmp	r3, r7
    6318:	d121      	bne.n	635e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    631a:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    631c:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    631e:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6320:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    6322:	d020      	beq.n	6366 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6324:	f7ff ff3c 	bl	61a0 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    6328:	6863      	ldr	r3, [r4, #4]
    632a:	2b00      	cmp	r3, #0
    632c:	d0e6      	beq.n	62fc <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    632e:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    6330:	4620      	mov	r0, r4
    6332:	f7ff ffa5 	bl	6280 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    6336:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    6338:	2c00      	cmp	r4, #0
    633a:	d1e1      	bne.n	6300 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    633c:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    6340:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    6342:	4a0e      	ldr	r2, [pc, #56]	; (637c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    6344:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    6346:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    6348:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    634a:	b903      	cbnz	r3, 634e <MillisTimer::runFromTimer()+0x66>
    634c:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    634e:	b128      	cbz	r0, 635c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    6350:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    6352:	f7ff ff95 	bl	6280 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    6356:	4620      	mov	r0, r4
    6358:	2800      	cmp	r0, #0
    635a:	d1f9      	bne.n	6350 <MillisTimer::runFromTimer()+0x68>
    635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    635e:	4622      	mov	r2, r4
    6360:	2100      	movs	r1, #0
    6362:	4798      	blx	r3
    6364:	e7e0      	b.n	6328 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6366:	6883      	ldr	r3, [r0, #8]
    6368:	4798      	blx	r3
    636a:	e7dd      	b.n	6328 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    636c:	3b01      	subs	r3, #1
    636e:	6023      	str	r3, [r4, #0]
			break;
    6370:	e7e4      	b.n	633c <MillisTimer::runFromTimer()+0x54>
    6372:	bf00      	nop
    6374:	1fff9cd8 	.word	0x1fff9cd8
    6378:	00006221 	.word	0x00006221
    637c:	1fff9ce8 	.word	0x1fff9ce8

00006380 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    6380:	4a02      	ldr	r2, [pc, #8]	; (638c <systick_isr+0xc>)
    6382:	6813      	ldr	r3, [r2, #0]
    6384:	3301      	adds	r3, #1
    6386:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    6388:	f7ff bfae 	b.w	62e8 <MillisTimer::runFromTimer()>
    638c:	1fff9b38 	.word	0x1fff9b38

00006390 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    6390:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    6392:	f7fb f9d7 	bl	1744 <setup>
	while (1) {
		loop();
    6396:	f7fb f9fd 	bl	1794 <loop>
		yield();
    639a:	f000 fa57 	bl	684c <yield>
    639e:	e7fa      	b.n	6396 <main+0x6>

000063a0 <operator new(unsigned int)>:
    63a0:	f001 b9d6 	b.w	7750 <malloc>

000063a4 <Print::print(String const&)>:
	return count;
}


size_t Print::print(const String &s)
{
    63a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    63a8:	688c      	ldr	r4, [r1, #8]
    63aa:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    63ac:	b1ec      	cbz	r4, 63ea <Print::print(String const&)+0x46>
    63ae:	2500      	movs	r5, #0
    63b0:	4606      	mov	r6, r0
    63b2:	4689      	mov	r9, r1
    63b4:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    63b6:	462b      	mov	r3, r5
    63b8:	2221      	movs	r2, #33	; 0x21
    63ba:	a901      	add	r1, sp, #4
    63bc:	4648      	mov	r0, r9
    63be:	f000 fa01 	bl	67c4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    63c2:	6832      	ldr	r2, [r6, #0]
    63c4:	2c20      	cmp	r4, #32
    63c6:	4623      	mov	r3, r4
    63c8:	bf28      	it	cs
    63ca:	2320      	movcs	r3, #32
    63cc:	f8d2 8004 	ldr.w	r8, [r2, #4]
    63d0:	a901      	add	r1, sp, #4
    63d2:	461a      	mov	r2, r3
    63d4:	4630      	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    63d6:	441d      	add	r5, r3
		len -= nbytes;
    63d8:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    63da:	47c0      	blx	r8
    63dc:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    63de:	2c00      	cmp	r4, #0
    63e0:	d1e9      	bne.n	63b6 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    63e2:	4638      	mov	r0, r7
    63e4:	b00b      	add	sp, #44	; 0x2c
    63e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    63ea:	4627      	mov	r7, r4
    63ec:	e7f9      	b.n	63e2 <Print::print(String const&)+0x3e>
    63ee:	bf00      	nop

000063f0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    63f0:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    63f2:	4a06      	ldr	r2, [pc, #24]	; (640c <Print::println()+0x1c>)
	return write(buf, 2);
    63f4:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    63f6:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    63f8:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    63fa:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    63fc:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    63fe:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    6402:	2202      	movs	r2, #2
    6404:	4798      	blx	r3
}
    6406:	b003      	add	sp, #12
    6408:	f85d fb04 	ldr.w	pc, [sp], #4
    640c:	000092bc 	.word	0x000092bc

00006410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    6410:	b5f0      	push	{r4, r5, r6, r7, lr}
    6412:	4607      	mov	r7, r0
    6414:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    6416:	2a00      	cmp	r2, #0
    6418:	d033      	beq.n	6482 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    641a:	2a01      	cmp	r2, #1
    641c:	bf08      	it	eq
    641e:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    6420:	b351      	cbz	r1, 6478 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    6422:	2421      	movs	r4, #33	; 0x21
    6424:	e000      	b.n	6428 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    6426:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    6428:	fbb1 f5f2 	udiv	r5, r1, r2
    642c:	fb02 1115 	mls	r1, r2, r5, r1
    6430:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6432:	2909      	cmp	r1, #9
    6434:	f100 0130 	add.w	r1, r0, #48	; 0x30
    6438:	bf98      	it	ls
    643a:	b2c8      	uxtbls	r0, r1
    643c:	a90a      	add	r1, sp, #40	; 0x28
    643e:	bf88      	it	hi
    6440:	3037      	addhi	r0, #55	; 0x37
    6442:	4421      	add	r1, r4
    6444:	bf88      	it	hi
    6446:	b2c0      	uxtbhi	r0, r0
    6448:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    644c:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    644e:	4629      	mov	r1, r5
    6450:	2d00      	cmp	r5, #0
    6452:	d1e8      	bne.n	6426 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    6454:	b133      	cbz	r3, 6464 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    6456:	3c01      	subs	r4, #1
    6458:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    645a:	ab0a      	add	r3, sp, #40	; 0x28
    645c:	4423      	add	r3, r4
    645e:	222d      	movs	r2, #45	; 0x2d
    6460:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    6464:	683b      	ldr	r3, [r7, #0]
    6466:	aa01      	add	r2, sp, #4
    6468:	1911      	adds	r1, r2, r4
    646a:	685b      	ldr	r3, [r3, #4]
    646c:	4638      	mov	r0, r7
    646e:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    6472:	4798      	blx	r3
}
    6474:	b00b      	add	sp, #44	; 0x2c
    6476:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    6478:	2230      	movs	r2, #48	; 0x30
    647a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    647e:	2421      	movs	r4, #33	; 0x21
    6480:	e7e8      	b.n	6454 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    6482:	6803      	ldr	r3, [r0, #0]
    6484:	b2c9      	uxtb	r1, r1
    6486:	681b      	ldr	r3, [r3, #0]
    6488:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    648a:	b00b      	add	sp, #44	; 0x2c
    648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    648e:	bf00      	nop

00006490 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    6490:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    6492:	bfba      	itte	lt
    6494:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    6496:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    6498:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    649a:	220a      	movs	r2, #10
    649c:	f7ff bfb8 	b.w	6410 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000064a0 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    64a0:	f7ff bc64 	b.w	5d6c <usb_serial_flush_input>

000064a4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    64a4:	f7ff bc3c 	b.w	5d20 <usb_serial_peekchar>

000064a8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    64a8:	f7ff bc16 	b.w	5cd8 <usb_serial_getchar>

000064ac <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    64ac:	f7ff bc50 	b.w	5d50 <usb_serial_available>

000064b0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    64b0:	f7ff bd2c 	b.w	5f0c <usb_serial_flush_output>

000064b4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    64b4:	f7ff bd06 	b.w	5ec4 <usb_serial_write_buffer_free>

000064b8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    64b8:	4608      	mov	r0, r1
    64ba:	4611      	mov	r1, r2
    64bc:	f7ff bc72 	b.w	5da4 <usb_serial_write>

000064c0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    64c0:	4608      	mov	r0, r1
    64c2:	f7ff bcf3 	b.w	5eac <usb_serial_putchar>
    64c6:	bf00      	nop

000064c8 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop

000064cc <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    64cc:	b5f0      	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    64ce:	4d16      	ldr	r5, [pc, #88]	; (6528 <random(unsigned long) [clone .part.0]+0x5c>)
    64d0:	682a      	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    64d2:	b30a      	cbz	r2, 6518 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    64d4:	4915      	ldr	r1, [pc, #84]	; (652c <random(unsigned long) [clone .part.0]+0x60>)
    64d6:	4b16      	ldr	r3, [pc, #88]	; (6530 <random(unsigned long) [clone .part.0]+0x64>)
    64d8:	f8df e05c 	ldr.w	lr, [pc, #92]	; 6538 <random(unsigned long) [clone .part.0]+0x6c>
    64dc:	fb82 6701 	smull	r6, r7, r2, r1
    64e0:	fb81 1402 	smull	r1, r4, r1, r2
    64e4:	17d6      	asrs	r6, r2, #31
    64e6:	19d1      	adds	r1, r2, r7
    64e8:	4414      	add	r4, r2
    64ea:	ebc6 4121 	rsb	r1, r6, r1, asr #16
    64ee:	ebc6 4424 	rsb	r4, r6, r4, asr #16
    64f2:	fb03 f404 	mul.w	r4, r3, r4
    64f6:	fb0e 2211 	mls	r2, lr, r1, r2
    64fa:	f244 13a7 	movw	r3, #16807	; 0x41a7
    64fe:	fb03 4302 	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    6502:	2b00      	cmp	r3, #0
    6504:	da02      	bge.n	650c <random(unsigned long) [clone .part.0]+0x40>
    6506:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    650a:	3b01      	subs	r3, #1
    650c:	fbb3 f2f0 	udiv	r2, r3, r0
	seed = x;
    6510:	602b      	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    6512:	fb00 3012 	mls	r0, r0, r2, r3
    6516:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    6518:	4b06      	ldr	r3, [pc, #24]	; (6534 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    651a:	602b      	str	r3, [r5, #0]
    651c:	fbb3 f2f0 	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    6520:	fb00 3012 	mls	r0, r0, r2, r3
    6524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6526:	bf00      	nop
    6528:	1fff9cec 	.word	0x1fff9cec
    652c:	834e0b5f 	.word	0x834e0b5f
    6530:	fffff4ec 	.word	0xfffff4ec
    6534:	1f0cce42 	.word	0x1f0cce42
    6538:	0001f31d 	.word	0x0001f31d

0000653c <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    653c:	b108      	cbz	r0, 6542 <random(unsigned long)+0x6>
    653e:	f7ff bfc5 	b.w	64cc <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    6542:	4770      	bx	lr

00006544 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    6544:	b510      	push	{r4, lr}
    6546:	4604      	mov	r4, r0
{
	free(buffer);
    6548:	6800      	ldr	r0, [r0, #0]
    654a:	f001 f909 	bl	7760 <free>
}
    654e:	4620      	mov	r0, r4
    6550:	bd10      	pop	{r4, pc}
    6552:	bf00      	nop

00006554 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    6554:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    6556:	6843      	ldr	r3, [r0, #4]
    6558:	428b      	cmp	r3, r1
    655a:	d301      	bcc.n	6560 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    655c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    655e:	bd38      	pop	{r3, r4, r5, pc}
    6560:	460d      	mov	r5, r1
    6562:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6564:	3101      	adds	r1, #1
    6566:	6800      	ldr	r0, [r0, #0]
    6568:	f001 fc86 	bl	7e78 <realloc>
	if (newbuffer) {
    656c:	2800      	cmp	r0, #0
    656e:	d0f6      	beq.n	655e <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    6570:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    6572:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    6576:	2b00      	cmp	r3, #0
    6578:	d1f0      	bne.n	655c <String::reserve(unsigned int)+0x8>
    657a:	7003      	strb	r3, [r0, #0]
    657c:	e7ee      	b.n	655c <String::reserve(unsigned int)+0x8>
    657e:	bf00      	nop

00006580 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    6580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6582:	4604      	mov	r4, r0
	if (length == 0) {
    6584:	4615      	mov	r5, r2
    6586:	b932      	cbnz	r2, 6596 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    6588:	6803      	ldr	r3, [r0, #0]
    658a:	b103      	cbz	r3, 658e <String::copy(char const*, unsigned int)+0xe>
    658c:	701a      	strb	r2, [r3, #0]
		len = 0;
    658e:	2300      	movs	r3, #0
    6590:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    6592:	4620      	mov	r0, r4
    6594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6596:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    6598:	4611      	mov	r1, r2
    659a:	f7ff ffdb 	bl	6554 <String::reserve(unsigned int)>
    659e:	4607      	mov	r7, r0
    65a0:	b948      	cbnz	r0, 65b6 <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    65a2:	6820      	ldr	r0, [r4, #0]
    65a4:	b110      	cbz	r0, 65ac <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    65a6:	f001 f8db 	bl	7760 <free>
			buffer = NULL;
    65aa:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    65ac:	2300      	movs	r3, #0
    65ae:	6063      	str	r3, [r4, #4]
    65b0:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    65b2:	4620      	mov	r0, r4
    65b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    65b6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    65b8:	4631      	mov	r1, r6
    65ba:	6820      	ldr	r0, [r4, #0]
    65bc:	f001 ffde 	bl	857c <strcpy>
	return *this;
    65c0:	e7e7      	b.n	6592 <String::copy(char const*, unsigned int)+0x12>
    65c2:	bf00      	nop

000065c4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    65c4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    65c6:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    65c8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    65ca:	6003      	str	r3, [r0, #0]
	capacity = 0;
    65cc:	6043      	str	r3, [r0, #4]
	len = 0;
    65ce:	6083      	str	r3, [r0, #8]
	flags = 0;
    65d0:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    65d2:	b141      	cbz	r1, 65e6 <String::String(char const*)+0x22>
    65d4:	4608      	mov	r0, r1
    65d6:	460d      	mov	r5, r1
    65d8:	f002 f832 	bl	8640 <strlen>
    65dc:	4629      	mov	r1, r5
    65de:	4602      	mov	r2, r0
    65e0:	4620      	mov	r0, r4
    65e2:	f7ff ffcd 	bl	6580 <String::copy(char const*, unsigned int)>
}
    65e6:	4620      	mov	r0, r4
    65e8:	bd38      	pop	{r3, r4, r5, pc}
    65ea:	bf00      	nop

000065ec <String::String(__FlashStringHelper const*)>:

String::String(const __FlashStringHelper *pgmstr)
    65ec:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    65ee:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    65f0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    65f2:	6003      	str	r3, [r0, #0]
	capacity = 0;
    65f4:	6043      	str	r3, [r0, #4]
	len = 0;
    65f6:	6083      	str	r3, [r0, #8]
	flags = 0;
    65f8:	7303      	strb	r3, [r0, #12]
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}

	// copy and move
	String & copy(const char *cstr, unsigned int length);
	String & copy(const __FlashStringHelper *s) { return copy((const char *)s, strlen((const char *)s)); }
    65fa:	4608      	mov	r0, r1
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const __FlashStringHelper *pgmstr)
    65fc:	460d      	mov	r5, r1
    65fe:	f002 f81f 	bl	8640 <strlen>
    6602:	4629      	mov	r1, r5
    6604:	4602      	mov	r2, r0
    6606:	4620      	mov	r0, r4
    6608:	f7ff ffba 	bl	6580 <String::copy(char const*, unsigned int)>
{
	init();
	*this = pgmstr;
}
    660c:	4620      	mov	r0, r4
    660e:	bd38      	pop	{r3, r4, r5, pc}

00006610 <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6610:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    6612:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    6614:	b510      	push	{r4, lr}
    6616:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6618:	6003      	str	r3, [r0, #0]
	capacity = 0;
    661a:	6043      	str	r3, [r0, #4]
	len = 0;
    661c:	6083      	str	r3, [r0, #8]
	flags = 0;
    661e:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    6620:	d003      	beq.n	662a <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    6622:	688a      	ldr	r2, [r1, #8]
    6624:	6809      	ldr	r1, [r1, #0]
    6626:	f7ff ffab 	bl	6580 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    662a:	4620      	mov	r0, r4
    662c:	bd10      	pop	{r4, pc}
    662e:	bf00      	nop

00006630 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    6630:	b538      	push	{r3, r4, r5, lr}
    6632:	4605      	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    6634:	4608      	mov	r0, r1
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    6636:	460c      	mov	r4, r1
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    6638:	f002 f802 	bl	8640 <strlen>
    663c:	4621      	mov	r1, r4
    663e:	4602      	mov	r2, r0
    6640:	4628      	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    6642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    6646:	f7ff bf9b 	b.w	6580 <String::copy(char const*, unsigned int)>
    664a:	bf00      	nop

0000664c <String::operator=(String const&)>:
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    664c:	4281      	cmp	r1, r0
    664e:	d003      	beq.n	6658 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    6650:	688a      	ldr	r2, [r1, #8]
    6652:	6809      	ldr	r1, [r1, #0]
    6654:	f7ff bf94 	b.w	6580 <String::copy(char const*, unsigned int)>
}
    6658:	4770      	bx	lr
    665a:	bf00      	nop

0000665c <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    665c:	b510      	push	{r4, lr}
    665e:	4604      	mov	r4, r0
	if (cstr) {
    6660:	b119      	cbz	r1, 666a <String::operator=(char const*)+0xe>
    6662:	f7ff ffe5 	bl	6630 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    6666:	4620      	mov	r0, r4
    6668:	bd10      	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    666a:	60a1      	str	r1, [r4, #8]
	}
	return *this;
}
    666c:	4620      	mov	r0, r4
    666e:	bd10      	pop	{r4, pc}

00006670 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    6670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6674:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    6676:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6678:	42bb      	cmp	r3, r7
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    667a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
    667c:	6881      	ldr	r1, [r0, #8]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    667e:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6680:	d80a      	bhi.n	6698 <String::append(char const*, unsigned int)+0x28>
    6682:	185a      	adds	r2, r3, r1
    6684:	4297      	cmp	r7, r2
    6686:	d207      	bcs.n	6698 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    6688:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    668c:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    6690:	b935      	cbnz	r5, 66a0 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    6692:	4620      	mov	r0, r4
    6694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    6698:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    669c:	2d00      	cmp	r5, #0
    669e:	d0f8      	beq.n	6692 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    66a0:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    66a2:	4631      	mov	r1, r6
    66a4:	4620      	mov	r0, r4
    66a6:	f7ff ff55 	bl	6554 <String::reserve(unsigned int)>
    66aa:	2800      	cmp	r0, #0
    66ac:	d0f1      	beq.n	6692 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    66ae:	f1b8 0f00 	cmp.w	r8, #0
    66b2:	d00e      	beq.n	66d2 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    66b4:	6823      	ldr	r3, [r4, #0]
    66b6:	68a0      	ldr	r0, [r4, #8]
    66b8:	462a      	mov	r2, r5
    66ba:	eb03 0109 	add.w	r1, r3, r9
    66be:	4418      	add	r0, r3
    66c0:	f7fe f8b8 	bl	4834 <memcpy>
		buffer[newlen] = 0;
    66c4:	6823      	ldr	r3, [r4, #0]
    66c6:	2200      	movs	r2, #0
    66c8:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    66ca:	60a6      	str	r6, [r4, #8]
	return *this;
}
    66cc:	4620      	mov	r0, r4
    66ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    66d2:	6820      	ldr	r0, [r4, #0]
    66d4:	68a3      	ldr	r3, [r4, #8]
    66d6:	4639      	mov	r1, r7
    66d8:	4418      	add	r0, r3
    66da:	f001 ff4f 	bl	857c <strcpy>
    66de:	e7f4      	b.n	66ca <String::append(char const*, unsigned int)+0x5a>

000066e0 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    66e0:	b510      	push	{r4, lr}
    66e2:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    66e4:	2300      	movs	r3, #0
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    66e6:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    66ea:	2201      	movs	r2, #1
    66ec:	a901      	add	r1, sp, #4
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    66ee:	4604      	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    66f0:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    66f4:	f7ff ffbc 	bl	6670 <String::append(char const*, unsigned int)>
	return *this;
}
    66f8:	4620      	mov	r0, r4
    66fa:	b002      	add	sp, #8
    66fc:	bd10      	pop	{r4, pc}
    66fe:	bf00      	nop

00006700 <String::append(long)>:
	append(buf, strlen(buf));
	return *this;
}

String & String::append(long num)
{
    6700:	b510      	push	{r4, lr}
    6702:	460b      	mov	r3, r1
    6704:	b084      	sub	sp, #16
    6706:	4604      	mov	r4, r0
	char buf[12];
	ltoa(num, buf, 10);
    6708:	a901      	add	r1, sp, #4
    670a:	4618      	mov	r0, r3
    670c:	220a      	movs	r2, #10
    670e:	f000 f981 	bl	6a14 <ltoa>
	append(buf, strlen(buf));
    6712:	a801      	add	r0, sp, #4
    6714:	f001 ff94 	bl	8640 <strlen>
    6718:	a901      	add	r1, sp, #4
    671a:	4602      	mov	r2, r0
    671c:	4620      	mov	r0, r4
    671e:	f7ff ffa7 	bl	6670 <String::append(char const*, unsigned int)>
	return *this;
}
    6722:	4620      	mov	r0, r4
    6724:	b004      	add	sp, #16
    6726:	bd10      	pop	{r4, pc}

00006728 <operator+(StringSumHelper const&, int)>:
	a.append(c);
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    6728:	b510      	push	{r4, lr}
    672a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append((long)num);
    672c:	f7ff ffe8 	bl	6700 <String::append(long)>
	return a;
}
    6730:	4620      	mov	r0, r4
    6732:	bd10      	pop	{r4, pc}

00006734 <String::compareTo(String const&) const>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
    6734:	6803      	ldr	r3, [r0, #0]
    6736:	b153      	cbz	r3, 674e <String::compareTo(String const&) const+0x1a>
    6738:	6809      	ldr	r1, [r1, #0]
    673a:	b111      	cbz	r1, 6742 <String::compareTo(String const&) const+0xe>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
    673c:	4618      	mov	r0, r3
    673e:	f001 bdb3 	b.w	82a8 <strcmp>

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
    6742:	6880      	ldr	r0, [r0, #8]
    6744:	b110      	cbz	r0, 674c <String::compareTo(String const&) const+0x18>
    6746:	7818      	ldrb	r0, [r3, #0]
    6748:	4770      	bx	lr
		return 0;
    674a:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
    674c:	4770      	bx	lr
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    674e:	680b      	ldr	r3, [r1, #0]
    6750:	2b00      	cmp	r3, #0
    6752:	d0fa      	beq.n	674a <String::compareTo(String const&) const+0x16>
    6754:	6888      	ldr	r0, [r1, #8]
    6756:	2800      	cmp	r0, #0
    6758:	d0f8      	beq.n	674c <String::compareTo(String const&) const+0x18>
    675a:	7818      	ldrb	r0, [r3, #0]
    675c:	4240      	negs	r0, r0
    675e:	4770      	bx	lr

00006760 <String::equals(String const&) const>:
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
    6760:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
    6762:	6882      	ldr	r2, [r0, #8]
    6764:	688b      	ldr	r3, [r1, #8]
    6766:	429a      	cmp	r2, r3
    6768:	d001      	beq.n	676e <String::equals(String const&) const+0xe>
    676a:	2000      	movs	r0, #0
}
    676c:	bd08      	pop	{r3, pc}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    676e:	f7ff ffe1 	bl	6734 <String::compareTo(String const&) const>
    6772:	fab0 f080 	clz	r0, r0
    6776:	0940      	lsrs	r0, r0, #5
    6778:	bd08      	pop	{r3, pc}
    677a:	bf00      	nop

0000677c <String::equals(char const*) const>:
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    677c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    677e:	b508      	push	{r3, lr}
    6780:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6782:	b92a      	cbnz	r2, 6790 <String::equals(char const*) const+0x14>
    6784:	b171      	cbz	r1, 67a4 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    6786:	7818      	ldrb	r0, [r3, #0]
    6788:	fab0 f080 	clz	r0, r0
    678c:	0940      	lsrs	r0, r0, #5
    678e:	bd08      	pop	{r3, pc}
    6790:	b131      	cbz	r1, 67a0 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    6792:	6800      	ldr	r0, [r0, #0]
    6794:	f001 fd88 	bl	82a8 <strcmp>
    6798:	fab0 f080 	clz	r0, r0
    679c:	0940      	lsrs	r0, r0, #5
}
    679e:	bd08      	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    67a0:	6803      	ldr	r3, [r0, #0]
    67a2:	e7f0      	b.n	6786 <String::equals(char const*) const+0xa>
    67a4:	2001      	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    67a6:	bd08      	pop	{r3, pc}

000067a8 <String::operator[](unsigned int)>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    67a8:	6883      	ldr	r3, [r0, #8]
    67aa:	428b      	cmp	r3, r1
    67ac:	d903      	bls.n	67b6 <String::operator[](unsigned int)+0xe>
    67ae:	6800      	ldr	r0, [r0, #0]
    67b0:	b108      	cbz	r0, 67b6 <String::operator[](unsigned int)+0xe>
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
    67b2:	4408      	add	r0, r1
}
    67b4:	4770      	bx	lr

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
    67b6:	4902      	ldr	r1, [pc, #8]	; (67c0 <String::operator[](unsigned int)+0x18>)
    67b8:	2300      	movs	r3, #0
    67ba:	700b      	strb	r3, [r1, #0]
		return dummy_writable_char;
    67bc:	4608      	mov	r0, r1
    67be:	4770      	bx	lr
    67c0:	1fff9cf0 	.word	0x1fff9cf0

000067c4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    67c4:	b1b2      	cbz	r2, 67f4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    67c6:	b1a9      	cbz	r1, 67f4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    67c8:	b538      	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    67ca:	6884      	ldr	r4, [r0, #8]
    67cc:	429c      	cmp	r4, r3
    67ce:	d90e      	bls.n	67ee <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    67d0:	1ae4      	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    67d2:	3a01      	subs	r2, #1
    67d4:	460d      	mov	r5, r1
    67d6:	4294      	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    67d8:	6801      	ldr	r1, [r0, #0]
    67da:	bf28      	it	cs
    67dc:	4614      	movcs	r4, r2
    67de:	4419      	add	r1, r3
    67e0:	4622      	mov	r2, r4
    67e2:	4628      	mov	r0, r5
    67e4:	f001 ff9a 	bl	871c <strncpy>
	buf[n] = 0;
    67e8:	2300      	movs	r3, #0
    67ea:	552b      	strb	r3, [r5, r4]
    67ec:	bd38      	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    67ee:	2300      	movs	r3, #0
    67f0:	700b      	strb	r3, [r1, #0]
		return;
    67f2:	bd38      	pop	{r3, r4, r5, pc}
    67f4:	4770      	bx	lr
    67f6:	bf00      	nop

000067f8 <String::substring(unsigned int, unsigned int) const>:
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    67f8:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    67fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67fc:	4604      	mov	r4, r0
    67fe:	460e      	mov	r6, r1
	if (left > right) {
    6800:	d902      	bls.n	6808 <String::substring(unsigned int, unsigned int) const+0x10>
    6802:	4611      	mov	r1, r2
    6804:	461a      	mov	r2, r3
    6806:	460b      	mov	r3, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6808:	2100      	movs	r1, #0
	capacity = 0;
	len = 0;
    680a:	60a1      	str	r1, [r4, #8]
	flags = 0;
    680c:	7321      	strb	r1, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    680e:	68b0      	ldr	r0, [r6, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6810:	6021      	str	r1, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    6812:	4282      	cmp	r2, r0
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    6814:	6061      	str	r1, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    6816:	d80e      	bhi.n	6836 <String::substring(unsigned int, unsigned int) const+0x3e>
    6818:	4283      	cmp	r3, r0
    681a:	bf28      	it	cs
    681c:	4603      	movcs	r3, r0
    681e:	461d      	mov	r5, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    6820:	6833      	ldr	r3, [r6, #0]
    6822:	5d5f      	ldrb	r7, [r3, r5]
	buffer[right] = '\0';	
    6824:	5559      	strb	r1, [r3, r5]
	out = buffer + left;  // pointer arithmetic
    6826:	6833      	ldr	r3, [r6, #0]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    6828:	1899      	adds	r1, r3, r2
    682a:	d006      	beq.n	683a <String::substring(unsigned int, unsigned int) const+0x42>
    682c:	4620      	mov	r0, r4
    682e:	f7ff feff 	bl	6630 <String::operator=(char const*) [clone .part.3]>
    6832:	6833      	ldr	r3, [r6, #0]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    6834:	555f      	strb	r7, [r3, r5]
	return out;
}
    6836:	4620      	mov	r0, r4
    6838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    683a:	60a1      	str	r1, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    683c:	555f      	strb	r7, [r3, r5]
    683e:	e7fa      	b.n	6836 <String::substring(unsigned int, unsigned int) const+0x3e>

00006840 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    6840:	6800      	ldr	r0, [r0, #0]
    6842:	b108      	cbz	r0, 6848 <String::toInt() const+0x8>
    6844:	f000 bf48 	b.w	76d8 <atol>
	return 0;
}
    6848:	4770      	bx	lr
    684a:	bf00      	nop

0000684c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    684c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    684e:	4c22      	ldr	r4, [pc, #136]	; (68d8 <yield+0x8c>)
    6850:	7823      	ldrb	r3, [r4, #0]
    6852:	b103      	cbz	r3, 6856 <yield+0xa>
    6854:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    6856:	2301      	movs	r3, #1
    6858:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    685a:	f7ff fa79 	bl	5d50 <usb_serial_available>
	if (Serial.available()) serialEvent();
    685e:	bb70      	cbnz	r0, 68be <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    6860:	f7fe fa7c 	bl	4d5c <serial_available>
	if (Serial1.available()) serialEvent1();
    6864:	bb40      	cbnz	r0, 68b8 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    6866:	f000 f8e7 	bl	6a38 <serial2_available>
	if (Serial2.available()) serialEvent2();
    686a:	bb10      	cbnz	r0, 68b2 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    686c:	f000 f97a 	bl	6b64 <serial3_available>
	if (Serial3.available()) serialEvent3();
    6870:	b9e0      	cbnz	r0, 68ac <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    6872:	2300      	movs	r3, #0
    6874:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    6876:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    687a:	2b00      	cmp	r3, #0
    687c:	d1ea      	bne.n	6854 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    687e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    6882:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    6884:	4b15      	ldr	r3, [pc, #84]	; (68dc <yield+0x90>)
    6886:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    6888:	b1e0      	cbz	r0, 68c4 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    688a:	4c15      	ldr	r4, [pc, #84]	; (68e0 <yield+0x94>)
    688c:	7822      	ldrb	r2, [r4, #0]
    688e:	b9ca      	cbnz	r2, 68c4 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    6890:	6945      	ldr	r5, [r0, #20]
    6892:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    6894:	2301      	movs	r3, #1
    6896:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    6898:	b1c5      	cbz	r5, 68cc <yield+0x80>
			firstYield->_prev = nullptr;
    689a:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    689c:	b901      	cbnz	r1, 68a0 <yield+0x54>
    689e:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    68a0:	2500      	movs	r5, #0
    68a2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    68a4:	6883      	ldr	r3, [r0, #8]
    68a6:	4798      	blx	r3
		runningFromYield = false;
    68a8:	7025      	strb	r5, [r4, #0]
    68aa:	e7d3      	b.n	6854 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    68ac:	f000 fa1a 	bl	6ce4 <serialEvent3()>
    68b0:	e7df      	b.n	6872 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    68b2:	f000 fa15 	bl	6ce0 <serialEvent2()>
    68b6:	e7d9      	b.n	686c <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    68b8:	f7fa ffc4 	bl	1844 <serialEvent1()>
    68bc:	e7d3      	b.n	6866 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    68be:	f7ff fe03 	bl	64c8 <serialEvent()>
    68c2:	e7cd      	b.n	6860 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    68c4:	2900      	cmp	r1, #0
    68c6:	d1c5      	bne.n	6854 <yield+0x8>
    68c8:	b662      	cpsie	i
    68ca:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    68cc:	4b05      	ldr	r3, [pc, #20]	; (68e4 <yield+0x98>)
    68ce:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    68d0:	2900      	cmp	r1, #0
    68d2:	d1e5      	bne.n	68a0 <yield+0x54>
    68d4:	e7e3      	b.n	689e <yield+0x52>
    68d6:	bf00      	nop
    68d8:	1fff9cf1 	.word	0x1fff9cf1
    68dc:	1fff9ce0 	.word	0x1fff9ce0
    68e0:	1fff9ce4 	.word	0x1fff9ce4
    68e4:	1fff9cdc 	.word	0x1fff9cdc

000068e8 <analog_init>:
#else
#error "F_BUS must be 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    68e8:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    68ea:	4829      	ldr	r0, [pc, #164]	; (6990 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    68ec:	4a29      	ldr	r2, [pc, #164]	; (6994 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    68ee:	4b2a      	ldr	r3, [pc, #168]	; (6998 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    68f0:	4d2a      	ldr	r5, [pc, #168]	; (699c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    68f2:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    68f4:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    68f6:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    68f8:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    68fa:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    68fc:	4c28      	ldr	r4, [pc, #160]	; (69a0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    68fe:	2b08      	cmp	r3, #8
    6900:	d030      	beq.n	6964 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    6902:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6904:	4827      	ldr	r0, [pc, #156]	; (69a4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6906:	4928      	ldr	r1, [pc, #160]	; (69a8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    6908:	d037      	beq.n	697a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    690a:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    690c:	bf0c      	ite	eq
    690e:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6910:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    6912:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6914:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    6916:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6918:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    691a:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    691c:	4b23      	ldr	r3, [pc, #140]	; (69ac <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    691e:	4924      	ldr	r1, [pc, #144]	; (69b0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    6920:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6922:	4a24      	ldr	r2, [pc, #144]	; (69b4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    6924:	b1bb      	cbz	r3, 6956 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6926:	2301      	movs	r3, #1
    6928:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    692a:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    692c:	4b22      	ldr	r3, [pc, #136]	; (69b8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    692e:	4923      	ldr	r1, [pc, #140]	; (69bc <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    6930:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    6932:	4a23      	ldr	r2, [pc, #140]	; (69c0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    6934:	2b01      	cmp	r3, #1
    6936:	d926      	bls.n	6986 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    6938:	2b04      	cmp	r3, #4
    693a:	d90f      	bls.n	695c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    693c:	2b08      	cmp	r3, #8
    693e:	d91e      	bls.n	697e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    6940:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    6942:	bf94      	ite	ls
    6944:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    6946:	2387      	movhi	r3, #135	; 0x87
    6948:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    694a:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    694c:	4b1d      	ldr	r3, [pc, #116]	; (69c4 <analog_init+0xdc>)
    694e:	2201      	movs	r2, #1
    6950:	701a      	strb	r2, [r3, #0]
}
    6952:	bc30      	pop	{r4, r5}
    6954:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    6956:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    6958:	6013      	str	r3, [r2, #0]
    695a:	e7e7      	b.n	692c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    695c:	2384      	movs	r3, #132	; 0x84
    695e:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    6960:	6013      	str	r3, [r2, #0]
    6962:	e7f3      	b.n	694c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6964:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6968:	490f      	ldr	r1, [pc, #60]	; (69a8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    696a:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    696c:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    696e:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6970:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6972:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6974:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6976:	600b      	str	r3, [r1, #0]
    6978:	e7d0      	b.n	691c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    697a:	2239      	movs	r2, #57	; 0x39
    697c:	e7f7      	b.n	696e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    697e:	2385      	movs	r3, #133	; 0x85
    6980:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    6982:	6013      	str	r3, [r2, #0]
    6984:	e7e2      	b.n	694c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    6986:	2380      	movs	r3, #128	; 0x80
    6988:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    698a:	6013      	str	r3, [r2, #0]
    698c:	e7de      	b.n	694c <analog_init+0x64>
    698e:	bf00      	nop
    6990:	40074000 	.word	0x40074000
    6994:	40074001 	.word	0x40074001
    6998:	1fff874c 	.word	0x1fff874c
    699c:	4003b008 	.word	0x4003b008
    69a0:	4003b00c 	.word	0x4003b00c
    69a4:	400bb008 	.word	0x400bb008
    69a8:	400bb00c 	.word	0x400bb00c
    69ac:	1fff9cf3 	.word	0x1fff9cf3
    69b0:	4003b020 	.word	0x4003b020
    69b4:	400bb020 	.word	0x400bb020
    69b8:	1fff874d 	.word	0x1fff874d
    69bc:	4003b024 	.word	0x4003b024
    69c0:	400bb024 	.word	0x400bb024
    69c4:	1fff9cf2 	.word	0x1fff9cf2

000069c8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    69c8:	b4f0      	push	{r4, r5, r6, r7}
    69ca:	1e4d      	subs	r5, r1, #1
    69cc:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    69ce:	2400      	movs	r4, #0
    69d0:	e000      	b.n	69d4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    69d2:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    69d4:	fbb0 f3f2 	udiv	r3, r0, r2
    69d8:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    69dc:	2809      	cmp	r0, #9
    69de:	f100 0730 	add.w	r7, r0, #48	; 0x30
    69e2:	bf8a      	itet	hi
    69e4:	3037      	addhi	r0, #55	; 0x37
    69e6:	b2f8      	uxtbls	r0, r7
    69e8:	b2c0      	uxtbhi	r0, r0
    69ea:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    69ee:	4618      	mov	r0, r3
    69f0:	2b00      	cmp	r3, #0
    69f2:	d1ee      	bne.n	69d2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    69f4:	190a      	adds	r2, r1, r4
    69f6:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    69f8:	b14c      	cbz	r4, 6a0e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    69fa:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    69fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    6a00:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6a02:	3301      	adds	r3, #1
    6a04:	1ae0      	subs	r0, r4, r3
    6a06:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    6a08:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6a0c:	dbf5      	blt.n	69fa <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    6a0e:	4608      	mov	r0, r1
    6a10:	bcf0      	pop	{r4, r5, r6, r7}
    6a12:	4770      	bx	lr

00006a14 <ltoa>:

char * ltoa(long val, char *buf, int radix)
{
    6a14:	b510      	push	{r4, lr}
	if (val >= 0) {
    6a16:	1e04      	subs	r4, r0, #0
    6a18:	db03      	blt.n	6a22 <ltoa+0xe>
	} else {
		buf[0] = '-';
		ultoa(-val, buf + 1, radix);
		return buf;
	}
}
    6a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
    6a1e:	f7ff bfd3 	b.w	69c8 <ultoa>
	} else {
		buf[0] = '-';
    6a22:	232d      	movs	r3, #45	; 0x2d
    6a24:	4620      	mov	r0, r4
		ultoa(-val, buf + 1, radix);
    6a26:	4240      	negs	r0, r0
    6a28:	460c      	mov	r4, r1
char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
	} else {
		buf[0] = '-';
    6a2a:	f801 3b01 	strb.w	r3, [r1], #1
		ultoa(-val, buf + 1, radix);
    6a2e:	f7ff ffcb 	bl	69c8 <ultoa>
		return buf;
	}
}
    6a32:	4620      	mov	r0, r4
    6a34:	bd10      	pop	{r4, pc}
    6a36:	bf00      	nop

00006a38 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6a38:	4a05      	ldr	r2, [pc, #20]	; (6a50 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    6a3a:	4b06      	ldr	r3, [pc, #24]	; (6a54 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6a3c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    6a3e:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6a40:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    6a42:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6a44:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    6a46:	bf38      	it	cc
    6a48:	3040      	addcc	r0, #64	; 0x40
    6a4a:	1ac0      	subs	r0, r0, r3
}
    6a4c:	4770      	bx	lr
    6a4e:	bf00      	nop
    6a50:	1fff9d64 	.word	0x1fff9d64
    6a54:	1fff9cf9 	.word	0x1fff9cf9

00006a58 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    6a58:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    6a5a:	4b38      	ldr	r3, [pc, #224]	; (6b3c <uart1_status_isr+0xe4>)
    6a5c:	791a      	ldrb	r2, [r3, #4]
    6a5e:	f012 0f30 	tst.w	r2, #48	; 0x30
    6a62:	d02c      	beq.n	6abe <uart1_status_isr+0x66>
		__disable_irq();
    6a64:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    6a66:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    6a68:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    6a6c:	2900      	cmp	r1, #0
    6a6e:	d03d      	beq.n	6aec <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    6a70:	b662      	cpsie	i
			head = rx_buffer_head;
    6a72:	4f33      	ldr	r7, [pc, #204]	; (6b40 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    6a74:	4933      	ldr	r1, [pc, #204]	; (6b44 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    6a76:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    6a78:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    6a7a:	4e33      	ldr	r6, [pc, #204]	; (6b48 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    6a7c:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    6a7e:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    6a80:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    6a82:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6a84:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    6a86:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6a88:	bf28      	it	cs
    6a8a:	2300      	movcs	r3, #0
				if (newhead != tail) {
    6a8c:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    6a8e:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    6a92:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    6a94:	bf1c      	itt	ne
    6a96:	54f1      	strbne	r1, [r6, r3]
    6a98:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    6a9a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    6a9e:	d1f0      	bne.n	6a82 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    6aa0:	4b2a      	ldr	r3, [pc, #168]	; (6b4c <uart1_status_isr+0xf4>)
    6aa2:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    6aa4:	b2c2      	uxtb	r2, r0
    6aa6:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    6aa8:	b14b      	cbz	r3, 6abe <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    6aaa:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6aac:	bf36      	itet	cc
    6aae:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    6ab2:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6ab4:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    6ab6:	2827      	cmp	r0, #39	; 0x27
    6ab8:	bfc4      	itt	gt
    6aba:	2201      	movgt	r2, #1
    6abc:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    6abe:	491f      	ldr	r1, [pc, #124]	; (6b3c <uart1_status_isr+0xe4>)
    6ac0:	78ca      	ldrb	r2, [r1, #3]
    6ac2:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    6ac4:	0615      	lsls	r5, r2, #24
    6ac6:	d416      	bmi.n	6af6 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    6ac8:	0652      	lsls	r2, r2, #25
    6aca:	d50d      	bpl.n	6ae8 <uart1_status_isr+0x90>
    6acc:	4b1b      	ldr	r3, [pc, #108]	; (6b3c <uart1_status_isr+0xe4>)
    6ace:	791b      	ldrb	r3, [r3, #4]
    6ad0:	065b      	lsls	r3, r3, #25
    6ad2:	d509      	bpl.n	6ae8 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6ad4:	4b1e      	ldr	r3, [pc, #120]	; (6b50 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    6ad6:	491f      	ldr	r1, [pc, #124]	; (6b54 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    6ad8:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    6ada:	2200      	movs	r2, #0
    6adc:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    6ade:	b103      	cbz	r3, 6ae2 <uart1_status_isr+0x8a>
    6ae0:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    6ae2:	4b16      	ldr	r3, [pc, #88]	; (6b3c <uart1_status_isr+0xe4>)
    6ae4:	223c      	movs	r2, #60	; 0x3c
    6ae6:	70da      	strb	r2, [r3, #3]
	}
}
    6ae8:	bcf0      	pop	{r4, r5, r6, r7}
    6aea:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6aec:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    6aee:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6af0:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    6af2:	b662      	cpsie	i
    6af4:	e7e3      	b.n	6abe <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    6af6:	790b      	ldrb	r3, [r1, #4]
    6af8:	061c      	lsls	r4, r3, #24
    6afa:	d5e5      	bpl.n	6ac8 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    6afc:	4b16      	ldr	r3, [pc, #88]	; (6b58 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    6afe:	4e17      	ldr	r6, [pc, #92]	; (6b5c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6b00:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    6b02:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6b04:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    6b06:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    6b08:	429c      	cmp	r4, r3
    6b0a:	d00e      	beq.n	6b2a <uart1_status_isr+0xd2>
    6b0c:	4d14      	ldr	r5, [pc, #80]	; (6b60 <uart1_status_isr+0x108>)
    6b0e:	e001      	b.n	6b14 <uart1_status_isr+0xbc>
    6b10:	42a3      	cmp	r3, r4
    6b12:	d00a      	beq.n	6b2a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    6b14:	3301      	adds	r3, #1
    6b16:	2b28      	cmp	r3, #40	; 0x28
    6b18:	bf28      	it	cs
    6b1a:	2300      	movcs	r3, #0
			avail = UART1_S1;
    6b1c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    6b1e:	5ce8      	ldrb	r0, [r5, r3]
    6b20:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    6b22:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    6b24:	7d08      	ldrb	r0, [r1, #20]
    6b26:	2807      	cmp	r0, #7
    6b28:	d9f2      	bls.n	6b10 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    6b2a:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    6b2c:	4903      	ldr	r1, [pc, #12]	; (6b3c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    6b2e:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    6b30:	790b      	ldrb	r3, [r1, #4]
    6b32:	0618      	lsls	r0, r3, #24
    6b34:	bf44      	itt	mi
    6b36:	237c      	movmi	r3, #124	; 0x7c
    6b38:	70cb      	strbmi	r3, [r1, #3]
    6b3a:	e7c5      	b.n	6ac8 <uart1_status_isr+0x70>
    6b3c:	4006b000 	.word	0x4006b000
    6b40:	1fff9d64 	.word	0x1fff9d64
    6b44:	1fff9cf9 	.word	0x1fff9cf9
    6b48:	1fff9d24 	.word	0x1fff9d24
    6b4c:	1fff9cf4 	.word	0x1fff9cf4
    6b50:	1fff9d68 	.word	0x1fff9d68
    6b54:	1fff9cf8 	.word	0x1fff9cf8
    6b58:	1fff9d6c 	.word	0x1fff9d6c
    6b5c:	1fff9d65 	.word	0x1fff9d65
    6b60:	1fff9cfc 	.word	0x1fff9cfc

00006b64 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6b64:	4a05      	ldr	r2, [pc, #20]	; (6b7c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    6b66:	4b06      	ldr	r3, [pc, #24]	; (6b80 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6b68:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    6b6a:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6b6c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    6b6e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6b70:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    6b72:	bf38      	it	cc
    6b74:	3040      	addcc	r0, #64	; 0x40
    6b76:	1ac0      	subs	r0, r0, r3
}
    6b78:	4770      	bx	lr
    6b7a:	bf00      	nop
    6b7c:	1fff9d74 	.word	0x1fff9d74
    6b80:	1fff9d75 	.word	0x1fff9d75

00006b84 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    6b84:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    6b86:	4b2b      	ldr	r3, [pc, #172]	; (6c34 <uart2_status_isr+0xb0>)
    6b88:	791a      	ldrb	r2, [r3, #4]
    6b8a:	0694      	lsls	r4, r2, #26
    6b8c:	d51f      	bpl.n	6bce <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6b8e:	482a      	ldr	r0, [pc, #168]	; (6c38 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    6b90:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    6b92:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6b94:	4929      	ldr	r1, [pc, #164]	; (6c3c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6b96:	3301      	adds	r3, #1
    6b98:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6b9a:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6b9c:	bfc8      	it	gt
    6b9e:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6ba0:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    6ba2:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6ba4:	d003      	beq.n	6bae <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    6ba6:	4c26      	ldr	r4, [pc, #152]	; (6c40 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    6ba8:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    6baa:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    6bac:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    6bae:	4a25      	ldr	r2, [pc, #148]	; (6c44 <uart2_status_isr+0xc0>)
    6bb0:	6811      	ldr	r1, [r2, #0]
    6bb2:	b161      	cbz	r1, 6bce <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    6bb4:	4a24      	ldr	r2, [pc, #144]	; (6c48 <uart2_status_isr+0xc4>)
    6bb6:	7812      	ldrb	r2, [r2, #0]
    6bb8:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    6bba:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    6bbc:	bf36      	itet	cc
    6bbe:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    6bc2:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    6bc4:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    6bc6:	2b27      	cmp	r3, #39	; 0x27
    6bc8:	bfc4      	itt	gt
    6bca:	2301      	movgt	r3, #1
    6bcc:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    6bce:	4a19      	ldr	r2, [pc, #100]	; (6c34 <uart2_status_isr+0xb0>)
    6bd0:	78d3      	ldrb	r3, [r2, #3]
    6bd2:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    6bd4:	0618      	lsls	r0, r3, #24
    6bd6:	d411      	bmi.n	6bfc <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    6bd8:	065a      	lsls	r2, r3, #25
    6bda:	d50d      	bpl.n	6bf8 <uart2_status_isr+0x74>
    6bdc:	4b15      	ldr	r3, [pc, #84]	; (6c34 <uart2_status_isr+0xb0>)
    6bde:	791b      	ldrb	r3, [r3, #4]
    6be0:	065b      	lsls	r3, r3, #25
    6be2:	d509      	bpl.n	6bf8 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6be4:	4b19      	ldr	r3, [pc, #100]	; (6c4c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    6be6:	491a      	ldr	r1, [pc, #104]	; (6c50 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    6be8:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    6bea:	2200      	movs	r2, #0
    6bec:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    6bee:	b103      	cbz	r3, 6bf2 <uart2_status_isr+0x6e>
    6bf0:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    6bf2:	4b10      	ldr	r3, [pc, #64]	; (6c34 <uart2_status_isr+0xb0>)
    6bf4:	222c      	movs	r2, #44	; 0x2c
    6bf6:	70da      	strb	r2, [r3, #3]
	}
}
    6bf8:	bc30      	pop	{r4, r5}
    6bfa:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    6bfc:	7911      	ldrb	r1, [r2, #4]
    6bfe:	0609      	lsls	r1, r1, #24
    6c00:	d5ea      	bpl.n	6bd8 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    6c02:	4914      	ldr	r1, [pc, #80]	; (6c54 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    6c04:	4810      	ldr	r0, [pc, #64]	; (6c48 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6c06:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    6c08:	7801      	ldrb	r1, [r0, #0]
    6c0a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    6c0c:	428c      	cmp	r4, r1
    6c0e:	d00d      	beq.n	6c2c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    6c10:	1c4a      	adds	r2, r1, #1
    6c12:	2a27      	cmp	r2, #39	; 0x27
    6c14:	bf84      	itt	hi
    6c16:	2100      	movhi	r1, #0
    6c18:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    6c1a:	4d0f      	ldr	r5, [pc, #60]	; (6c58 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    6c1c:	4c05      	ldr	r4, [pc, #20]	; (6c34 <uart2_status_isr+0xb0>)
    6c1e:	bf98      	it	ls
    6c20:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    6c22:	5caa      	ldrb	r2, [r5, r2]
    6c24:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    6c26:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    6c28:	7001      	strb	r1, [r0, #0]
    6c2a:	e7d5      	b.n	6bd8 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    6c2c:	216c      	movs	r1, #108	; 0x6c
    6c2e:	70d1      	strb	r1, [r2, #3]
    6c30:	e7d2      	b.n	6bd8 <uart2_status_isr+0x54>
    6c32:	bf00      	nop
    6c34:	4006c000 	.word	0x4006c000
    6c38:	1fff9d74 	.word	0x1fff9d74
    6c3c:	1fff9d75 	.word	0x1fff9d75
    6c40:	1fff9da0 	.word	0x1fff9da0
    6c44:	1fff9d70 	.word	0x1fff9d70
    6c48:	1fff9de1 	.word	0x1fff9de1
    6c4c:	1fff9de4 	.word	0x1fff9de4
    6c50:	1fff9de0 	.word	0x1fff9de0
    6c54:	1fff9de8 	.word	0x1fff9de8
    6c58:	1fff9d78 	.word	0x1fff9d78

00006c5c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    6c5c:	b570      	push	{r4, r5, r6, lr}
    6c5e:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    6c60:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6c62:	4b19      	ldr	r3, [pc, #100]	; (6cc8 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    6c64:	4d19      	ldr	r5, [pc, #100]	; (6ccc <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    6c66:	481a      	ldr	r0, [pc, #104]	; (6cd0 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6c68:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    6c6a:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    6c6c:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    6c6e:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6c70:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    6c72:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    6c74:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    6c76:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    6c78:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    6c7a:	7813      	ldrb	r3, [r2, #0]
    6c7c:	061b      	lsls	r3, r3, #24
    6c7e:	d5fc      	bpl.n	6c7a <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    6c80:	4b14      	ldr	r3, [pc, #80]	; (6cd4 <usb_init_serialnumber+0x78>)
    6c82:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    6c84:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6c86:	4b14      	ldr	r3, [pc, #80]	; (6cd8 <usb_init_serialnumber+0x7c>)
    6c88:	4c14      	ldr	r4, [pc, #80]	; (6cdc <usb_init_serialnumber+0x80>)
    6c8a:	4298      	cmp	r0, r3
    6c8c:	bf98      	it	ls
    6c8e:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    6c92:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6c94:	bf98      	it	ls
    6c96:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    6c98:	220a      	movs	r2, #10
    6c9a:	f7ff fe95 	bl	69c8 <ultoa>
    6c9e:	a901      	add	r1, sp, #4
    6ca0:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    6ca2:	2300      	movs	r3, #0
		char c = buf[i];
    6ca4:	f811 2b01 	ldrb.w	r2, [r1], #1
    6ca8:	3301      	adds	r3, #1
		if (!c) break;
    6caa:	b13a      	cbz	r2, 6cbc <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    6cac:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    6cae:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    6cb2:	d1f7      	bne.n	6ca4 <usb_init_serialnumber+0x48>
    6cb4:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6cb6:	7023      	strb	r3, [r4, #0]
}
    6cb8:	b004      	add	sp, #16
    6cba:	bd70      	pop	{r4, r5, r6, pc}
    6cbc:	005b      	lsls	r3, r3, #1
    6cbe:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6cc0:	7023      	strb	r3, [r4, #0]
}
    6cc2:	b004      	add	sp, #16
    6cc4:	bd70      	pop	{r4, r5, r6, pc}
    6cc6:	bf00      	nop
    6cc8:	40020000 	.word	0x40020000
    6ccc:	40020007 	.word	0x40020007
    6cd0:	40020006 	.word	0x40020006
    6cd4:	40020008 	.word	0x40020008
    6cd8:	0098967f 	.word	0x0098967f
    6cdc:	1fff87dc 	.word	0x1fff87dc

00006ce0 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    6ce0:	4770      	bx	lr
    6ce2:	bf00      	nop

00006ce4 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    6ce4:	4770      	bx	lr
    6ce6:	bf00      	nop

00006ce8 <__aeabi_drsub>:
    6ce8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    6cec:	e002      	b.n	6cf4 <__adddf3>
    6cee:	bf00      	nop

00006cf0 <__aeabi_dsub>:
    6cf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00006cf4 <__adddf3>:
    6cf4:	b530      	push	{r4, r5, lr}
    6cf6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    6cfa:	ea4f 0543 	mov.w	r5, r3, lsl #1
    6cfe:	ea94 0f05 	teq	r4, r5
    6d02:	bf08      	it	eq
    6d04:	ea90 0f02 	teqeq	r0, r2
    6d08:	bf1f      	itttt	ne
    6d0a:	ea54 0c00 	orrsne.w	ip, r4, r0
    6d0e:	ea55 0c02 	orrsne.w	ip, r5, r2
    6d12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    6d16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6d1a:	f000 80e2 	beq.w	6ee2 <__adddf3+0x1ee>
    6d1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    6d22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    6d26:	bfb8      	it	lt
    6d28:	426d      	neglt	r5, r5
    6d2a:	dd0c      	ble.n	6d46 <__adddf3+0x52>
    6d2c:	442c      	add	r4, r5
    6d2e:	ea80 0202 	eor.w	r2, r0, r2
    6d32:	ea81 0303 	eor.w	r3, r1, r3
    6d36:	ea82 0000 	eor.w	r0, r2, r0
    6d3a:	ea83 0101 	eor.w	r1, r3, r1
    6d3e:	ea80 0202 	eor.w	r2, r0, r2
    6d42:	ea81 0303 	eor.w	r3, r1, r3
    6d46:	2d36      	cmp	r5, #54	; 0x36
    6d48:	bf88      	it	hi
    6d4a:	bd30      	pophi	{r4, r5, pc}
    6d4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6d50:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6d54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6d58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6d5c:	d002      	beq.n	6d64 <__adddf3+0x70>
    6d5e:	4240      	negs	r0, r0
    6d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6d64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6d68:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6d6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    6d70:	d002      	beq.n	6d78 <__adddf3+0x84>
    6d72:	4252      	negs	r2, r2
    6d74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6d78:	ea94 0f05 	teq	r4, r5
    6d7c:	f000 80a7 	beq.w	6ece <__adddf3+0x1da>
    6d80:	f1a4 0401 	sub.w	r4, r4, #1
    6d84:	f1d5 0e20 	rsbs	lr, r5, #32
    6d88:	db0d      	blt.n	6da6 <__adddf3+0xb2>
    6d8a:	fa02 fc0e 	lsl.w	ip, r2, lr
    6d8e:	fa22 f205 	lsr.w	r2, r2, r5
    6d92:	1880      	adds	r0, r0, r2
    6d94:	f141 0100 	adc.w	r1, r1, #0
    6d98:	fa03 f20e 	lsl.w	r2, r3, lr
    6d9c:	1880      	adds	r0, r0, r2
    6d9e:	fa43 f305 	asr.w	r3, r3, r5
    6da2:	4159      	adcs	r1, r3
    6da4:	e00e      	b.n	6dc4 <__adddf3+0xd0>
    6da6:	f1a5 0520 	sub.w	r5, r5, #32
    6daa:	f10e 0e20 	add.w	lr, lr, #32
    6dae:	2a01      	cmp	r2, #1
    6db0:	fa03 fc0e 	lsl.w	ip, r3, lr
    6db4:	bf28      	it	cs
    6db6:	f04c 0c02 	orrcs.w	ip, ip, #2
    6dba:	fa43 f305 	asr.w	r3, r3, r5
    6dbe:	18c0      	adds	r0, r0, r3
    6dc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    6dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6dc8:	d507      	bpl.n	6dda <__adddf3+0xe6>
    6dca:	f04f 0e00 	mov.w	lr, #0
    6dce:	f1dc 0c00 	rsbs	ip, ip, #0
    6dd2:	eb7e 0000 	sbcs.w	r0, lr, r0
    6dd6:	eb6e 0101 	sbc.w	r1, lr, r1
    6dda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    6dde:	d31b      	bcc.n	6e18 <__adddf3+0x124>
    6de0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    6de4:	d30c      	bcc.n	6e00 <__adddf3+0x10c>
    6de6:	0849      	lsrs	r1, r1, #1
    6de8:	ea5f 0030 	movs.w	r0, r0, rrx
    6dec:	ea4f 0c3c 	mov.w	ip, ip, rrx
    6df0:	f104 0401 	add.w	r4, r4, #1
    6df4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    6df8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    6dfc:	f080 809a 	bcs.w	6f34 <__adddf3+0x240>
    6e00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6e04:	bf08      	it	eq
    6e06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6e0a:	f150 0000 	adcs.w	r0, r0, #0
    6e0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6e12:	ea41 0105 	orr.w	r1, r1, r5
    6e16:	bd30      	pop	{r4, r5, pc}
    6e18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    6e1c:	4140      	adcs	r0, r0
    6e1e:	eb41 0101 	adc.w	r1, r1, r1
    6e22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6e26:	f1a4 0401 	sub.w	r4, r4, #1
    6e2a:	d1e9      	bne.n	6e00 <__adddf3+0x10c>
    6e2c:	f091 0f00 	teq	r1, #0
    6e30:	bf04      	itt	eq
    6e32:	4601      	moveq	r1, r0
    6e34:	2000      	moveq	r0, #0
    6e36:	fab1 f381 	clz	r3, r1
    6e3a:	bf08      	it	eq
    6e3c:	3320      	addeq	r3, #32
    6e3e:	f1a3 030b 	sub.w	r3, r3, #11
    6e42:	f1b3 0220 	subs.w	r2, r3, #32
    6e46:	da0c      	bge.n	6e62 <__adddf3+0x16e>
    6e48:	320c      	adds	r2, #12
    6e4a:	dd08      	ble.n	6e5e <__adddf3+0x16a>
    6e4c:	f102 0c14 	add.w	ip, r2, #20
    6e50:	f1c2 020c 	rsb	r2, r2, #12
    6e54:	fa01 f00c 	lsl.w	r0, r1, ip
    6e58:	fa21 f102 	lsr.w	r1, r1, r2
    6e5c:	e00c      	b.n	6e78 <__adddf3+0x184>
    6e5e:	f102 0214 	add.w	r2, r2, #20
    6e62:	bfd8      	it	le
    6e64:	f1c2 0c20 	rsble	ip, r2, #32
    6e68:	fa01 f102 	lsl.w	r1, r1, r2
    6e6c:	fa20 fc0c 	lsr.w	ip, r0, ip
    6e70:	bfdc      	itt	le
    6e72:	ea41 010c 	orrle.w	r1, r1, ip
    6e76:	4090      	lslle	r0, r2
    6e78:	1ae4      	subs	r4, r4, r3
    6e7a:	bfa2      	ittt	ge
    6e7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    6e80:	4329      	orrge	r1, r5
    6e82:	bd30      	popge	{r4, r5, pc}
    6e84:	ea6f 0404 	mvn.w	r4, r4
    6e88:	3c1f      	subs	r4, #31
    6e8a:	da1c      	bge.n	6ec6 <__adddf3+0x1d2>
    6e8c:	340c      	adds	r4, #12
    6e8e:	dc0e      	bgt.n	6eae <__adddf3+0x1ba>
    6e90:	f104 0414 	add.w	r4, r4, #20
    6e94:	f1c4 0220 	rsb	r2, r4, #32
    6e98:	fa20 f004 	lsr.w	r0, r0, r4
    6e9c:	fa01 f302 	lsl.w	r3, r1, r2
    6ea0:	ea40 0003 	orr.w	r0, r0, r3
    6ea4:	fa21 f304 	lsr.w	r3, r1, r4
    6ea8:	ea45 0103 	orr.w	r1, r5, r3
    6eac:	bd30      	pop	{r4, r5, pc}
    6eae:	f1c4 040c 	rsb	r4, r4, #12
    6eb2:	f1c4 0220 	rsb	r2, r4, #32
    6eb6:	fa20 f002 	lsr.w	r0, r0, r2
    6eba:	fa01 f304 	lsl.w	r3, r1, r4
    6ebe:	ea40 0003 	orr.w	r0, r0, r3
    6ec2:	4629      	mov	r1, r5
    6ec4:	bd30      	pop	{r4, r5, pc}
    6ec6:	fa21 f004 	lsr.w	r0, r1, r4
    6eca:	4629      	mov	r1, r5
    6ecc:	bd30      	pop	{r4, r5, pc}
    6ece:	f094 0f00 	teq	r4, #0
    6ed2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    6ed6:	bf06      	itte	eq
    6ed8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    6edc:	3401      	addeq	r4, #1
    6ede:	3d01      	subne	r5, #1
    6ee0:	e74e      	b.n	6d80 <__adddf3+0x8c>
    6ee2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6ee6:	bf18      	it	ne
    6ee8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6eec:	d029      	beq.n	6f42 <__adddf3+0x24e>
    6eee:	ea94 0f05 	teq	r4, r5
    6ef2:	bf08      	it	eq
    6ef4:	ea90 0f02 	teqeq	r0, r2
    6ef8:	d005      	beq.n	6f06 <__adddf3+0x212>
    6efa:	ea54 0c00 	orrs.w	ip, r4, r0
    6efe:	bf04      	itt	eq
    6f00:	4619      	moveq	r1, r3
    6f02:	4610      	moveq	r0, r2
    6f04:	bd30      	pop	{r4, r5, pc}
    6f06:	ea91 0f03 	teq	r1, r3
    6f0a:	bf1e      	ittt	ne
    6f0c:	2100      	movne	r1, #0
    6f0e:	2000      	movne	r0, #0
    6f10:	bd30      	popne	{r4, r5, pc}
    6f12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    6f16:	d105      	bne.n	6f24 <__adddf3+0x230>
    6f18:	0040      	lsls	r0, r0, #1
    6f1a:	4149      	adcs	r1, r1
    6f1c:	bf28      	it	cs
    6f1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    6f22:	bd30      	pop	{r4, r5, pc}
    6f24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    6f28:	bf3c      	itt	cc
    6f2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    6f2e:	bd30      	popcc	{r4, r5, pc}
    6f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6f34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    6f38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6f3c:	f04f 0000 	mov.w	r0, #0
    6f40:	bd30      	pop	{r4, r5, pc}
    6f42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6f46:	bf1a      	itte	ne
    6f48:	4619      	movne	r1, r3
    6f4a:	4610      	movne	r0, r2
    6f4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    6f50:	bf1c      	itt	ne
    6f52:	460b      	movne	r3, r1
    6f54:	4602      	movne	r2, r0
    6f56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6f5a:	bf06      	itte	eq
    6f5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    6f60:	ea91 0f03 	teqeq	r1, r3
    6f64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    6f68:	bd30      	pop	{r4, r5, pc}
    6f6a:	bf00      	nop

00006f6c <__aeabi_ui2d>:
    6f6c:	f090 0f00 	teq	r0, #0
    6f70:	bf04      	itt	eq
    6f72:	2100      	moveq	r1, #0
    6f74:	4770      	bxeq	lr
    6f76:	b530      	push	{r4, r5, lr}
    6f78:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6f7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6f80:	f04f 0500 	mov.w	r5, #0
    6f84:	f04f 0100 	mov.w	r1, #0
    6f88:	e750      	b.n	6e2c <__adddf3+0x138>
    6f8a:	bf00      	nop

00006f8c <__aeabi_i2d>:
    6f8c:	f090 0f00 	teq	r0, #0
    6f90:	bf04      	itt	eq
    6f92:	2100      	moveq	r1, #0
    6f94:	4770      	bxeq	lr
    6f96:	b530      	push	{r4, r5, lr}
    6f98:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6f9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6fa0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    6fa4:	bf48      	it	mi
    6fa6:	4240      	negmi	r0, r0
    6fa8:	f04f 0100 	mov.w	r1, #0
    6fac:	e73e      	b.n	6e2c <__adddf3+0x138>
    6fae:	bf00      	nop

00006fb0 <__aeabi_f2d>:
    6fb0:	0042      	lsls	r2, r0, #1
    6fb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    6fb6:	ea4f 0131 	mov.w	r1, r1, rrx
    6fba:	ea4f 7002 	mov.w	r0, r2, lsl #28
    6fbe:	bf1f      	itttt	ne
    6fc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    6fc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6fc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    6fcc:	4770      	bxne	lr
    6fce:	f092 0f00 	teq	r2, #0
    6fd2:	bf14      	ite	ne
    6fd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    6fd8:	4770      	bxeq	lr
    6fda:	b530      	push	{r4, r5, lr}
    6fdc:	f44f 7460 	mov.w	r4, #896	; 0x380
    6fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6fe8:	e720      	b.n	6e2c <__adddf3+0x138>
    6fea:	bf00      	nop

00006fec <__aeabi_ul2d>:
    6fec:	ea50 0201 	orrs.w	r2, r0, r1
    6ff0:	bf08      	it	eq
    6ff2:	4770      	bxeq	lr
    6ff4:	b530      	push	{r4, r5, lr}
    6ff6:	f04f 0500 	mov.w	r5, #0
    6ffa:	e00a      	b.n	7012 <__aeabi_l2d+0x16>

00006ffc <__aeabi_l2d>:
    6ffc:	ea50 0201 	orrs.w	r2, r0, r1
    7000:	bf08      	it	eq
    7002:	4770      	bxeq	lr
    7004:	b530      	push	{r4, r5, lr}
    7006:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    700a:	d502      	bpl.n	7012 <__aeabi_l2d+0x16>
    700c:	4240      	negs	r0, r0
    700e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    7012:	f44f 6480 	mov.w	r4, #1024	; 0x400
    7016:	f104 0432 	add.w	r4, r4, #50	; 0x32
    701a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    701e:	f43f aedc 	beq.w	6dda <__adddf3+0xe6>
    7022:	f04f 0203 	mov.w	r2, #3
    7026:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    702a:	bf18      	it	ne
    702c:	3203      	addne	r2, #3
    702e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    7032:	bf18      	it	ne
    7034:	3203      	addne	r2, #3
    7036:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    703a:	f1c2 0320 	rsb	r3, r2, #32
    703e:	fa00 fc03 	lsl.w	ip, r0, r3
    7042:	fa20 f002 	lsr.w	r0, r0, r2
    7046:	fa01 fe03 	lsl.w	lr, r1, r3
    704a:	ea40 000e 	orr.w	r0, r0, lr
    704e:	fa21 f102 	lsr.w	r1, r1, r2
    7052:	4414      	add	r4, r2
    7054:	e6c1      	b.n	6dda <__adddf3+0xe6>
    7056:	bf00      	nop

00007058 <__aeabi_d2uiz>:
    7058:	004a      	lsls	r2, r1, #1
    705a:	d211      	bcs.n	7080 <__aeabi_d2uiz+0x28>
    705c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    7060:	d211      	bcs.n	7086 <__aeabi_d2uiz+0x2e>
    7062:	d50d      	bpl.n	7080 <__aeabi_d2uiz+0x28>
    7064:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    7068:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    706c:	d40e      	bmi.n	708c <__aeabi_d2uiz+0x34>
    706e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    7072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7076:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    707a:	fa23 f002 	lsr.w	r0, r3, r2
    707e:	4770      	bx	lr
    7080:	f04f 0000 	mov.w	r0, #0
    7084:	4770      	bx	lr
    7086:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    708a:	d102      	bne.n	7092 <__aeabi_d2uiz+0x3a>
    708c:	f04f 30ff 	mov.w	r0, #4294967295
    7090:	4770      	bx	lr
    7092:	f04f 0000 	mov.w	r0, #0
    7096:	4770      	bx	lr

00007098 <__aeabi_frsub>:
    7098:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    709c:	e002      	b.n	70a4 <__addsf3>
    709e:	bf00      	nop

000070a0 <__aeabi_fsub>:
    70a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000070a4 <__addsf3>:
    70a4:	0042      	lsls	r2, r0, #1
    70a6:	bf1f      	itttt	ne
    70a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    70ac:	ea92 0f03 	teqne	r2, r3
    70b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    70b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    70b8:	d06a      	beq.n	7190 <__addsf3+0xec>
    70ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
    70be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    70c2:	bfc1      	itttt	gt
    70c4:	18d2      	addgt	r2, r2, r3
    70c6:	4041      	eorgt	r1, r0
    70c8:	4048      	eorgt	r0, r1
    70ca:	4041      	eorgt	r1, r0
    70cc:	bfb8      	it	lt
    70ce:	425b      	neglt	r3, r3
    70d0:	2b19      	cmp	r3, #25
    70d2:	bf88      	it	hi
    70d4:	4770      	bxhi	lr
    70d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    70da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    70de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    70e2:	bf18      	it	ne
    70e4:	4240      	negne	r0, r0
    70e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    70ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    70ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    70f2:	bf18      	it	ne
    70f4:	4249      	negne	r1, r1
    70f6:	ea92 0f03 	teq	r2, r3
    70fa:	d03f      	beq.n	717c <__addsf3+0xd8>
    70fc:	f1a2 0201 	sub.w	r2, r2, #1
    7100:	fa41 fc03 	asr.w	ip, r1, r3
    7104:	eb10 000c 	adds.w	r0, r0, ip
    7108:	f1c3 0320 	rsb	r3, r3, #32
    710c:	fa01 f103 	lsl.w	r1, r1, r3
    7110:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    7114:	d502      	bpl.n	711c <__addsf3+0x78>
    7116:	4249      	negs	r1, r1
    7118:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    711c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7120:	d313      	bcc.n	714a <__addsf3+0xa6>
    7122:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    7126:	d306      	bcc.n	7136 <__addsf3+0x92>
    7128:	0840      	lsrs	r0, r0, #1
    712a:	ea4f 0131 	mov.w	r1, r1, rrx
    712e:	f102 0201 	add.w	r2, r2, #1
    7132:	2afe      	cmp	r2, #254	; 0xfe
    7134:	d251      	bcs.n	71da <__addsf3+0x136>
    7136:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    713a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    713e:	bf08      	it	eq
    7140:	f020 0001 	biceq.w	r0, r0, #1
    7144:	ea40 0003 	orr.w	r0, r0, r3
    7148:	4770      	bx	lr
    714a:	0049      	lsls	r1, r1, #1
    714c:	eb40 0000 	adc.w	r0, r0, r0
    7150:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    7154:	f1a2 0201 	sub.w	r2, r2, #1
    7158:	d1ed      	bne.n	7136 <__addsf3+0x92>
    715a:	fab0 fc80 	clz	ip, r0
    715e:	f1ac 0c08 	sub.w	ip, ip, #8
    7162:	ebb2 020c 	subs.w	r2, r2, ip
    7166:	fa00 f00c 	lsl.w	r0, r0, ip
    716a:	bfaa      	itet	ge
    716c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    7170:	4252      	neglt	r2, r2
    7172:	4318      	orrge	r0, r3
    7174:	bfbc      	itt	lt
    7176:	40d0      	lsrlt	r0, r2
    7178:	4318      	orrlt	r0, r3
    717a:	4770      	bx	lr
    717c:	f092 0f00 	teq	r2, #0
    7180:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    7184:	bf06      	itte	eq
    7186:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    718a:	3201      	addeq	r2, #1
    718c:	3b01      	subne	r3, #1
    718e:	e7b5      	b.n	70fc <__addsf3+0x58>
    7190:	ea4f 0341 	mov.w	r3, r1, lsl #1
    7194:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7198:	bf18      	it	ne
    719a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    719e:	d021      	beq.n	71e4 <__addsf3+0x140>
    71a0:	ea92 0f03 	teq	r2, r3
    71a4:	d004      	beq.n	71b0 <__addsf3+0x10c>
    71a6:	f092 0f00 	teq	r2, #0
    71aa:	bf08      	it	eq
    71ac:	4608      	moveq	r0, r1
    71ae:	4770      	bx	lr
    71b0:	ea90 0f01 	teq	r0, r1
    71b4:	bf1c      	itt	ne
    71b6:	2000      	movne	r0, #0
    71b8:	4770      	bxne	lr
    71ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    71be:	d104      	bne.n	71ca <__addsf3+0x126>
    71c0:	0040      	lsls	r0, r0, #1
    71c2:	bf28      	it	cs
    71c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    71c8:	4770      	bx	lr
    71ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    71ce:	bf3c      	itt	cc
    71d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    71d4:	4770      	bxcc	lr
    71d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    71da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    71de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    71e2:	4770      	bx	lr
    71e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    71e8:	bf16      	itet	ne
    71ea:	4608      	movne	r0, r1
    71ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    71f0:	4601      	movne	r1, r0
    71f2:	0242      	lsls	r2, r0, #9
    71f4:	bf06      	itte	eq
    71f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    71fa:	ea90 0f01 	teqeq	r0, r1
    71fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    7202:	4770      	bx	lr

00007204 <__aeabi_ui2f>:
    7204:	f04f 0300 	mov.w	r3, #0
    7208:	e004      	b.n	7214 <__aeabi_i2f+0x8>
    720a:	bf00      	nop

0000720c <__aeabi_i2f>:
    720c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    7210:	bf48      	it	mi
    7212:	4240      	negmi	r0, r0
    7214:	ea5f 0c00 	movs.w	ip, r0
    7218:	bf08      	it	eq
    721a:	4770      	bxeq	lr
    721c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    7220:	4601      	mov	r1, r0
    7222:	f04f 0000 	mov.w	r0, #0
    7226:	e01c      	b.n	7262 <__aeabi_l2f+0x2a>

00007228 <__aeabi_ul2f>:
    7228:	ea50 0201 	orrs.w	r2, r0, r1
    722c:	bf08      	it	eq
    722e:	4770      	bxeq	lr
    7230:	f04f 0300 	mov.w	r3, #0
    7234:	e00a      	b.n	724c <__aeabi_l2f+0x14>
    7236:	bf00      	nop

00007238 <__aeabi_l2f>:
    7238:	ea50 0201 	orrs.w	r2, r0, r1
    723c:	bf08      	it	eq
    723e:	4770      	bxeq	lr
    7240:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    7244:	d502      	bpl.n	724c <__aeabi_l2f+0x14>
    7246:	4240      	negs	r0, r0
    7248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    724c:	ea5f 0c01 	movs.w	ip, r1
    7250:	bf02      	ittt	eq
    7252:	4684      	moveq	ip, r0
    7254:	4601      	moveq	r1, r0
    7256:	2000      	moveq	r0, #0
    7258:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    725c:	bf08      	it	eq
    725e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    7262:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    7266:	fabc f28c 	clz	r2, ip
    726a:	3a08      	subs	r2, #8
    726c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    7270:	db10      	blt.n	7294 <__aeabi_l2f+0x5c>
    7272:	fa01 fc02 	lsl.w	ip, r1, r2
    7276:	4463      	add	r3, ip
    7278:	fa00 fc02 	lsl.w	ip, r0, r2
    727c:	f1c2 0220 	rsb	r2, r2, #32
    7280:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    7284:	fa20 f202 	lsr.w	r2, r0, r2
    7288:	eb43 0002 	adc.w	r0, r3, r2
    728c:	bf08      	it	eq
    728e:	f020 0001 	biceq.w	r0, r0, #1
    7292:	4770      	bx	lr
    7294:	f102 0220 	add.w	r2, r2, #32
    7298:	fa01 fc02 	lsl.w	ip, r1, r2
    729c:	f1c2 0220 	rsb	r2, r2, #32
    72a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    72a4:	fa21 f202 	lsr.w	r2, r1, r2
    72a8:	eb43 0002 	adc.w	r0, r3, r2
    72ac:	bf08      	it	eq
    72ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    72b2:	4770      	bx	lr

000072b4 <__aeabi_fmul>:
    72b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    72b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    72bc:	bf1e      	ittt	ne
    72be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    72c2:	ea92 0f0c 	teqne	r2, ip
    72c6:	ea93 0f0c 	teqne	r3, ip
    72ca:	d06f      	beq.n	73ac <__aeabi_fmul+0xf8>
    72cc:	441a      	add	r2, r3
    72ce:	ea80 0c01 	eor.w	ip, r0, r1
    72d2:	0240      	lsls	r0, r0, #9
    72d4:	bf18      	it	ne
    72d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    72da:	d01e      	beq.n	731a <__aeabi_fmul+0x66>
    72dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    72e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    72e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    72e8:	fba0 3101 	umull	r3, r1, r0, r1
    72ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    72f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    72f4:	bf3e      	ittt	cc
    72f6:	0049      	lslcc	r1, r1, #1
    72f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    72fc:	005b      	lslcc	r3, r3, #1
    72fe:	ea40 0001 	orr.w	r0, r0, r1
    7302:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    7306:	2afd      	cmp	r2, #253	; 0xfd
    7308:	d81d      	bhi.n	7346 <__aeabi_fmul+0x92>
    730a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    730e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    7312:	bf08      	it	eq
    7314:	f020 0001 	biceq.w	r0, r0, #1
    7318:	4770      	bx	lr
    731a:	f090 0f00 	teq	r0, #0
    731e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    7322:	bf08      	it	eq
    7324:	0249      	lsleq	r1, r1, #9
    7326:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    732a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    732e:	3a7f      	subs	r2, #127	; 0x7f
    7330:	bfc2      	ittt	gt
    7332:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    7336:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    733a:	4770      	bxgt	lr
    733c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7340:	f04f 0300 	mov.w	r3, #0
    7344:	3a01      	subs	r2, #1
    7346:	dc5d      	bgt.n	7404 <__aeabi_fmul+0x150>
    7348:	f112 0f19 	cmn.w	r2, #25
    734c:	bfdc      	itt	le
    734e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    7352:	4770      	bxle	lr
    7354:	f1c2 0200 	rsb	r2, r2, #0
    7358:	0041      	lsls	r1, r0, #1
    735a:	fa21 f102 	lsr.w	r1, r1, r2
    735e:	f1c2 0220 	rsb	r2, r2, #32
    7362:	fa00 fc02 	lsl.w	ip, r0, r2
    7366:	ea5f 0031 	movs.w	r0, r1, rrx
    736a:	f140 0000 	adc.w	r0, r0, #0
    736e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    7372:	bf08      	it	eq
    7374:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    7378:	4770      	bx	lr
    737a:	f092 0f00 	teq	r2, #0
    737e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    7382:	bf02      	ittt	eq
    7384:	0040      	lsleq	r0, r0, #1
    7386:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    738a:	3a01      	subeq	r2, #1
    738c:	d0f9      	beq.n	7382 <__aeabi_fmul+0xce>
    738e:	ea40 000c 	orr.w	r0, r0, ip
    7392:	f093 0f00 	teq	r3, #0
    7396:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    739a:	bf02      	ittt	eq
    739c:	0049      	lsleq	r1, r1, #1
    739e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    73a2:	3b01      	subeq	r3, #1
    73a4:	d0f9      	beq.n	739a <__aeabi_fmul+0xe6>
    73a6:	ea41 010c 	orr.w	r1, r1, ip
    73aa:	e78f      	b.n	72cc <__aeabi_fmul+0x18>
    73ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    73b0:	ea92 0f0c 	teq	r2, ip
    73b4:	bf18      	it	ne
    73b6:	ea93 0f0c 	teqne	r3, ip
    73ba:	d00a      	beq.n	73d2 <__aeabi_fmul+0x11e>
    73bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    73c0:	bf18      	it	ne
    73c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    73c6:	d1d8      	bne.n	737a <__aeabi_fmul+0xc6>
    73c8:	ea80 0001 	eor.w	r0, r0, r1
    73cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    73d0:	4770      	bx	lr
    73d2:	f090 0f00 	teq	r0, #0
    73d6:	bf17      	itett	ne
    73d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    73dc:	4608      	moveq	r0, r1
    73de:	f091 0f00 	teqne	r1, #0
    73e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    73e6:	d014      	beq.n	7412 <__aeabi_fmul+0x15e>
    73e8:	ea92 0f0c 	teq	r2, ip
    73ec:	d101      	bne.n	73f2 <__aeabi_fmul+0x13e>
    73ee:	0242      	lsls	r2, r0, #9
    73f0:	d10f      	bne.n	7412 <__aeabi_fmul+0x15e>
    73f2:	ea93 0f0c 	teq	r3, ip
    73f6:	d103      	bne.n	7400 <__aeabi_fmul+0x14c>
    73f8:	024b      	lsls	r3, r1, #9
    73fa:	bf18      	it	ne
    73fc:	4608      	movne	r0, r1
    73fe:	d108      	bne.n	7412 <__aeabi_fmul+0x15e>
    7400:	ea80 0001 	eor.w	r0, r0, r1
    7404:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    7408:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    740c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    7410:	4770      	bx	lr
    7412:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    7416:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    741a:	4770      	bx	lr

0000741c <__aeabi_fdiv>:
    741c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    7420:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    7424:	bf1e      	ittt	ne
    7426:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    742a:	ea92 0f0c 	teqne	r2, ip
    742e:	ea93 0f0c 	teqne	r3, ip
    7432:	d069      	beq.n	7508 <__aeabi_fdiv+0xec>
    7434:	eba2 0203 	sub.w	r2, r2, r3
    7438:	ea80 0c01 	eor.w	ip, r0, r1
    743c:	0249      	lsls	r1, r1, #9
    743e:	ea4f 2040 	mov.w	r0, r0, lsl #9
    7442:	d037      	beq.n	74b4 <__aeabi_fdiv+0x98>
    7444:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7448:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    744c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    7450:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    7454:	428b      	cmp	r3, r1
    7456:	bf38      	it	cc
    7458:	005b      	lslcc	r3, r3, #1
    745a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    745e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    7462:	428b      	cmp	r3, r1
    7464:	bf24      	itt	cs
    7466:	1a5b      	subcs	r3, r3, r1
    7468:	ea40 000c 	orrcs.w	r0, r0, ip
    746c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    7470:	bf24      	itt	cs
    7472:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    7476:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    747a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    747e:	bf24      	itt	cs
    7480:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    7484:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    7488:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    748c:	bf24      	itt	cs
    748e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    7492:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    7496:	011b      	lsls	r3, r3, #4
    7498:	bf18      	it	ne
    749a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    749e:	d1e0      	bne.n	7462 <__aeabi_fdiv+0x46>
    74a0:	2afd      	cmp	r2, #253	; 0xfd
    74a2:	f63f af50 	bhi.w	7346 <__aeabi_fmul+0x92>
    74a6:	428b      	cmp	r3, r1
    74a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    74ac:	bf08      	it	eq
    74ae:	f020 0001 	biceq.w	r0, r0, #1
    74b2:	4770      	bx	lr
    74b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    74b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    74bc:	327f      	adds	r2, #127	; 0x7f
    74be:	bfc2      	ittt	gt
    74c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    74c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    74c8:	4770      	bxgt	lr
    74ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    74ce:	f04f 0300 	mov.w	r3, #0
    74d2:	3a01      	subs	r2, #1
    74d4:	e737      	b.n	7346 <__aeabi_fmul+0x92>
    74d6:	f092 0f00 	teq	r2, #0
    74da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    74de:	bf02      	ittt	eq
    74e0:	0040      	lsleq	r0, r0, #1
    74e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    74e6:	3a01      	subeq	r2, #1
    74e8:	d0f9      	beq.n	74de <__aeabi_fdiv+0xc2>
    74ea:	ea40 000c 	orr.w	r0, r0, ip
    74ee:	f093 0f00 	teq	r3, #0
    74f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    74f6:	bf02      	ittt	eq
    74f8:	0049      	lsleq	r1, r1, #1
    74fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    74fe:	3b01      	subeq	r3, #1
    7500:	d0f9      	beq.n	74f6 <__aeabi_fdiv+0xda>
    7502:	ea41 010c 	orr.w	r1, r1, ip
    7506:	e795      	b.n	7434 <__aeabi_fdiv+0x18>
    7508:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    750c:	ea92 0f0c 	teq	r2, ip
    7510:	d108      	bne.n	7524 <__aeabi_fdiv+0x108>
    7512:	0242      	lsls	r2, r0, #9
    7514:	f47f af7d 	bne.w	7412 <__aeabi_fmul+0x15e>
    7518:	ea93 0f0c 	teq	r3, ip
    751c:	f47f af70 	bne.w	7400 <__aeabi_fmul+0x14c>
    7520:	4608      	mov	r0, r1
    7522:	e776      	b.n	7412 <__aeabi_fmul+0x15e>
    7524:	ea93 0f0c 	teq	r3, ip
    7528:	d104      	bne.n	7534 <__aeabi_fdiv+0x118>
    752a:	024b      	lsls	r3, r1, #9
    752c:	f43f af4c 	beq.w	73c8 <__aeabi_fmul+0x114>
    7530:	4608      	mov	r0, r1
    7532:	e76e      	b.n	7412 <__aeabi_fmul+0x15e>
    7534:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    7538:	bf18      	it	ne
    753a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    753e:	d1ca      	bne.n	74d6 <__aeabi_fdiv+0xba>
    7540:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    7544:	f47f af5c 	bne.w	7400 <__aeabi_fmul+0x14c>
    7548:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    754c:	f47f af3c 	bne.w	73c8 <__aeabi_fmul+0x114>
    7550:	e75f      	b.n	7412 <__aeabi_fmul+0x15e>
    7552:	bf00      	nop

00007554 <__gesf2>:
    7554:	f04f 3cff 	mov.w	ip, #4294967295
    7558:	e006      	b.n	7568 <__cmpsf2+0x4>
    755a:	bf00      	nop

0000755c <__lesf2>:
    755c:	f04f 0c01 	mov.w	ip, #1
    7560:	e002      	b.n	7568 <__cmpsf2+0x4>
    7562:	bf00      	nop

00007564 <__cmpsf2>:
    7564:	f04f 0c01 	mov.w	ip, #1
    7568:	f84d cd04 	str.w	ip, [sp, #-4]!
    756c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    7570:	ea4f 0341 	mov.w	r3, r1, lsl #1
    7574:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    7578:	bf18      	it	ne
    757a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    757e:	d011      	beq.n	75a4 <__cmpsf2+0x40>
    7580:	b001      	add	sp, #4
    7582:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    7586:	bf18      	it	ne
    7588:	ea90 0f01 	teqne	r0, r1
    758c:	bf58      	it	pl
    758e:	ebb2 0003 	subspl.w	r0, r2, r3
    7592:	bf88      	it	hi
    7594:	17c8      	asrhi	r0, r1, #31
    7596:	bf38      	it	cc
    7598:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    759c:	bf18      	it	ne
    759e:	f040 0001 	orrne.w	r0, r0, #1
    75a2:	4770      	bx	lr
    75a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    75a8:	d102      	bne.n	75b0 <__cmpsf2+0x4c>
    75aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    75ae:	d105      	bne.n	75bc <__cmpsf2+0x58>
    75b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    75b4:	d1e4      	bne.n	7580 <__cmpsf2+0x1c>
    75b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    75ba:	d0e1      	beq.n	7580 <__cmpsf2+0x1c>
    75bc:	f85d 0b04 	ldr.w	r0, [sp], #4
    75c0:	4770      	bx	lr
    75c2:	bf00      	nop

000075c4 <__aeabi_cfrcmple>:
    75c4:	4684      	mov	ip, r0
    75c6:	4608      	mov	r0, r1
    75c8:	4661      	mov	r1, ip
    75ca:	e7ff      	b.n	75cc <__aeabi_cfcmpeq>

000075cc <__aeabi_cfcmpeq>:
    75cc:	b50f      	push	{r0, r1, r2, r3, lr}
    75ce:	f7ff ffc9 	bl	7564 <__cmpsf2>
    75d2:	2800      	cmp	r0, #0
    75d4:	bf48      	it	mi
    75d6:	f110 0f00 	cmnmi.w	r0, #0
    75da:	bd0f      	pop	{r0, r1, r2, r3, pc}

000075dc <__aeabi_fcmpeq>:
    75dc:	f84d ed08 	str.w	lr, [sp, #-8]!
    75e0:	f7ff fff4 	bl	75cc <__aeabi_cfcmpeq>
    75e4:	bf0c      	ite	eq
    75e6:	2001      	moveq	r0, #1
    75e8:	2000      	movne	r0, #0
    75ea:	f85d fb08 	ldr.w	pc, [sp], #8
    75ee:	bf00      	nop

000075f0 <__aeabi_fcmplt>:
    75f0:	f84d ed08 	str.w	lr, [sp, #-8]!
    75f4:	f7ff ffea 	bl	75cc <__aeabi_cfcmpeq>
    75f8:	bf34      	ite	cc
    75fa:	2001      	movcc	r0, #1
    75fc:	2000      	movcs	r0, #0
    75fe:	f85d fb08 	ldr.w	pc, [sp], #8
    7602:	bf00      	nop

00007604 <__aeabi_fcmple>:
    7604:	f84d ed08 	str.w	lr, [sp, #-8]!
    7608:	f7ff ffe0 	bl	75cc <__aeabi_cfcmpeq>
    760c:	bf94      	ite	ls
    760e:	2001      	movls	r0, #1
    7610:	2000      	movhi	r0, #0
    7612:	f85d fb08 	ldr.w	pc, [sp], #8
    7616:	bf00      	nop

00007618 <__aeabi_fcmpge>:
    7618:	f84d ed08 	str.w	lr, [sp, #-8]!
    761c:	f7ff ffd2 	bl	75c4 <__aeabi_cfrcmple>
    7620:	bf94      	ite	ls
    7622:	2001      	movls	r0, #1
    7624:	2000      	movhi	r0, #0
    7626:	f85d fb08 	ldr.w	pc, [sp], #8
    762a:	bf00      	nop

0000762c <__aeabi_fcmpgt>:
    762c:	f84d ed08 	str.w	lr, [sp, #-8]!
    7630:	f7ff ffc8 	bl	75c4 <__aeabi_cfrcmple>
    7634:	bf34      	ite	cc
    7636:	2001      	movcc	r0, #1
    7638:	2000      	movcs	r0, #0
    763a:	f85d fb08 	ldr.w	pc, [sp], #8
    763e:	bf00      	nop

00007640 <__aeabi_f2iz>:
    7640:	ea4f 0240 	mov.w	r2, r0, lsl #1
    7644:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    7648:	d30f      	bcc.n	766a <__aeabi_f2iz+0x2a>
    764a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    764e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    7652:	d90d      	bls.n	7670 <__aeabi_f2iz+0x30>
    7654:	ea4f 2300 	mov.w	r3, r0, lsl #8
    7658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    765c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    7660:	fa23 f002 	lsr.w	r0, r3, r2
    7664:	bf18      	it	ne
    7666:	4240      	negne	r0, r0
    7668:	4770      	bx	lr
    766a:	f04f 0000 	mov.w	r0, #0
    766e:	4770      	bx	lr
    7670:	f112 0f61 	cmn.w	r2, #97	; 0x61
    7674:	d101      	bne.n	767a <__aeabi_f2iz+0x3a>
    7676:	0242      	lsls	r2, r0, #9
    7678:	d105      	bne.n	7686 <__aeabi_f2iz+0x46>
    767a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    767e:	bf08      	it	eq
    7680:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    7684:	4770      	bx	lr
    7686:	f04f 0000 	mov.w	r0, #0
    768a:	4770      	bx	lr

0000768c <__aeabi_f2uiz>:
    768c:	0042      	lsls	r2, r0, #1
    768e:	d20e      	bcs.n	76ae <__aeabi_f2uiz+0x22>
    7690:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    7694:	d30b      	bcc.n	76ae <__aeabi_f2uiz+0x22>
    7696:	f04f 039e 	mov.w	r3, #158	; 0x9e
    769a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    769e:	d409      	bmi.n	76b4 <__aeabi_f2uiz+0x28>
    76a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    76a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    76a8:	fa23 f002 	lsr.w	r0, r3, r2
    76ac:	4770      	bx	lr
    76ae:	f04f 0000 	mov.w	r0, #0
    76b2:	4770      	bx	lr
    76b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    76b8:	d101      	bne.n	76be <__aeabi_f2uiz+0x32>
    76ba:	0242      	lsls	r2, r0, #9
    76bc:	d102      	bne.n	76c4 <__aeabi_f2uiz+0x38>
    76be:	f04f 30ff 	mov.w	r0, #4294967295
    76c2:	4770      	bx	lr
    76c4:	f04f 0000 	mov.w	r0, #0
    76c8:	4770      	bx	lr
    76ca:	bf00      	nop

000076cc <__aeabi_atexit>:
    76cc:	460b      	mov	r3, r1
    76ce:	4601      	mov	r1, r0
    76d0:	4618      	mov	r0, r3
    76d2:	f000 b805 	b.w	76e0 <__cxa_atexit>
    76d6:	bf00      	nop

000076d8 <atol>:
    76d8:	220a      	movs	r2, #10
    76da:	2100      	movs	r1, #0
    76dc:	f001 b8ee 	b.w	88bc <strtol>

000076e0 <__cxa_atexit>:
    76e0:	4613      	mov	r3, r2
    76e2:	460a      	mov	r2, r1
    76e4:	4601      	mov	r1, r0
    76e6:	2002      	movs	r0, #2
    76e8:	f001 b90c 	b.w	8904 <__register_exitproc>

000076ec <__errno>:
    76ec:	4b01      	ldr	r3, [pc, #4]	; (76f4 <__errno+0x8>)
    76ee:	6818      	ldr	r0, [r3, #0]
    76f0:	4770      	bx	lr
    76f2:	bf00      	nop
    76f4:	1fff8c20 	.word	0x1fff8c20

000076f8 <__libc_init_array>:
    76f8:	b570      	push	{r4, r5, r6, lr}
    76fa:	4e0f      	ldr	r6, [pc, #60]	; (7738 <__libc_init_array+0x40>)
    76fc:	4d0f      	ldr	r5, [pc, #60]	; (773c <__libc_init_array+0x44>)
    76fe:	1b76      	subs	r6, r6, r5
    7700:	10b6      	asrs	r6, r6, #2
    7702:	bf18      	it	ne
    7704:	2400      	movne	r4, #0
    7706:	d005      	beq.n	7714 <__libc_init_array+0x1c>
    7708:	3401      	adds	r4, #1
    770a:	f855 3b04 	ldr.w	r3, [r5], #4
    770e:	4798      	blx	r3
    7710:	42a6      	cmp	r6, r4
    7712:	d1f9      	bne.n	7708 <__libc_init_array+0x10>
    7714:	4e0a      	ldr	r6, [pc, #40]	; (7740 <__libc_init_array+0x48>)
    7716:	4d0b      	ldr	r5, [pc, #44]	; (7744 <__libc_init_array+0x4c>)
    7718:	1b76      	subs	r6, r6, r5
    771a:	f001 fe9d 	bl	9458 <_init>
    771e:	10b6      	asrs	r6, r6, #2
    7720:	bf18      	it	ne
    7722:	2400      	movne	r4, #0
    7724:	d006      	beq.n	7734 <__libc_init_array+0x3c>
    7726:	3401      	adds	r4, #1
    7728:	f855 3b04 	ldr.w	r3, [r5], #4
    772c:	4798      	blx	r3
    772e:	42a6      	cmp	r6, r4
    7730:	d1f9      	bne.n	7726 <__libc_init_array+0x2e>
    7732:	bd70      	pop	{r4, r5, r6, pc}
    7734:	bd70      	pop	{r4, r5, r6, pc}
    7736:	bf00      	nop
    7738:	00009464 	.word	0x00009464
    773c:	00009464 	.word	0x00009464
    7740:	00009488 	.word	0x00009488
    7744:	00009464 	.word	0x00009464

00007748 <__locale_ctype_ptr_l>:
    7748:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    774c:	4770      	bx	lr
    774e:	bf00      	nop

00007750 <malloc>:
    7750:	4b02      	ldr	r3, [pc, #8]	; (775c <malloc+0xc>)
    7752:	4601      	mov	r1, r0
    7754:	6818      	ldr	r0, [r3, #0]
    7756:	f000 b80b 	b.w	7770 <_malloc_r>
    775a:	bf00      	nop
    775c:	1fff8c20 	.word	0x1fff8c20

00007760 <free>:
    7760:	4b02      	ldr	r3, [pc, #8]	; (776c <free+0xc>)
    7762:	4601      	mov	r1, r0
    7764:	6818      	ldr	r0, [r3, #0]
    7766:	f001 b98b 	b.w	8a80 <_free_r>
    776a:	bf00      	nop
    776c:	1fff8c20 	.word	0x1fff8c20

00007770 <_malloc_r>:
    7770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7774:	f101 050b 	add.w	r5, r1, #11
    7778:	2d16      	cmp	r5, #22
    777a:	b083      	sub	sp, #12
    777c:	4606      	mov	r6, r0
    777e:	f240 809f 	bls.w	78c0 <_malloc_r+0x150>
    7782:	f035 0507 	bics.w	r5, r5, #7
    7786:	f100 80bf 	bmi.w	7908 <_malloc_r+0x198>
    778a:	42a9      	cmp	r1, r5
    778c:	f200 80bc 	bhi.w	7908 <_malloc_r+0x198>
    7790:	f000 fb6e 	bl	7e70 <__malloc_lock>
    7794:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    7798:	f0c0 829c 	bcc.w	7cd4 <_malloc_r+0x564>
    779c:	0a6b      	lsrs	r3, r5, #9
    779e:	f000 80ba 	beq.w	7916 <_malloc_r+0x1a6>
    77a2:	2b04      	cmp	r3, #4
    77a4:	f200 8183 	bhi.w	7aae <_malloc_r+0x33e>
    77a8:	09a8      	lsrs	r0, r5, #6
    77aa:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    77ae:	ea4f 034e 	mov.w	r3, lr, lsl #1
    77b2:	3038      	adds	r0, #56	; 0x38
    77b4:	4fc4      	ldr	r7, [pc, #784]	; (7ac8 <_malloc_r+0x358>)
    77b6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    77ba:	f1a3 0108 	sub.w	r1, r3, #8
    77be:	685c      	ldr	r4, [r3, #4]
    77c0:	42a1      	cmp	r1, r4
    77c2:	d107      	bne.n	77d4 <_malloc_r+0x64>
    77c4:	e0ac      	b.n	7920 <_malloc_r+0x1b0>
    77c6:	2a00      	cmp	r2, #0
    77c8:	f280 80ac 	bge.w	7924 <_malloc_r+0x1b4>
    77cc:	68e4      	ldr	r4, [r4, #12]
    77ce:	42a1      	cmp	r1, r4
    77d0:	f000 80a6 	beq.w	7920 <_malloc_r+0x1b0>
    77d4:	6863      	ldr	r3, [r4, #4]
    77d6:	f023 0303 	bic.w	r3, r3, #3
    77da:	1b5a      	subs	r2, r3, r5
    77dc:	2a0f      	cmp	r2, #15
    77de:	ddf2      	ble.n	77c6 <_malloc_r+0x56>
    77e0:	49b9      	ldr	r1, [pc, #740]	; (7ac8 <_malloc_r+0x358>)
    77e2:	693c      	ldr	r4, [r7, #16]
    77e4:	f101 0e08 	add.w	lr, r1, #8
    77e8:	4574      	cmp	r4, lr
    77ea:	f000 81b3 	beq.w	7b54 <_malloc_r+0x3e4>
    77ee:	6863      	ldr	r3, [r4, #4]
    77f0:	f023 0303 	bic.w	r3, r3, #3
    77f4:	1b5a      	subs	r2, r3, r5
    77f6:	2a0f      	cmp	r2, #15
    77f8:	f300 8199 	bgt.w	7b2e <_malloc_r+0x3be>
    77fc:	2a00      	cmp	r2, #0
    77fe:	f8c1 e014 	str.w	lr, [r1, #20]
    7802:	f8c1 e010 	str.w	lr, [r1, #16]
    7806:	f280 809e 	bge.w	7946 <_malloc_r+0x1d6>
    780a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    780e:	f080 8167 	bcs.w	7ae0 <_malloc_r+0x370>
    7812:	08db      	lsrs	r3, r3, #3
    7814:	f103 0c01 	add.w	ip, r3, #1
    7818:	2201      	movs	r2, #1
    781a:	109b      	asrs	r3, r3, #2
    781c:	fa02 f303 	lsl.w	r3, r2, r3
    7820:	684a      	ldr	r2, [r1, #4]
    7822:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    7826:	f8c4 8008 	str.w	r8, [r4, #8]
    782a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    782e:	431a      	orrs	r2, r3
    7830:	f1a9 0308 	sub.w	r3, r9, #8
    7834:	60e3      	str	r3, [r4, #12]
    7836:	604a      	str	r2, [r1, #4]
    7838:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    783c:	f8c8 400c 	str.w	r4, [r8, #12]
    7840:	1083      	asrs	r3, r0, #2
    7842:	2401      	movs	r4, #1
    7844:	409c      	lsls	r4, r3
    7846:	4294      	cmp	r4, r2
    7848:	f200 808a 	bhi.w	7960 <_malloc_r+0x1f0>
    784c:	4214      	tst	r4, r2
    784e:	d106      	bne.n	785e <_malloc_r+0xee>
    7850:	f020 0003 	bic.w	r0, r0, #3
    7854:	0064      	lsls	r4, r4, #1
    7856:	4214      	tst	r4, r2
    7858:	f100 0004 	add.w	r0, r0, #4
    785c:	d0fa      	beq.n	7854 <_malloc_r+0xe4>
    785e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    7862:	46cc      	mov	ip, r9
    7864:	4680      	mov	r8, r0
    7866:	f8dc 100c 	ldr.w	r1, [ip, #12]
    786a:	458c      	cmp	ip, r1
    786c:	d107      	bne.n	787e <_malloc_r+0x10e>
    786e:	e173      	b.n	7b58 <_malloc_r+0x3e8>
    7870:	2a00      	cmp	r2, #0
    7872:	f280 8181 	bge.w	7b78 <_malloc_r+0x408>
    7876:	68c9      	ldr	r1, [r1, #12]
    7878:	458c      	cmp	ip, r1
    787a:	f000 816d 	beq.w	7b58 <_malloc_r+0x3e8>
    787e:	684b      	ldr	r3, [r1, #4]
    7880:	f023 0303 	bic.w	r3, r3, #3
    7884:	1b5a      	subs	r2, r3, r5
    7886:	2a0f      	cmp	r2, #15
    7888:	ddf2      	ble.n	7870 <_malloc_r+0x100>
    788a:	460c      	mov	r4, r1
    788c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    7890:	f854 8f08 	ldr.w	r8, [r4, #8]!
    7894:	194b      	adds	r3, r1, r5
    7896:	f045 0501 	orr.w	r5, r5, #1
    789a:	604d      	str	r5, [r1, #4]
    789c:	f042 0101 	orr.w	r1, r2, #1
    78a0:	f8c8 c00c 	str.w	ip, [r8, #12]
    78a4:	4630      	mov	r0, r6
    78a6:	f8cc 8008 	str.w	r8, [ip, #8]
    78aa:	617b      	str	r3, [r7, #20]
    78ac:	613b      	str	r3, [r7, #16]
    78ae:	f8c3 e00c 	str.w	lr, [r3, #12]
    78b2:	f8c3 e008 	str.w	lr, [r3, #8]
    78b6:	6059      	str	r1, [r3, #4]
    78b8:	509a      	str	r2, [r3, r2]
    78ba:	f000 fadb 	bl	7e74 <__malloc_unlock>
    78be:	e01f      	b.n	7900 <_malloc_r+0x190>
    78c0:	2910      	cmp	r1, #16
    78c2:	d821      	bhi.n	7908 <_malloc_r+0x198>
    78c4:	f000 fad4 	bl	7e70 <__malloc_lock>
    78c8:	2510      	movs	r5, #16
    78ca:	2306      	movs	r3, #6
    78cc:	2002      	movs	r0, #2
    78ce:	4f7e      	ldr	r7, [pc, #504]	; (7ac8 <_malloc_r+0x358>)
    78d0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    78d4:	f1a3 0208 	sub.w	r2, r3, #8
    78d8:	685c      	ldr	r4, [r3, #4]
    78da:	4294      	cmp	r4, r2
    78dc:	f000 8145 	beq.w	7b6a <_malloc_r+0x3fa>
    78e0:	6863      	ldr	r3, [r4, #4]
    78e2:	68e1      	ldr	r1, [r4, #12]
    78e4:	68a5      	ldr	r5, [r4, #8]
    78e6:	f023 0303 	bic.w	r3, r3, #3
    78ea:	4423      	add	r3, r4
    78ec:	4630      	mov	r0, r6
    78ee:	685a      	ldr	r2, [r3, #4]
    78f0:	60e9      	str	r1, [r5, #12]
    78f2:	f042 0201 	orr.w	r2, r2, #1
    78f6:	608d      	str	r5, [r1, #8]
    78f8:	605a      	str	r2, [r3, #4]
    78fa:	f000 fabb 	bl	7e74 <__malloc_unlock>
    78fe:	3408      	adds	r4, #8
    7900:	4620      	mov	r0, r4
    7902:	b003      	add	sp, #12
    7904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7908:	2400      	movs	r4, #0
    790a:	230c      	movs	r3, #12
    790c:	4620      	mov	r0, r4
    790e:	6033      	str	r3, [r6, #0]
    7910:	b003      	add	sp, #12
    7912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7916:	2380      	movs	r3, #128	; 0x80
    7918:	f04f 0e40 	mov.w	lr, #64	; 0x40
    791c:	203f      	movs	r0, #63	; 0x3f
    791e:	e749      	b.n	77b4 <_malloc_r+0x44>
    7920:	4670      	mov	r0, lr
    7922:	e75d      	b.n	77e0 <_malloc_r+0x70>
    7924:	4423      	add	r3, r4
    7926:	68e1      	ldr	r1, [r4, #12]
    7928:	685a      	ldr	r2, [r3, #4]
    792a:	68a5      	ldr	r5, [r4, #8]
    792c:	f042 0201 	orr.w	r2, r2, #1
    7930:	60e9      	str	r1, [r5, #12]
    7932:	4630      	mov	r0, r6
    7934:	608d      	str	r5, [r1, #8]
    7936:	605a      	str	r2, [r3, #4]
    7938:	f000 fa9c 	bl	7e74 <__malloc_unlock>
    793c:	3408      	adds	r4, #8
    793e:	4620      	mov	r0, r4
    7940:	b003      	add	sp, #12
    7942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7946:	4423      	add	r3, r4
    7948:	4630      	mov	r0, r6
    794a:	685a      	ldr	r2, [r3, #4]
    794c:	f042 0201 	orr.w	r2, r2, #1
    7950:	605a      	str	r2, [r3, #4]
    7952:	f000 fa8f 	bl	7e74 <__malloc_unlock>
    7956:	3408      	adds	r4, #8
    7958:	4620      	mov	r0, r4
    795a:	b003      	add	sp, #12
    795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7960:	68bc      	ldr	r4, [r7, #8]
    7962:	6863      	ldr	r3, [r4, #4]
    7964:	f023 0803 	bic.w	r8, r3, #3
    7968:	45a8      	cmp	r8, r5
    796a:	d304      	bcc.n	7976 <_malloc_r+0x206>
    796c:	ebc5 0308 	rsb	r3, r5, r8
    7970:	2b0f      	cmp	r3, #15
    7972:	f300 808c 	bgt.w	7a8e <_malloc_r+0x31e>
    7976:	4b55      	ldr	r3, [pc, #340]	; (7acc <_malloc_r+0x35c>)
    7978:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7adc <_malloc_r+0x36c>
    797c:	681a      	ldr	r2, [r3, #0]
    797e:	f8d9 3000 	ldr.w	r3, [r9]
    7982:	3301      	adds	r3, #1
    7984:	442a      	add	r2, r5
    7986:	eb04 0a08 	add.w	sl, r4, r8
    798a:	f000 8160 	beq.w	7c4e <_malloc_r+0x4de>
    798e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    7992:	320f      	adds	r2, #15
    7994:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    7998:	f022 020f 	bic.w	r2, r2, #15
    799c:	4611      	mov	r1, r2
    799e:	4630      	mov	r0, r6
    79a0:	9201      	str	r2, [sp, #4]
    79a2:	f000 fc61 	bl	8268 <_sbrk_r>
    79a6:	f1b0 3fff 	cmp.w	r0, #4294967295
    79aa:	4683      	mov	fp, r0
    79ac:	9a01      	ldr	r2, [sp, #4]
    79ae:	f000 8158 	beq.w	7c62 <_malloc_r+0x4f2>
    79b2:	4582      	cmp	sl, r0
    79b4:	f200 80fc 	bhi.w	7bb0 <_malloc_r+0x440>
    79b8:	4b45      	ldr	r3, [pc, #276]	; (7ad0 <_malloc_r+0x360>)
    79ba:	6819      	ldr	r1, [r3, #0]
    79bc:	45da      	cmp	sl, fp
    79be:	4411      	add	r1, r2
    79c0:	6019      	str	r1, [r3, #0]
    79c2:	f000 8153 	beq.w	7c6c <_malloc_r+0x4fc>
    79c6:	f8d9 0000 	ldr.w	r0, [r9]
    79ca:	f8df e110 	ldr.w	lr, [pc, #272]	; 7adc <_malloc_r+0x36c>
    79ce:	3001      	adds	r0, #1
    79d0:	bf1b      	ittet	ne
    79d2:	ebca 0a0b 	rsbne	sl, sl, fp
    79d6:	4451      	addne	r1, sl
    79d8:	f8ce b000 	streq.w	fp, [lr]
    79dc:	6019      	strne	r1, [r3, #0]
    79de:	f01b 0107 	ands.w	r1, fp, #7
    79e2:	f000 8117 	beq.w	7c14 <_malloc_r+0x4a4>
    79e6:	f1c1 0008 	rsb	r0, r1, #8
    79ea:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    79ee:	4483      	add	fp, r0
    79f0:	3108      	adds	r1, #8
    79f2:	445a      	add	r2, fp
    79f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
    79f8:	ebc2 0901 	rsb	r9, r2, r1
    79fc:	4649      	mov	r1, r9
    79fe:	4630      	mov	r0, r6
    7a00:	9301      	str	r3, [sp, #4]
    7a02:	f000 fc31 	bl	8268 <_sbrk_r>
    7a06:	1c43      	adds	r3, r0, #1
    7a08:	9b01      	ldr	r3, [sp, #4]
    7a0a:	f000 813f 	beq.w	7c8c <_malloc_r+0x51c>
    7a0e:	ebcb 0200 	rsb	r2, fp, r0
    7a12:	444a      	add	r2, r9
    7a14:	f042 0201 	orr.w	r2, r2, #1
    7a18:	6819      	ldr	r1, [r3, #0]
    7a1a:	f8c7 b008 	str.w	fp, [r7, #8]
    7a1e:	4449      	add	r1, r9
    7a20:	42bc      	cmp	r4, r7
    7a22:	f8cb 2004 	str.w	r2, [fp, #4]
    7a26:	6019      	str	r1, [r3, #0]
    7a28:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 7ad0 <_malloc_r+0x360>
    7a2c:	d016      	beq.n	7a5c <_malloc_r+0x2ec>
    7a2e:	f1b8 0f0f 	cmp.w	r8, #15
    7a32:	f240 80fd 	bls.w	7c30 <_malloc_r+0x4c0>
    7a36:	6862      	ldr	r2, [r4, #4]
    7a38:	f1a8 030c 	sub.w	r3, r8, #12
    7a3c:	f023 0307 	bic.w	r3, r3, #7
    7a40:	18e0      	adds	r0, r4, r3
    7a42:	f002 0201 	and.w	r2, r2, #1
    7a46:	f04f 0e05 	mov.w	lr, #5
    7a4a:	431a      	orrs	r2, r3
    7a4c:	2b0f      	cmp	r3, #15
    7a4e:	6062      	str	r2, [r4, #4]
    7a50:	f8c0 e004 	str.w	lr, [r0, #4]
    7a54:	f8c0 e008 	str.w	lr, [r0, #8]
    7a58:	f200 811c 	bhi.w	7c94 <_malloc_r+0x524>
    7a5c:	4b1d      	ldr	r3, [pc, #116]	; (7ad4 <_malloc_r+0x364>)
    7a5e:	68bc      	ldr	r4, [r7, #8]
    7a60:	681a      	ldr	r2, [r3, #0]
    7a62:	4291      	cmp	r1, r2
    7a64:	bf88      	it	hi
    7a66:	6019      	strhi	r1, [r3, #0]
    7a68:	4b1b      	ldr	r3, [pc, #108]	; (7ad8 <_malloc_r+0x368>)
    7a6a:	681a      	ldr	r2, [r3, #0]
    7a6c:	4291      	cmp	r1, r2
    7a6e:	6862      	ldr	r2, [r4, #4]
    7a70:	bf88      	it	hi
    7a72:	6019      	strhi	r1, [r3, #0]
    7a74:	f022 0203 	bic.w	r2, r2, #3
    7a78:	4295      	cmp	r5, r2
    7a7a:	eba2 0305 	sub.w	r3, r2, r5
    7a7e:	d801      	bhi.n	7a84 <_malloc_r+0x314>
    7a80:	2b0f      	cmp	r3, #15
    7a82:	dc04      	bgt.n	7a8e <_malloc_r+0x31e>
    7a84:	4630      	mov	r0, r6
    7a86:	f000 f9f5 	bl	7e74 <__malloc_unlock>
    7a8a:	2400      	movs	r4, #0
    7a8c:	e738      	b.n	7900 <_malloc_r+0x190>
    7a8e:	1962      	adds	r2, r4, r5
    7a90:	f043 0301 	orr.w	r3, r3, #1
    7a94:	f045 0501 	orr.w	r5, r5, #1
    7a98:	6065      	str	r5, [r4, #4]
    7a9a:	4630      	mov	r0, r6
    7a9c:	60ba      	str	r2, [r7, #8]
    7a9e:	6053      	str	r3, [r2, #4]
    7aa0:	f000 f9e8 	bl	7e74 <__malloc_unlock>
    7aa4:	3408      	adds	r4, #8
    7aa6:	4620      	mov	r0, r4
    7aa8:	b003      	add	sp, #12
    7aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7aae:	2b14      	cmp	r3, #20
    7ab0:	d971      	bls.n	7b96 <_malloc_r+0x426>
    7ab2:	2b54      	cmp	r3, #84	; 0x54
    7ab4:	f200 80a4 	bhi.w	7c00 <_malloc_r+0x490>
    7ab8:	0b28      	lsrs	r0, r5, #12
    7aba:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    7abe:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7ac2:	306e      	adds	r0, #110	; 0x6e
    7ac4:	e676      	b.n	77b4 <_malloc_r+0x44>
    7ac6:	bf00      	nop
    7ac8:	1fff8d90 	.word	0x1fff8d90
    7acc:	1fff9df4 	.word	0x1fff9df4
    7ad0:	1fff9df8 	.word	0x1fff9df8
    7ad4:	1fff9df0 	.word	0x1fff9df0
    7ad8:	1fff9dec 	.word	0x1fff9dec
    7adc:	1fff919c 	.word	0x1fff919c
    7ae0:	0a5a      	lsrs	r2, r3, #9
    7ae2:	2a04      	cmp	r2, #4
    7ae4:	d95e      	bls.n	7ba4 <_malloc_r+0x434>
    7ae6:	2a14      	cmp	r2, #20
    7ae8:	f200 80b3 	bhi.w	7c52 <_malloc_r+0x4e2>
    7aec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    7af0:	0049      	lsls	r1, r1, #1
    7af2:	325b      	adds	r2, #91	; 0x5b
    7af4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    7af8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    7afc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 7cdc <_malloc_r+0x56c>
    7b00:	f1ac 0c08 	sub.w	ip, ip, #8
    7b04:	458c      	cmp	ip, r1
    7b06:	f000 8088 	beq.w	7c1a <_malloc_r+0x4aa>
    7b0a:	684a      	ldr	r2, [r1, #4]
    7b0c:	f022 0203 	bic.w	r2, r2, #3
    7b10:	4293      	cmp	r3, r2
    7b12:	d202      	bcs.n	7b1a <_malloc_r+0x3aa>
    7b14:	6889      	ldr	r1, [r1, #8]
    7b16:	458c      	cmp	ip, r1
    7b18:	d1f7      	bne.n	7b0a <_malloc_r+0x39a>
    7b1a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    7b1e:	687a      	ldr	r2, [r7, #4]
    7b20:	f8c4 c00c 	str.w	ip, [r4, #12]
    7b24:	60a1      	str	r1, [r4, #8]
    7b26:	f8cc 4008 	str.w	r4, [ip, #8]
    7b2a:	60cc      	str	r4, [r1, #12]
    7b2c:	e688      	b.n	7840 <_malloc_r+0xd0>
    7b2e:	1963      	adds	r3, r4, r5
    7b30:	f042 0701 	orr.w	r7, r2, #1
    7b34:	f045 0501 	orr.w	r5, r5, #1
    7b38:	6065      	str	r5, [r4, #4]
    7b3a:	4630      	mov	r0, r6
    7b3c:	614b      	str	r3, [r1, #20]
    7b3e:	610b      	str	r3, [r1, #16]
    7b40:	f8c3 e00c 	str.w	lr, [r3, #12]
    7b44:	f8c3 e008 	str.w	lr, [r3, #8]
    7b48:	605f      	str	r7, [r3, #4]
    7b4a:	509a      	str	r2, [r3, r2]
    7b4c:	3408      	adds	r4, #8
    7b4e:	f000 f991 	bl	7e74 <__malloc_unlock>
    7b52:	e6d5      	b.n	7900 <_malloc_r+0x190>
    7b54:	684a      	ldr	r2, [r1, #4]
    7b56:	e673      	b.n	7840 <_malloc_r+0xd0>
    7b58:	f108 0801 	add.w	r8, r8, #1
    7b5c:	f018 0f03 	tst.w	r8, #3
    7b60:	f10c 0c08 	add.w	ip, ip, #8
    7b64:	f47f ae7f 	bne.w	7866 <_malloc_r+0xf6>
    7b68:	e030      	b.n	7bcc <_malloc_r+0x45c>
    7b6a:	68dc      	ldr	r4, [r3, #12]
    7b6c:	42a3      	cmp	r3, r4
    7b6e:	bf08      	it	eq
    7b70:	3002      	addeq	r0, #2
    7b72:	f43f ae35 	beq.w	77e0 <_malloc_r+0x70>
    7b76:	e6b3      	b.n	78e0 <_malloc_r+0x170>
    7b78:	440b      	add	r3, r1
    7b7a:	460c      	mov	r4, r1
    7b7c:	685a      	ldr	r2, [r3, #4]
    7b7e:	68c9      	ldr	r1, [r1, #12]
    7b80:	f854 5f08 	ldr.w	r5, [r4, #8]!
    7b84:	f042 0201 	orr.w	r2, r2, #1
    7b88:	605a      	str	r2, [r3, #4]
    7b8a:	4630      	mov	r0, r6
    7b8c:	60e9      	str	r1, [r5, #12]
    7b8e:	608d      	str	r5, [r1, #8]
    7b90:	f000 f970 	bl	7e74 <__malloc_unlock>
    7b94:	e6b4      	b.n	7900 <_malloc_r+0x190>
    7b96:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    7b9a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    7b9e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7ba2:	e607      	b.n	77b4 <_malloc_r+0x44>
    7ba4:	099a      	lsrs	r2, r3, #6
    7ba6:	f102 0139 	add.w	r1, r2, #57	; 0x39
    7baa:	0049      	lsls	r1, r1, #1
    7bac:	3238      	adds	r2, #56	; 0x38
    7bae:	e7a1      	b.n	7af4 <_malloc_r+0x384>
    7bb0:	42bc      	cmp	r4, r7
    7bb2:	4b4a      	ldr	r3, [pc, #296]	; (7cdc <_malloc_r+0x56c>)
    7bb4:	f43f af00 	beq.w	79b8 <_malloc_r+0x248>
    7bb8:	689c      	ldr	r4, [r3, #8]
    7bba:	6862      	ldr	r2, [r4, #4]
    7bbc:	f022 0203 	bic.w	r2, r2, #3
    7bc0:	e75a      	b.n	7a78 <_malloc_r+0x308>
    7bc2:	f859 3908 	ldr.w	r3, [r9], #-8
    7bc6:	4599      	cmp	r9, r3
    7bc8:	f040 8082 	bne.w	7cd0 <_malloc_r+0x560>
    7bcc:	f010 0f03 	tst.w	r0, #3
    7bd0:	f100 30ff 	add.w	r0, r0, #4294967295
    7bd4:	d1f5      	bne.n	7bc2 <_malloc_r+0x452>
    7bd6:	687b      	ldr	r3, [r7, #4]
    7bd8:	ea23 0304 	bic.w	r3, r3, r4
    7bdc:	607b      	str	r3, [r7, #4]
    7bde:	0064      	lsls	r4, r4, #1
    7be0:	429c      	cmp	r4, r3
    7be2:	f63f aebd 	bhi.w	7960 <_malloc_r+0x1f0>
    7be6:	2c00      	cmp	r4, #0
    7be8:	f43f aeba 	beq.w	7960 <_malloc_r+0x1f0>
    7bec:	421c      	tst	r4, r3
    7bee:	4640      	mov	r0, r8
    7bf0:	f47f ae35 	bne.w	785e <_malloc_r+0xee>
    7bf4:	0064      	lsls	r4, r4, #1
    7bf6:	421c      	tst	r4, r3
    7bf8:	f100 0004 	add.w	r0, r0, #4
    7bfc:	d0fa      	beq.n	7bf4 <_malloc_r+0x484>
    7bfe:	e62e      	b.n	785e <_malloc_r+0xee>
    7c00:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7c04:	d818      	bhi.n	7c38 <_malloc_r+0x4c8>
    7c06:	0be8      	lsrs	r0, r5, #15
    7c08:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    7c0c:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7c10:	3077      	adds	r0, #119	; 0x77
    7c12:	e5cf      	b.n	77b4 <_malloc_r+0x44>
    7c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7c18:	e6eb      	b.n	79f2 <_malloc_r+0x282>
    7c1a:	2101      	movs	r1, #1
    7c1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7c20:	1092      	asrs	r2, r2, #2
    7c22:	fa01 f202 	lsl.w	r2, r1, r2
    7c26:	431a      	orrs	r2, r3
    7c28:	f8c8 2004 	str.w	r2, [r8, #4]
    7c2c:	4661      	mov	r1, ip
    7c2e:	e777      	b.n	7b20 <_malloc_r+0x3b0>
    7c30:	2301      	movs	r3, #1
    7c32:	f8cb 3004 	str.w	r3, [fp, #4]
    7c36:	e725      	b.n	7a84 <_malloc_r+0x314>
    7c38:	f240 5254 	movw	r2, #1364	; 0x554
    7c3c:	4293      	cmp	r3, r2
    7c3e:	d820      	bhi.n	7c82 <_malloc_r+0x512>
    7c40:	0ca8      	lsrs	r0, r5, #18
    7c42:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    7c46:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7c4a:	307c      	adds	r0, #124	; 0x7c
    7c4c:	e5b2      	b.n	77b4 <_malloc_r+0x44>
    7c4e:	3210      	adds	r2, #16
    7c50:	e6a4      	b.n	799c <_malloc_r+0x22c>
    7c52:	2a54      	cmp	r2, #84	; 0x54
    7c54:	d826      	bhi.n	7ca4 <_malloc_r+0x534>
    7c56:	0b1a      	lsrs	r2, r3, #12
    7c58:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    7c5c:	0049      	lsls	r1, r1, #1
    7c5e:	326e      	adds	r2, #110	; 0x6e
    7c60:	e748      	b.n	7af4 <_malloc_r+0x384>
    7c62:	68bc      	ldr	r4, [r7, #8]
    7c64:	6862      	ldr	r2, [r4, #4]
    7c66:	f022 0203 	bic.w	r2, r2, #3
    7c6a:	e705      	b.n	7a78 <_malloc_r+0x308>
    7c6c:	f3ca 000b 	ubfx	r0, sl, #0, #12
    7c70:	2800      	cmp	r0, #0
    7c72:	f47f aea8 	bne.w	79c6 <_malloc_r+0x256>
    7c76:	4442      	add	r2, r8
    7c78:	68bb      	ldr	r3, [r7, #8]
    7c7a:	f042 0201 	orr.w	r2, r2, #1
    7c7e:	605a      	str	r2, [r3, #4]
    7c80:	e6ec      	b.n	7a5c <_malloc_r+0x2ec>
    7c82:	23fe      	movs	r3, #254	; 0xfe
    7c84:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    7c88:	207e      	movs	r0, #126	; 0x7e
    7c8a:	e593      	b.n	77b4 <_malloc_r+0x44>
    7c8c:	2201      	movs	r2, #1
    7c8e:	f04f 0900 	mov.w	r9, #0
    7c92:	e6c1      	b.n	7a18 <_malloc_r+0x2a8>
    7c94:	f104 0108 	add.w	r1, r4, #8
    7c98:	4630      	mov	r0, r6
    7c9a:	f000 fef1 	bl	8a80 <_free_r>
    7c9e:	f8d9 1000 	ldr.w	r1, [r9]
    7ca2:	e6db      	b.n	7a5c <_malloc_r+0x2ec>
    7ca4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    7ca8:	d805      	bhi.n	7cb6 <_malloc_r+0x546>
    7caa:	0bda      	lsrs	r2, r3, #15
    7cac:	f102 0178 	add.w	r1, r2, #120	; 0x78
    7cb0:	0049      	lsls	r1, r1, #1
    7cb2:	3277      	adds	r2, #119	; 0x77
    7cb4:	e71e      	b.n	7af4 <_malloc_r+0x384>
    7cb6:	f240 5154 	movw	r1, #1364	; 0x554
    7cba:	428a      	cmp	r2, r1
    7cbc:	d805      	bhi.n	7cca <_malloc_r+0x55a>
    7cbe:	0c9a      	lsrs	r2, r3, #18
    7cc0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    7cc4:	0049      	lsls	r1, r1, #1
    7cc6:	327c      	adds	r2, #124	; 0x7c
    7cc8:	e714      	b.n	7af4 <_malloc_r+0x384>
    7cca:	21fe      	movs	r1, #254	; 0xfe
    7ccc:	227e      	movs	r2, #126	; 0x7e
    7cce:	e711      	b.n	7af4 <_malloc_r+0x384>
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	e784      	b.n	7bde <_malloc_r+0x46e>
    7cd4:	08e8      	lsrs	r0, r5, #3
    7cd6:	1c43      	adds	r3, r0, #1
    7cd8:	005b      	lsls	r3, r3, #1
    7cda:	e5f8      	b.n	78ce <_malloc_r+0x15e>
    7cdc:	1fff8d90 	.word	0x1fff8d90

00007ce0 <__ascii_mbtowc>:
    7ce0:	b082      	sub	sp, #8
    7ce2:	b149      	cbz	r1, 7cf8 <__ascii_mbtowc+0x18>
    7ce4:	b15a      	cbz	r2, 7cfe <__ascii_mbtowc+0x1e>
    7ce6:	b16b      	cbz	r3, 7d04 <__ascii_mbtowc+0x24>
    7ce8:	7813      	ldrb	r3, [r2, #0]
    7cea:	600b      	str	r3, [r1, #0]
    7cec:	7812      	ldrb	r2, [r2, #0]
    7cee:	1c10      	adds	r0, r2, #0
    7cf0:	bf18      	it	ne
    7cf2:	2001      	movne	r0, #1
    7cf4:	b002      	add	sp, #8
    7cf6:	4770      	bx	lr
    7cf8:	a901      	add	r1, sp, #4
    7cfa:	2a00      	cmp	r2, #0
    7cfc:	d1f3      	bne.n	7ce6 <__ascii_mbtowc+0x6>
    7cfe:	4610      	mov	r0, r2
    7d00:	b002      	add	sp, #8
    7d02:	4770      	bx	lr
    7d04:	f06f 0001 	mvn.w	r0, #1
    7d08:	e7f4      	b.n	7cf4 <__ascii_mbtowc+0x14>
    7d0a:	bf00      	nop

00007d0c <memmove>:
    7d0c:	4288      	cmp	r0, r1
    7d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d10:	d90d      	bls.n	7d2e <memmove+0x22>
    7d12:	188b      	adds	r3, r1, r2
    7d14:	4298      	cmp	r0, r3
    7d16:	d20a      	bcs.n	7d2e <memmove+0x22>
    7d18:	1881      	adds	r1, r0, r2
    7d1a:	2a00      	cmp	r2, #0
    7d1c:	d051      	beq.n	7dc2 <memmove+0xb6>
    7d1e:	1a9a      	subs	r2, r3, r2
    7d20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    7d24:	f801 4d01 	strb.w	r4, [r1, #-1]!
    7d28:	4293      	cmp	r3, r2
    7d2a:	d1f9      	bne.n	7d20 <memmove+0x14>
    7d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d2e:	2a0f      	cmp	r2, #15
    7d30:	d948      	bls.n	7dc4 <memmove+0xb8>
    7d32:	ea41 0300 	orr.w	r3, r1, r0
    7d36:	079b      	lsls	r3, r3, #30
    7d38:	d146      	bne.n	7dc8 <memmove+0xbc>
    7d3a:	f100 0410 	add.w	r4, r0, #16
    7d3e:	f101 0310 	add.w	r3, r1, #16
    7d42:	4615      	mov	r5, r2
    7d44:	f853 6c10 	ldr.w	r6, [r3, #-16]
    7d48:	f844 6c10 	str.w	r6, [r4, #-16]
    7d4c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    7d50:	f844 6c0c 	str.w	r6, [r4, #-12]
    7d54:	f853 6c08 	ldr.w	r6, [r3, #-8]
    7d58:	f844 6c08 	str.w	r6, [r4, #-8]
    7d5c:	3d10      	subs	r5, #16
    7d5e:	f853 6c04 	ldr.w	r6, [r3, #-4]
    7d62:	f844 6c04 	str.w	r6, [r4, #-4]
    7d66:	2d0f      	cmp	r5, #15
    7d68:	f103 0310 	add.w	r3, r3, #16
    7d6c:	f104 0410 	add.w	r4, r4, #16
    7d70:	d8e8      	bhi.n	7d44 <memmove+0x38>
    7d72:	f1a2 0310 	sub.w	r3, r2, #16
    7d76:	f023 030f 	bic.w	r3, r3, #15
    7d7a:	f002 0e0f 	and.w	lr, r2, #15
    7d7e:	3310      	adds	r3, #16
    7d80:	f1be 0f03 	cmp.w	lr, #3
    7d84:	4419      	add	r1, r3
    7d86:	4403      	add	r3, r0
    7d88:	d921      	bls.n	7dce <memmove+0xc2>
    7d8a:	1f1e      	subs	r6, r3, #4
    7d8c:	460d      	mov	r5, r1
    7d8e:	4674      	mov	r4, lr
    7d90:	3c04      	subs	r4, #4
    7d92:	f855 7b04 	ldr.w	r7, [r5], #4
    7d96:	f846 7f04 	str.w	r7, [r6, #4]!
    7d9a:	2c03      	cmp	r4, #3
    7d9c:	d8f8      	bhi.n	7d90 <memmove+0x84>
    7d9e:	f1ae 0404 	sub.w	r4, lr, #4
    7da2:	f024 0403 	bic.w	r4, r4, #3
    7da6:	3404      	adds	r4, #4
    7da8:	4423      	add	r3, r4
    7daa:	4421      	add	r1, r4
    7dac:	f002 0203 	and.w	r2, r2, #3
    7db0:	b162      	cbz	r2, 7dcc <memmove+0xc0>
    7db2:	3b01      	subs	r3, #1
    7db4:	440a      	add	r2, r1
    7db6:	f811 4b01 	ldrb.w	r4, [r1], #1
    7dba:	f803 4f01 	strb.w	r4, [r3, #1]!
    7dbe:	428a      	cmp	r2, r1
    7dc0:	d1f9      	bne.n	7db6 <memmove+0xaa>
    7dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dc4:	4603      	mov	r3, r0
    7dc6:	e7f3      	b.n	7db0 <memmove+0xa4>
    7dc8:	4603      	mov	r3, r0
    7dca:	e7f2      	b.n	7db2 <memmove+0xa6>
    7dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dce:	4672      	mov	r2, lr
    7dd0:	e7ee      	b.n	7db0 <memmove+0xa4>
    7dd2:	bf00      	nop

00007dd4 <memset>:
    7dd4:	b470      	push	{r4, r5, r6}
    7dd6:	0784      	lsls	r4, r0, #30
    7dd8:	d046      	beq.n	7e68 <memset+0x94>
    7dda:	1e54      	subs	r4, r2, #1
    7ddc:	2a00      	cmp	r2, #0
    7dde:	d041      	beq.n	7e64 <memset+0x90>
    7de0:	b2cd      	uxtb	r5, r1
    7de2:	4603      	mov	r3, r0
    7de4:	e002      	b.n	7dec <memset+0x18>
    7de6:	1e62      	subs	r2, r4, #1
    7de8:	b3e4      	cbz	r4, 7e64 <memset+0x90>
    7dea:	4614      	mov	r4, r2
    7dec:	f803 5b01 	strb.w	r5, [r3], #1
    7df0:	079a      	lsls	r2, r3, #30
    7df2:	d1f8      	bne.n	7de6 <memset+0x12>
    7df4:	2c03      	cmp	r4, #3
    7df6:	d92e      	bls.n	7e56 <memset+0x82>
    7df8:	b2cd      	uxtb	r5, r1
    7dfa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7dfe:	2c0f      	cmp	r4, #15
    7e00:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    7e04:	d919      	bls.n	7e3a <memset+0x66>
    7e06:	f103 0210 	add.w	r2, r3, #16
    7e0a:	4626      	mov	r6, r4
    7e0c:	3e10      	subs	r6, #16
    7e0e:	2e0f      	cmp	r6, #15
    7e10:	f842 5c10 	str.w	r5, [r2, #-16]
    7e14:	f842 5c0c 	str.w	r5, [r2, #-12]
    7e18:	f842 5c08 	str.w	r5, [r2, #-8]
    7e1c:	f842 5c04 	str.w	r5, [r2, #-4]
    7e20:	f102 0210 	add.w	r2, r2, #16
    7e24:	d8f2      	bhi.n	7e0c <memset+0x38>
    7e26:	f1a4 0210 	sub.w	r2, r4, #16
    7e2a:	f022 020f 	bic.w	r2, r2, #15
    7e2e:	f004 040f 	and.w	r4, r4, #15
    7e32:	3210      	adds	r2, #16
    7e34:	2c03      	cmp	r4, #3
    7e36:	4413      	add	r3, r2
    7e38:	d90d      	bls.n	7e56 <memset+0x82>
    7e3a:	461e      	mov	r6, r3
    7e3c:	4622      	mov	r2, r4
    7e3e:	3a04      	subs	r2, #4
    7e40:	2a03      	cmp	r2, #3
    7e42:	f846 5b04 	str.w	r5, [r6], #4
    7e46:	d8fa      	bhi.n	7e3e <memset+0x6a>
    7e48:	1f22      	subs	r2, r4, #4
    7e4a:	f022 0203 	bic.w	r2, r2, #3
    7e4e:	3204      	adds	r2, #4
    7e50:	4413      	add	r3, r2
    7e52:	f004 0403 	and.w	r4, r4, #3
    7e56:	b12c      	cbz	r4, 7e64 <memset+0x90>
    7e58:	b2c9      	uxtb	r1, r1
    7e5a:	441c      	add	r4, r3
    7e5c:	f803 1b01 	strb.w	r1, [r3], #1
    7e60:	42a3      	cmp	r3, r4
    7e62:	d1fb      	bne.n	7e5c <memset+0x88>
    7e64:	bc70      	pop	{r4, r5, r6}
    7e66:	4770      	bx	lr
    7e68:	4614      	mov	r4, r2
    7e6a:	4603      	mov	r3, r0
    7e6c:	e7c2      	b.n	7df4 <memset+0x20>
    7e6e:	bf00      	nop

00007e70 <__malloc_lock>:
    7e70:	4770      	bx	lr
    7e72:	bf00      	nop

00007e74 <__malloc_unlock>:
    7e74:	4770      	bx	lr
    7e76:	bf00      	nop

00007e78 <realloc>:
    7e78:	4b02      	ldr	r3, [pc, #8]	; (7e84 <realloc+0xc>)
    7e7a:	460a      	mov	r2, r1
    7e7c:	4601      	mov	r1, r0
    7e7e:	6818      	ldr	r0, [r3, #0]
    7e80:	f000 b802 	b.w	7e88 <_realloc_r>
    7e84:	1fff8c20 	.word	0x1fff8c20

00007e88 <_realloc_r>:
    7e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e8c:	4617      	mov	r7, r2
    7e8e:	b083      	sub	sp, #12
    7e90:	2900      	cmp	r1, #0
    7e92:	f000 80c1 	beq.w	8018 <_realloc_r+0x190>
    7e96:	460e      	mov	r6, r1
    7e98:	4681      	mov	r9, r0
    7e9a:	f107 050b 	add.w	r5, r7, #11
    7e9e:	f7ff ffe7 	bl	7e70 <__malloc_lock>
    7ea2:	f856 ec04 	ldr.w	lr, [r6, #-4]
    7ea6:	2d16      	cmp	r5, #22
    7ea8:	f02e 0403 	bic.w	r4, lr, #3
    7eac:	f1a6 0808 	sub.w	r8, r6, #8
    7eb0:	d840      	bhi.n	7f34 <_realloc_r+0xac>
    7eb2:	2210      	movs	r2, #16
    7eb4:	4615      	mov	r5, r2
    7eb6:	42af      	cmp	r7, r5
    7eb8:	d841      	bhi.n	7f3e <_realloc_r+0xb6>
    7eba:	4294      	cmp	r4, r2
    7ebc:	da75      	bge.n	7faa <_realloc_r+0x122>
    7ebe:	4bc9      	ldr	r3, [pc, #804]	; (81e4 <_realloc_r+0x35c>)
    7ec0:	6899      	ldr	r1, [r3, #8]
    7ec2:	eb08 0004 	add.w	r0, r8, r4
    7ec6:	4288      	cmp	r0, r1
    7ec8:	6841      	ldr	r1, [r0, #4]
    7eca:	f000 80d9 	beq.w	8080 <_realloc_r+0x1f8>
    7ece:	f021 0301 	bic.w	r3, r1, #1
    7ed2:	4403      	add	r3, r0
    7ed4:	685b      	ldr	r3, [r3, #4]
    7ed6:	07db      	lsls	r3, r3, #31
    7ed8:	d57d      	bpl.n	7fd6 <_realloc_r+0x14e>
    7eda:	f01e 0f01 	tst.w	lr, #1
    7ede:	d035      	beq.n	7f4c <_realloc_r+0xc4>
    7ee0:	4639      	mov	r1, r7
    7ee2:	4648      	mov	r0, r9
    7ee4:	f7ff fc44 	bl	7770 <_malloc_r>
    7ee8:	4607      	mov	r7, r0
    7eea:	b1e0      	cbz	r0, 7f26 <_realloc_r+0x9e>
    7eec:	f856 3c04 	ldr.w	r3, [r6, #-4]
    7ef0:	f023 0301 	bic.w	r3, r3, #1
    7ef4:	4443      	add	r3, r8
    7ef6:	f1a0 0208 	sub.w	r2, r0, #8
    7efa:	429a      	cmp	r2, r3
    7efc:	f000 8144 	beq.w	8188 <_realloc_r+0x300>
    7f00:	1f22      	subs	r2, r4, #4
    7f02:	2a24      	cmp	r2, #36	; 0x24
    7f04:	f200 8131 	bhi.w	816a <_realloc_r+0x2e2>
    7f08:	2a13      	cmp	r2, #19
    7f0a:	f200 8104 	bhi.w	8116 <_realloc_r+0x28e>
    7f0e:	4603      	mov	r3, r0
    7f10:	4632      	mov	r2, r6
    7f12:	6811      	ldr	r1, [r2, #0]
    7f14:	6019      	str	r1, [r3, #0]
    7f16:	6851      	ldr	r1, [r2, #4]
    7f18:	6059      	str	r1, [r3, #4]
    7f1a:	6892      	ldr	r2, [r2, #8]
    7f1c:	609a      	str	r2, [r3, #8]
    7f1e:	4631      	mov	r1, r6
    7f20:	4648      	mov	r0, r9
    7f22:	f000 fdad 	bl	8a80 <_free_r>
    7f26:	4648      	mov	r0, r9
    7f28:	f7ff ffa4 	bl	7e74 <__malloc_unlock>
    7f2c:	4638      	mov	r0, r7
    7f2e:	b003      	add	sp, #12
    7f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f34:	f025 0507 	bic.w	r5, r5, #7
    7f38:	2d00      	cmp	r5, #0
    7f3a:	462a      	mov	r2, r5
    7f3c:	dabb      	bge.n	7eb6 <_realloc_r+0x2e>
    7f3e:	230c      	movs	r3, #12
    7f40:	2000      	movs	r0, #0
    7f42:	f8c9 3000 	str.w	r3, [r9]
    7f46:	b003      	add	sp, #12
    7f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f4c:	f856 3c08 	ldr.w	r3, [r6, #-8]
    7f50:	ebc3 0a08 	rsb	sl, r3, r8
    7f54:	f8da 3004 	ldr.w	r3, [sl, #4]
    7f58:	f023 0c03 	bic.w	ip, r3, #3
    7f5c:	eb04 030c 	add.w	r3, r4, ip
    7f60:	4293      	cmp	r3, r2
    7f62:	dbbd      	blt.n	7ee0 <_realloc_r+0x58>
    7f64:	4657      	mov	r7, sl
    7f66:	f8da 100c 	ldr.w	r1, [sl, #12]
    7f6a:	f857 0f08 	ldr.w	r0, [r7, #8]!
    7f6e:	1f22      	subs	r2, r4, #4
    7f70:	2a24      	cmp	r2, #36	; 0x24
    7f72:	60c1      	str	r1, [r0, #12]
    7f74:	6088      	str	r0, [r1, #8]
    7f76:	f200 8117 	bhi.w	81a8 <_realloc_r+0x320>
    7f7a:	2a13      	cmp	r2, #19
    7f7c:	f240 8112 	bls.w	81a4 <_realloc_r+0x31c>
    7f80:	6831      	ldr	r1, [r6, #0]
    7f82:	f8ca 1008 	str.w	r1, [sl, #8]
    7f86:	6871      	ldr	r1, [r6, #4]
    7f88:	f8ca 100c 	str.w	r1, [sl, #12]
    7f8c:	2a1b      	cmp	r2, #27
    7f8e:	f200 812b 	bhi.w	81e8 <_realloc_r+0x360>
    7f92:	3608      	adds	r6, #8
    7f94:	f10a 0210 	add.w	r2, sl, #16
    7f98:	6831      	ldr	r1, [r6, #0]
    7f9a:	6011      	str	r1, [r2, #0]
    7f9c:	6871      	ldr	r1, [r6, #4]
    7f9e:	6051      	str	r1, [r2, #4]
    7fa0:	68b1      	ldr	r1, [r6, #8]
    7fa2:	6091      	str	r1, [r2, #8]
    7fa4:	463e      	mov	r6, r7
    7fa6:	461c      	mov	r4, r3
    7fa8:	46d0      	mov	r8, sl
    7faa:	1b63      	subs	r3, r4, r5
    7fac:	2b0f      	cmp	r3, #15
    7fae:	d81d      	bhi.n	7fec <_realloc_r+0x164>
    7fb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7fb4:	f003 0301 	and.w	r3, r3, #1
    7fb8:	4323      	orrs	r3, r4
    7fba:	4444      	add	r4, r8
    7fbc:	f8c8 3004 	str.w	r3, [r8, #4]
    7fc0:	6863      	ldr	r3, [r4, #4]
    7fc2:	f043 0301 	orr.w	r3, r3, #1
    7fc6:	6063      	str	r3, [r4, #4]
    7fc8:	4648      	mov	r0, r9
    7fca:	f7ff ff53 	bl	7e74 <__malloc_unlock>
    7fce:	4630      	mov	r0, r6
    7fd0:	b003      	add	sp, #12
    7fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fd6:	f021 0103 	bic.w	r1, r1, #3
    7fda:	4421      	add	r1, r4
    7fdc:	4291      	cmp	r1, r2
    7fde:	db21      	blt.n	8024 <_realloc_r+0x19c>
    7fe0:	68c3      	ldr	r3, [r0, #12]
    7fe2:	6882      	ldr	r2, [r0, #8]
    7fe4:	460c      	mov	r4, r1
    7fe6:	60d3      	str	r3, [r2, #12]
    7fe8:	609a      	str	r2, [r3, #8]
    7fea:	e7de      	b.n	7faa <_realloc_r+0x122>
    7fec:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7ff0:	eb08 0105 	add.w	r1, r8, r5
    7ff4:	f002 0201 	and.w	r2, r2, #1
    7ff8:	4315      	orrs	r5, r2
    7ffa:	f043 0201 	orr.w	r2, r3, #1
    7ffe:	440b      	add	r3, r1
    8000:	f8c8 5004 	str.w	r5, [r8, #4]
    8004:	604a      	str	r2, [r1, #4]
    8006:	685a      	ldr	r2, [r3, #4]
    8008:	f042 0201 	orr.w	r2, r2, #1
    800c:	3108      	adds	r1, #8
    800e:	605a      	str	r2, [r3, #4]
    8010:	4648      	mov	r0, r9
    8012:	f000 fd35 	bl	8a80 <_free_r>
    8016:	e7d7      	b.n	7fc8 <_realloc_r+0x140>
    8018:	4611      	mov	r1, r2
    801a:	b003      	add	sp, #12
    801c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8020:	f7ff bba6 	b.w	7770 <_malloc_r>
    8024:	f01e 0f01 	tst.w	lr, #1
    8028:	f47f af5a 	bne.w	7ee0 <_realloc_r+0x58>
    802c:	f856 3c08 	ldr.w	r3, [r6, #-8]
    8030:	ebc3 0a08 	rsb	sl, r3, r8
    8034:	f8da 3004 	ldr.w	r3, [sl, #4]
    8038:	f023 0c03 	bic.w	ip, r3, #3
    803c:	eb01 0e0c 	add.w	lr, r1, ip
    8040:	4596      	cmp	lr, r2
    8042:	db8b      	blt.n	7f5c <_realloc_r+0xd4>
    8044:	68c3      	ldr	r3, [r0, #12]
    8046:	6882      	ldr	r2, [r0, #8]
    8048:	4657      	mov	r7, sl
    804a:	60d3      	str	r3, [r2, #12]
    804c:	609a      	str	r2, [r3, #8]
    804e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    8052:	f8da 300c 	ldr.w	r3, [sl, #12]
    8056:	60cb      	str	r3, [r1, #12]
    8058:	1f22      	subs	r2, r4, #4
    805a:	2a24      	cmp	r2, #36	; 0x24
    805c:	6099      	str	r1, [r3, #8]
    805e:	f200 8099 	bhi.w	8194 <_realloc_r+0x30c>
    8062:	2a13      	cmp	r2, #19
    8064:	d962      	bls.n	812c <_realloc_r+0x2a4>
    8066:	6833      	ldr	r3, [r6, #0]
    8068:	f8ca 3008 	str.w	r3, [sl, #8]
    806c:	6873      	ldr	r3, [r6, #4]
    806e:	f8ca 300c 	str.w	r3, [sl, #12]
    8072:	2a1b      	cmp	r2, #27
    8074:	f200 80a0 	bhi.w	81b8 <_realloc_r+0x330>
    8078:	3608      	adds	r6, #8
    807a:	f10a 0310 	add.w	r3, sl, #16
    807e:	e056      	b.n	812e <_realloc_r+0x2a6>
    8080:	f021 0b03 	bic.w	fp, r1, #3
    8084:	44a3      	add	fp, r4
    8086:	f105 0010 	add.w	r0, r5, #16
    808a:	4583      	cmp	fp, r0
    808c:	da59      	bge.n	8142 <_realloc_r+0x2ba>
    808e:	f01e 0f01 	tst.w	lr, #1
    8092:	f47f af25 	bne.w	7ee0 <_realloc_r+0x58>
    8096:	f856 1c08 	ldr.w	r1, [r6, #-8]
    809a:	ebc1 0a08 	rsb	sl, r1, r8
    809e:	f8da 1004 	ldr.w	r1, [sl, #4]
    80a2:	f021 0c03 	bic.w	ip, r1, #3
    80a6:	44e3      	add	fp, ip
    80a8:	4558      	cmp	r0, fp
    80aa:	f73f af57 	bgt.w	7f5c <_realloc_r+0xd4>
    80ae:	4657      	mov	r7, sl
    80b0:	f8da 100c 	ldr.w	r1, [sl, #12]
    80b4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    80b8:	1f22      	subs	r2, r4, #4
    80ba:	2a24      	cmp	r2, #36	; 0x24
    80bc:	60c1      	str	r1, [r0, #12]
    80be:	6088      	str	r0, [r1, #8]
    80c0:	f200 80b4 	bhi.w	822c <_realloc_r+0x3a4>
    80c4:	2a13      	cmp	r2, #19
    80c6:	f240 80a5 	bls.w	8214 <_realloc_r+0x38c>
    80ca:	6831      	ldr	r1, [r6, #0]
    80cc:	f8ca 1008 	str.w	r1, [sl, #8]
    80d0:	6871      	ldr	r1, [r6, #4]
    80d2:	f8ca 100c 	str.w	r1, [sl, #12]
    80d6:	2a1b      	cmp	r2, #27
    80d8:	f200 80af 	bhi.w	823a <_realloc_r+0x3b2>
    80dc:	3608      	adds	r6, #8
    80de:	f10a 0210 	add.w	r2, sl, #16
    80e2:	6831      	ldr	r1, [r6, #0]
    80e4:	6011      	str	r1, [r2, #0]
    80e6:	6871      	ldr	r1, [r6, #4]
    80e8:	6051      	str	r1, [r2, #4]
    80ea:	68b1      	ldr	r1, [r6, #8]
    80ec:	6091      	str	r1, [r2, #8]
    80ee:	eb0a 0105 	add.w	r1, sl, r5
    80f2:	ebc5 020b 	rsb	r2, r5, fp
    80f6:	f042 0201 	orr.w	r2, r2, #1
    80fa:	6099      	str	r1, [r3, #8]
    80fc:	604a      	str	r2, [r1, #4]
    80fe:	f8da 3004 	ldr.w	r3, [sl, #4]
    8102:	f003 0301 	and.w	r3, r3, #1
    8106:	431d      	orrs	r5, r3
    8108:	4648      	mov	r0, r9
    810a:	f8ca 5004 	str.w	r5, [sl, #4]
    810e:	f7ff feb1 	bl	7e74 <__malloc_unlock>
    8112:	4638      	mov	r0, r7
    8114:	e75c      	b.n	7fd0 <_realloc_r+0x148>
    8116:	6833      	ldr	r3, [r6, #0]
    8118:	6003      	str	r3, [r0, #0]
    811a:	6873      	ldr	r3, [r6, #4]
    811c:	6043      	str	r3, [r0, #4]
    811e:	2a1b      	cmp	r2, #27
    8120:	d827      	bhi.n	8172 <_realloc_r+0x2ea>
    8122:	f100 0308 	add.w	r3, r0, #8
    8126:	f106 0208 	add.w	r2, r6, #8
    812a:	e6f2      	b.n	7f12 <_realloc_r+0x8a>
    812c:	463b      	mov	r3, r7
    812e:	6832      	ldr	r2, [r6, #0]
    8130:	601a      	str	r2, [r3, #0]
    8132:	6872      	ldr	r2, [r6, #4]
    8134:	605a      	str	r2, [r3, #4]
    8136:	68b2      	ldr	r2, [r6, #8]
    8138:	609a      	str	r2, [r3, #8]
    813a:	463e      	mov	r6, r7
    813c:	4674      	mov	r4, lr
    813e:	46d0      	mov	r8, sl
    8140:	e733      	b.n	7faa <_realloc_r+0x122>
    8142:	eb08 0105 	add.w	r1, r8, r5
    8146:	ebc5 0b0b 	rsb	fp, r5, fp
    814a:	f04b 0201 	orr.w	r2, fp, #1
    814e:	6099      	str	r1, [r3, #8]
    8150:	604a      	str	r2, [r1, #4]
    8152:	f856 3c04 	ldr.w	r3, [r6, #-4]
    8156:	f003 0301 	and.w	r3, r3, #1
    815a:	431d      	orrs	r5, r3
    815c:	4648      	mov	r0, r9
    815e:	f846 5c04 	str.w	r5, [r6, #-4]
    8162:	f7ff fe87 	bl	7e74 <__malloc_unlock>
    8166:	4630      	mov	r0, r6
    8168:	e732      	b.n	7fd0 <_realloc_r+0x148>
    816a:	4631      	mov	r1, r6
    816c:	f7ff fdce 	bl	7d0c <memmove>
    8170:	e6d5      	b.n	7f1e <_realloc_r+0x96>
    8172:	68b3      	ldr	r3, [r6, #8]
    8174:	6083      	str	r3, [r0, #8]
    8176:	68f3      	ldr	r3, [r6, #12]
    8178:	60c3      	str	r3, [r0, #12]
    817a:	2a24      	cmp	r2, #36	; 0x24
    817c:	d028      	beq.n	81d0 <_realloc_r+0x348>
    817e:	f100 0310 	add.w	r3, r0, #16
    8182:	f106 0210 	add.w	r2, r6, #16
    8186:	e6c4      	b.n	7f12 <_realloc_r+0x8a>
    8188:	f850 3c04 	ldr.w	r3, [r0, #-4]
    818c:	f023 0303 	bic.w	r3, r3, #3
    8190:	441c      	add	r4, r3
    8192:	e70a      	b.n	7faa <_realloc_r+0x122>
    8194:	4631      	mov	r1, r6
    8196:	4638      	mov	r0, r7
    8198:	4674      	mov	r4, lr
    819a:	46d0      	mov	r8, sl
    819c:	f7ff fdb6 	bl	7d0c <memmove>
    81a0:	463e      	mov	r6, r7
    81a2:	e702      	b.n	7faa <_realloc_r+0x122>
    81a4:	463a      	mov	r2, r7
    81a6:	e6f7      	b.n	7f98 <_realloc_r+0x110>
    81a8:	4631      	mov	r1, r6
    81aa:	4638      	mov	r0, r7
    81ac:	461c      	mov	r4, r3
    81ae:	46d0      	mov	r8, sl
    81b0:	f7ff fdac 	bl	7d0c <memmove>
    81b4:	463e      	mov	r6, r7
    81b6:	e6f8      	b.n	7faa <_realloc_r+0x122>
    81b8:	68b3      	ldr	r3, [r6, #8]
    81ba:	f8ca 3010 	str.w	r3, [sl, #16]
    81be:	68f3      	ldr	r3, [r6, #12]
    81c0:	f8ca 3014 	str.w	r3, [sl, #20]
    81c4:	2a24      	cmp	r2, #36	; 0x24
    81c6:	d01b      	beq.n	8200 <_realloc_r+0x378>
    81c8:	3610      	adds	r6, #16
    81ca:	f10a 0318 	add.w	r3, sl, #24
    81ce:	e7ae      	b.n	812e <_realloc_r+0x2a6>
    81d0:	6933      	ldr	r3, [r6, #16]
    81d2:	6103      	str	r3, [r0, #16]
    81d4:	6973      	ldr	r3, [r6, #20]
    81d6:	6143      	str	r3, [r0, #20]
    81d8:	f106 0218 	add.w	r2, r6, #24
    81dc:	f100 0318 	add.w	r3, r0, #24
    81e0:	e697      	b.n	7f12 <_realloc_r+0x8a>
    81e2:	bf00      	nop
    81e4:	1fff8d90 	.word	0x1fff8d90
    81e8:	68b1      	ldr	r1, [r6, #8]
    81ea:	f8ca 1010 	str.w	r1, [sl, #16]
    81ee:	68f1      	ldr	r1, [r6, #12]
    81f0:	f8ca 1014 	str.w	r1, [sl, #20]
    81f4:	2a24      	cmp	r2, #36	; 0x24
    81f6:	d00f      	beq.n	8218 <_realloc_r+0x390>
    81f8:	3610      	adds	r6, #16
    81fa:	f10a 0218 	add.w	r2, sl, #24
    81fe:	e6cb      	b.n	7f98 <_realloc_r+0x110>
    8200:	6933      	ldr	r3, [r6, #16]
    8202:	f8ca 3018 	str.w	r3, [sl, #24]
    8206:	6973      	ldr	r3, [r6, #20]
    8208:	f8ca 301c 	str.w	r3, [sl, #28]
    820c:	3618      	adds	r6, #24
    820e:	f10a 0320 	add.w	r3, sl, #32
    8212:	e78c      	b.n	812e <_realloc_r+0x2a6>
    8214:	463a      	mov	r2, r7
    8216:	e764      	b.n	80e2 <_realloc_r+0x25a>
    8218:	6932      	ldr	r2, [r6, #16]
    821a:	f8ca 2018 	str.w	r2, [sl, #24]
    821e:	6972      	ldr	r2, [r6, #20]
    8220:	f8ca 201c 	str.w	r2, [sl, #28]
    8224:	3618      	adds	r6, #24
    8226:	f10a 0220 	add.w	r2, sl, #32
    822a:	e6b5      	b.n	7f98 <_realloc_r+0x110>
    822c:	4631      	mov	r1, r6
    822e:	4638      	mov	r0, r7
    8230:	9301      	str	r3, [sp, #4]
    8232:	f7ff fd6b 	bl	7d0c <memmove>
    8236:	9b01      	ldr	r3, [sp, #4]
    8238:	e759      	b.n	80ee <_realloc_r+0x266>
    823a:	68b1      	ldr	r1, [r6, #8]
    823c:	f8ca 1010 	str.w	r1, [sl, #16]
    8240:	68f1      	ldr	r1, [r6, #12]
    8242:	f8ca 1014 	str.w	r1, [sl, #20]
    8246:	2a24      	cmp	r2, #36	; 0x24
    8248:	d003      	beq.n	8252 <_realloc_r+0x3ca>
    824a:	3610      	adds	r6, #16
    824c:	f10a 0218 	add.w	r2, sl, #24
    8250:	e747      	b.n	80e2 <_realloc_r+0x25a>
    8252:	6932      	ldr	r2, [r6, #16]
    8254:	f8ca 2018 	str.w	r2, [sl, #24]
    8258:	6972      	ldr	r2, [r6, #20]
    825a:	f8ca 201c 	str.w	r2, [sl, #28]
    825e:	3618      	adds	r6, #24
    8260:	f10a 0220 	add.w	r2, sl, #32
    8264:	e73d      	b.n	80e2 <_realloc_r+0x25a>
    8266:	bf00      	nop

00008268 <_sbrk_r>:
    8268:	b538      	push	{r3, r4, r5, lr}
    826a:	4c07      	ldr	r4, [pc, #28]	; (8288 <_sbrk_r+0x20>)
    826c:	2300      	movs	r3, #0
    826e:	4605      	mov	r5, r0
    8270:	4608      	mov	r0, r1
    8272:	6023      	str	r3, [r4, #0]
    8274:	f7fc fba8 	bl	49c8 <_sbrk>
    8278:	1c43      	adds	r3, r0, #1
    827a:	d000      	beq.n	827e <_sbrk_r+0x16>
    827c:	bd38      	pop	{r3, r4, r5, pc}
    827e:	6823      	ldr	r3, [r4, #0]
    8280:	2b00      	cmp	r3, #0
    8282:	d0fb      	beq.n	827c <_sbrk_r+0x14>
    8284:	602b      	str	r3, [r5, #0]
    8286:	bd38      	pop	{r3, r4, r5, pc}
    8288:	1fff9e34 	.word	0x1fff9e34
    828c:	ffffffff 	.word	0xffffffff
    8290:	ffffffff 	.word	0xffffffff
    8294:	ffffffff 	.word	0xffffffff
    8298:	ffffffff 	.word	0xffffffff
    829c:	ffffffff 	.word	0xffffffff
    82a0:	eba2 0003 	sub.w	r0, r2, r3
    82a4:	4770      	bx	lr
    82a6:	bf00      	nop

000082a8 <strcmp>:
    82a8:	7802      	ldrb	r2, [r0, #0]
    82aa:	780b      	ldrb	r3, [r1, #0]
    82ac:	2a01      	cmp	r2, #1
    82ae:	bf28      	it	cs
    82b0:	429a      	cmpcs	r2, r3
    82b2:	d1f5      	bne.n	82a0 <_sbrk_r+0x38>
    82b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    82b8:	ea40 0401 	orr.w	r4, r0, r1
    82bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    82c0:	f06f 0c00 	mvn.w	ip, #0
    82c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    82c8:	b312      	cbz	r2, 8310 <strcmp+0x68>
    82ca:	ea80 0401 	eor.w	r4, r0, r1
    82ce:	f014 0f07 	tst.w	r4, #7
    82d2:	d16a      	bne.n	83aa <strcmp+0x102>
    82d4:	f000 0407 	and.w	r4, r0, #7
    82d8:	f020 0007 	bic.w	r0, r0, #7
    82dc:	f004 0503 	and.w	r5, r4, #3
    82e0:	f021 0107 	bic.w	r1, r1, #7
    82e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    82e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    82ec:	f014 0f04 	tst.w	r4, #4
    82f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    82f4:	fa0c f405 	lsl.w	r4, ip, r5
    82f8:	ea62 0204 	orn	r2, r2, r4
    82fc:	ea66 0604 	orn	r6, r6, r4
    8300:	d00a      	beq.n	8318 <strcmp+0x70>
    8302:	ea63 0304 	orn	r3, r3, r4
    8306:	4662      	mov	r2, ip
    8308:	ea67 0704 	orn	r7, r7, r4
    830c:	4666      	mov	r6, ip
    830e:	e003      	b.n	8318 <strcmp+0x70>
    8310:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    8314:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    8318:	fa82 f54c 	uadd8	r5, r2, ip
    831c:	ea82 0406 	eor.w	r4, r2, r6
    8320:	faa4 f48c 	sel	r4, r4, ip
    8324:	bb6c      	cbnz	r4, 8382 <strcmp+0xda>
    8326:	fa83 f54c 	uadd8	r5, r3, ip
    832a:	ea83 0507 	eor.w	r5, r3, r7
    832e:	faa5 f58c 	sel	r5, r5, ip
    8332:	b995      	cbnz	r5, 835a <strcmp+0xb2>
    8334:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    8338:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    833c:	fa82 f54c 	uadd8	r5, r2, ip
    8340:	ea82 0406 	eor.w	r4, r2, r6
    8344:	faa4 f48c 	sel	r4, r4, ip
    8348:	fa83 f54c 	uadd8	r5, r3, ip
    834c:	ea83 0507 	eor.w	r5, r3, r7
    8350:	faa5 f58c 	sel	r5, r5, ip
    8354:	4325      	orrs	r5, r4
    8356:	d0db      	beq.n	8310 <strcmp+0x68>
    8358:	b99c      	cbnz	r4, 8382 <strcmp+0xda>
    835a:	ba2d      	rev	r5, r5
    835c:	fab5 f485 	clz	r4, r5
    8360:	f024 0407 	bic.w	r4, r4, #7
    8364:	fa27 f104 	lsr.w	r1, r7, r4
    8368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    836c:	fa23 f304 	lsr.w	r3, r3, r4
    8370:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    8374:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8378:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    837c:	eba0 0001 	sub.w	r0, r0, r1
    8380:	4770      	bx	lr
    8382:	ba24      	rev	r4, r4
    8384:	fab4 f484 	clz	r4, r4
    8388:	f024 0407 	bic.w	r4, r4, #7
    838c:	fa26 f104 	lsr.w	r1, r6, r4
    8390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    8394:	fa22 f204 	lsr.w	r2, r2, r4
    8398:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    839c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    83a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    83a4:	eba0 0001 	sub.w	r0, r0, r1
    83a8:	4770      	bx	lr
    83aa:	f014 0f03 	tst.w	r4, #3
    83ae:	d13c      	bne.n	842a <strcmp+0x182>
    83b0:	f010 0403 	ands.w	r4, r0, #3
    83b4:	d128      	bne.n	8408 <strcmp+0x160>
    83b6:	f850 2b08 	ldr.w	r2, [r0], #8
    83ba:	f851 3b08 	ldr.w	r3, [r1], #8
    83be:	fa82 f54c 	uadd8	r5, r2, ip
    83c2:	ea82 0503 	eor.w	r5, r2, r3
    83c6:	faa5 f58c 	sel	r5, r5, ip
    83ca:	b95d      	cbnz	r5, 83e4 <strcmp+0x13c>
    83cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    83d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    83d4:	fa82 f54c 	uadd8	r5, r2, ip
    83d8:	ea82 0503 	eor.w	r5, r2, r3
    83dc:	faa5 f58c 	sel	r5, r5, ip
    83e0:	2d00      	cmp	r5, #0
    83e2:	d0e8      	beq.n	83b6 <strcmp+0x10e>
    83e4:	ba2d      	rev	r5, r5
    83e6:	fab5 f485 	clz	r4, r5
    83ea:	f024 0407 	bic.w	r4, r4, #7
    83ee:	fa23 f104 	lsr.w	r1, r3, r4
    83f2:	fa22 f204 	lsr.w	r2, r2, r4
    83f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    83fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    83fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8402:	eba0 0001 	sub.w	r0, r0, r1
    8406:	4770      	bx	lr
    8408:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    840c:	f020 0003 	bic.w	r0, r0, #3
    8410:	f850 2b08 	ldr.w	r2, [r0], #8
    8414:	f021 0103 	bic.w	r1, r1, #3
    8418:	f851 3b08 	ldr.w	r3, [r1], #8
    841c:	fa0c f404 	lsl.w	r4, ip, r4
    8420:	ea62 0204 	orn	r2, r2, r4
    8424:	ea63 0304 	orn	r3, r3, r4
    8428:	e7c9      	b.n	83be <strcmp+0x116>
    842a:	f010 0403 	ands.w	r4, r0, #3
    842e:	d01a      	beq.n	8466 <strcmp+0x1be>
    8430:	eba1 0104 	sub.w	r1, r1, r4
    8434:	f020 0003 	bic.w	r0, r0, #3
    8438:	07e4      	lsls	r4, r4, #31
    843a:	f850 2b04 	ldr.w	r2, [r0], #4
    843e:	d006      	beq.n	844e <strcmp+0x1a6>
    8440:	d20f      	bcs.n	8462 <strcmp+0x1ba>
    8442:	788b      	ldrb	r3, [r1, #2]
    8444:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    8448:	1ae4      	subs	r4, r4, r3
    844a:	d106      	bne.n	845a <strcmp+0x1b2>
    844c:	b12b      	cbz	r3, 845a <strcmp+0x1b2>
    844e:	78cb      	ldrb	r3, [r1, #3]
    8450:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    8454:	1ae4      	subs	r4, r4, r3
    8456:	d100      	bne.n	845a <strcmp+0x1b2>
    8458:	b91b      	cbnz	r3, 8462 <strcmp+0x1ba>
    845a:	4620      	mov	r0, r4
    845c:	f85d 4b10 	ldr.w	r4, [sp], #16
    8460:	4770      	bx	lr
    8462:	f101 0104 	add.w	r1, r1, #4
    8466:	f850 2b04 	ldr.w	r2, [r0], #4
    846a:	07cc      	lsls	r4, r1, #31
    846c:	f021 0103 	bic.w	r1, r1, #3
    8470:	f851 3b04 	ldr.w	r3, [r1], #4
    8474:	d848      	bhi.n	8508 <strcmp+0x260>
    8476:	d224      	bcs.n	84c2 <strcmp+0x21a>
    8478:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    847c:	fa82 f54c 	uadd8	r5, r2, ip
    8480:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    8484:	faa5 f58c 	sel	r5, r5, ip
    8488:	d10a      	bne.n	84a0 <strcmp+0x1f8>
    848a:	b965      	cbnz	r5, 84a6 <strcmp+0x1fe>
    848c:	f851 3b04 	ldr.w	r3, [r1], #4
    8490:	ea84 0402 	eor.w	r4, r4, r2
    8494:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    8498:	d10e      	bne.n	84b8 <strcmp+0x210>
    849a:	f850 2b04 	ldr.w	r2, [r0], #4
    849e:	e7eb      	b.n	8478 <strcmp+0x1d0>
    84a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    84a4:	e055      	b.n	8552 <strcmp+0x2aa>
    84a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    84aa:	d14d      	bne.n	8548 <strcmp+0x2a0>
    84ac:	7808      	ldrb	r0, [r1, #0]
    84ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    84b2:	f1c0 0000 	rsb	r0, r0, #0
    84b6:	4770      	bx	lr
    84b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    84bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    84c0:	e047      	b.n	8552 <strcmp+0x2aa>
    84c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    84c6:	fa82 f54c 	uadd8	r5, r2, ip
    84ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    84ce:	faa5 f58c 	sel	r5, r5, ip
    84d2:	d10a      	bne.n	84ea <strcmp+0x242>
    84d4:	b965      	cbnz	r5, 84f0 <strcmp+0x248>
    84d6:	f851 3b04 	ldr.w	r3, [r1], #4
    84da:	ea84 0402 	eor.w	r4, r4, r2
    84de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    84e2:	d10c      	bne.n	84fe <strcmp+0x256>
    84e4:	f850 2b04 	ldr.w	r2, [r0], #4
    84e8:	e7eb      	b.n	84c2 <strcmp+0x21a>
    84ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
    84ee:	e030      	b.n	8552 <strcmp+0x2aa>
    84f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    84f4:	d128      	bne.n	8548 <strcmp+0x2a0>
    84f6:	880b      	ldrh	r3, [r1, #0]
    84f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    84fc:	e029      	b.n	8552 <strcmp+0x2aa>
    84fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    8502:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    8506:	e024      	b.n	8552 <strcmp+0x2aa>
    8508:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    850c:	fa82 f54c 	uadd8	r5, r2, ip
    8510:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    8514:	faa5 f58c 	sel	r5, r5, ip
    8518:	d10a      	bne.n	8530 <strcmp+0x288>
    851a:	b965      	cbnz	r5, 8536 <strcmp+0x28e>
    851c:	f851 3b04 	ldr.w	r3, [r1], #4
    8520:	ea84 0402 	eor.w	r4, r4, r2
    8524:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    8528:	d109      	bne.n	853e <strcmp+0x296>
    852a:	f850 2b04 	ldr.w	r2, [r0], #4
    852e:	e7eb      	b.n	8508 <strcmp+0x260>
    8530:	ea4f 6313 	mov.w	r3, r3, lsr #24
    8534:	e00d      	b.n	8552 <strcmp+0x2aa>
    8536:	f015 0fff 	tst.w	r5, #255	; 0xff
    853a:	d105      	bne.n	8548 <strcmp+0x2a0>
    853c:	680b      	ldr	r3, [r1, #0]
    853e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    8542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8546:	e004      	b.n	8552 <strcmp+0x2aa>
    8548:	f04f 0000 	mov.w	r0, #0
    854c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8550:	4770      	bx	lr
    8552:	ba12      	rev	r2, r2
    8554:	ba1b      	rev	r3, r3
    8556:	fa82 f44c 	uadd8	r4, r2, ip
    855a:	ea82 0403 	eor.w	r4, r2, r3
    855e:	faa4 f58c 	sel	r5, r4, ip
    8562:	fab5 f485 	clz	r4, r5
    8566:	fa02 f204 	lsl.w	r2, r2, r4
    856a:	fa03 f304 	lsl.w	r3, r3, r4
    856e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    8572:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8576:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    857a:	4770      	bx	lr

0000857c <strcpy>:
    857c:	ea80 0201 	eor.w	r2, r0, r1
    8580:	4684      	mov	ip, r0
    8582:	f012 0f03 	tst.w	r2, #3
    8586:	d14f      	bne.n	8628 <strcpy+0xac>
    8588:	f011 0f03 	tst.w	r1, #3
    858c:	d132      	bne.n	85f4 <strcpy+0x78>
    858e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8592:	f011 0f04 	tst.w	r1, #4
    8596:	f851 3b04 	ldr.w	r3, [r1], #4
    859a:	d00b      	beq.n	85b4 <strcpy+0x38>
    859c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    85a0:	439a      	bics	r2, r3
    85a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    85a6:	bf04      	itt	eq
    85a8:	f84c 3b04 	streq.w	r3, [ip], #4
    85ac:	f851 3b04 	ldreq.w	r3, [r1], #4
    85b0:	d116      	bne.n	85e0 <strcpy+0x64>
    85b2:	bf00      	nop
    85b4:	f851 4b04 	ldr.w	r4, [r1], #4
    85b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    85bc:	439a      	bics	r2, r3
    85be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    85c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    85c6:	d10b      	bne.n	85e0 <strcpy+0x64>
    85c8:	f84c 3b04 	str.w	r3, [ip], #4
    85cc:	43a2      	bics	r2, r4
    85ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    85d2:	bf04      	itt	eq
    85d4:	f851 3b04 	ldreq.w	r3, [r1], #4
    85d8:	f84c 4b04 	streq.w	r4, [ip], #4
    85dc:	d0ea      	beq.n	85b4 <strcpy+0x38>
    85de:	4623      	mov	r3, r4
    85e0:	f80c 3b01 	strb.w	r3, [ip], #1
    85e4:	f013 0fff 	tst.w	r3, #255	; 0xff
    85e8:	ea4f 2333 	mov.w	r3, r3, ror #8
    85ec:	d1f8      	bne.n	85e0 <strcpy+0x64>
    85ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    85f2:	4770      	bx	lr
    85f4:	f011 0f01 	tst.w	r1, #1
    85f8:	d006      	beq.n	8608 <strcpy+0x8c>
    85fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    85fe:	f80c 2b01 	strb.w	r2, [ip], #1
    8602:	2a00      	cmp	r2, #0
    8604:	bf08      	it	eq
    8606:	4770      	bxeq	lr
    8608:	f011 0f02 	tst.w	r1, #2
    860c:	d0bf      	beq.n	858e <strcpy+0x12>
    860e:	f831 2b02 	ldrh.w	r2, [r1], #2
    8612:	f012 0fff 	tst.w	r2, #255	; 0xff
    8616:	bf16      	itet	ne
    8618:	f82c 2b02 	strhne.w	r2, [ip], #2
    861c:	f88c 2000 	strbeq.w	r2, [ip]
    8620:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    8624:	d1b3      	bne.n	858e <strcpy+0x12>
    8626:	4770      	bx	lr
    8628:	f811 2b01 	ldrb.w	r2, [r1], #1
    862c:	f80c 2b01 	strb.w	r2, [ip], #1
    8630:	2a00      	cmp	r2, #0
    8632:	d1f9      	bne.n	8628 <strcpy+0xac>
    8634:	4770      	bx	lr
    8636:	bf00      	nop
    8638:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    863c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00008640 <strlen>:
    8640:	f890 f000 	pld	[r0]
    8644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    8648:	f020 0107 	bic.w	r1, r0, #7
    864c:	f06f 0c00 	mvn.w	ip, #0
    8650:	f010 0407 	ands.w	r4, r0, #7
    8654:	f891 f020 	pld	[r1, #32]
    8658:	f040 8049 	bne.w	86ee <strlen+0xae>
    865c:	f04f 0400 	mov.w	r4, #0
    8660:	f06f 0007 	mvn.w	r0, #7
    8664:	e9d1 2300 	ldrd	r2, r3, [r1]
    8668:	f891 f040 	pld	[r1, #64]	; 0x40
    866c:	f100 0008 	add.w	r0, r0, #8
    8670:	fa82 f24c 	uadd8	r2, r2, ip
    8674:	faa4 f28c 	sel	r2, r4, ip
    8678:	fa83 f34c 	uadd8	r3, r3, ip
    867c:	faa2 f38c 	sel	r3, r2, ip
    8680:	bb4b      	cbnz	r3, 86d6 <strlen+0x96>
    8682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8686:	fa82 f24c 	uadd8	r2, r2, ip
    868a:	f100 0008 	add.w	r0, r0, #8
    868e:	faa4 f28c 	sel	r2, r4, ip
    8692:	fa83 f34c 	uadd8	r3, r3, ip
    8696:	faa2 f38c 	sel	r3, r2, ip
    869a:	b9e3      	cbnz	r3, 86d6 <strlen+0x96>
    869c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    86a0:	fa82 f24c 	uadd8	r2, r2, ip
    86a4:	f100 0008 	add.w	r0, r0, #8
    86a8:	faa4 f28c 	sel	r2, r4, ip
    86ac:	fa83 f34c 	uadd8	r3, r3, ip
    86b0:	faa2 f38c 	sel	r3, r2, ip
    86b4:	b97b      	cbnz	r3, 86d6 <strlen+0x96>
    86b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    86ba:	f101 0120 	add.w	r1, r1, #32
    86be:	fa82 f24c 	uadd8	r2, r2, ip
    86c2:	f100 0008 	add.w	r0, r0, #8
    86c6:	faa4 f28c 	sel	r2, r4, ip
    86ca:	fa83 f34c 	uadd8	r3, r3, ip
    86ce:	faa2 f38c 	sel	r3, r2, ip
    86d2:	2b00      	cmp	r3, #0
    86d4:	d0c6      	beq.n	8664 <strlen+0x24>
    86d6:	2a00      	cmp	r2, #0
    86d8:	bf04      	itt	eq
    86da:	3004      	addeq	r0, #4
    86dc:	461a      	moveq	r2, r3
    86de:	ba12      	rev	r2, r2
    86e0:	fab2 f282 	clz	r2, r2
    86e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    86e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    86ec:	4770      	bx	lr
    86ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    86f2:	f004 0503 	and.w	r5, r4, #3
    86f6:	f1c4 0000 	rsb	r0, r4, #0
    86fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    86fe:	f014 0f04 	tst.w	r4, #4
    8702:	f891 f040 	pld	[r1, #64]	; 0x40
    8706:	fa0c f505 	lsl.w	r5, ip, r5
    870a:	ea62 0205 	orn	r2, r2, r5
    870e:	bf1c      	itt	ne
    8710:	ea63 0305 	ornne	r3, r3, r5
    8714:	4662      	movne	r2, ip
    8716:	f04f 0400 	mov.w	r4, #0
    871a:	e7a9      	b.n	8670 <strlen+0x30>

0000871c <strncpy>:
    871c:	ea40 0301 	orr.w	r3, r0, r1
    8720:	079b      	lsls	r3, r3, #30
    8722:	b470      	push	{r4, r5, r6}
    8724:	d12b      	bne.n	877e <strncpy+0x62>
    8726:	2a03      	cmp	r2, #3
    8728:	d929      	bls.n	877e <strncpy+0x62>
    872a:	460c      	mov	r4, r1
    872c:	4603      	mov	r3, r0
    872e:	4621      	mov	r1, r4
    8730:	f854 6b04 	ldr.w	r6, [r4], #4
    8734:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    8738:	ea25 0506 	bic.w	r5, r5, r6
    873c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    8740:	d106      	bne.n	8750 <strncpy+0x34>
    8742:	3a04      	subs	r2, #4
    8744:	2a03      	cmp	r2, #3
    8746:	f843 6b04 	str.w	r6, [r3], #4
    874a:	4621      	mov	r1, r4
    874c:	d8ef      	bhi.n	872e <strncpy+0x12>
    874e:	b1a2      	cbz	r2, 877a <strncpy+0x5e>
    8750:	780c      	ldrb	r4, [r1, #0]
    8752:	701c      	strb	r4, [r3, #0]
    8754:	3a01      	subs	r2, #1
    8756:	3301      	adds	r3, #1
    8758:	3101      	adds	r1, #1
    875a:	b13c      	cbz	r4, 876c <strncpy+0x50>
    875c:	b16a      	cbz	r2, 877a <strncpy+0x5e>
    875e:	f811 4b01 	ldrb.w	r4, [r1], #1
    8762:	f803 4b01 	strb.w	r4, [r3], #1
    8766:	3a01      	subs	r2, #1
    8768:	2c00      	cmp	r4, #0
    876a:	d1f7      	bne.n	875c <strncpy+0x40>
    876c:	b12a      	cbz	r2, 877a <strncpy+0x5e>
    876e:	441a      	add	r2, r3
    8770:	2100      	movs	r1, #0
    8772:	f803 1b01 	strb.w	r1, [r3], #1
    8776:	429a      	cmp	r2, r3
    8778:	d1fb      	bne.n	8772 <strncpy+0x56>
    877a:	bc70      	pop	{r4, r5, r6}
    877c:	4770      	bx	lr
    877e:	4603      	mov	r3, r0
    8780:	e7e5      	b.n	874e <strncpy+0x32>
    8782:	bf00      	nop

00008784 <_strtol_l.isra.0>:
    8784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8788:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    878c:	460f      	mov	r7, r1
    878e:	4680      	mov	r8, r0
    8790:	4616      	mov	r6, r2
    8792:	461d      	mov	r5, r3
    8794:	468b      	mov	fp, r1
    8796:	e000      	b.n	879a <_strtol_l.isra.0+0x16>
    8798:	46a3      	mov	fp, r4
    879a:	465c      	mov	r4, fp
    879c:	4648      	mov	r0, r9
    879e:	f814 ab01 	ldrb.w	sl, [r4], #1
    87a2:	f7fe ffd1 	bl	7748 <__locale_ctype_ptr_l>
    87a6:	4450      	add	r0, sl
    87a8:	7841      	ldrb	r1, [r0, #1]
    87aa:	f001 0108 	and.w	r1, r1, #8
    87ae:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    87b2:	2900      	cmp	r1, #0
    87b4:	d1f0      	bne.n	8798 <_strtol_l.isra.0+0x14>
    87b6:	4652      	mov	r2, sl
    87b8:	2a2d      	cmp	r2, #45	; 0x2d
    87ba:	d061      	beq.n	8880 <_strtol_l.isra.0+0xfc>
    87bc:	2a2b      	cmp	r2, #43	; 0x2b
    87be:	bf04      	itt	eq
    87c0:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    87c4:	f10b 0402 	addeq.w	r4, fp, #2
    87c8:	2d00      	cmp	r5, #0
    87ca:	d043      	beq.n	8854 <_strtol_l.isra.0+0xd0>
    87cc:	2d10      	cmp	r5, #16
    87ce:	d065      	beq.n	889c <_strtol_l.isra.0+0x118>
    87d0:	46a9      	mov	r9, r5
    87d2:	f1bc 0f00 	cmp.w	ip, #0
    87d6:	bf0c      	ite	eq
    87d8:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    87dc:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    87e0:	2100      	movs	r1, #0
    87e2:	fbba fef9 	udiv	lr, sl, r9
    87e6:	4608      	mov	r0, r1
    87e8:	fb09 aa1e 	mls	sl, r9, lr, sl
    87ec:	e005      	b.n	87fa <_strtol_l.isra.0+0x76>
    87ee:	d029      	beq.n	8844 <_strtol_l.isra.0+0xc0>
    87f0:	fb09 3000 	mla	r0, r9, r0, r3
    87f4:	2101      	movs	r1, #1
    87f6:	f814 2b01 	ldrb.w	r2, [r4], #1
    87fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    87fe:	2b09      	cmp	r3, #9
    8800:	d905      	bls.n	880e <_strtol_l.isra.0+0x8a>
    8802:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    8806:	2b19      	cmp	r3, #25
    8808:	d80a      	bhi.n	8820 <_strtol_l.isra.0+0x9c>
    880a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    880e:	429d      	cmp	r5, r3
    8810:	dd0e      	ble.n	8830 <_strtol_l.isra.0+0xac>
    8812:	1c4a      	adds	r2, r1, #1
    8814:	d0ef      	beq.n	87f6 <_strtol_l.isra.0+0x72>
    8816:	4586      	cmp	lr, r0
    8818:	d2e9      	bcs.n	87ee <_strtol_l.isra.0+0x6a>
    881a:	f04f 31ff 	mov.w	r1, #4294967295
    881e:	e7ea      	b.n	87f6 <_strtol_l.isra.0+0x72>
    8820:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    8824:	2b19      	cmp	r3, #25
    8826:	d803      	bhi.n	8830 <_strtol_l.isra.0+0xac>
    8828:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    882c:	429d      	cmp	r5, r3
    882e:	dcf0      	bgt.n	8812 <_strtol_l.isra.0+0x8e>
    8830:	1c4b      	adds	r3, r1, #1
    8832:	d015      	beq.n	8860 <_strtol_l.isra.0+0xdc>
    8834:	f1bc 0f00 	cmp.w	ip, #0
    8838:	d110      	bne.n	885c <_strtol_l.isra.0+0xd8>
    883a:	b14e      	cbz	r6, 8850 <_strtol_l.isra.0+0xcc>
    883c:	b9e1      	cbnz	r1, 8878 <_strtol_l.isra.0+0xf4>
    883e:	6037      	str	r7, [r6, #0]
    8840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8844:	459a      	cmp	sl, r3
    8846:	dad3      	bge.n	87f0 <_strtol_l.isra.0+0x6c>
    8848:	4670      	mov	r0, lr
    884a:	f04f 31ff 	mov.w	r1, #4294967295
    884e:	e7d2      	b.n	87f6 <_strtol_l.isra.0+0x72>
    8850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8854:	2a30      	cmp	r2, #48	; 0x30
    8856:	d01a      	beq.n	888e <_strtol_l.isra.0+0x10a>
    8858:	250a      	movs	r5, #10
    885a:	e7b9      	b.n	87d0 <_strtol_l.isra.0+0x4c>
    885c:	4240      	negs	r0, r0
    885e:	e7ec      	b.n	883a <_strtol_l.isra.0+0xb6>
    8860:	f1bc 0f00 	cmp.w	ip, #0
    8864:	f04f 0322 	mov.w	r3, #34	; 0x22
    8868:	bf0c      	ite	eq
    886a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    886e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    8872:	f8c8 3000 	str.w	r3, [r8]
    8876:	b1f6      	cbz	r6, 88b6 <_strtol_l.isra.0+0x132>
    8878:	1e67      	subs	r7, r4, #1
    887a:	6037      	str	r7, [r6, #0]
    887c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8880:	f10b 0402 	add.w	r4, fp, #2
    8884:	f89b 2001 	ldrb.w	r2, [fp, #1]
    8888:	f04f 0c01 	mov.w	ip, #1
    888c:	e79c      	b.n	87c8 <_strtol_l.isra.0+0x44>
    888e:	7823      	ldrb	r3, [r4, #0]
    8890:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8894:	2b58      	cmp	r3, #88	; 0x58
    8896:	d008      	beq.n	88aa <_strtol_l.isra.0+0x126>
    8898:	2508      	movs	r5, #8
    889a:	e799      	b.n	87d0 <_strtol_l.isra.0+0x4c>
    889c:	2a30      	cmp	r2, #48	; 0x30
    889e:	d197      	bne.n	87d0 <_strtol_l.isra.0+0x4c>
    88a0:	7823      	ldrb	r3, [r4, #0]
    88a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    88a6:	2b58      	cmp	r3, #88	; 0x58
    88a8:	d192      	bne.n	87d0 <_strtol_l.isra.0+0x4c>
    88aa:	f04f 0910 	mov.w	r9, #16
    88ae:	7862      	ldrb	r2, [r4, #1]
    88b0:	464d      	mov	r5, r9
    88b2:	3402      	adds	r4, #2
    88b4:	e78d      	b.n	87d2 <_strtol_l.isra.0+0x4e>
    88b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88ba:	bf00      	nop

000088bc <strtol>:
    88bc:	b530      	push	{r4, r5, lr}
    88be:	4c08      	ldr	r4, [pc, #32]	; (88e0 <strtol+0x24>)
    88c0:	4b08      	ldr	r3, [pc, #32]	; (88e4 <strtol+0x28>)
    88c2:	6825      	ldr	r5, [r4, #0]
    88c4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    88c6:	b083      	sub	sp, #12
    88c8:	2c00      	cmp	r4, #0
    88ca:	bf08      	it	eq
    88cc:	461c      	moveq	r4, r3
    88ce:	9400      	str	r4, [sp, #0]
    88d0:	4613      	mov	r3, r2
    88d2:	460a      	mov	r2, r1
    88d4:	4601      	mov	r1, r0
    88d6:	4628      	mov	r0, r5
    88d8:	f7ff ff54 	bl	8784 <_strtol_l.isra.0>
    88dc:	b003      	add	sp, #12
    88de:	bd30      	pop	{r4, r5, pc}
    88e0:	1fff8c20 	.word	0x1fff8c20
    88e4:	1fff8c24 	.word	0x1fff8c24

000088e8 <__ascii_wctomb>:
    88e8:	b121      	cbz	r1, 88f4 <__ascii_wctomb+0xc>
    88ea:	2aff      	cmp	r2, #255	; 0xff
    88ec:	d804      	bhi.n	88f8 <__ascii_wctomb+0x10>
    88ee:	700a      	strb	r2, [r1, #0]
    88f0:	2001      	movs	r0, #1
    88f2:	4770      	bx	lr
    88f4:	4608      	mov	r0, r1
    88f6:	4770      	bx	lr
    88f8:	238a      	movs	r3, #138	; 0x8a
    88fa:	6003      	str	r3, [r0, #0]
    88fc:	f04f 30ff 	mov.w	r0, #4294967295
    8900:	4770      	bx	lr
    8902:	bf00      	nop

00008904 <__register_exitproc>:
    8904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8908:	4c25      	ldr	r4, [pc, #148]	; (89a0 <__register_exitproc+0x9c>)
    890a:	6825      	ldr	r5, [r4, #0]
    890c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    8910:	4606      	mov	r6, r0
    8912:	4688      	mov	r8, r1
    8914:	4692      	mov	sl, r2
    8916:	4699      	mov	r9, r3
    8918:	b3c4      	cbz	r4, 898c <__register_exitproc+0x88>
    891a:	6860      	ldr	r0, [r4, #4]
    891c:	281f      	cmp	r0, #31
    891e:	dc17      	bgt.n	8950 <__register_exitproc+0x4c>
    8920:	1c43      	adds	r3, r0, #1
    8922:	b176      	cbz	r6, 8942 <__register_exitproc+0x3e>
    8924:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    8928:	2201      	movs	r2, #1
    892a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    892e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    8932:	4082      	lsls	r2, r0
    8934:	4311      	orrs	r1, r2
    8936:	2e02      	cmp	r6, #2
    8938:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    893c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    8940:	d01e      	beq.n	8980 <__register_exitproc+0x7c>
    8942:	3002      	adds	r0, #2
    8944:	6063      	str	r3, [r4, #4]
    8946:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    894a:	2000      	movs	r0, #0
    894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8950:	4b14      	ldr	r3, [pc, #80]	; (89a4 <__register_exitproc+0xa0>)
    8952:	b303      	cbz	r3, 8996 <__register_exitproc+0x92>
    8954:	f44f 70c8 	mov.w	r0, #400	; 0x190
    8958:	f7fe fefa 	bl	7750 <malloc>
    895c:	4604      	mov	r4, r0
    895e:	b1d0      	cbz	r0, 8996 <__register_exitproc+0x92>
    8960:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    8964:	2700      	movs	r7, #0
    8966:	e880 0088 	stmia.w	r0, {r3, r7}
    896a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    896e:	4638      	mov	r0, r7
    8970:	2301      	movs	r3, #1
    8972:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    8976:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    897a:	2e00      	cmp	r6, #0
    897c:	d0e1      	beq.n	8942 <__register_exitproc+0x3e>
    897e:	e7d1      	b.n	8924 <__register_exitproc+0x20>
    8980:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    8984:	430a      	orrs	r2, r1
    8986:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    898a:	e7da      	b.n	8942 <__register_exitproc+0x3e>
    898c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    8990:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    8994:	e7c1      	b.n	891a <__register_exitproc+0x16>
    8996:	f04f 30ff 	mov.w	r0, #4294967295
    899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    899e:	bf00      	nop
    89a0:	00009340 	.word	0x00009340
    89a4:	00007751 	.word	0x00007751

000089a8 <register_fini>:
    89a8:	4b02      	ldr	r3, [pc, #8]	; (89b4 <register_fini+0xc>)
    89aa:	b113      	cbz	r3, 89b2 <register_fini+0xa>
    89ac:	4802      	ldr	r0, [pc, #8]	; (89b8 <register_fini+0x10>)
    89ae:	f7f9 bb51 	b.w	2054 <atexit>
    89b2:	4770      	bx	lr
    89b4:	00000000 	.word	0x00000000
    89b8:	000089bd 	.word	0x000089bd

000089bc <__libc_fini_array>:
    89bc:	b538      	push	{r3, r4, r5, lr}
    89be:	4d07      	ldr	r5, [pc, #28]	; (89dc <__libc_fini_array+0x20>)
    89c0:	4c07      	ldr	r4, [pc, #28]	; (89e0 <__libc_fini_array+0x24>)
    89c2:	1b2c      	subs	r4, r5, r4
    89c4:	10a4      	asrs	r4, r4, #2
    89c6:	d005      	beq.n	89d4 <__libc_fini_array+0x18>
    89c8:	3c01      	subs	r4, #1
    89ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    89ce:	4798      	blx	r3
    89d0:	2c00      	cmp	r4, #0
    89d2:	d1f9      	bne.n	89c8 <__libc_fini_array+0xc>
    89d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    89d8:	f000 bd56 	b.w	9488 <__init_array_end>
	...

000089e4 <_malloc_trim_r>:
    89e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89e6:	4f23      	ldr	r7, [pc, #140]	; (8a74 <_malloc_trim_r+0x90>)
    89e8:	460c      	mov	r4, r1
    89ea:	4606      	mov	r6, r0
    89ec:	f7ff fa40 	bl	7e70 <__malloc_lock>
    89f0:	68bb      	ldr	r3, [r7, #8]
    89f2:	685d      	ldr	r5, [r3, #4]
    89f4:	f025 0503 	bic.w	r5, r5, #3
    89f8:	1b29      	subs	r1, r5, r4
    89fa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    89fe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    8a02:	f021 010f 	bic.w	r1, r1, #15
    8a06:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    8a0a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    8a0e:	db07      	blt.n	8a20 <_malloc_trim_r+0x3c>
    8a10:	2100      	movs	r1, #0
    8a12:	4630      	mov	r0, r6
    8a14:	f7ff fc28 	bl	8268 <_sbrk_r>
    8a18:	68bb      	ldr	r3, [r7, #8]
    8a1a:	442b      	add	r3, r5
    8a1c:	4298      	cmp	r0, r3
    8a1e:	d004      	beq.n	8a2a <_malloc_trim_r+0x46>
    8a20:	4630      	mov	r0, r6
    8a22:	f7ff fa27 	bl	7e74 <__malloc_unlock>
    8a26:	2000      	movs	r0, #0
    8a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a2a:	4261      	negs	r1, r4
    8a2c:	4630      	mov	r0, r6
    8a2e:	f7ff fc1b 	bl	8268 <_sbrk_r>
    8a32:	3001      	adds	r0, #1
    8a34:	d00d      	beq.n	8a52 <_malloc_trim_r+0x6e>
    8a36:	4b10      	ldr	r3, [pc, #64]	; (8a78 <_malloc_trim_r+0x94>)
    8a38:	68ba      	ldr	r2, [r7, #8]
    8a3a:	6819      	ldr	r1, [r3, #0]
    8a3c:	1b2d      	subs	r5, r5, r4
    8a3e:	f045 0501 	orr.w	r5, r5, #1
    8a42:	4630      	mov	r0, r6
    8a44:	1b09      	subs	r1, r1, r4
    8a46:	6055      	str	r5, [r2, #4]
    8a48:	6019      	str	r1, [r3, #0]
    8a4a:	f7ff fa13 	bl	7e74 <__malloc_unlock>
    8a4e:	2001      	movs	r0, #1
    8a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a52:	2100      	movs	r1, #0
    8a54:	4630      	mov	r0, r6
    8a56:	f7ff fc07 	bl	8268 <_sbrk_r>
    8a5a:	68ba      	ldr	r2, [r7, #8]
    8a5c:	1a83      	subs	r3, r0, r2
    8a5e:	2b0f      	cmp	r3, #15
    8a60:	ddde      	ble.n	8a20 <_malloc_trim_r+0x3c>
    8a62:	4c06      	ldr	r4, [pc, #24]	; (8a7c <_malloc_trim_r+0x98>)
    8a64:	4904      	ldr	r1, [pc, #16]	; (8a78 <_malloc_trim_r+0x94>)
    8a66:	6824      	ldr	r4, [r4, #0]
    8a68:	f043 0301 	orr.w	r3, r3, #1
    8a6c:	1b00      	subs	r0, r0, r4
    8a6e:	6053      	str	r3, [r2, #4]
    8a70:	6008      	str	r0, [r1, #0]
    8a72:	e7d5      	b.n	8a20 <_malloc_trim_r+0x3c>
    8a74:	1fff8d90 	.word	0x1fff8d90
    8a78:	1fff9df8 	.word	0x1fff9df8
    8a7c:	1fff919c 	.word	0x1fff919c

00008a80 <_free_r>:
    8a80:	2900      	cmp	r1, #0
    8a82:	d045      	beq.n	8b10 <_free_r+0x90>
    8a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a88:	460d      	mov	r5, r1
    8a8a:	4680      	mov	r8, r0
    8a8c:	f7ff f9f0 	bl	7e70 <__malloc_lock>
    8a90:	f855 7c04 	ldr.w	r7, [r5, #-4]
    8a94:	496a      	ldr	r1, [pc, #424]	; (8c40 <_free_r+0x1c0>)
    8a96:	f027 0301 	bic.w	r3, r7, #1
    8a9a:	f1a5 0408 	sub.w	r4, r5, #8
    8a9e:	18e2      	adds	r2, r4, r3
    8aa0:	688e      	ldr	r6, [r1, #8]
    8aa2:	6850      	ldr	r0, [r2, #4]
    8aa4:	42b2      	cmp	r2, r6
    8aa6:	f020 0003 	bic.w	r0, r0, #3
    8aaa:	d062      	beq.n	8b72 <_free_r+0xf2>
    8aac:	07fe      	lsls	r6, r7, #31
    8aae:	6050      	str	r0, [r2, #4]
    8ab0:	d40b      	bmi.n	8aca <_free_r+0x4a>
    8ab2:	f855 7c08 	ldr.w	r7, [r5, #-8]
    8ab6:	1be4      	subs	r4, r4, r7
    8ab8:	f101 0e08 	add.w	lr, r1, #8
    8abc:	68a5      	ldr	r5, [r4, #8]
    8abe:	4575      	cmp	r5, lr
    8ac0:	443b      	add	r3, r7
    8ac2:	d06f      	beq.n	8ba4 <_free_r+0x124>
    8ac4:	68e7      	ldr	r7, [r4, #12]
    8ac6:	60ef      	str	r7, [r5, #12]
    8ac8:	60bd      	str	r5, [r7, #8]
    8aca:	1815      	adds	r5, r2, r0
    8acc:	686d      	ldr	r5, [r5, #4]
    8ace:	07ed      	lsls	r5, r5, #31
    8ad0:	d542      	bpl.n	8b58 <_free_r+0xd8>
    8ad2:	f043 0201 	orr.w	r2, r3, #1
    8ad6:	6062      	str	r2, [r4, #4]
    8ad8:	50e3      	str	r3, [r4, r3]
    8ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8ade:	d218      	bcs.n	8b12 <_free_r+0x92>
    8ae0:	08db      	lsrs	r3, r3, #3
    8ae2:	1c5a      	adds	r2, r3, #1
    8ae4:	684d      	ldr	r5, [r1, #4]
    8ae6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    8aea:	60a7      	str	r7, [r4, #8]
    8aec:	2001      	movs	r0, #1
    8aee:	109b      	asrs	r3, r3, #2
    8af0:	fa00 f303 	lsl.w	r3, r0, r3
    8af4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    8af8:	431d      	orrs	r5, r3
    8afa:	3808      	subs	r0, #8
    8afc:	60e0      	str	r0, [r4, #12]
    8afe:	604d      	str	r5, [r1, #4]
    8b00:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    8b04:	60fc      	str	r4, [r7, #12]
    8b06:	4640      	mov	r0, r8
    8b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8b0c:	f7ff b9b2 	b.w	7e74 <__malloc_unlock>
    8b10:	4770      	bx	lr
    8b12:	0a5a      	lsrs	r2, r3, #9
    8b14:	2a04      	cmp	r2, #4
    8b16:	d853      	bhi.n	8bc0 <_free_r+0x140>
    8b18:	099a      	lsrs	r2, r3, #6
    8b1a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    8b1e:	007f      	lsls	r7, r7, #1
    8b20:	f102 0538 	add.w	r5, r2, #56	; 0x38
    8b24:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    8b28:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    8b2c:	4944      	ldr	r1, [pc, #272]	; (8c40 <_free_r+0x1c0>)
    8b2e:	3808      	subs	r0, #8
    8b30:	4290      	cmp	r0, r2
    8b32:	d04d      	beq.n	8bd0 <_free_r+0x150>
    8b34:	6851      	ldr	r1, [r2, #4]
    8b36:	f021 0103 	bic.w	r1, r1, #3
    8b3a:	428b      	cmp	r3, r1
    8b3c:	d202      	bcs.n	8b44 <_free_r+0xc4>
    8b3e:	6892      	ldr	r2, [r2, #8]
    8b40:	4290      	cmp	r0, r2
    8b42:	d1f7      	bne.n	8b34 <_free_r+0xb4>
    8b44:	68d0      	ldr	r0, [r2, #12]
    8b46:	60e0      	str	r0, [r4, #12]
    8b48:	60a2      	str	r2, [r4, #8]
    8b4a:	6084      	str	r4, [r0, #8]
    8b4c:	60d4      	str	r4, [r2, #12]
    8b4e:	4640      	mov	r0, r8
    8b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8b54:	f7ff b98e 	b.w	7e74 <__malloc_unlock>
    8b58:	6895      	ldr	r5, [r2, #8]
    8b5a:	4f3a      	ldr	r7, [pc, #232]	; (8c44 <_free_r+0x1c4>)
    8b5c:	42bd      	cmp	r5, r7
    8b5e:	4403      	add	r3, r0
    8b60:	d03f      	beq.n	8be2 <_free_r+0x162>
    8b62:	68d0      	ldr	r0, [r2, #12]
    8b64:	60e8      	str	r0, [r5, #12]
    8b66:	f043 0201 	orr.w	r2, r3, #1
    8b6a:	6085      	str	r5, [r0, #8]
    8b6c:	6062      	str	r2, [r4, #4]
    8b6e:	50e3      	str	r3, [r4, r3]
    8b70:	e7b3      	b.n	8ada <_free_r+0x5a>
    8b72:	07ff      	lsls	r7, r7, #31
    8b74:	4403      	add	r3, r0
    8b76:	d407      	bmi.n	8b88 <_free_r+0x108>
    8b78:	f855 2c08 	ldr.w	r2, [r5, #-8]
    8b7c:	1aa4      	subs	r4, r4, r2
    8b7e:	4413      	add	r3, r2
    8b80:	68a0      	ldr	r0, [r4, #8]
    8b82:	68e2      	ldr	r2, [r4, #12]
    8b84:	60c2      	str	r2, [r0, #12]
    8b86:	6090      	str	r0, [r2, #8]
    8b88:	4a2f      	ldr	r2, [pc, #188]	; (8c48 <_free_r+0x1c8>)
    8b8a:	6812      	ldr	r2, [r2, #0]
    8b8c:	f043 0001 	orr.w	r0, r3, #1
    8b90:	4293      	cmp	r3, r2
    8b92:	6060      	str	r0, [r4, #4]
    8b94:	608c      	str	r4, [r1, #8]
    8b96:	d3b6      	bcc.n	8b06 <_free_r+0x86>
    8b98:	4b2c      	ldr	r3, [pc, #176]	; (8c4c <_free_r+0x1cc>)
    8b9a:	4640      	mov	r0, r8
    8b9c:	6819      	ldr	r1, [r3, #0]
    8b9e:	f7ff ff21 	bl	89e4 <_malloc_trim_r>
    8ba2:	e7b0      	b.n	8b06 <_free_r+0x86>
    8ba4:	1811      	adds	r1, r2, r0
    8ba6:	6849      	ldr	r1, [r1, #4]
    8ba8:	07c9      	lsls	r1, r1, #31
    8baa:	d444      	bmi.n	8c36 <_free_r+0x1b6>
    8bac:	6891      	ldr	r1, [r2, #8]
    8bae:	68d2      	ldr	r2, [r2, #12]
    8bb0:	60ca      	str	r2, [r1, #12]
    8bb2:	4403      	add	r3, r0
    8bb4:	f043 0001 	orr.w	r0, r3, #1
    8bb8:	6091      	str	r1, [r2, #8]
    8bba:	6060      	str	r0, [r4, #4]
    8bbc:	50e3      	str	r3, [r4, r3]
    8bbe:	e7a2      	b.n	8b06 <_free_r+0x86>
    8bc0:	2a14      	cmp	r2, #20
    8bc2:	d817      	bhi.n	8bf4 <_free_r+0x174>
    8bc4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    8bc8:	007f      	lsls	r7, r7, #1
    8bca:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    8bce:	e7a9      	b.n	8b24 <_free_r+0xa4>
    8bd0:	10aa      	asrs	r2, r5, #2
    8bd2:	684b      	ldr	r3, [r1, #4]
    8bd4:	2501      	movs	r5, #1
    8bd6:	fa05 f202 	lsl.w	r2, r5, r2
    8bda:	4313      	orrs	r3, r2
    8bdc:	604b      	str	r3, [r1, #4]
    8bde:	4602      	mov	r2, r0
    8be0:	e7b1      	b.n	8b46 <_free_r+0xc6>
    8be2:	f043 0201 	orr.w	r2, r3, #1
    8be6:	614c      	str	r4, [r1, #20]
    8be8:	610c      	str	r4, [r1, #16]
    8bea:	60e5      	str	r5, [r4, #12]
    8bec:	60a5      	str	r5, [r4, #8]
    8bee:	6062      	str	r2, [r4, #4]
    8bf0:	50e3      	str	r3, [r4, r3]
    8bf2:	e788      	b.n	8b06 <_free_r+0x86>
    8bf4:	2a54      	cmp	r2, #84	; 0x54
    8bf6:	d806      	bhi.n	8c06 <_free_r+0x186>
    8bf8:	0b1a      	lsrs	r2, r3, #12
    8bfa:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    8bfe:	007f      	lsls	r7, r7, #1
    8c00:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    8c04:	e78e      	b.n	8b24 <_free_r+0xa4>
    8c06:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    8c0a:	d806      	bhi.n	8c1a <_free_r+0x19a>
    8c0c:	0bda      	lsrs	r2, r3, #15
    8c0e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    8c12:	007f      	lsls	r7, r7, #1
    8c14:	f102 0577 	add.w	r5, r2, #119	; 0x77
    8c18:	e784      	b.n	8b24 <_free_r+0xa4>
    8c1a:	f240 5054 	movw	r0, #1364	; 0x554
    8c1e:	4282      	cmp	r2, r0
    8c20:	d806      	bhi.n	8c30 <_free_r+0x1b0>
    8c22:	0c9a      	lsrs	r2, r3, #18
    8c24:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    8c28:	007f      	lsls	r7, r7, #1
    8c2a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    8c2e:	e779      	b.n	8b24 <_free_r+0xa4>
    8c30:	27fe      	movs	r7, #254	; 0xfe
    8c32:	257e      	movs	r5, #126	; 0x7e
    8c34:	e776      	b.n	8b24 <_free_r+0xa4>
    8c36:	f043 0201 	orr.w	r2, r3, #1
    8c3a:	6062      	str	r2, [r4, #4]
    8c3c:	50e3      	str	r3, [r4, r3]
    8c3e:	e762      	b.n	8b06 <_free_r+0x86>
    8c40:	1fff8d90 	.word	0x1fff8d90
    8c44:	1fff8d98 	.word	0x1fff8d98
    8c48:	1fff9198 	.word	0x1fff9198
    8c4c:	1fff9df4 	.word	0x1fff9df4

00008c50 <vtable for COctoWS2811Controller<(EOrder)66, (unsigned char)0>>:
	...
    8c58:	00000969 00000a35 00000471 00000861     i...5...q...a...
    8c68:	00000475 0000046d 00000505 0000203a     u...m.......: ..
    8c78:	30303030 00000000 67676f54 676e696c     0000....Toggling
    8c88:	65754820 00000000 74746553 20676e69      Hue....Setting 
    8c98:	74746170 206e7265 626d756e 00007265     pattern number..
    8ca8:	74746553 20676e69 20706f74 69736f70     Setting top posi
    8cb8:	6e6f6974 00000000 74746553 20676e69     tion....Setting 
    8cc8:	74746f62 70206d6f 7469736f 006e6f69     bottom position.
    8cd8:	74746553 20676e69 65666665 6e207463     Setting effect n
    8ce8:	65626d75 00000072 74746553 20676e69     umber...Setting 
    8cf8:	65646f6d 6d756e20 00726562 61736944     mode number.Disa
    8d08:	6e696c62 75412067 4d206f74 2e65646f     bling Auto Mode.
    8d18:	00000000 74746553 20676e69 6f747541     ....Setting Auto
    8d28:	74615020 6e726574 646f4d20 00002e65      Pattern Mode...
    8d38:	74746553 20676e69 6f747541 646f4d20     Setting Auto Mod
    8d48:	6f4d2065 002e6564 74746553 20676e69     e Mode..Setting 
    8d58:	6f747541 74615020 6e726574 646f4d20     Auto Pattern Mod
    8d68:	6f4d2065 002e6564 74746553 20676e69     e Mode..Setting 
    8d78:	6f747541 656c5320 4d207065 2e65646f     Auto Sleep Mode.
    8d88:	00000000 656d6f53 6e696874 65772067     ....Something we
    8d98:	7720746e 676e6f72 61657220 676e6964     nt wrong reading
    8da8:	72657320 206c6169 6d6d6f63 00646e61      serial command.
    8db8:	656d6f53 6e696874 65772067 7720746e     Something went w
    8dc8:	676e6f72 61657220 676e6964 72657320     rong reading ser
    8dd8:	2c6c6169 6d6f6320 646e616d 73617720     ial, command was
    8de8:	616c6220 002e6b6e 74746553 20676e69      blank..Setting 
    8df8:	6c616e41 4520676f 63656666 00000074     Analog Effect...
    8e08:	74746553 20676e69 6c616e41 5020676f     Setting Analog P
    8e18:	65747461 00006e72 69726553 70206c61     attern..Serial p
    8e28:	2074726f 6e65706f 002e6465 65636552     ort opened..Rece
    8e38:	64657669 706e6920 73207475 6e697274     ived input strin
    8e48:	00000067 50444d56 7c315f56 4d565f31     g...VMDPV_1|1_VM
    8e58:	0a565044 00000000 0000007c 454e4f4e     DPV.....|...NONE
    8e68:	00000000 004c4c41 45454857 0000534c     ....ALL.WHEELS..
    8e78:	45454857 0000004c 4b4f5053 00005345     WHEEL...SPOKES..
    8e88:	4b4f5053 ffff0045                       SPOKE...

00008e90 <RainbowColors_p>:
    8e90:	00ff0000 00d52a00 00ab5500 00ab7f00     .....*...U......
    8ea0:	00abab00 0056d500 0000ff00 0000d52a     ......V.....*...
    8eb0:	0000ab55 000056aa 000000ff 002a00d5     U....V........*.
    8ec0:	005500ab 007f0081 00ab0055 00d5002b     ..U.....U...+...

00008ed0 <PartyColors_p>:
    8ed0:	005500ab 0084007c 00b5004b 00e5001b     ..U.|...K.......
    8ee0:	00e81700 00b84700 00ab7700 00abab00     .....G...w......
    8ef0:	00ab5500 00dd2200 00f2000e 00c2003e     .U..."......>...
    8f00:	008f0071 005f00a1 002f00d0 000007f9     q....._.../.....

00008f10 <CloudColors_p>:
    8f10:	000000ff 0000008b 0000008b 0000008b     ................
    8f20:	0000008b 0000008b 0000008b 0000008b     ................
    8f30:	000000ff 0000008b 0087ceeb 0087ceeb     ................
    8f40:	00add8e6 00ffffff 00add8e6 0087ceeb     ................

00008f50 <HeatColors_p>:
    8f50:	00000000 00330000 00660000 00990000     ......3...f.....
    8f60:	00cc0000 00ff0000 00ff3300 00ff6600     .........3...f..
    8f70:	00ff9900 00ffcc00 00ffff00 00ffff33     ............3...
    8f80:	00ffff66 00ffff99 00ffffcc 00ffffff     f...............

00008f90 <ForestColors_p>:
    8f90:	00006400 00006400 00556b2f 00006400     .d...d../kU..d..
    8fa0:	00008000 00228b22 006b8e23 00008000     ....".".#.k.....
    8fb0:	002e8b57 0066cdaa 0032cd32 009acd32     W.....f.2.2.2...
    8fc0:	0090ee90 007cfc00 0066cdaa 00228b22     ......|...f.".".
    8fd0:	00000004 00002b2d 00000000 00000003     ....-+..........
    8fe0:	00002f01 00000000 0000000a 000022ad     ./..........."..
    8ff0:	00000000 00000003 00002495 00000000     .........$......
    9000:	00000003 000021e1 00000000 00000004     .....!..........
    9010:	00002921 00000000 00000004 00003545     !)..........E5..
    9020:	00000000 00000005 00003819 00000000     .........8......
    9030:	00000004 000030a5 00000000 00000002     .....0..........
    9040:	000025e9 00000000 000021dd 00000000     .%.......!......
    9050:	00002849 00000000                       I(......

00009058 <sin16_C(unsigned short)::base>:
    9058:	18f90000 471c30fb 6a6d5a82 7d897641     .....0.G.ZmjAv.}

00009068 <b_m16_interleave>:
    9068:	29313100 0a751b5a                       .11)Z.u.

00009070 <sin16_C(unsigned short)::slope>:
    9070:	262c3031 040e171f                       10,&....

00009078 <CSWTCH.145>:
    9078:	00000005 00000007 00000009 4e525450     ............PTRN
    9088:	00000000 54434645 00000000 45444f4d     ....EFCT....MODE
    9098:	00000000 54495242 00000000 31455548     ....BRIT....HUE1
    90a8:	00000000 32455548 00000000 33455548     ....HUE2....HUE3
    90b8:	00000000 34455548 00000000 35455548     ....HUE4....HUE5
    90c8:	00000000 5252494d 00000000 50504f54     ....MIRR....TOPP
    90d8:	00000000 50544f42 00000000 48544f42     ....BOTP....BOTH
    90e8:	00000000 54504e41 00000000 46454e41     ....ANPT....ANEF
    90f8:	00000000 53554150 00000000 43415541     ....PAUS....AUAC
    9108:	00000000 4f4e5541 00000000 4c535541     ....AUNO....AUSL
    9118:	00000000 54505541 00000000 4f4d5541     ....AUPT....AUMO
    9128:	00000000 4d505541 00000000 4b414c42     ....AUPM....BLAK
    9138:	ffffff00 50444d56 00005f45 003a323a     ....VMDPE_..:2:.
    9148:	0000003a 444d565f 00004550 50444d56     :..._VMDPE..VMDP
    9158:	00005f43 444d565f 00004350 6f727245     C_.._VMDPC..Erro
    9168:	41203a72 6d657474 74207470 6573206f     r: Attempt to se
    9178:	20612074 64616572 6c6e6f2d 61762079     t a read-only va
    9188:	62616972 6f20656c 61642072 74206174     riable or data t
    9198:	20657079 20746f6e 70707573 6574726f     ype not supporte
    91a8:	000a0d64                                d...

000091ac <digital_pin_to_info_PGM>:
    91ac:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    91bc:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    91cc:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    91dc:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    91ec:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    91fc:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    920c:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    921c:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    922c:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    923c:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    924c:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    925c:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    926c:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
    927c:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
    928c:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
    929c:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
    92ac:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@
    92bc:	ffff0a0d                                ....

000092c0 <vtable for usb_serial_class>:
	...
    92c8:	000064c1 000064b9 000064b5 000064b1     .d...d...d...d..
    92d8:	000064ad 000064a9 000064a5 000064a1     .d...d...d...d..

000092e8 <usb_endpoint_config_table>:
    92e8:	15191500                                ....

000092ec <usb_descriptor_list>:
    92ec:	00000100 1fff8750 00000012 00000200     ....P...........
    92fc:	1fff877c 00000043 00000300 1fff87d8     |...C...........
    930c:	00000000 04090301 1fff8764 00000000     ........d.......
    931c:	04090302 1fff87c0 00000000 04090303     ................
    932c:	1fff87dc 00000000 00000000 00000000     ................
    933c:	00000000                                ....

00009340 <_global_impure_ptr>:
    9340:	1fff87f8 00000043 49534f50 00000058     ....C...POSIX...
    9350:	0000002e                                ....

00009354 <_ctype_>:
    9354:	20202000 20202020 28282020 20282828     .         ((((( 
    9364:	20202020 20202020 20202020 20202020                     
    9374:	10108820 10101010 10101010 10101010      ...............
    9384:	04040410 04040404 10040404 10101010     ................
    9394:	41411010 41414141 01010101 01010101     ..AAAAAA........
    93a4:	01010101 01010101 01010101 10101010     ................
    93b4:	42421010 42424242 02020202 02020202     ..BBBBBB........
    93c4:	02020202 02020202 02020202 10101010     ................
    93d4:	00000020 00000000 00000000 00000000      ...............
	...
    9454:	ffffff00                                ....

00009458 <_init>:
    9458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    945a:	bf00      	nop
    945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    945e:	bc08      	pop	{r3}
    9460:	469e      	mov	lr, r3
    9462:	4770      	bx	lr

00009464 <__init_array_start>:
    9464:	000089a9 	.word	0x000089a9

00009468 <__frame_dummy_init_array_entry>:
    9468:	00000435 00001849 00001d55 00002059     5...I...U...Y ..
    9478:	000042b5 000042c1 000044f5 00004821     .B...B...D..!H..

Disassembly of section .fini:

00009488 <_fini>:
    9488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    948a:	bf00      	nop
